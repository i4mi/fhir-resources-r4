/**
 * Created by Institute for Medical Informatics (I4MI) - Department of Engineering and Information Technology - Bern University of Applied Science (BFH)
 * https://www.i4mi.ti.bfh.ch

 * File generated on 2023-03-28T13:15:10.633Z
 * Based on https://hl7.org/fhir/R5/
 */
/**
 * Primitive Type base64Binary
 * A stream of bytes, base64 encoded
 * A stream of bytes
 */
export declare type base64Binary = string;
/**
 * Primitive Type canonical
 * see [Canonical References](references.html#canonical)
 * A URI that is a reference to a canonical URL on a FHIR resource
 */
export declare type canonical = string;
/**
 * Primitive Type code
 * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
 */
export declare type code = string;
/**
 * Primitive Type date
 * A date or partial date (e.g. just year or year + month). There is no UTC offset. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
 */
export declare type date = string;
/**
 * Primitive Type dateTime
 * UTC offset is allowed for dates and partial dates
 * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a UTC offset SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
 */
export declare type dateTime = string;
/**
 * Primitive Type decimal
 * Do not use an IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
 * A rational number with implicit precision
 */
export declare type decimal = number;
/**
 * Primitive Type id
 * RFC 4122
 * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
 */
export declare type id = string;
/**
 * Primitive Type instant
 * Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. UTC offset is always required
 * An instant in time - known at least to the second
 */
export declare type instant = string;
/**
 * Primitive Type integer
 * 32 bit number; for values larger than this, use decimal
 * A whole number
 */
export declare type integer = number;
/**
 * Primitive Type integer64
 * Typically this is used for record counters (e.g. database keys)
 * A very large whole number
 */
export declare type integer64 = number;
/**
 * Primitive Type markdown
 * Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
 * A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
 */
export declare type markdown = string;
/**
 * Primitive Type oid
 * RFC 3001. See also ISO/IEC 8824:1990 €
 * An OID represented as a URI
 */
export declare type oid = string;
/**
 * Primitive Type positiveInt
 * An integer with a value that is positive (e.g. >0)
 */
export declare type positiveInt = number;
/**
 * Primitive Type time
 * A time during the day, with no date specified
 */
export declare type time = string;
/**
 * Primitive Type unsignedInt
 * An integer with a value that is not negative (e.g. >= 0)
 */
export declare type unsignedInt = number;
/**
 * Primitive Type uri
 * see http://en.wikipedia.org/wiki/Uniform_resource_identifier
 * String of characters used to identify a name or a resource
 */
export declare type uri = string;
/**
 * Primitive Type url
 * A URI that is a literal reference
 */
export declare type url = string;
/**
 * Primitive Type uuid
 * See The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
 * A UUID, represented as a URI
 */
export declare type uuid = string;
/**
 * Primitive Type xhtml
 * XHTML
 */
export declare type xhtml = string;
/**
 * home | work | temp | old | billing - purpose of this address
 * The purpose of this address.
 * Applications can assume that an address is current unless it explicitly says that it is temporary or old.
 */
export declare enum AddressUse {
    HOME = "home",
    WORK = "work",
    TEMP = "temp",
    OLD = "old",
    BILLING = "billing"
}
/**
 * postal | physical | both
 * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
 * The definition of Address states that "address is intended to describe postal addresses, not physical locations". However, many applications track whether an address has a dual purpose of being a location that can be visited as well as being a valid delivery destination, and Postal addresses are often used as proxies for physical locations (also see the [Location](location.html#) resource).
 */
export declare enum AddressType {
    POSTAL = "postal",
    PHYSICAL = "physical",
    BOTH = "both"
}
/**
 * mon | tue | wed | thu | fri | sat | sun
 * mon | tue | wed | thu | fri | sat | sun.
 */
export declare enum AvailabilityDaysOfWeek {
    MON = "mon",
    TUE = "tue",
    WED = "wed",
    THU = "thu",
    FRI = "fri",
    SAT = "sat",
    SUN = "sun"
}
/**
 * phone | fax | email | pager | url | sms | other
 * Telecommunications form for contact point - what communications system is required to make use of the contact.
 */
export declare enum ContactPointSystem {
    PHONE = "phone",
    FAX = "fax",
    EMAIL = "email",
    PAGER = "pager",
    URL = "url",
    SMS = "sms",
    OTHER = "other"
}
/**
 * home | work | temp | old | mobile - purpose of this contact point
 * Identifies the purpose for the contact point.
 * Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
 */
export declare enum ContactPointUse {
    HOME = "home",
    WORK = "work",
    TEMP = "temp",
    OLD = "old",
    MOBILE = "mobile"
}
/**
 * author | editor | reviewer | endorser
 * The type of contributor.
 */
export declare enum ContributorType {
    AUTHOR = "author",
    EDITOR = "editor",
    REVIEWER = "reviewer",
    ENDORSER = "endorser"
}
/**
 * eq | gt | lt | ge | le | sa | eb
 * The comparator to be used to determine whether the value is matching.
 */
export declare enum DataRequirementValueFilterComparator {
    EQ = "eq",
    GT = "gt",
    LT = "lt",
    GE = "ge",
    LE = "le",
    SA = "sa",
    EB = "eb"
}
/**
 * ascending | descending
 * The direction of the sort, ascending or descending.
 */
export declare enum DataRequirementSortDirection {
    ASCENDING = "ascending",
    DESCENDING = "descending"
}
/**
 * xmlAttr | xmlText | typeAttr | cdaText | xhtml
 * Codes that define how this element is represented in instances, when the deviation varies from the normal case. No extensions are allowed on elements with a representation of 'xmlAttr', no matter what FHIR serialization format is used.
 * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).
 */
export declare enum ElementDefinitionPropertyRepresentation {
    XMLATTR = "xmlAttr",
    XMLTEXT = "xmlText",
    TYPEATTR = "typeAttr",
    CDATEXT = "cdaText",
    XHTML = "xhtml"
}
/**
 * value | exists | type | profile | position
 * How the element value is interpreted when discrimination is evaluated.
 * 'pattern' is deprecated - it works exactly the same as 'value'.
 */
export declare enum ElementDefinitionDiscriminatorType {
    VALUE = "value",
    EXISTS = "exists",
    TYPE = "type",
    PROFILE = "profile",
    POSITION = "position"
}
/**
 * closed | open | openAtEnd
 * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
 * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
 */
export declare enum ElementDefinitionSlicingRules {
    CLOSED = "closed",
    OPEN = "open",
    OPENATEND = "openAtEnd"
}
/**
 * contained | referenced | bundled - how aggregated
 * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
 * See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
 */
export declare enum ElementDefinitionAggregationMode {
    CONTAINED = "contained",
    REFERENCED = "referenced",
    BUNDLED = "bundled"
}
/**
 * either | independent | specific
 * Whether this reference needs to be version specific or version independent, or whether either can be used.
 * The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
 */
export declare enum ElementDefinitionReferenceVersionRules {
    EITHER = "either",
    INDEPENDENT = "independent",
    SPECIFIC = "specific"
}
/**
 * error | warning
 * Identifies the impact constraint violation has on the conformance of the instance.
 * This allows constraints to be asserted as "shall" (error) and "should" (warning).
 */
export declare enum ElementDefinitionConstraintSeverity {
    ERROR = "error",
    WARNING = "warning"
}
/**
 * required | extensible | preferred | example
 * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
 * For further discussion, see [Using Terminologies](terminologies.html).
 */
export declare enum ElementDefinitionBindingStrength {
    REQUIRED = "required",
    EXTENSIBLE = "extensible",
    PREFERRED = "preferred",
    EXAMPLE = "example"
}
/**
 * maximum | minimum | required | extensible | candidate | current | preferred | ui | starter | component
 * The use of this additional binding.
 * Conformance bindings are in addition to the base binding, not instead of it.
 */
export declare enum ElementDefinitionAdditionalBindingPurpose {
    MAXIMUM = "maximum",
    MINIMUM = "minimum",
    REQUIRED = "required",
    EXTENSIBLE = "extensible",
    CANDIDATE = "candidate",
    CURRENT = "current",
    PREFERRED = "preferred",
    UI = "ui",
    STARTER = "starter",
    COMPONENT = "component"
}
/**
 * text/cql | text/fhirpath | application/x-fhir-query | etc.
 * The media type of the language for the expression.
 */
export declare enum ExpressionLanguage {
    TEXT_CQL = "text/cql",
    TEXT_FHIRPATH = "text/fhirpath",
    APPLICATION_X_FHIR_QUERY = "application/x-fhir-query",
    ETC_ = "etc."
}
/**
 * usual | official | temp | nickname | anonymous | old | maiden
 * Identifies the purpose for this name.
 * Applications can assume that a name is current unless it explicitly says that it is temporary or old.
 */
export declare enum HumanNameNameUse {
    USUAL = "usual",
    OFFICIAL = "official",
    TEMP = "temp",
    NICKNAME = "nickname",
    ANONYMOUS = "anonymous",
    OLD = "old",
    MAIDEN = "maiden"
}
/**
 * usual | official | temp | secondary | old (If known)
 * The purpose of this identifier.
 * Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
 */
export declare enum IdentifierUse {
    USUAL = "usual",
    OFFICIAL = "official",
    TEMP = "temp",
    SECONDARY = "secondary",
    OLD = "old"
}
/**
 * base | surcharge | deduction | discount | tax | informational
 * base | surcharge | deduction | discount | tax | informational.
 */
export declare enum MonetaryComponentPriceComponentType {
    BASE = "base",
    SURCHARGE = "surcharge",
    DEDUCTION = "deduction",
    DISCOUNT = "discount",
    TAX = "tax",
    INFORMATIONAL = "informational"
}
/**
 * generated | extensions | additional | empty
 * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
 */
export declare enum NarrativeStatus {
    GENERATED = "generated",
    EXTENSIONS = "extensions",
    ADDITIONAL = "additional",
    EMPTY = "empty"
}
/**
 * in | out
 * Whether the parameter is input or output for the module.
 */
export declare enum ParameterDefinitionParameterUse {
    IN = "in",
    OUT = "out"
}
/**
 * < | <= | >= | > | ad - how to understand the value
 * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
 */
export declare enum QuantityComparator {
    LT = "<",
    LE = "<=",
    GE = ">=",
    GT = ">",
    AD = "ad"
}
/**
 * documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of | part-of | amends | amended-with | appends | appended-with | cites | cited-by | comments-on | comment-in | contains | contained-in | corrects | correction-in | replaces | replaced-with | retracts | retracted-by | signs | similar-to | supports | supported-with | transforms | transformed-into | transformed-with | documents | specification-of | created-with | cite-as
 * The type of relationship to the related artifact.
 * The presence of both sides of a relationship type (e.g. successor and predecessor) is required to support use cases where one side of a relationship is not represented in FHIR. However, this feature SHALL NOT be used to create bi-directional resource links in FHIR instances. Specifically, following the methodology of "new points to old" and "many points to one", when using related artifact elements to describe and reference FHIR resources, the type element SHALL be drawn from the fhir-related-artifact-type ValueSet.
 */
export declare enum RelatedArtifactType {
    DOCUMENTATION = "documentation",
    JUSTIFICATION = "justification",
    CITATION = "citation",
    PREDECESSOR = "predecessor",
    SUCCESSOR = "successor",
    DERIVED_FROM = "derived-from",
    DEPENDS_ON = "depends-on",
    COMPOSED_OF = "composed-of",
    PART_OF = "part-of",
    AMENDS = "amends",
    AMENDED_WITH = "amended-with",
    APPENDS = "appends",
    APPENDED_WITH = "appended-with",
    CITES = "cites",
    CITED_BY = "cited-by",
    COMMENTS_ON = "comments-on",
    COMMENT_IN = "comment-in",
    CONTAINS = "contains",
    CONTAINED_IN = "contained-in",
    CORRECTS = "corrects",
    CORRECTION_IN = "correction-in",
    REPLACES = "replaces",
    REPLACED_WITH = "replaced-with",
    RETRACTS = "retracts",
    RETRACTED_BY = "retracted-by",
    SIGNS = "signs",
    SIMILAR_TO = "similar-to",
    SUPPORTS = "supports",
    SUPPORTED_WITH = "supported-with",
    TRANSFORMS = "transforms",
    TRANSFORMED_INTO = "transformed-into",
    TRANSFORMED_WITH = "transformed-with",
    DOCUMENTS = "documents",
    SPECIFICATION_OF = "specification-of",
    CREATED_WITH = "created-with",
    CITE_AS = "cite-as"
}
/**
 * draft | active | retired | unknown
 * The publication status of the artifact being referred to.
 */
export declare enum RelatedArtifactPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * s | min | h | d | wk | mo | a - unit of time (UCUM)
 * The units of time for the duration, in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.
 */
export declare enum TimingUnitsOfTime {
    S = "s",
    MIN = "min",
    H = "h",
    D = "d",
    WK = "wk",
    MO = "mo",
    A = "a"
}
/**
 * mon | tue | wed | thu | fri | sat | sun
 * If one or more days of week is provided, then the action happens only on the specified day(s).
 * If no days are specified, the action is assumed to happen every day as otherwise specified.
 */
export declare enum TimingDayOfWeek {
    MON = "mon",
    TUE = "tue",
    WED = "wed",
    THU = "thu",
    FRI = "fri",
    SAT = "sat",
    SUN = "sun"
}
/**
 * named-event | periodic | data-changed | data-added | data-modified | data-removed | data-accessed | data-access-ended
 * The type of triggering event.
 */
export declare enum TriggerDefinitionTriggerType {
    NAMED_EVENT = "named-event",
    PERIODIC = "periodic",
    DATA_CHANGED = "data-changed",
    DATA_ADDED = "data-added",
    DATA_MODIFIED = "data-modified",
    DATA_REMOVED = "data-removed",
    DATA_ACCESSED = "data-accessed",
    DATA_ACCESS_ENDED = "data-access-ended"
}
/**
 * active | inactive | entered-in-error | on-hold | unknown
 * Indicates whether the account is presently used/usable or not.
 * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
 */
export declare enum AccountStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error",
    ON_HOLD = "on-hold",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this activity definition. Enables tracking the life-cycle of the content.
 * Allows filtering of activity definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ActivityDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
 * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
 */
export declare enum ActivityDefinitionRequestIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    DIRECTIVE = "directive",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the activity  should be addressed with respect to other requests.
 */
export declare enum ActivityDefinitionRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
 * The type of participant in the action.
 */
export declare enum ActivityDefinitionActivityParticipantType {
    CARETEAM = "careteam",
    DEVICE = "device",
    GROUP = "group",
    HEALTHCARESERVICE = "healthcareservice",
    LOCATION = "location",
    ORGANIZATION = "organization",
    PATIENT = "patient",
    PRACTITIONER = "practitioner",
    PRACTITIONERROLE = "practitionerrole",
    RELATEDPERSON = "relatedperson"
}
/**
 * draft | active | retired | unknown
 * The status of this actor definition. Enables tracking the life-cycle of the content.
 * Allows filtering of actor definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ActorDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * person | system
 * Whether the actor represents a human or an appliction.
 */
export declare enum ActorDefinitionExampleScenarioActorType {
    PERSON = "person",
    SYSTEM = "system"
}
/**
 * draft | active | retired | unknown
 * The status of this administrable product. Enables tracking the life-cycle of the content.
 * Allows filtering of administrable products that are appropriate for use versus not.
 */
export declare enum AdministrableProductDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * in-progress | completed | entered-in-error | unknown
 * The current state of the adverse event or potential adverse event.
 * This is not the reporting of the event to any regulatory or quality organization.  This is not the outcome of the patient's condition.
 */
export declare enum AdverseEventStatus {
    IN_PROGRESS = "in-progress",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * actual | potential
 * Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely.
 * AllergyIntolerance should be used for the initial capture or recording of the individual's propensity to an adverse reaction to a substance.  If an AllergyIntolerance does not exist, then an adverse reaction should be recorded as an AllergyIntolerance. If an AllergyIntolerance does exist and the substance was given, then an adverse reaction should be recorded as an AdverseEvent due to the aberrant workflow.
 */
export declare enum AdverseEventActuality {
    ACTUAL = "actual",
    POTENTIAL = "potential"
}
/**
 * food | medication | environment | biologic
 * Category of the identified substance.
 * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
 */
export declare enum AllergyIntoleranceCategory {
    FOOD = "food",
    MEDICATION = "medication",
    ENVIRONMENT = "environment",
    BIOLOGIC = "biologic"
}
/**
 * low | high | unable-to-assess
 * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
 * The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).  Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
 */
export declare enum AllergyIntoleranceCriticality {
    LOW = "low",
    HIGH = "high",
    UNABLE_TO_ASSESS = "unable-to-assess"
}
/**
 * mild | moderate | severe (of event as a whole)
 * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
 * It is acknowledged that this assessment is very subjective. There may be some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
 */
export declare enum AllergyIntoleranceSeverity {
    MILD = "mild",
    MODERATE = "moderate",
    SEVERE = "severe"
}
/**
 * proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist
 * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
 * If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.

This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
 */
export declare enum AppointmentStatus {
    PROPOSED = "proposed",
    PENDING = "pending",
    BOOKED = "booked",
    ARRIVED = "arrived",
    FULFILLED = "fulfilled",
    CANCELLED = "cancelled",
    NOSHOW = "noshow",
    ENTERED_IN_ERROR = "entered-in-error",
    CHECKED_IN = "checked-in",
    WAITLIST = "waitlist"
}
/**
 * accepted | declined | tentative | needs-action
 * Participation status of the actor.
 */
export declare enum AppointmentParticipationStatus {
    ACCEPTED = "accepted",
    DECLINED = "declined",
    TENTATIVE = "tentative",
    NEEDS_ACTION = "needs-action"
}
/**
 * accepted | declined | tentative | needs-action | entered-in-error
 * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
 */
export declare enum AppointmentResponseParticipantStatus {
    ACCEPTED = "accepted",
    DECLINED = "declined",
    TENTATIVE = "tentative",
    NEEDS_ACTION = "needs-action",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * comment | classifier | rating | container | response | change-request
 * The type of information this component of the content represents.
 */
export declare enum ArtifactAssessmentInformationType {
    COMMENT = "comment",
    CLASSIFIER = "classifier",
    RATING = "rating",
    CONTAINER = "container",
    RESPONSE = "response",
    CHANGE_REQUEST = "change-request"
}
/**
 * submitted | triaged | waiting-for-input | resolved-no-change | resolved-change-required | deferred | duplicate | applied | published | entered-in-error
 * Indicates the workflow status of the comment or change request.
 */
export declare enum ArtifactAssessmentWorkflowStatus {
    SUBMITTED = "submitted",
    TRIAGED = "triaged",
    WAITING_FOR_INPUT = "waiting-for-input",
    RESOLVED_NO_CHANGE = "resolved-no-change",
    RESOLVED_CHANGE_REQUIRED = "resolved-change-required",
    DEFERRED = "deferred",
    DUPLICATE = "duplicate",
    APPLIED = "applied",
    PUBLISHED = "published",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * unresolved | not-persuasive | persuasive | persuasive-with-modification | not-persuasive-with-modification
 * Indicates the disposition of the responsible party to the comment or change request.
 */
export declare enum ArtifactAssessmentDisposition {
    UNRESOLVED = "unresolved",
    NOT_PERSUASIVE = "not-persuasive",
    PERSUASIVE = "persuasive",
    PERSUASIVE_WITH_MODIFICATION = "persuasive-with-modification",
    NOT_PERSUASIVE_WITH_MODIFICATION = "not-persuasive-with-modification"
}
/**
 * emergency | alert | critical | error | warning | notice | informational | debug
 * Indicates and enables segmentation of various severity including debugging from critical.
 * ATNA will map this to the SYSLOG PRI element.
 */
export declare enum AuditEventSeverity {
    EMERGENCY = "emergency",
    ALERT = "alert",
    CRITICAL = "critical",
    ERROR = "error",
    WARNING = "warning",
    NOTICE = "notice",
    INFORMATIONAL = "informational",
    DEBUG = "debug"
}
/**
 * preparation | in-progress | allocated | issued | unfulfilled | returned | entered-in-error | unknown
 * A code specifying the state of the dispense event.
 */
export declare enum BiologicallyDerivedProductDispenseStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    ALLOCATED = "allocated",
    ISSUED = "issued",
    UNFULFILLED = "unfulfilled",
    RETURNED = "returned",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
 * Indicates the purpose of this bundle - how it is intended to be used.
 * It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
 */
export declare enum BundleType {
    DOCUMENT = "document",
    MESSAGE = "message",
    TRANSACTION = "transaction",
    TRANSACTION_RESPONSE = "transaction-response",
    BATCH = "batch",
    BATCH_RESPONSE = "batch-response",
    HISTORY = "history",
    SEARCHSET = "searchset",
    COLLECTION = "collection",
    SUBSCRIPTION_NOTIFICATION = "subscription-notification"
}
/**
 * match | include - why this is in the result set
 * Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
 * There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
 */
export declare enum BundleSearchEntryMode {
    MATCH = "match",
    INCLUDE = "include"
}
/**
 * GET | HEAD | POST | PUT | DELETE | PATCH
 * In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
 */
export declare enum BundleHTTPVerb {
    GET = "GET",
    HEAD = "HEAD",
    POST = "POST",
    PUT = "PUT",
    DELETE = "DELETE",
    PATCH = "PATCH"
}
/**
 * draft | active | retired | unknown
 * The current state of this {{title}}.
 * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation.

Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum CanonicalResourcePublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this capability statement. Enables tracking the life-cycle of the content.
 * Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum CapabilityStatementPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * instance | capability | requirements
 * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
 */
export declare enum CapabilityStatementKind {
    INSTANCE = "instance",
    CAPABILITY = "capability",
    REQUIREMENTS = "requirements"
}
/**
 * client | server
 * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
 */
export declare enum CapabilityStatementRestfulCapabilityMode {
    CLIENT = "client",
    SERVER = "server"
}
/**
 * read | vread | update | patch | delete | history-instance | history-type | create | search-type
 * Coded identifier of the operation, supported by the system resource.
 */
export declare enum CapabilityStatementTypeRestfulInteraction {
    READ = "read",
    VREAD = "vread",
    UPDATE = "update",
    PATCH = "patch",
    DELETE = "delete",
    HISTORY_INSTANCE = "history-instance",
    HISTORY_TYPE = "history-type",
    CREATE = "create",
    SEARCH_TYPE = "search-type"
}
/**
 * no-version | versioned | versioned-update
 * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
 * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
 */
export declare enum CapabilityStatementResourceVersionPolicy {
    NO_VERSION = "no-version",
    VERSIONED = "versioned",
    VERSIONED_UPDATE = "versioned-update"
}
/**
 * not-supported | modified-since | not-match | full-support
 * A code that indicates how the server supports conditional read.
 * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
 */
export declare enum CapabilityStatementConditionalReadStatus {
    NOT_SUPPORTED = "not-supported",
    MODIFIED_SINCE = "modified-since",
    NOT_MATCH = "not-match",
    FULL_SUPPORT = "full-support"
}
/**
 * not-supported | single | multiple - how conditional delete is supported
 * A code that indicates how the server supports conditional delete.
 * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
 */
export declare enum CapabilityStatementConditionalDeleteStatus {
    NOT_SUPPORTED = "not-supported",
    SINGLE = "single",
    MULTIPLE = "multiple"
}
/**
 * literal | logical | resolves | enforced | local
 * A set of flags that defines how references are supported.
 */
export declare enum CapabilityStatementReferenceHandlingPolicy {
    LITERAL = "literal",
    LOGICAL = "logical",
    RESOLVES = "resolves",
    ENFORCED = "enforced",
    LOCAL = "local"
}
/**
 * number | date | string | token | reference | composite | quantity | uri | special
 * The type of value a search parameter refers to, and how the content is interpreted.
 * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
 */
export declare enum CapabilityStatementSearchParamType {
    NUMBER = "number",
    DATE = "date",
    STRING = "string",
    TOKEN = "token",
    REFERENCE = "reference",
    COMPOSITE = "composite",
    QUANTITY = "quantity",
    URI = "uri",
    SPECIAL = "special"
}
/**
 * transaction | batch | search-system | history-system
 * A coded identifier of the operation, supported by the system.
 */
export declare enum CapabilityStatementSystemRestfulInteraction {
    TRANSACTION = "transaction",
    BATCH = "batch",
    SEARCH_SYSTEM = "search-system",
    HISTORY_SYSTEM = "history-system"
}
/**
 * sender | receiver
 * The mode of this event declaration - whether application is sender or receiver.
 */
export declare enum CapabilityStatementEventCapabilityMode {
    SENDER = "sender",
    RECEIVER = "receiver"
}
/**
 * producer | consumer
 * Mode of this document declaration - whether an application is a producer or consumer.
 */
export declare enum CapabilityStatementDocumentMode {
    PRODUCER = "producer",
    CONSUMER = "consumer"
}
/**
 * draft | active | on-hold | revoked | completed | entered-in-error | unknown
 * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
 * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.

This element is labeled as a modifier because the status contains the code entered-in-error that marks the plan as not currently valid.
 */
export declare enum CarePlanStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    REVOKED = "revoked",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | order | option | directive
 * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
This element is expected to be immutable. E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance. Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.
 */
export declare enum CarePlanIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    ORDER = "order",
    OPTION = "option",
    DIRECTIVE = "directive"
}
/**
 * proposed | active | suspended | inactive | entered-in-error
 * Indicates the current state of the care team.
 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
 */
export declare enum CareTeamStatus {
    PROPOSED = "proposed",
    ACTIVE = "active",
    SUSPENDED = "suspended",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * planned | billable | not-billable | aborted | billed | entered-in-error | unknown
 * The current state of the ChargeItem.
 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
 */
export declare enum ChargeItemStatus {
    PLANNED = "planned",
    BILLABLE = "billable",
    NOT_BILLABLE = "not-billable",
    ABORTED = "aborted",
    BILLED = "billed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The current state of the ChargeItemDefinition.
 * Allows filtering of charge item definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ChargeItemDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this summary. Enables tracking the life-cycle of the content.
 * Allows filtering of summaries that are appropriate for use versus not. Use "active" when the citation record is the version for others to actively use, "draft" while you are developing the content, and "retired" when this record should no longer be used for any purpose.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum CitationPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of | part-of | amends | amended-with | appends | appended-with | cites | cited-by | comments-on | comment-in | contains | contained-in | corrects | correction-in | replaces | replaced-with | retracts | retracted-by | signs | similar-to | supports | supported-with | transforms | transformed-into | transformed-with | documents | specification-of | created-with | cite-as | reprint | reprint-of
 * The type of relationship to the related artifact.
 */
export declare enum CitationRelatedArtifactTypeExpanded {
    DOCUMENTATION = "documentation",
    JUSTIFICATION = "justification",
    CITATION = "citation",
    PREDECESSOR = "predecessor",
    SUCCESSOR = "successor",
    DERIVED_FROM = "derived-from",
    DEPENDS_ON = "depends-on",
    COMPOSED_OF = "composed-of",
    PART_OF = "part-of",
    AMENDS = "amends",
    AMENDED_WITH = "amended-with",
    APPENDS = "appends",
    APPENDED_WITH = "appended-with",
    CITES = "cites",
    CITED_BY = "cited-by",
    COMMENTS_ON = "comments-on",
    COMMENT_IN = "comment-in",
    CONTAINS = "contains",
    CONTAINED_IN = "contained-in",
    CORRECTS = "corrects",
    CORRECTION_IN = "correction-in",
    REPLACES = "replaces",
    REPLACED_WITH = "replaced-with",
    RETRACTS = "retracts",
    RETRACTED_BY = "retracted-by",
    SIGNS = "signs",
    SIMILAR_TO = "similar-to",
    SUPPORTS = "supports",
    SUPPORTED_WITH = "supported-with",
    TRANSFORMS = "transforms",
    TRANSFORMED_INTO = "transformed-into",
    TRANSFORMED_WITH = "transformed-with",
    DOCUMENTS = "documents",
    SPECIFICATION_OF = "specification-of",
    CREATED_WITH = "created-with",
    CITE_AS = "cite-as",
    REPRINT = "reprint",
    REPRINT_OF = "reprint-of"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ClaimStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * claim | preauthorization | predetermination
 * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
 */
export declare enum ClaimUse {
    CLAIM = "claim",
    PREAUTHORIZATION = "preauthorization",
    PREDETERMINATION = "predetermination"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ClaimResponseStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * claim | preauthorization | predetermination
 * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
 */
export declare enum ClaimResponseUse {
    CLAIM = "claim",
    PREAUTHORIZATION = "preauthorization",
    PREDETERMINATION = "predetermination"
}
/**
 * queued | complete | error | partial
 * The outcome of the claim, predetermination, or preauthorization processing.
 * The resource may be used to indicate that the Claim/Preauthorization/Pre-determination has been received but processing has not begun (queued); that it has been processed and one or more errors have been detected (error); no errors were detected and some of the adjudication processing has been performed (partial); or all of the adjudication processing has completed without errors (complete).
 */
export declare enum ClaimResponseRemittanceOutcome {
    QUEUED = "queued",
    COMPLETE = "complete",
    ERROR = "error",
    PARTIAL = "partial"
}
/**
 * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
 * Identifies the workflow status of the assessment.
 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
 */
export declare enum ClinicalImpressionStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    NOT_DONE = "not-done",
    ON_HOLD = "on-hold",
    STOPPED = "stopped",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * indication | contraindication | interaction | undesirable-effect | warning
 * indication | contraindication | interaction | undesirable-effect | warning.
 */
export declare enum ClinicalUseDefinitionType {
    INDICATION = "indication",
    CONTRAINDICATION = "contraindication",
    INTERACTION = "interaction",
    UNDESIRABLE_EFFECT = "undesirable-effect",
    WARNING = "warning"
}
/**
 * draft | active | retired | unknown
 * The status of this code system. Enables tracking the life-cycle of the content.
 * Allows filtering of code systems that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum CodeSystemPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * grouped-by | is-a | part-of | classified-with
 * The meaning of the hierarchy of concepts as represented in this resource.
 * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
 */
export declare enum CodeSystemHierarchyMeaning {
    GROUPED_BY = "grouped-by",
    IS_A = "is-a",
    PART_OF = "part-of",
    CLASSIFIED_WITH = "classified-with"
}
/**
 * not-present | example | fragment | complete | supplement
 * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
 */
export declare enum CodeSystemContentMode {
    NOT_PRESENT = "not-present",
    EXAMPLE = "example",
    FRAGMENT = "fragment",
    COMPLETE = "complete",
    SUPPLEMENT = "supplement"
}
/**
 * = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | child-of | descendent-leaf | exists
 * A list of operators that can be used with the filter.
 */
export declare enum CodeSystemFilterOperator {
    E = "=",
    IS_A = "is-a",
    DESCENDENT_OF = "descendent-of",
    IS_NOT_A = "is-not-a",
    REGEX = "regex",
    IN = "in",
    NOT_IN = "not-in",
    GENERALIZES = "generalizes",
    CHILD_OF = "child-of",
    DESCENDENT_LEAF = "descendent-leaf",
    EXISTS = "exists"
}
/**
 * code | Coding | string | integer | boolean | dateTime | decimal
 * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
 */
export declare enum CodeSystemPropertyType {
    CODE = "code",
    CODING = "Coding",
    STRING = "string",
    INTEGER = "integer",
    BOOLEAN = "boolean",
    DATETIME = "dateTime",
    DECIMAL = "decimal"
}
/**
 * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
 * The status of the transmission.
 * This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
 */
export declare enum CommunicationStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    NOT_DONE = "not-done",
    ON_HOLD = "on-hold",
    STOPPED = "stopped",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * routine | urgent | asap | stat
 * Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
 * Used to prioritize workflow (such as which communication to read first) when the communication is planned or in progress.
 */
export declare enum CommunicationPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * draft | active | on-hold | revoked | completed | entered-in-error | unknown
 * The status of the proposal or order.
 */
export declare enum CommunicationRequestStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    REVOKED = "revoked",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
 * Indicates the level of authority/intentionality associated with the CommunicationRequest and where the request fits into the workflow chain.
 * This element is expected to be immutable.  E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance.  Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.

One exception to this is that the granularity of CommunicationRequest.intent is allowed to change.  For example, a Request identified as an "order" might later be clarified to be a "filler-order".  Or, in rarer cases (to meet recipient constraints), the reverse might also occur.
 */
export declare enum CommunicationRequestIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    DIRECTIVE = "directive",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
 */
export declare enum CommunicationRequestCommunicationPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * draft | active | retired | unknown
 * The status of this compartment definition. Enables tracking the life-cycle of the content.
 * Allows filtering of compartment definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum CompartmentDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * Patient | Encounter | RelatedPerson | Practitioner | Device | EpisodeOfCare
 * Which compartment this definition describes.
 * Only the specification can define the compartments that can exist. Servers can choose to support them.
 */
export declare enum CompartmentDefinitionCompartmentType {
    PATIENT = "Patient",
    ENCOUNTER = "Encounter",
    RELATEDPERSON = "RelatedPerson",
    PRACTITIONER = "Practitioner",
    DEVICE = "Device",
    EPISODEOFCARE = "EpisodeOfCare"
}
/**
 * registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
 * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
 * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements.

Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
 */
export declare enum CompositionStatus {
    REGISTERED = "registered",
    PARTIAL = "partial",
    PRELIMINARY = "preliminary",
    FINAL = "final",
    AMENDED = "amended",
    CORRECTED = "corrected",
    APPENDED = "appended",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    DEPRECATED = "deprecated",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this concept map. Enables tracking the life-cycle of the content.
 * Allows filtering of concept maps that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ConceptMapPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * Coding | string | integer | boolean | dateTime | decimal | code
 * The type of the property value.
 */
export declare enum ConceptMapPropertyType {
    CODING = "Coding",
    STRING = "string",
    INTEGER = "integer",
    BOOLEAN = "boolean",
    DATETIME = "dateTime",
    DECIMAL = "decimal",
    CODE = "code"
}
/**
 * code | Coding | string | boolean | Quantity
 * The type of the source data contained in this concept map for this data element.
 * When the source or target is not content defined by FHIR, some additional application logic might be required to map from the FHIR Datatype to the externally defined content
 */
export declare enum ConceptMapmapAttributeType {
    CODE = "code",
    CODING = "Coding",
    STRING = "string",
    BOOLEAN = "boolean",
    QUANTITY = "Quantity"
}
/**
 * related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
 * The relationship between the source and target concepts. The relationship is read from source to target (e.g. source-is-narrower-than-target).
 * This element is labeled as a modifier because it may indicate that there is no mapping.
 */
export declare enum ConceptMapRelationship {
    RELATED_TO = "related-to",
    EQUIVALENT = "equivalent",
    SOURCE_IS_NARROWER_THAN_TARGET = "source-is-narrower-than-target",
    SOURCE_IS_BROADER_THAN_TARGET = "source-is-broader-than-target",
    NOT_RELATED_TO = "not-related-to"
}
/**
 * use-source-code | fixed | other-map
 * Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped source code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
 */
export declare enum ConceptMapGroupUnmappedMode {
    USE_SOURCE_CODE = "use-source-code",
    FIXED = "fixed",
    OTHER_MAP = "other-map"
}
/**
 * related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
 * The default relationship value to apply between the source and target concepts when the source code is unmapped and the mode is 'fixed' or 'use-source-code'.
 * This element is labeled as a modifier because it may indicate that there is no mapping.
 */
export declare enum ConceptMapUnmappedConceptMapRelationship {
    RELATED_TO = "related-to",
    EQUIVALENT = "equivalent",
    SOURCE_IS_NARROWER_THAN_TARGET = "source-is-narrower-than-target",
    SOURCE_IS_BROADER_THAN_TARGET = "source-is-broader-than-target",
    NOT_RELATED_TO = "not-related-to"
}
/**
 * draft | active | retired | unknown
 * The status of this condition definition. Enables tracking the life-cycle of the content.
 * Allows filtering of condition definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ConditionDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * sensitive | specific
 * Kind of pre-condition.
 */
export declare enum ConditionDefinitionConditionPreconditionType {
    SENSITIVE = "sensitive",
    SPECIFIC = "specific"
}
/**
 * preadmit | diff-diagnosis | outcome
 * Use of the questionnaire.
 */
export declare enum ConditionDefinitionConditionQuestionnairePurpose {
    PREADMIT = "preadmit",
    DIFF_DIAGNOSIS = "diff-diagnosis",
    OUTCOME = "outcome"
}
/**
 * draft | active | inactive | not-done | entered-in-error | unknown
 * Indicates the current state of this Consent resource.
 * This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
 */
export declare enum ConsentState {
    DRAFT = "draft",
    ACTIVE = "active",
    INACTIVE = "inactive",
    NOT_DONE = "not-done",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * deny | permit
 * Action to take - permit or deny - as default.
 */
export declare enum ConsentProvisionType {
    DENY = "deny",
    PERMIT = "permit"
}
/**
 * instance | related | dependents | authoredby
 * How the resource reference is interpreted when testing consent restrictions.
 */
export declare enum ConsentDataMeaning {
    INSTANCE = "instance",
    RELATED = "related",
    DEPENDENTS = "dependents",
    AUTHOREDBY = "authoredby"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
 */
export declare enum CoverageStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * insurance | self-pay | other
 * The nature of the coverage be it insurance, or cash payment such as self-pay.
 */
export declare enum CoverageKind {
    INSURANCE = "insurance",
    SELF_PAY = "self-pay",
    OTHER = "other"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum CoverageEligibilityRequestEligibilityRequestStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * auth-requirements | benefits | discovery | validation
 * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
 */
export declare enum CoverageEligibilityRequestEligibilityRequestPurpose {
    AUTH_REQUIREMENTS = "auth-requirements",
    BENEFITS = "benefits",
    DISCOVERY = "discovery",
    VALIDATION = "validation"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum CoverageEligibilityResponseEligibilityResponseStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * auth-requirements | benefits | discovery | validation
 * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
 */
export declare enum CoverageEligibilityResponseEligibilityResponsePurpose {
    AUTH_REQUIREMENTS = "auth-requirements",
    BENEFITS = "benefits",
    DISCOVERY = "discovery",
    VALIDATION = "validation"
}
/**
 * queued | complete | error | partial
 * The outcome of the request processing.
 * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
 */
export declare enum CoverageEligibilityResponseEligibilityOutcome {
    QUEUED = "queued",
    COMPLETE = "complete",
    ERROR = "error",
    PARTIAL = "partial"
}
/**
 * preliminary | final | entered-in-error | mitigated
 * Indicates the status of the detected issue.
 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the issue as not currently valid.
 */
export declare enum DetectedIssueStatus {
    PRELIMINARY = "preliminary",
    FINAL = "final",
    ENTERED_IN_ERROR = "entered-in-error",
    MITIGATED = "mitigated"
}
/**
 * high | moderate | low
 * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
 */
export declare enum DetectedIssueSeverity {
    HIGH = "high",
    MODERATE = "moderate",
    LOW = "low"
}
/**
 * barcode | rfid | manual | card | self-reported | electronic-transmission | unknown
 * A coded entry to indicate how the data was entered.
 */
export declare enum DeviceUDIEntryType {
    BARCODE = "barcode",
    RFID = "rfid",
    MANUAL = "manual",
    CARD = "card",
    SELF_REPORTED = "self-reported",
    ELECTRONIC_TRANSMISSION = "electronic-transmission",
    UNKNOWN = "unknown"
}
/**
 * active | inactive | entered-in-error
 * The Device record status. This is not the status of the device like availability.
 */
export declare enum DeviceFHIRDeviceStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * registered-name | user-friendly-name | patient-reported-name
 * Indicates the kind of name. RegisteredName | UserFriendlyName | PatientReportedName.
 */
export declare enum DeviceNameType {
    REGISTERED_NAME = "registered-name",
    USER_FRIENDLY_NAME = "user-friendly-name",
    PATIENT_REPORTED_NAME = "patient-reported-name"
}
/**
 * basic | master | license
 * The type of identifier itself.
 */
export declare enum DeviceDefinitionDeviceRegulatoryIdentifierType {
    BASIC = "basic",
    MASTER = "master",
    LICENSE = "license"
}
/**
 * registered-name | user-friendly-name | patient-reported-name
 * The type of deviceName.
RegisteredName | UserFriendlyName | PatientReportedName.
 */
export declare enum DeviceDefinitionDeviceNameType {
    REGISTERED_NAME = "registered-name",
    USER_FRIENDLY_NAME = "user-friendly-name",
    PATIENT_REPORTED_NAME = "patient-reported-name"
}
/**
 * lot-number | manufactured-date | serial-number | expiration-date | biological-source | software-version
 * Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
 */
export declare enum DeviceDefinitionDeviceProductionIdentifierInUDI {
    LOT_NUMBER = "lot-number",
    MANUFACTURED_DATE = "manufactured-date",
    SERIAL_NUMBER = "serial-number",
    EXPIRATION_DATE = "expiration-date",
    BIOLOGICAL_SOURCE = "biological-source",
    SOFTWARE_VERSION = "software-version"
}
/**
 * model | lot-numbers | serial-numbers
 * The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.
 */
export declare enum DeviceDefinitionDeviceCorrectiveActionScope {
    MODEL = "model",
    LOT_NUMBERS = "lot-numbers",
    SERIAL_NUMBERS = "serial-numbers"
}
/**
 * preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown
 * A code specifying the state of the set of dispense events.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum DeviceDispenseStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    CANCELLED = "cancelled",
    ON_HOLD = "on-hold",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    STOPPED = "stopped",
    DECLINED = "declined",
    UNKNOWN = "unknown"
}
/**
 * on | off | standby | entered-in-error
 * Indicates current operational state of the device. For example: On, Off, Standby, etc.
 */
export declare enum DeviceMetricOperationalStatus {
    ON = "on",
    OFF = "off",
    STANDBY = "standby",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * measurement | setting | calculation | unspecified
 * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
 */
export declare enum DeviceMetricCategory {
    MEASUREMENT = "measurement",
    SETTING = "setting",
    CALCULATION = "calculation",
    UNSPECIFIED = "unspecified"
}
/**
 * unspecified | offset | gain | two-point
 * Describes the type of the calibration method.
 */
export declare enum DeviceMetricCalibrationType {
    UNSPECIFIED = "unspecified",
    OFFSET = "offset",
    GAIN = "gain",
    TWO_POINT = "two-point"
}
/**
 * not-calibrated | calibration-required | calibrated | unspecified
 * Describes the state of the calibration.
 */
export declare enum DeviceMetricCalibrationState {
    NOT_CALIBRATED = "not-calibrated",
    CALIBRATION_REQUIRED = "calibration-required",
    CALIBRATED = "calibrated",
    UNSPECIFIED = "unspecified"
}
/**
 * draft | active | on-hold | revoked | completed | entered-in-error | unknown
 * The status of the request.
 * This element is labeled as a modifier because the status contains the codes revoked and entered-in-error that mark the request as not currently valid.
 */
export declare enum DeviceRequestStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    REVOKED = "revoked",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
 * Whether the request is a proposal, plan, an original order or a reflex order.
 */
export declare enum DeviceRequestRequestIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    DIRECTIVE = "directive",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the request should be addressed with respect to other requests.
 */
export declare enum DeviceRequestRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * registered | partial | preliminary | modified | final | amended | corrected | appended | cancelled | entered-in-error | unknown
 * The status of the diagnostic report.
 */
export declare enum DiagnosticReportStatus {
    REGISTERED = "registered",
    PARTIAL = "partial",
    PRELIMINARY = "preliminary",
    MODIFIED = "modified",
    FINAL = "final",
    AMENDED = "amended",
    CORRECTED = "corrected",
    APPENDED = "appended",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * current | superseded | entered-in-error
 * The status of this document reference.
 * This is the status of the DocumentReference object, which might be independent from the docStatus element.

This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
 */
export declare enum DocumentReferenceStatus {
    CURRENT = "current",
    SUPERSEDED = "superseded",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
 * The status of the underlying document.
 * The document that is pointed to might be in various lifecycle states.
 */
export declare enum DocumentReferenceReferredDocumentStatus {
    REGISTERED = "registered",
    PARTIAL = "partial",
    PRELIMINARY = "preliminary",
    FINAL = "final",
    AMENDED = "amended",
    CORRECTED = "corrected",
    APPENDED = "appended",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    DEPRECATED = "deprecated",
    UNKNOWN = "unknown"
}
/**
 * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown
 * The current state of the encounter (not the state of the patient within the encounter - that is subjectState).
 * Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
 */
export declare enum EncounterStatus {
    PLANNED = "planned",
    IN_PROGRESS = "in-progress",
    ON_HOLD = "on-hold",
    DISCHARGED = "discharged",
    COMPLETED = "completed",
    CANCELLED = "cancelled",
    DISCONTINUED = "discontinued",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * planned | active | reserved | completed
 * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
 * When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
 */
export declare enum EncounterLocationStatus {
    PLANNED = "planned",
    ACTIVE = "active",
    RESERVED = "reserved",
    COMPLETED = "completed"
}
/**
 * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown
 * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown.
 * Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
 */
export declare enum EncounterHistoryEncounterStatus {
    PLANNED = "planned",
    IN_PROGRESS = "in-progress",
    ON_HOLD = "on-hold",
    DISCHARGED = "discharged",
    COMPLETED = "completed",
    CANCELLED = "cancelled",
    DISCONTINUED = "discontinued",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * active | suspended | error | off | entered-in-error | test
 * The endpoint status represents the general expected availability of an endpoint.
 * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid. Temporary downtimes or other unexpected short-term changes in availability would not be represented in this property.
 */
export declare enum EndpointStatus {
    ACTIVE = "active",
    SUSPENDED = "suspended",
    ERROR = "error",
    OFF = "off",
    ENTERED_IN_ERROR = "entered-in-error",
    TEST = "test"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
 */
export declare enum EnrollmentRequestStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
 */
export declare enum EnrollmentResponseStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * queued | complete | error | partial
 * Processing status: error, complete.
 */
export declare enum EnrollmentResponseEnrollmentOutcome {
    QUEUED = "queued",
    COMPLETE = "complete",
    ERROR = "error",
    PARTIAL = "partial"
}
/**
 * planned | waitlist | active | onhold | finished | cancelled | entered-in-error
 * planned | waitlist | active | onhold | finished | cancelled.
 * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
 */
export declare enum EpisodeOfCareStatus {
    PLANNED = "planned",
    WAITLIST = "waitlist",
    ACTIVE = "active",
    ONHOLD = "onhold",
    FINISHED = "finished",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * draft | active | retired | unknown
 * The status of this event definition. Enables tracking the life-cycle of the content.
 * Allows filtering of event definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum EventDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this summary. Enables tracking the life-cycle of the content.
 * Allows filtering of summarys s that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum EvidencePublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * continuous | dichotomous | ordinal | polychotomous
 * How the variable is classified for use in adjusted analysis.
 */
export declare enum EvidenceVariableHandling {
    CONTINUOUS = "continuous",
    DICHOTOMOUS = "dichotomous",
    ORDINAL = "ordinal",
    POLYCHOTOMOUS = "polychotomous"
}
/**
 * draft | active | retired | unknown
 * The status of this summary. Enables tracking the life-cycle of the content.
 * Allows filtering of summaries that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum EvidenceReportPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * replaces | amends | appends | transforms | replacedWith | amendedWith | appendedWith | transformedWith
 * The type of relationship that this composition has with anther composition or document.
 * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
 */
export declare enum EvidenceReportReportRelationshipType {
    REPLACES = "replaces",
    AMENDS = "amends",
    APPENDS = "appends",
    TRANSFORMS = "transforms",
    REPLACEDWITH = "replacedWith",
    AMENDEDWITH = "amendedWith",
    APPENDEDWITH = "appendedWith",
    TRANSFORMEDWITH = "transformedWith"
}
/**
 * working | snapshot | changes
 * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
 * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
 */
export declare enum EvidenceReportSectionMode {
    WORKING = "working",
    SNAPSHOT = "snapshot",
    CHANGES = "changes"
}
/**
 * draft | active | retired | unknown
 * The status of this evidence variable. Enables tracking the life-cycle of the content.
 * Allows filtering of evidence variables that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum EvidenceVariablePublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * all-of | any-of | at-least | at-most | statistical | net-effect | dataset
 * Used to specify if two or more characteristics are combined with OR or AND.
 */
export declare enum EvidenceVariableCharacteristicCombination {
    ALL_OF = "all-of",
    ANY_OF = "any-of",
    AT_LEAST = "at-least",
    AT_MOST = "at-most",
    STATISTICAL = "statistical",
    NET_EFFECT = "net-effect",
    DATASET = "dataset"
}
/**
 * draft | active | retired | unknown
 * The status of this example scenario. Enables tracking the life-cycle of the content.
 * Allows filtering of example scenarios that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ExampleScenarioPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * person | system
 * The category of actor - person or system.
 */
export declare enum ExampleScenarioActorType {
    PERSON = "person",
    SYSTEM = "system"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ExplanationOfBenefitStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * claim | preauthorization | predetermination
 * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
 */
export declare enum ExplanationOfBenefitUse {
    CLAIM = "claim",
    PREAUTHORIZATION = "preauthorization",
    PREDETERMINATION = "predetermination"
}
/**
 * queued | complete | error | partial
 * The outcome of the claim, predetermination, or preauthorization processing.
 * The resource may be used to indicate that the Claim/Preauthorization/Pre-determination has been received but processing has not begun (queued); that it has been processed and one or more errors have been detected (error); no errors were detected and some of the adjudication processing has been performed (partial); or all of the adjudication processing has completed without errors (complete).
 */
export declare enum ExplanationOfBenefitClaimOutcome {
    QUEUED = "queued",
    COMPLETE = "complete",
    ERROR = "error",
    PARTIAL = "partial"
}
/**
 * partial | completed | entered-in-error | health-unknown
 * A code specifying the status of the record of the family history of a specific family member.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum FamilyMemberHistoryFamilyHistoryStatus {
    PARTIAL = "partial",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    HEALTH_UNKNOWN = "health-unknown"
}
/**
 * active | inactive | entered-in-error
 * Supports basic workflow.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum FlagStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * active | entered-in-error | inactive
 * The validity about the information of the formulary item and not of the underlying product or service itself.
 * This status is intended to identify if the formulary item in a local system is in active use within the formulary.  For example, a formulary might include a medicinal product and the status relates to its inclusion.  At some point in the future, if the status of the formulary item is changed to "inactive" that means that it is no longer valid in the formulary.  But the product itself might still be in active use and might be included in other formularies.
 */
export declare enum FormularyItemStatus {
    ACTIVE = "active",
    ENTERED_IN_ERROR = "entered-in-error",
    INACTIVE = "inactive"
}
/**
 * registered | available | cancelled | entered-in-error | unknown
 * The status of the genomic study.
 */
export declare enum GenomicStudyStatus {
    REGISTERED = "registered",
    AVAILABLE = "available",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposed | planned | accepted | active | on-hold | completed | cancelled | entered-in-error | rejected
 * The state of the goal throughout its lifecycle.
 * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
 */
export declare enum GoalLifecycleStatus {
    PROPOSED = "proposed",
    PLANNED = "planned",
    ACCEPTED = "accepted",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    COMPLETED = "completed",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    REJECTED = "rejected"
}
/**
 * draft | active | retired | unknown
 * The status of this graph definition. Enables tracking the life-cycle of the content.
 * Allows filtering of graph definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum GraphDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * where | requires
 * Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
 * All conditional rules are evaluated; if they are true, then the rules are evaluated.
 */
export declare enum GraphDefinitionGraphCompartmentUse {
    WHERE = "where",
    REQUIRES = "requires"
}
/**
 * identical | matching | different | custom
 * identical | matching | different | no-rule | custom.
 */
export declare enum GraphDefinitionGraphCompartmentRule {
    IDENTICAL = "identical",
    MATCHING = "matching",
    DIFFERENT = "different",
    CUSTOM = "custom"
}
/**
 * Patient | Encounter | RelatedPerson | Practitioner | Device | EpisodeOfCare
 * Identifies the compartment.
 */
export declare enum GraphDefinitionCompartmentCode {
    PATIENT = "Patient",
    ENCOUNTER = "Encounter",
    RELATEDPERSON = "RelatedPerson",
    PRACTITIONER = "Practitioner",
    DEVICE = "Device",
    EPISODEOFCARE = "EpisodeOfCare"
}
/**
 * person | animal | practitioner | device | careteam | healthcareservice | location | organization | relatedperson | specimen
 * Identifies the broad classification of the kind of resources the group includes.
 * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, PractitionerRole, Device, CareTeam, HealthcareService, Location, Organization, RelatedPerson, or Specimen for the other types.), or a Group of the resources of the appropriate type.
 */
export declare enum GroupType {
    PERSON = "person",
    ANIMAL = "animal",
    PRACTITIONER = "practitioner",
    DEVICE = "device",
    CARETEAM = "careteam",
    HEALTHCARESERVICE = "healthcareservice",
    LOCATION = "location",
    ORGANIZATION = "organization",
    RELATEDPERSON = "relatedperson",
    SPECIMEN = "specimen"
}
/**
 * definitional | enumerated
 * Basis for membership in the Group:

* 'definitional': The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete.
* 'enumerated': The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member.
 */
export declare enum GroupMembership {
    DEFINITIONAL = "definitional",
    ENUMERATED = "enumerated"
}
/**
 * success | data-requested | data-required | in-progress | failure | entered-in-error
 * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum GuidanceResponseStatus {
    SUCCESS = "success",
    DATA_REQUESTED = "data-requested",
    DATA_REQUIRED = "data-required",
    IN_PROGRESS = "in-progress",
    FAILURE = "failure",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * available | entered-in-error | unknown
 * The current state of the ImagingSelection resource. This is not the status of any ImagingStudy, ServiceRequest, or Task resources associated with the ImagingSelection.
 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
 */
export declare enum ImagingSelectionStatus {
    AVAILABLE = "available",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * point | polyline | interpolated | circle | ellipse
 * Specifies the type of image region.
 * See [DICOM PS3.3 C.10.5.1.2](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.10.5.html#sect_C.10.5.1.2).
 */
export declare enum ImagingSelection2DGraphicType {
    POINT = "point",
    POLYLINE = "polyline",
    INTERPOLATED = "interpolated",
    CIRCLE = "circle",
    ELLIPSE = "ellipse"
}
/**
 * point | multipoint | polyline | polygon | ellipse | ellipsoid
 * Specifies the type of image region.
 * See [DICOM PS3.3 C.18.9.1.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html#sect_C.18.9.1.2).
 */
export declare enum ImagingSelection3DGraphicType {
    POINT = "point",
    MULTIPOINT = "multipoint",
    POLYLINE = "polyline",
    POLYGON = "polygon",
    ELLIPSE = "ellipse",
    ELLIPSOID = "ellipsoid"
}
/**
 * registered | available | cancelled | entered-in-error | unknown
 * The current state of the ImagingStudy resource. This is not the status of any ServiceRequest or Task resources associated with the ImagingStudy.
 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
 */
export declare enum ImagingStudyStatus {
    REGISTERED = "registered",
    AVAILABLE = "available",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * completed | entered-in-error | not-done
 * Indicates the current status of the immunization event.
 * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ImmunizationStatus {
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    NOT_DONE = "not-done"
}
/**
 * completed | entered-in-error
 * Indicates the current status of the evaluation of the vaccination administration event.
 */
export declare enum ImmunizationEvaluationStatus {
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * draft | active | retired | unknown
 * The status of this implementation guide. Enables tracking the life-cycle of the content.
 * Allows filtering of implementation guides that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ImplementationGuidePublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * html | markdown | xml | generated
 * A code that indicates how the page is generated.
 */
export declare enum ImplementationGuideGuidePageGeneration {
    HTML = "html",
    MARKDOWN = "markdown",
    XML = "xml",
    GENERATED = "generated"
}
/**
 * draft | active | retired | unknown
 * The status of this ingredient. Enables tracking the life-cycle of the content.
 * Allows filtering of ingredient that are appropriate for use versus not.
 */
export declare enum IngredientPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * allowed | possible | actual
 * The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
 */
export declare enum IngredientManufacturerRole {
    ALLOWED = "allowed",
    POSSIBLE = "possible",
    ACTUAL = "actual"
}
/**
 * draft | active | retired | unknown
 * The current state of the health insurance product.
 */
export declare enum InsurancePlanPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * active | inactive | entered-in-error | unknown
 * Status of the item entry.
 */
export declare enum InventoryItemStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * draft | requested | active | entered-in-error
 * The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active.
 */
export declare enum InventoryReportStatus {
    DRAFT = "draft",
    REQUESTED = "requested",
    ACTIVE = "active",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * snapshot | difference
 * Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change).
 */
export declare enum InventoryReportInventoryCountType {
    SNAPSHOT = "snapshot",
    DIFFERENCE = "difference"
}
/**
 * draft | issued | balanced | cancelled | entered-in-error
 * The current state of the Invoice.
 */
export declare enum InvoiceStatus {
    DRAFT = "draft",
    ISSUED = "issued",
    BALANCED = "balanced",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * draft | active | retired | unknown
 * The status of this library. Enables tracking the life-cycle of the content.
 * Allows filtering of libraries that are appropriate for use vs. not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum LibraryPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * source | alternate | historical
 * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
 */
export declare enum LinkageType {
    SOURCE = "source",
    ALTERNATE = "alternate",
    HISTORICAL = "historical"
}
/**
 * current | retired | entered-in-error
 * Indicates the current state of this list.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ListStatus {
    CURRENT = "current",
    RETIRED = "retired",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * working | snapshot | changes
 * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
 * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
 */
export declare enum ListMode {
    WORKING = "working",
    SNAPSHOT = "snapshot",
    CHANGES = "changes"
}
/**
 * active | suspended | inactive
 * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
 */
export declare enum LocationStatus {
    ACTIVE = "active",
    SUSPENDED = "suspended",
    INACTIVE = "inactive"
}
/**
 * instance | kind
 * Indicates whether a resource instance represents a specific location or a class of locations.
 * This is labeled as a modifier because whether or not the location is a class of locations changes how it can be used and understood.
 */
export declare enum LocationMode {
    INSTANCE = "instance",
    KIND = "kind"
}
/**
 * draft | active | retired | unknown
 * The status of this item. Enables tracking the life-cycle of the content.
 * Allows filtering of manufactured items that are appropriate for use versus not.
 */
export declare enum ManufacturedItemDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this measure. Enables tracking the life-cycle of the content.
 * Allows filtering of measures that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum MeasurePublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * complete | pending | error
 * The MeasureReport status. No data will be available until the MeasureReport status is complete.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum MeasureReportStatus {
    COMPLETE = "complete",
    PENDING = "pending",
    ERROR = "error"
}
/**
 * individual | subject-list | summary | data-exchange
 * The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.
 * Data-exchange reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
 */
export declare enum MeasureReportType {
    INDIVIDUAL = "individual",
    SUBJECT_LIST = "subject-list",
    SUMMARY = "summary",
    DATA_EXCHANGE = "data-exchange"
}
/**
 * incremental | snapshot
 * Indicates whether the data submitted in a data-exchange report represents a snapshot or incremental update. A snapshot update replaces all previously submitted data for the receiver, whereas an incremental update represents only updated and/or changed data and should be applied as a differential update to the existing submitted data for the receiver.
 * This element only applies to Data-collection reports used to communicate the data-of-interest for a measure
 */
export declare enum MeasureReportSubmitDataUpdateType {
    INCREMENTAL = "incremental",
    SNAPSHOT = "snapshot"
}
/**
 * active | inactive | entered-in-error
 * A code to indicate if the medication is in active use.
 * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
 */
export declare enum MedicationStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown
 * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum MedicationAdministrationStatus {
    IN_PROGRESS = "in-progress",
    NOT_DONE = "not-done",
    ON_HOLD = "on-hold",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    STOPPED = "stopped",
    UNKNOWN = "unknown"
}
/**
 * preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown
 * A code specifying the state of the set of dispense events.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum MedicationDispenseStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    CANCELLED = "cancelled",
    ON_HOLD = "on-hold",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    STOPPED = "stopped",
    DECLINED = "declined",
    UNKNOWN = "unknown"
}
/**
 * active | entered-in-error | inactive
 * A code to indicate if the medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system. The status refers to the validity about the information of the medication and not to its medicinal properties.
 * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
 */
export declare enum MedicationKnowledgeStatus {
    ACTIVE = "active",
    ENTERED_IN_ERROR = "entered-in-error",
    INACTIVE = "inactive"
}
/**
 * active | on-hold | ended | stopped | completed | cancelled | entered-in-error | draft | unknown
 * A code specifying the current state of the order.  Generally, this will be active or completed state.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.

Clinical decision support systems should take the status into account when determining which medications to include in their algorithms.
 */
export declare enum MedicationRequestStatus {
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    ENDED = "ended",
    STOPPED = "stopped",
    COMPLETED = "completed",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    DRAFT = "draft",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
 * Whether the request is a proposal, plan, or an original order.
 * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.

An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.

This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
 */
export declare enum MedicationRequestIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the Medication Request should be addressed with respect to other requests.
 */
export declare enum MedicationRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * recorded | entered-in-error | draft
 * A code representing the status of recording the medication statement.
 * This status concerns just the recording of the medication statement.  MedicationStatement.adherence should be used for indicating a patient's adherence to the information in this resource.  Note, the statuses are different than in previous releases for MedicationStatement or MedicationStatement.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum MedicationStatementStatus {
    RECORDED = "recorded",
    ENTERED_IN_ERROR = "entered-in-error",
    DRAFT = "draft"
}
/**
 * draft | active | retired | unknown
 * The status of this message definition. Enables tracking the life-cycle of the content.
 * Allows filtering of message definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum MessageDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * consequence | currency | notification
 * The impact of the content of the message.
 */
export declare enum MessageDefinitionMessageSignificanceCategory {
    CONSEQUENCE = "consequence",
    CURRENCY = "currency",
    NOTIFICATION = "notification"
}
/**
 * always | on-error | never | on-success
 * Declare at a message definition level whether a response is required or only upon error or success, or never.
 * This enables the capability currently available through MSH-16 (Application Level acknowledgement) in HL7 Version 2 to declare at a message instance level whether a response is required or only upon error or success, or never.
 */
export declare enum MessageDefinitionmessageheader_response_request {
    ALWAYS = "always",
    ON_ERROR = "on-error",
    NEVER = "never",
    ON_SUCCESS = "on-success"
}
/**
 * ok | transient-error | fatal-error
 * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
 * This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
 */
export declare enum MessageHeaderResponseType {
    OK = "ok",
    TRANSIENT_ERROR = "transient-error",
    FATAL_ERROR = "fatal-error"
}
/**
 * aa | dna | rna
 * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
 */
export declare enum MolecularSequencesequenceType {
    AA = "aa",
    DNA = "dna",
    RNA = "rna"
}
/**
 * sense | antisense
 * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
 */
export declare enum MolecularSequenceorientationType {
    SENSE = "sense",
    ANTISENSE = "antisense"
}
/**
 * watson | crick
 * An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
 */
export declare enum MolecularSequencestrandType {
    WATSON = "watson",
    CRICK = "crick"
}
/**
 * draft | active | retired | unknown
 * The status of this naming system. Enables tracking the life-cycle of the content.
 * Allows filtering of naming systems that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum NamingSystemPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * codesystem | identifier | root
 * Indicates the purpose for the naming system - what kinds of things does it make unique?
 */
export declare enum NamingSystemType {
    CODESYSTEM = "codesystem",
    IDENTIFIER = "identifier",
    ROOT = "root"
}
/**
 * oid | uuid | uri | iri-stem | v2csmnemonic | other
 * Identifies the unique identifier scheme used for this particular identifier.
 * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc. Preferred identifiers for the same identifier type SHOULD NOT overlap by period.
 */
export declare enum NamingSystemIdentifierType {
    OID = "oid",
    UUID = "uuid",
    URI = "uri",
    IRI_STEM = "iri-stem",
    V2CSMNEMONIC = "v2csmnemonic",
    OTHER = "other"
}
/**
 * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
 * A code representing the patient or other source's judgment about the state of the intake that this assertion is about.  Generally, this will be active or completed.
 * NutritionIntake is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for NutritionIntake.status contains codes that assert the status of the consumption of the food or fluid by the patient (for example, stopped or on hold) as well as codes that assert the status of the Nutrition Intake itself (for example, entered in error).

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum NutritionIntakeStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    NOT_DONE = "not-done",
    ON_HOLD = "on-hold",
    STOPPED = "stopped",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * draft | active | on-hold | revoked | completed | entered-in-error | unknown
 * The workflow status of the nutrition order/request.
 * Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum NutritionOrderStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    REVOKED = "revoked",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
 * Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.
 * When resources map to this element, they are free to define as many codes as necessary to cover their space and will map to "proposal, plan or order".  Can have multiple codes that map to one of these.  E.g. "original order", "encoded order", "reflex order" would all map to "order".  Expectation is that the set of codes is mutually exclusive or a strict all-encompassing hierarchy.
 */
export declare enum NutritionOrderNutritiionOrderIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    DIRECTIVE = "directive",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the Nutrition Order should be addressed with respect to other        requests.
 */
export declare enum NutritionOrderPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * active | inactive | entered-in-error
 * The current state of the product.
 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
 */
export declare enum NutritionProductStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * reflex | repeat | re-run
 * The type of trigger.
Reflex | Repeat | Re-run.
 */
export declare enum ObservationTriggeredByType {
    REFLEX = "reflex",
    REPEAT = "repeat",
    RE_RUN = "re-run"
}
/**
 * draft | active | retired | unknown
 * The current state of the ObservationDefinition.
 * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ObservationDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
 * The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
 */
export declare enum ObservationDefinitionObservationDataType {
    QUANTITY = "Quantity",
    CODEABLECONCEPT = "CodeableConcept",
    STRING = "string",
    BOOLEAN = "boolean",
    INTEGER = "integer",
    RANGE = "Range",
    RATIO = "Ratio",
    SAMPLEDDATA = "SampledData",
    TIME = "time",
    DATETIME = "dateTime",
    PERIOD = "Period"
}
/**
 * male | female | other | unknown
 * The gender this  set of qualified values applies to.
 */
export declare enum ObservationDefinitionAdministrativeGender {
    MALE = "male",
    FEMALE = "female",
    OTHER = "other",
    UNKNOWN = "unknown"
}
/**
 * reference | critical | absolute
 * The category of range of values for continuous or ordinal observations that match the criteria of this set of qualified values.
 */
export declare enum ObservationDefinitionObservationRangeCategory {
    REFERENCE = "reference",
    CRITICAL = "critical",
    ABSOLUTE = "absolute"
}
/**
 * draft | active | retired | unknown
 * The current state of this operation definition.
 * A nominal state-transition diagram can be found in the] documentation

Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
 */
export declare enum OperationDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * operation | query
 * Whether this is an operation or a named query.
 * Named queries are invoked differently, and have different capabilities.
 */
export declare enum OperationDefinitionOperationKind {
    OPERATION = "operation",
    QUERY = "query"
}
/**
 * in | out
 * Whether this is an input or an output parameter.
 * If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
 */
export declare enum OperationDefinitionOperationParameterUse {
    IN = "in",
    OUT = "out"
}
/**
 * instance | type | system
 * If present, indicates that the parameter applies when the operation is being invoked at the specified level.
 */
export declare enum OperationDefinitionOperationParameterScope {
    INSTANCE = "instance",
    TYPE = "type",
    SYSTEM = "system"
}
/**
 * number | date | string | token | reference | composite | quantity | uri | special
 * How the parameter is understood if/when it used as search parameter. This is only used if the parameter is a string.
 * Parameters that are search parameter usually - but not always - are also defined for use with general searches, and function in the operation to filter the set of resources in scope for the operation just like the do when searching. The searchType describes how the server processes the value. For an example, see the [Evaluate Measure Operation](measure-operation-evaluate-measure.html)
 */
export declare enum OperationDefinitionSearchParamType {
    NUMBER = "number",
    DATE = "date",
    STRING = "string",
    TOKEN = "token",
    REFERENCE = "reference",
    COMPOSITE = "composite",
    QUANTITY = "quantity",
    URI = "uri",
    SPECIAL = "special"
}
/**
 * required | extensible | preferred | example
 * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
 * For further discussion, see [Using Terminologies](terminologies.html).
 */
export declare enum OperationDefinitionBindingStrength {
    REQUIRED = "required",
    EXTENSIBLE = "extensible",
    PREFERRED = "preferred",
    EXAMPLE = "example"
}
/**
 * fatal | error | warning | information | success
 * Indicates whether the issue indicates a variation from successful processing.
 */
export declare enum OperationOutcomeIssueSeverity {
    FATAL = "fatal",
    ERROR = "error",
    WARNING = "warning",
    INFORMATION = "information",
    SUCCESS = "success"
}
/**
 * male | female | other | unknown
 * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
 * The gender might not match the biological sex as determined by genetics or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than male and female, though the vast majority of systems and contexts only support male and female.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific sex or gender aspect of interest (anatomical, chromosomal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosomal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overridable error, not a "hard" error.  See the Patient Gender and Sex section for additional information about communicating patient gender and sex.
 */
export declare enum PatientAdministrativeGender {
    MALE = "male",
    FEMALE = "female",
    OTHER = "other",
    UNKNOWN = "unknown"
}
/**
 * replaced-by | replaces | refer | seealso
 * The type of link between this patient resource and another patient resource.
 */
export declare enum PatientLinkType {
    REPLACED_BY = "replaced-by",
    REPLACES = "replaces",
    REFER = "refer",
    SEEALSO = "seealso"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum PaymentNoticeStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum PaymentReconciliationStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * queued | complete | error | partial
 * The outcome of a request for a reconciliation.
 * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
 */
export declare enum PaymentReconciliationPaymentOutcome {
    QUEUED = "queued",
    COMPLETE = "complete",
    ERROR = "error",
    PARTIAL = "partial"
}
/**
 * display | print | printoper
 * The business purpose of the note text.
 */
export declare enum PaymentReconciliationNoteType {
    DISPLAY = "display",
    PRINT = "print",
    PRINTOPER = "printoper"
}
/**
 * active | entered-in-error | draft | rejected
 * Status.
 */
export declare enum PermissionStatus {
    ACTIVE = "active",
    ENTERED_IN_ERROR = "entered-in-error",
    DRAFT = "draft",
    REJECTED = "rejected"
}
/**
 * deny-overrides | permit-overrides | ordered-deny-overrides | ordered-permit-overrides | deny-unless-permit | permit-unless-deny
 * Defines a procedure for arriving at an access decision given the set of rules.
 * see [XACML Combining Rules](http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cos01-en.html#_Toc325047267)
 */
export declare enum PermissionCombining {
    DENY_OVERRIDES = "deny-overrides",
    PERMIT_OVERRIDES = "permit-overrides",
    ORDERED_DENY_OVERRIDES = "ordered-deny-overrides",
    ORDERED_PERMIT_OVERRIDES = "ordered-permit-overrides",
    DENY_UNLESS_PERMIT = "deny-unless-permit",
    PERMIT_UNLESS_DENY = "permit-unless-deny"
}
/**
 * deny | permit
 * deny | permit.
 */
export declare enum PermissionProvisionType {
    DENY = "deny",
    PERMIT = "permit"
}
/**
 * instance | related | dependents | authoredby
 * How the resource reference is interpreted when testing consent restrictions.
 */
export declare enum PermissionConsentDataMeaning {
    INSTANCE = "instance",
    RELATED = "related",
    DEPENDENTS = "dependents",
    AUTHOREDBY = "authoredby"
}
/**
 * male | female | other | unknown
 * Administrative Gender.
 * The gender might not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though a clear majority of systems and contexts only support M and F.
 */
export declare enum PersonAdministrativeGender {
    MALE = "male",
    FEMALE = "female",
    OTHER = "other",
    UNKNOWN = "unknown"
}
/**
 * level1 | level2 | level3 | level4
 * Level of assurance that this link is associated with the target resource.
 */
export declare enum PersonIdentityAssuranceLevel {
    LEVEL1 = "level1",
    LEVEL2 = "level2",
    LEVEL3 = "level3",
    LEVEL4 = "level4"
}
/**
 * draft | active | retired | unknown
 * The status of this plan definition. Enables tracking the life-cycle of the content.
 * Allows filtering of plan definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum PlanDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
 * The type of participant in the action.
 */
export declare enum PlanDefinitionActivityParticipantType {
    CARETEAM = "careteam",
    DEVICE = "device",
    GROUP = "group",
    HEALTHCARESERVICE = "healthcareservice",
    LOCATION = "location",
    ORGANIZATION = "organization",
    PATIENT = "patient",
    PRACTITIONER = "practitioner",
    PRACTITIONERROLE = "practitionerrole",
    RELATEDPERSON = "relatedperson"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the action should be addressed with respect to other actions.
 */
export declare enum PlanDefinitionRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * applicability | start | stop
 * The kind of condition.
 * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
 */
export declare enum PlanDefinitionActionConditionKind {
    APPLICABILITY = "applicability",
    START = "start",
    STOP = "stop"
}
/**
 * before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
 * The relationship of the start of this action to the related action.
 */
export declare enum PlanDefinitionActionRelationshipType {
    BEFORE = "before",
    BEFORE_START = "before-start",
    BEFORE_END = "before-end",
    CONCURRENT = "concurrent",
    CONCURRENT_WITH_START = "concurrent-with-start",
    CONCURRENT_WITH_END = "concurrent-with-end",
    AFTER = "after",
    AFTER_START = "after-start",
    AFTER_END = "after-end"
}
/**
 * visual-group | logical-group | sentence-group
 * Defines the grouping behavior for the action and its children.
 */
export declare enum PlanDefinitionActionGroupingBehavior {
    VISUAL_GROUP = "visual-group",
    LOGICAL_GROUP = "logical-group",
    SENTENCE_GROUP = "sentence-group"
}
/**
 * any | all | all-or-none | exactly-one | at-most-one | one-or-more
 * Defines the selection behavior for the action and its children.
 */
export declare enum PlanDefinitionActionSelectionBehavior {
    ANY = "any",
    ALL = "all",
    ALL_OR_NONE = "all-or-none",
    EXACTLY_ONE = "exactly-one",
    AT_MOST_ONE = "at-most-one",
    ONE_OR_MORE = "one-or-more"
}
/**
 * must | could | must-unless-documented
 * Defines the required behavior for the action.
 */
export declare enum PlanDefinitionActionRequiredBehavior {
    MUST = "must",
    COULD = "could",
    MUST_UNLESS_DOCUMENTED = "must-unless-documented"
}
/**
 * yes | no
 * Defines whether the action should usually be preselected.
 */
export declare enum PlanDefinitionActionPrecheckBehavior {
    YES = "yes",
    NO = "no"
}
/**
 * single | multiple
 * Defines whether the action can be selected multiple times.
 */
export declare enum PlanDefinitionActionCardinalityBehavior {
    SINGLE = "single",
    MULTIPLE = "multiple"
}
/**
 * male | female | other | unknown
 * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
 */
export declare enum PractitionerAdministrativeGender {
    MALE = "male",
    FEMALE = "female",
    OTHER = "other",
    UNKNOWN = "unknown"
}
/**
 * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
 * A code specifying the state of the procedure. Generally, this will be the in-progress or completed state.
 * The "unknown" code is not to be used to convey other statuses.  The "unknown" code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ProcedureStatus {
    PREPARATION = "preparation",
    IN_PROGRESS = "in-progress",
    NOT_DONE = "not-done",
    ON_HOLD = "on-hold",
    STOPPED = "stopped",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * revision | quotation | source | instantiates | removal
 * How the entity was used during the activity.
 */
export declare enum ProvenanceEntityRole {
    REVISION = "revision",
    QUOTATION = "quotation",
    SOURCE = "source",
    INSTANTIATES = "instantiates",
    REMOVAL = "removal"
}
/**
 * draft | active | retired | unknown
 * The current state of this questionnaire.
 * A nominal state-transition diagram can be found in the] documentation

Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum QuestionnairePublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * exists | = | != | > | < | >= | <=
 * Specifies the criteria by which the question is enabled.
 */
export declare enum QuestionnaireItemOperator {
    EXISTS = "exists",
    E = "=",
    NE = "!=",
    GT = ">",
    LT = "<",
    GE = ">=",
    LE = "<="
}
/**
 * all | any
 * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
 * This element must be specified if more than one enableWhen value is provided.
 */
export declare enum QuestionnaireEnableWhenBehavior {
    ALL = "all",
    ANY = "any"
}
/**
 * hidden | protected
 * Indicates if and how items that are disabled (because enableWhen evaluates to 'false') should be displayed.
 * If not specified, rendering behavior is up to the client.  This element is only meaningful if enableWhen or an equivalent extension is present
 */
export declare enum QuestionnaireDisabledDisplay {
    HIDDEN = "hidden",
    PROTECTED = "protected"
}
/**
 * optionsOnly | optionsOrType | optionsOrString
 * For items that have a defined set of allowed answers (via answerOption or answerValueSet), indicates whether values *other* than those specified can be selected.
 */
export declare enum QuestionnaireAnswerConstraint {
    OPTIONSONLY = "optionsOnly",
    OPTIONSORTYPE = "optionsOrType",
    OPTIONSORSTRING = "optionsOrString"
}
/**
 * in-progress | completed | amended | entered-in-error | stopped
 * The current state of the questionnaire response.
 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
 */
export declare enum QuestionnaireResponseStatus {
    IN_PROGRESS = "in-progress",
    COMPLETED = "completed",
    AMENDED = "amended",
    ENTERED_IN_ERROR = "entered-in-error",
    STOPPED = "stopped"
}
/**
 * male | female | other | unknown
 * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
 */
export declare enum RelatedPersonAdministrativeGender {
    MALE = "male",
    FEMALE = "female",
    OTHER = "other",
    UNKNOWN = "unknown"
}
/**
 * draft | active | on-hold | revoked | completed | entered-in-error | unknown
 * The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration.
 */
export declare enum RequestOrchestrationRequestStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    REVOKED = "revoked",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
 * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
 */
export declare enum RequestOrchestrationRequestIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    DIRECTIVE = "directive",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the request should be addressed with respect to other requests.
 */
export declare enum RequestOrchestrationRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * applicability | start | stop
 * The kind of condition.
 * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
 */
export declare enum RequestOrchestrationActionConditionKind {
    APPLICABILITY = "applicability",
    START = "start",
    STOP = "stop"
}
/**
 * before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
 * The relationship of this action to the related action.
 */
export declare enum RequestOrchestrationActionRelationshipType {
    BEFORE = "before",
    BEFORE_START = "before-start",
    BEFORE_END = "before-end",
    CONCURRENT = "concurrent",
    CONCURRENT_WITH_START = "concurrent-with-start",
    CONCURRENT_WITH_END = "concurrent-with-end",
    AFTER = "after",
    AFTER_START = "after-start",
    AFTER_END = "after-end"
}
/**
 * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
 * The type of participant in the action.
 */
export declare enum RequestOrchestrationActivityParticipantType {
    CARETEAM = "careteam",
    DEVICE = "device",
    GROUP = "group",
    HEALTHCARESERVICE = "healthcareservice",
    LOCATION = "location",
    ORGANIZATION = "organization",
    PATIENT = "patient",
    PRACTITIONER = "practitioner",
    PRACTITIONERROLE = "practitionerrole",
    RELATEDPERSON = "relatedperson"
}
/**
 * visual-group | logical-group | sentence-group
 * Defines the grouping behavior for the action and its children.
 */
export declare enum RequestOrchestrationActionGroupingBehavior {
    VISUAL_GROUP = "visual-group",
    LOGICAL_GROUP = "logical-group",
    SENTENCE_GROUP = "sentence-group"
}
/**
 * any | all | all-or-none | exactly-one | at-most-one | one-or-more
 * Defines the selection behavior for the action and its children.
 */
export declare enum RequestOrchestrationActionSelectionBehavior {
    ANY = "any",
    ALL = "all",
    ALL_OR_NONE = "all-or-none",
    EXACTLY_ONE = "exactly-one",
    AT_MOST_ONE = "at-most-one",
    ONE_OR_MORE = "one-or-more"
}
/**
 * must | could | must-unless-documented
 * Defines expectations around whether an action is required.
 */
export declare enum RequestOrchestrationActionRequiredBehavior {
    MUST = "must",
    COULD = "could",
    MUST_UNLESS_DOCUMENTED = "must-unless-documented"
}
/**
 * yes | no
 * Defines whether the action should usually be preselected.
 */
export declare enum RequestOrchestrationActionPrecheckBehavior {
    YES = "yes",
    NO = "no"
}
/**
 * single | multiple
 * Defines whether the action can be selected multiple times.
 */
export declare enum RequestOrchestrationActionCardinalityBehavior {
    SINGLE = "single",
    MULTIPLE = "multiple"
}
/**
 * draft | active | retired | unknown
 * The status of this Requirements. Enables tracking the life-cycle of the content.
 * Allows filtering of Requirements that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum RequirementsPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * SHALL | SHOULD | MAY | SHOULD-NOT
 * A short human usable label for this statement.
 * The conformance code is extracted from the requirement to make indexing and display easier. The requirement needs to express the conformance verbs directly in the markdown content. It's not unusual to mix verbs in a single sentence (e.g. System SHALL do X and SHOULD do Y)
 */
export declare enum RequirementsStatementConformance {
    SHALL = "SHALL",
    SHOULD = "SHOULD",
    MAY = "MAY",
    SHOULD_NOT = "SHOULD-NOT"
}
/**
 * draft | active | retired | unknown
 * The publication state of the resource (not of the study).
 */
export declare enum ResearchStudyPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The publication state of the resource (not of the subject).
 */
export declare enum ResearchSubjectPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * draft | active | retired | unknown
 * The status of this search parameter. Enables tracking the life-cycle of the content.
 * Allows filtering of search parameters that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum SearchParameterPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * number | date | string | token | reference | composite | quantity | uri | special
 * The type of value that a search parameter may contain, and how the content is interpreted.
 */
export declare enum SearchParameterSearchParamType {
    NUMBER = "number",
    DATE = "date",
    STRING = "string",
    TOKEN = "token",
    REFERENCE = "reference",
    COMPOSITE = "composite",
    QUANTITY = "quantity",
    URI = "uri",
    SPECIAL = "special"
}
/**
 * normal | phonetic | other
 * How the search parameter relates to the set of elements returned by evaluating the expression query.
 */
export declare enum SearchParameterSearchProcessingModeType {
    NORMAL = "normal",
    PHONETIC = "phonetic",
    OTHER = "other"
}
/**
 * eq | ne | gt | lt | ge | le | sa | eb | ap
 * Comparators supported for the search parameter.
 * If no comparators are listed, clients should not expect servers to support any comparators.
 */
export declare enum SearchParameterSearchComparator {
    EQ = "eq",
    NE = "ne",
    GT = "gt",
    LT = "lt",
    GE = "ge",
    LE = "le",
    SA = "sa",
    EB = "eb",
    AP = "ap"
}
/**
 * missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
 * A modifier supported for the search parameter.
 */
export declare enum SearchParameterSearchModifierCode {
    MISSING = "missing",
    EXACT = "exact",
    CONTAINS = "contains",
    NOT = "not",
    TEXT = "text",
    IN = "in",
    NOT_IN = "not-in",
    BELOW = "below",
    ABOVE = "above",
    TYPE = "type",
    IDENTIFIER = "identifier",
    OF_TYPE = "of-type",
    CODE_TEXT = "code-text",
    TEXT_ADVANCED = "text-advanced",
    ITERATE = "iterate"
}
/**
 * draft | active | on-hold | revoked | completed | entered-in-error | unknown
 * The status of the order.
 * The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, revoked or placed on-hold. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.
 */
export declare enum ServiceRequestStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    ON_HOLD = "on-hold",
    REVOKED = "revoked",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
 */
export declare enum ServiceRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * busy | free | busy-unavailable | busy-tentative | entered-in-error
 * busy | free | busy-unavailable | busy-tentative | entered-in-error.
 */
export declare enum SlotStatus {
    BUSY = "busy",
    FREE = "free",
    BUSY_UNAVAILABLE = "busy-unavailable",
    BUSY_TENTATIVE = "busy-tentative",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * available | unavailable | unsatisfactory | entered-in-error
 * The availability of the specimen.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum SpecimenStatus {
    AVAILABLE = "available",
    UNAVAILABLE = "unavailable",
    UNSATISFACTORY = "unsatisfactory",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * grouped | pooled
 * This element signifies if the specimen is part of a group or pooled.
 */
export declare enum SpecimenPublicationStatus {
    GROUPED = "grouped",
    POOLED = "pooled"
}
/**
 * draft | active | retired | unknown
 * The current state of theSpecimenDefinition.
 * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum SpecimenDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * preferred | alternate
 * The preference for this type of conditioned specimen.
 */
export declare enum SpecimenDefinitionSpecimenContainedPreference {
    PREFERRED = "preferred",
    ALTERNATE = "alternate"
}
/**
 * draft | active | retired | unknown
 * The status of this structure definition. Enables tracking the life-cycle of the content.
 * Allows filtering of structure definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum StructureDefinitionPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * primitive-type | complex-type | resource | logical
 * Defines the kind of structure that this definition is describing.
 */
export declare enum StructureDefinitionKind {
    PRIMITIVE_TYPE = "primitive-type",
    COMPLEX_TYPE = "complex-type",
    RESOURCE = "resource",
    LOGICAL = "logical"
}
/**
 * fhirpath | element | extension
 * Defines how to interpret the expression that defines what the context of the extension is.
 */
export declare enum StructureDefinitionExtensionContextType {
    FHIRPATH = "fhirpath",
    ELEMENT = "element",
    EXTENSION = "extension"
}
/**
 * specialization | constraint - How relates to base definition
 * How the type relates to the baseDefinition.
 * If the definition is a specialization, then it adds to the differential new elements and optionally additional rules to an existing concrete type, and the snapshot includes the inherited elements and rules.  If the definition is a constraint, then it cannot define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
 */
export declare enum StructureDefinitionTypeDerivationRule {
    SPECIALIZATION = "specialization",
    CONSTRAINT = "constraint"
}
/**
 * draft | active | retired | unknown
 * The status of this structure map. Enables tracking the life-cycle of the content.
 * Allows filtering of structure maps that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum StructureMapPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * source | queried | target | produced
 * How the referenced structure is used in this mapping.
 */
export declare enum StructureMapModelMode {
    SOURCE = "source",
    QUERIED = "queried",
    TARGET = "target",
    PRODUCED = "produced"
}
/**
 * types | type-and-types
 * If this is the default rule set to apply for the source type or this combination of types.
 * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
 */
export declare enum StructureMapGroupTypeMode {
    TYPES = "types",
    TYPE_AND_TYPES = "type-and-types"
}
/**
 * source | target
 * Mode for this instance of data.
 */
export declare enum StructureMapInputMode {
    SOURCE = "source",
    TARGET = "target"
}
/**
 * first | not_first | last | not_last | only_one
 * How to handle the list mode for this element.
 */
export declare enum StructureMapSourceListMode {
    FIRST = "first",
    NOT_FIRST = "not_first",
    LAST = "last",
    NOT_LAST = "not_last",
    ONLY_ONE = "only_one"
}
/**
 * first | share | last | single
 * If field is a list, how to manage the list.
 */
export declare enum StructureMapTargetListMode {
    FIRST = "first",
    SHARE = "share",
    LAST = "last",
    SINGLE = "single"
}
/**
 * requested | active | error | off | entered-in-error
 * The status of the subscription, which marks the server state for managing the subscription.
 * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum SubscriptionStatusCodes {
    REQUESTED = "requested",
    ACTIVE = "active",
    ERROR = "error",
    OFF = "off",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * eq | ne | gt | lt | ge | le | sa | eb | ap
 * Comparator applied to this filter parameter.
 * Must be a comparator allowed by the SubscriptionTopic relevant to this Subscription filter.
 */
export declare enum SubscriptionSearchComparator {
    EQ = "eq",
    NE = "ne",
    GT = "gt",
    LT = "lt",
    GE = "ge",
    LE = "le",
    SA = "sa",
    EB = "eb",
    AP = "ap"
}
/**
 * missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
 * Modifier applied to this filter parameter.
 * Must be a modifier allowed by the SubscriptionTopic relevant to this Subscription filter.
 */
export declare enum SubscriptionSearchModifierCode {
    MISSING = "missing",
    EXACT = "exact",
    CONTAINS = "contains",
    NOT = "not",
    TEXT = "text",
    IN = "in",
    NOT_IN = "not-in",
    BELOW = "below",
    ABOVE = "above",
    TYPE = "type",
    IDENTIFIER = "identifier",
    OF_TYPE = "of-type",
    CODE_TEXT = "code-text",
    TEXT_ADVANCED = "text-advanced",
    ITERATE = "iterate"
}
/**
 * empty | id-only | full-resource
 * How much of the resource content to deliver in the notification payload. The choices are an empty payload, only the resource id, or the full resource content.
 * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.
 */
export declare enum SubscriptionPayloadContent {
    EMPTY = "empty",
    ID_ONLY = "id-only",
    FULL_RESOURCE = "full-resource"
}
/**
 * requested | active | error | off | entered-in-error
 * The status of the subscription, which marks the server state for managing the subscription.
 */
export declare enum SubscriptionStatusSubscriptionStatus {
    REQUESTED = "requested",
    ACTIVE = "active",
    ERROR = "error",
    OFF = "off",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * handshake | heartbeat | event-notification | query-status | query-event
 * The type of event being conveyed with this notification.
 */
export declare enum SubscriptionStatusSubscriptionNotificationType {
    HANDSHAKE = "handshake",
    HEARTBEAT = "heartbeat",
    EVENT_NOTIFICATION = "event-notification",
    QUERY_STATUS = "query-status",
    QUERY_EVENT = "query-event"
}
/**
 * draft | active | retired | unknown
 * The current state of the SubscriptionTopic.
 * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation

Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum SubscriptionTopicPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * create | update | delete
 * The FHIR RESTful interaction which can be used to trigger a notification for the SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE). If not present, all supported interactions are assumed.
 */
export declare enum SubscriptionTopicMethodCode {
    CREATE = "create",
    UPDATE = "update",
    DELETE = "delete"
}
/**
 * test-passes | test-fails
 * For `create` interactions, should the `previous` criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `create` interactions is unspecified (server discretion).
 */
export declare enum SubscriptionTopicCriteriaNotExistsBehavior {
    TEST_PASSES = "test-passes",
    TEST_FAILS = "test-fails"
}
/**
 * eq | ne | gt | lt | ge | le | sa | eb | ap
 * Comparators allowed for the filter parameter.
 * If no comparators are listed, clients should not expect servers to support any comparators.
 */
export declare enum SubscriptionTopicSearchComparator {
    EQ = "eq",
    NE = "ne",
    GT = "gt",
    LT = "lt",
    GE = "ge",
    LE = "le",
    SA = "sa",
    EB = "eb",
    AP = "ap"
}
/**
 * missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
 * Modifiers allowed for the filter parameter.
 * If no modifiers are listed, clients should not expect servers to support any modifiers.
 */
export declare enum SubscriptionTopicSearchModifierCode {
    MISSING = "missing",
    EXACT = "exact",
    CONTAINS = "contains",
    NOT = "not",
    TEXT = "text",
    IN = "in",
    NOT_IN = "not-in",
    BELOW = "below",
    ABOVE = "above",
    TYPE = "type",
    IDENTIFIER = "identifier",
    OF_TYPE = "of-type",
    CODE_TEXT = "code-text",
    TEXT_ADVANCED = "text-advanced",
    ITERATE = "iterate"
}
/**
 * active | inactive | entered-in-error
 * A code to indicate if the substance is actively used.
 */
export declare enum SubstanceFHIRSubstanceStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * in-progress | completed | abandoned | entered-in-error
 * A code specifying the state of the dispense event.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum SupplyDeliveryStatus {
    IN_PROGRESS = "in-progress",
    COMPLETED = "completed",
    ABANDONED = "abandoned",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
 */
export declare enum SupplyRequestRequestPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
 * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
 * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.

In most cases, Tasks will have an intent of "order".
 */
export declare enum TaskIntent {
    UNKNOWN = "unknown",
    PROPOSAL = "proposal",
    PLAN = "plan",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the Task should be addressed with respect to other requests.
 */
export declare enum TaskPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * draft | active | retired | unknown
 * The status of this terminology capabilities. Enables tracking the life-cycle of the content.
 * Allows filtering of terminology capabilitiess that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum TerminologyCapabilitiesPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * instance | capability | requirements
 * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
 */
export declare enum TerminologyCapabilitiesCapabilityStatementKind {
    INSTANCE = "instance",
    CAPABILITY = "capability",
    REQUIREMENTS = "requirements"
}
/**
 * not-present | example | fragment | complete | supplement
 * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
 */
export declare enum TerminologyCapabilitiesCodeSystemContentMode {
    NOT_PRESENT = "not-present",
    EXAMPLE = "example",
    FRAGMENT = "fragment",
    COMPLETE = "complete",
    SUPPLEMENT = "supplement"
}
/**
 * in-compose | in-expansion | in-compose-or-expansion
 * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
 * See notes on the [ValueSet](valueset.html#) resource.
 */
export declare enum TerminologyCapabilitiesCodeSearchSupport {
    IN_COMPOSE = "in-compose",
    IN_EXPANSION = "in-expansion",
    IN_COMPOSE_OR_EXPANSION = "in-compose-or-expansion"
}
/**
 * draft | active | retired | unknown
 * The status of this test plan. Enables tracking the life-cycle of the content.
 * Allows filtering of test plans that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum TestPlanPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * completed | in-progress | waiting | stopped | entered-in-error
 * The current state of this test report.
 * The status represents where the execution is currently within the test script execution life cycle.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum TestReportStatus {
    COMPLETED = "completed",
    IN_PROGRESS = "in-progress",
    WAITING = "waiting",
    STOPPED = "stopped",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * pass | fail | pending
 * The overall result from the execution of the TestScript.
 * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
 */
export declare enum TestReportResult {
    PASS = "pass",
    FAIL = "fail",
    PENDING = "pending"
}
/**
 * test-engine | client | server
 * The type of participant.
 */
export declare enum TestReportParticipantType {
    TEST_ENGINE = "test-engine",
    CLIENT = "client",
    SERVER = "server"
}
/**
 * pass | skip | fail | warning | error
 * The result of this operation.
 */
export declare enum TestReportActionResult {
    PASS = "pass",
    SKIP = "skip",
    FAIL = "fail",
    WARNING = "warning",
    ERROR = "error"
}
/**
 * draft | active | retired | unknown
 * The status of this test script. Enables tracking the life-cycle of the content.
 * Allows filtering of test scripts that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum TestScriptPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * delete | get | options | patch | post | put | head
 * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
 * The primary purpose of the explicit HTTP method is support of  HTTP POST method invocation of the FHIR search. Other uses will include support of negative testing.
 */
export declare enum TestScriptRequestMethodCode {
    DELETE = "delete",
    GET = "get",
    OPTIONS = "options",
    PATCH = "patch",
    POST = "post",
    PUT = "put",
    HEAD = "head"
}
/**
 * response | request
 * The direction to use for the assertion.
 * If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
 */
export declare enum TestScriptAssertionDirectionType {
    RESPONSE = "response",
    REQUEST = "request"
}
/**
 * fail | pass | skip | stop
 * The default manual completion outcome applied to this assertion.
 * Manual completion is used to pause the test engine execution and evaluation allowing an external review of the defined assert condition. The defaultManualCompletion defines the default manual completion outcome applied if one of the enumerated values is not applied.
 */
export declare enum TestScriptAssertionManualCompletionType {
    FAIL = "fail",
    PASS = "pass",
    SKIP = "skip",
    STOP = "stop"
}
/**
 * equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval | manualEval
 * The operator type defines the conditional behavior of the assert.
 * Operators are useful for both positive and negative testing. If operator is not specified, then the default conditional behavior is implemented as defined in [Testing FHIR Assertions](testing.html#assertion-table).
 */
export declare enum TestScriptAssertionOperatorType {
    EQUALS = "equals",
    NOTEQUALS = "notEquals",
    IN = "in",
    NOTIN = "notIn",
    GREATERTHAN = "greaterThan",
    LESSTHAN = "lessThan",
    EMPTY = "empty",
    NOTEMPTY = "notEmpty",
    CONTAINS = "contains",
    NOTCONTAINS = "notContains",
    EVAL = "eval",
    MANUALEVAL = "manualEval"
}
/**
 * continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported
 * continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported.
 * This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
 */
export declare enum TestScriptAssertionResponseTypes {
    CONTINUE = "continue",
    SWITCHINGPROTOCOLS = "switchingProtocols",
    OKAY = "okay",
    CREATED = "created",
    ACCEPTED = "accepted",
    NONAUTHORITATIVEINFORMATION = "nonAuthoritativeInformation",
    NOCONTENT = "noContent",
    RESETCONTENT = "resetContent",
    PARTIALCONTENT = "partialContent",
    MULTIPLECHOICES = "multipleChoices",
    MOVEDPERMANENTLY = "movedPermanently",
    FOUND = "found",
    SEEOTHER = "seeOther",
    NOTMODIFIED = "notModified",
    USEPROXY = "useProxy",
    TEMPORARYREDIRECT = "temporaryRedirect",
    PERMANENTREDIRECT = "permanentRedirect",
    BADREQUEST = "badRequest",
    UNAUTHORIZED = "unauthorized",
    PAYMENTREQUIRED = "paymentRequired",
    FORBIDDEN = "forbidden",
    NOTFOUND = "notFound",
    METHODNOTALLOWED = "methodNotAllowed",
    NOTACCEPTABLE = "notAcceptable",
    PROXYAUTHENTICATIONREQUIRED = "proxyAuthenticationRequired",
    REQUESTTIMEOUT = "requestTimeout",
    CONFLICT = "conflict",
    GONE = "gone",
    LENGTHREQUIRED = "lengthRequired",
    PRECONDITIONFAILED = "preconditionFailed",
    CONTENTTOOLARGE = "contentTooLarge",
    URITOOLONG = "uriTooLong",
    UNSUPPORTEDMEDIATYPE = "unsupportedMediaType",
    RANGENOTSATISFIABLE = "rangeNotSatisfiable",
    EXPECTATIONFAILED = "expectationFailed",
    MISDIRECTEDREQUEST = "misdirectedRequest",
    UNPROCESSABLECONTENT = "unprocessableContent",
    UPGRADEREQUIRED = "upgradeRequired",
    INTERNALSERVERERROR = "internalServerError",
    NOTIMPLEMENTED = "notImplemented",
    BADGATEWAY = "badGateway",
    SERVICEUNAVAILABLE = "serviceUnavailable",
    GATEWAYTIMEOUT = "gatewayTimeout",
    HTTPVERSIONNOTSUPPORTED = "httpVersionNotSupported"
}
/**
 * in-progress | completed | abandoned | cancelled | planned | entered-in-error
 * A code specifying the state of the transport event.
 */
export declare enum TransportStatus {
    IN_PROGRESS = "in-progress",
    COMPLETED = "completed",
    ABANDONED = "abandoned",
    CANCELLED = "cancelled",
    PLANNED = "planned",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
 * Indicates the "level" of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc.
 * This element is immutable.  Proposed transports, planned transports, etc. must be distinct instances.

In most cases, Transports will have an intent of "order".
 */
export declare enum TransportIntent {
    UNKNOWN = "unknown",
    PROPOSAL = "proposal",
    PLAN = "plan",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * routine | urgent | asap | stat
 * Indicates how quickly the Transport should be addressed with respect to other requests.
 */
export declare enum TransportPriority {
    ROUTINE = "routine",
    URGENT = "urgent",
    ASAP = "asap",
    STAT = "stat"
}
/**
 * draft | active | retired | unknown
 * The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
 * Allows filtering of value sets that are appropriate for use versus not.See also the [http://hl7.org/fhir/StructureDefinition/valueset-workflowStatusDescription](http://hl7.org/fhir/extensions/StructureDefinition-valueset-workflowStatusDescription.html) extension for additional status information related to the editorial process.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
 */
export declare enum ValueSetPublicationStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    RETIRED = "retired",
    UNKNOWN = "unknown"
}
/**
 * = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | child-of | descendent-leaf | exists
 * The kind of operation to perform as a part of the filter criteria.
 * In case filter.property represents a property of the system, the operation applies to the selected property. In case filter.property represents a filter of the system, the operation SHALL match one of the CodeSystem.filter.operator values.
 */
export declare enum ValueSetFilterOperator {
    E = "=",
    IS_A = "is-a",
    DESCENDENT_OF = "descendent-of",
    IS_NOT_A = "is-not-a",
    REGEX = "regex",
    IN = "in",
    NOT_IN = "not-in",
    GENERALIZES = "generalizes",
    CHILD_OF = "child-of",
    DESCENDENT_LEAF = "descendent-leaf",
    EXISTS = "exists"
}
/**
 * attested | validated | in-process | req-revalid | val-fail | reval-fail | entered-in-error
 * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
 */
export declare enum VerificationResultstatus {
    ATTESTED = "attested",
    VALIDATED = "validated",
    IN_PROCESS = "in-process",
    REQ_REVALID = "req-revalid",
    VAL_FAIL = "val-fail",
    REVAL_FAIL = "reval-fail",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * active | cancelled | draft | entered-in-error
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum VisionPrescriptionVisionStatus {
    ACTIVE = "active",
    CANCELLED = "cancelled",
    DRAFT = "draft",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * right | left
 * The eye for which the lens specification applies.
 * May also appear on the paper claim form or in the Medical Records as as OD (oculus dexter) for the right eye and OS (oculus sinister) for the left eye.
 */
export declare enum VisionPrescriptionVisionEyes {
    RIGHT = "right",
    LEFT = "left"
}
/**
 * up | down | in | out
 * The relative base, or reference lens edge, for the prism.
 */
export declare enum VisionPrescriptionVisionBase {
    UP = "up",
    DOWN = "down",
    IN = "in",
    OUT = "out"
}
/**
 * registered | preliminary | final | amended | corrected | cancelled | entered-in-error | unknown
 * The status of the result value.
 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
 */
export declare enum ObservationStatus {
    REGISTERED = "registered",
    PRELIMINARY = "preliminary",
    FINAL = "final",
    AMENDED = "amended",
    CORRECTED = "corrected",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated
 * amended | appended | cancelled | disputed | entered-in-error | executable +.
 */
export declare enum ContractPublicationStatus {
    AMENDED = "amended",
    APPENDED = "appended",
    CANCELLED = "cancelled",
    DISPUTED = "disputed",
    ENTERED_IN_ERROR = "entered-in-error",
    EXECUTABLE = "executable",
    EXECUTED = "executed",
    NEGOTIABLE = "negotiable",
    OFFERED = "offered",
    POLICY = "policy",
    REJECTED = "rejected",
    RENEWED = "renewed",
    REVOKED = "revoked",
    RESOLVED = "resolved",
    TERMINATED = "terminated"
}
/**
 * registered | preliminary | final | amended | corrected | cancelled | entered-in-error | unknown
 * The status of the RiskAssessment, using the same statuses as an Observation.
 */
export declare enum RiskAssessmentStatus {
    REGISTERED = "registered",
    PRELIMINARY = "preliminary",
    FINAL = "final",
    AMENDED = "amended",
    CORRECTED = "corrected",
    CANCELLED = "cancelled",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
 * Whether the request is a proposal, plan, an original order or a reflex order.
 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
 */
export declare enum ServiceRequestIntent {
    PROPOSAL = "proposal",
    PLAN = "plan",
    DIRECTIVE = "directive",
    ORDER = "order",
    ORIGINAL_ORDER = "original-order",
    REFLEX_ORDER = "reflex-order",
    FILLER_ORDER = "filler-order",
    INSTANCE_ORDER = "instance-order",
    OPTION = "option"
}
/**
 * draft | requested | received | accepted | rejected | ready | cancelled | in-progress | on-hold | failed | completed | entered-in-error
 * The current status of the task.
 */
export declare enum TaskStatus {
    DRAFT = "draft",
    REQUESTED = "requested",
    RECEIVED = "received",
    ACCEPTED = "accepted",
    REJECTED = "rejected",
    READY = "ready",
    CANCELLED = "cancelled",
    IN_PROGRESS = "in-progress",
    ON_HOLD = "on-hold",
    FAILED = "failed",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error"
}
/**
 * group | display | question | boolean | decimal | integer | date | dateTime | time | string | text | url | coding | attachment | reference | quantity
 * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, Coding, etc.).
 * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
 */
export declare enum QuestionnaireItemType {
    GROUP = "group",
    DISPLAY = "display",
    QUESTION = "question",
    BOOLEAN = "boolean",
    DECIMAL = "decimal",
    INTEGER = "integer",
    DATE = "date",
    DATETIME = "dateTime",
    TIME = "time",
    STRING = "string",
    TEXT = "text",
    URL = "url",
    CODING = "coding",
    ATTACHMENT = "attachment",
    REFERENCE = "reference",
    QUANTITY = "quantity"
}
/**
 * amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
 */
export declare enum ContractStatus {
    AMENDED = "amended",
    APPENDED = "appended",
    CANCELLED = "cancelled",
    DISPUTED = "disputed",
    ENTERED_IN_ERROR = "entered-in-error",
    EXECUTABLE = "executable",
    EXECUTED = "executed",
    NEGOTIABLE = "negotiable",
    OFFERED = "offered",
    POLICY = "policy",
    REJECTED = "rejected",
    RENEWED = "renewed",
    REVOKED = "revoked",
    RESOLVED = "resolved",
    TERMINATED = "terminated"
}
/**
 * active | completed | not-done | entered-in-error | intended | stopped | on-hold
 * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
 * DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).

This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
 */
export declare enum DeviceUsageStatus {
    ACTIVE = "active",
    COMPLETED = "completed",
    NOT_DONE = "not-done",
    ENTERED_IN_ERROR = "entered-in-error",
    INTENDED = "intended",
    STOPPED = "stopped",
    ON_HOLD = "on-hold"
}
/**
 * create | copy | truncate | escape | cast | append | translate | reference | dateOp | uuid | pointer | evaluate | cc | c | qty | id | cp
 * How the data is copied / created.
 */
export declare enum StructureMapTransform {
    CREATE = "create",
    COPY = "copy",
    TRUNCATE = "truncate",
    ESCAPE = "escape",
    CAST = "cast",
    APPEND = "append",
    TRANSLATE = "translate",
    REFERENCE = "reference",
    DATEOP = "dateOp",
    UUID = "uuid",
    POINTER = "pointer",
    EVALUATE = "evaluate",
    CC = "cc",
    C = "c",
    QTY = "qty",
    ID = "id",
    CP = "cp"
}
/**
 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
 * Status of the supply request.
 */
export declare enum SupplyRequestStatus {
    DRAFT = "draft",
    ACTIVE = "active",
    SUSPENDED = "suspended",
    CANCELLED = "cancelled",
    COMPLETED = "completed",
    ENTERED_IN_ERROR = "entered-in-error",
    UNKNOWN = "unknown"
}
/**
 * A duration of time during which an organism (or a process) has existed
 * A duration of time during which an organism (or a process) has existed.
 */
export interface Age extends Quantity {
}
/**
 * Base for all types and resources
 * Base definition for all types defined in FHIR type system.
 */
export interface Base {
}
/**
 * A measured or measurable amount
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Count extends Quantity {
}
/**
 * Reuseable Types
 * The base class for all re-useable types defined as part of the FHIR Specification.
 */
export interface DataType extends Element {
}
/**
 * A length - a value with a unit that is a physical distance
 * A length - a value with a unit that is a physical distance.
 */
export interface Distance extends Quantity {
}
/**
 * A length of time
 * A length of time.
 */
export interface Duration extends Quantity {
}
/**
 * An amount of money. With regard to precision, see [Decimal Precision](datatypes.html#precision)
 * There SHALL be a code if there is a value and it SHALL be an expression of currency.  If system is present, it SHALL be ISO 4217 (system = "urn:iso:std:iso:4217" - currency).
 */
export interface MoneyQuantity extends Quantity {
}
/**
 * Parent type for DataTypes with a simple value
 * The base type for all re-useable types defined that have a simple property.
 */
export interface PrimitiveType extends DataType {
}
/**
 * Text node with attribution
 * A  text note which also  contains information about who made the statement and when.
 * For systems that do not have structured annotations, they can simply communicate a single annotation with no author or time.  This element may need to be included in narrative because of the potential for modifying information.  *Annotations SHOULD NOT* be used to communicate "modifying" information that could be computable. (This is a SHOULD because enforcing user behavior is nearly impossible).
 */
export interface Annotation extends DataType {
    /**
     * Individual responsible for the annotation
     * The individual responsible for making the annotation.
     * Organization is used when there's no need for specific attribution as to who made the comment.
     */
    authorReference?: Reference;
    /**
     * Individual responsible for the annotation
     * The individual responsible for making the annotation.
     * Organization is used when there's no need for specific attribution as to who made the comment.
     */
    authorString?: string;
    /**
     * Extension for authorString
     **/
    _authorString?: Element;
    /**
     * When the annotation was made
     * Indicates when this particular annotation was made.
     */
    time?: dateTime;
    /**
     * Extension for time
     **/
    _time?: Element;
    /**
     * The annotation  - text content (as markdown)
     * The text of the annotation in markdown format.
     */
    text: markdown;
    /**
     * Extension for text
     **/
    _text?: Element;
}
/**
 * Content in a format defined elsewhere
 * For referring to data content defined in other formats.
 * When providing a summary view (for example with Observation.value[x]) Attachment should be represented with a brief display text such as "Signed Procedure Consent".
 */
export interface Attachment extends DataType {
    /**
     * Mime type of the content, with charset etc.
     * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
     */
    contentType?: code;
    /**
     * Extension for contentType
     **/
    _contentType?: Element;
    /**
     * Human language of the content (BCP-47)
     * The human language of the content. The value can be any valid value according to BCP 47.
     */
    language?: code;
    /**
     * Extension for language
     **/
    _language?: Element;
    /**
     * Data inline, base64ed
     * The actual data of the attachment - a sequence of bytes, base64 encoded.
     * The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
     */
    data?: base64Binary;
    /**
     * Extension for data
     **/
    _data?: Element;
    /**
     * Uri where the data can be found
     * A location where the data can be accessed.
     * If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
     */
    url?: url;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Number of bytes of content (if url provided)
     * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
     * The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
     */
    size?: integer64;
    /**
     * Extension for size
     **/
    _size?: Element;
    /**
     * Hash of the data (sha-1, base64ed)
     * The calculated hash of the data using SHA-1. Represented using base64.
     * The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded. The hash is not intended to support digital signatures. Where protection against malicious threats a digital signature should be considered, see [Provenance.signature](provenance-definitions.html#Provenance.signature) for mechanism to protect a resource with a digital signature.
     */
    hash?: base64Binary;
    /**
     * Extension for hash
     **/
    _hash?: Element;
    /**
     * Label to display in place of the data
     * A label or set of text to display in place of the data.
     * May sometimes be derived from the source filename.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Date attachment was first created
     * The date that the attachment was first created.
     */
    creation?: dateTime;
    /**
     * Extension for creation
     **/
    _creation?: Element;
    /**
     * Height of the image in pixels (photo/video)
     * Height of the image in pixels (photo/video).
     */
    height?: positiveInt;
    /**
     * Extension for height
     **/
    _height?: Element;
    /**
     * Width of the image in pixels (photo/video)
     * Width of the image in pixels (photo/video).
     */
    width?: positiveInt;
    /**
     * Extension for width
     **/
    _width?: Element;
    /**
     * Number of frames if > 1 (photo)
     * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
     * if the number of frames is not supplied, the value may be unknown. Applications should not assume that there is only one frame unless it is explicitly stated.
     */
    frames?: positiveInt;
    /**
     * Extension for frames
     **/
    _frames?: Element;
    /**
     * Length in seconds (audio / video)
     * The duration of the recording in seconds - for audio and video.
     * The duration might differ from occurrencePeriod if recording was paused.
     */
    duration?: decimal;
    /**
     * Extension for duration
     **/
    _duration?: Element;
    /**
     * Number of printed pages
     * The number of pages when printed.
     */
    pages?: positiveInt;
    /**
     * Extension for pages
     **/
    _pages?: Element;
}
/**
 * Base for elements defined inside a resource
 * Base definition for all elements that are defined inside a resource - but not those in a data type.
 */
export interface BackboneElement extends Element {
    /**
     * Extensions that cannot be ignored even if unrecognized
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
     */
    modifierExtension?: Extension[];
}
/**
 * Base for datatypes that can carry modifier extensions
 * Base definition for the few data types that are allowed to carry modifier extensions.
 */
export interface BackboneType extends DataType {
    /**
     * Extensions that cannot be ignored even if unrecognized
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
     */
    modifierExtension?: Extension[];
}
/**
 * Concept - reference to a terminology or just  text
 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
 * Not all terminology uses fit this general pattern. In some cases, models should not use CodeableConcept and use Coding directly and provide their own structure for managing text, codings, translations and the relationship between elements and pre- and post-coordination.
 */
export interface CodeableConcept extends DataType {
    /**
     * Code defined by a terminology system
     * A reference to a code defined by a terminology system.
     * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
     */
    coding?: Coding[];
    /**
     * Plain text representation of the concept
     * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
     * Very often the text is the same as a displayName of one of the codings.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
}
/**
 * Reference to a resource or a concept
 * A reference to a resource (by instance), or instead, a reference to a concept defined in a terminology or ontology (by class).
 */
export interface CodeableReference extends DataType {
    /**
     * Reference to a concept (by class)
     * A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.
     */
    concept?: CodeableConcept;
    /**
     * Reference to a resource (by instance)
     * A reference to a resource the provides exact details about the information being referenced.
     */
    reference?: Reference;
}
/**
 * A reference to a code defined by a terminology system
 * A reference to a code defined by a terminology system.
 * Codes may be defined very casually in enumerations or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.
 */
export interface Coding extends DataType {
    /**
     * Identity of the terminology system
     * The identification of the code system that defines the meaning of the symbol in the code.
     * The URI may be an OID (urn:oid:...) or a UUID (urn:uuid:...).  OIDs and UUIDs SHALL be references to the HL7 OID registry. Otherwise, the URI should come from HL7's list of FHIR defined special URIs or it should be an absolute reference to some definition that establishes the system clearly and unambiguously.
     */
    system?: uri;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * Version of the system - if relevant
     * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     * Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use the date (expressed in FHIR date format) on which that version was officially published as the version date.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Symbol in syntax defined by the system
     * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
     */
    code?: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Representation defined by the system
     * A representation of the meaning of the code in the system, following the rules of the system.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * If this coding was chosen directly by the user
     * Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
     * Amongst a set of alternatives, a directly chosen code is the most appropriate starting point for new translations. There is some ambiguity about what exactly 'directly chosen' implies, and trading partner agreement may be needed to clarify the use of this element and its consequences more completely.
     */
    userSelected?: boolean;
    /**
     * Extension for userSelected
     **/
    _userSelected?: Element;
}
/**
 * Contact information
 * Specifies contact information for a person or organization.
 */
export interface ContactDetail extends DataType {
    /**
     * Name of an individual to contact
     * The name of an individual to contact.
     * If there is no named individual, the telecom information is for the organization as a whole.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Contact details for individual or organization
     * The contact details for the individual (if a name was provided) or the organization.
     */
    telecom?: ContactPoint[];
}
/**
 * Amount of medication administered, to be administered or typical amount to be administered
 * Depending on the resource,this is the amount of medication administered, to  be administered or typical amount to be administered.
 */
export interface DosageDoseAndRate extends Element {
    /**
     * The kind of dose or rate specified
     * The kind of dose or rate specified, for example, ordered or calculated.
     */
    type?: CodeableConcept;
    /**
     * Amount of medication per dose
     * Amount of medication per dose.
     * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
     */
    doseRange?: Range;
    /**
     * Amount of medication per dose
     * Amount of medication per dose.
     * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
     */
    doseQuantity?: Quantity;
    /**
     * Amount of medication per unit of time
     * Amount of medication per unit of time.
     * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.

It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammar where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
     */
    rateRatio?: Ratio;
    /**
     * Amount of medication per unit of time
     * Amount of medication per unit of time.
     * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.

It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammar where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
     */
    rateRange?: Range;
    /**
     * Amount of medication per unit of time
     * Amount of medication per unit of time.
     * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.

It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammar where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
     */
    rateQuantity?: Quantity;
}
/**
 * How the medication is/was taken or should be taken
 * Indicates how the medication is/was taken or should be taken by the patient.
 */
export interface Dosage extends BackboneType {
    /**
     * The order of the dosage instructions
     * Indicates the order in which the dosage instructions should be applied or interpreted.
     */
    sequence?: integer;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Free text dosage instructions e.g. SIG
     * Free text dosage instructions e.g. SIG.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Supplemental instruction or warnings to the patient - e.g. "with meals", "may cause drowsiness"
     * Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
     * Information about administration or preparation of the medication (e.g. "infuse as rapidly as possibly via intraperitoneal port" or take "immediately following drug x") should be populated in dosage.text.
     */
    additionalInstruction?: CodeableConcept[];
    /**
     * Patient or consumer oriented instructions
     * Instructions in terms that are understood by the patient or consumer.
     */
    patientInstruction?: string;
    /**
     * Extension for patientInstruction
     **/
    _patientInstruction?: Element;
    /**
     * When medication should be administered
     * When medication should be administered.
     * This attribute might not always be populated while the Dosage.text is expected to be populated.  If both are populated, then the Dosage.text should reflect the content of the Dosage.timing.
     */
    timing?: Timing;
    /**
     * Take "as needed"
     * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option).
     * Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.
     */
    asNeeded?: boolean;
    /**
     * Extension for asNeeded
     **/
    _asNeeded?: Element;
    /**
     * Take "as needed" (for x)
     * Indicates whether the Medication is only taken based on a precondition for taking the Medication (CodeableConcept).
     * Can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be False, then the dose is given according to the schedule and is not "prn" or "as needed".
     */
    asNeededFor?: CodeableConcept[];
    /**
     * Body site to administer to
     * Body site to administer to.
     * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
     */
    site?: CodeableConcept;
    /**
     * How drug should enter body
     * How drug should enter body.
     */
    route?: CodeableConcept;
    /**
     * Technique for administering medication
     * Technique for administering medication.
     * Terminologies used often pre-coordinate this term with the route and or form of administration.
     */
    method?: CodeableConcept;
    /**
     * Amount of medication administered, to be administered or typical amount to be administered
     * Depending on the resource,this is the amount of medication administered, to  be administered or typical amount to be administered.
     */
    doseAndRate?: DosageDoseAndRate[];
    /**
     * Upper limit on medication per unit of time
     * Upper limit on medication per unit of time.
     * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example "2 tablets every 4 hours to a maximum of 8/day".
     */
    maxDosePerPeriod?: Ratio[];
    /**
     * Upper limit on medication per administration
     * Upper limit on medication per administration.
     * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example, a body surface area related dose with a maximum amount, such as 1.5 mg/m2 (maximum 2 mg) IV over 5 – 10 minutes would have doseQuantity of 1.5 mg/m2 and maxDosePerAdministration of 2 mg.
     */
    maxDosePerAdministration?: Quantity;
    /**
     * Upper limit on medication per lifetime of the patient
     * Upper limit on medication per lifetime of the patient.
     */
    maxDosePerLifetime?: Quantity;
}
/**
 * Base for all elements
 * Base definition for all elements in a resource.
 */
export interface Element extends Base {
    /**
     * Unique id for inter-element referencing
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    /**
     * Extension for id
     **/
    _id?: Element;
    /**
     * Additional content defined by implementations
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
     */
    extension?: Extension[];
}
/**
 * Contact information
 * Specifies contact information for a specific purpose over a period of time, might be handled/monitored by a specific named person or organization.
 * This datatype may be sparsely populated, i.e. only contain a purpose and phone number or address, but other cases could be completed filled out.
 */
export interface ExtendedContactDetail extends DataType {
    /**
     * The type of contact
     * The purpose/type of contact.
     * If no purpose is defined, then these contact details may be used for any purpose.
     */
    purpose?: CodeableConcept;
    /**
     * Name of an individual to contact
     * The name of an individual to contact, some types of contact detail are usually blank.
     * If there is no named individual, the telecom/address information is not generally monitored by a specific individual.
     */
    name?: HumanName[];
    /**
     * Contact details (e.g.phone/fax/url)
     * The contact details application for the purpose defined.
     */
    telecom?: ContactPoint[];
    /**
     * Address for the contact
     * Address for the contact.
     * More than 1 address would be for different purposes, and thus should be entered as a different entry,.
     */
    address?: Address;
    /**
     * This contact detail is handled/monitored by a specific organization
     * This contact detail is handled/monitored by a specific organization. If the name is provided in the contact, then it is referring to the named individual within this organization.
     */
    organization?: Reference;
    /**
     * Period that this contact was valid for usage
     * Period that this contact was valid for usage.
     * If the details have multiple periods, then enter in a new ExtendedContact with the new period.
     */
    period?: Period;
}
/**
 * Optional Extensions Element
 * Optional Extension Element - found in all resources.
 */
export interface Extension extends DataType {
    /**
     * identifies the meaning of the extension
     * Source of the definition for the extension code - a logical name or a URL.
     * The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.
     */
    url: string;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAddress?: Address;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAge?: Age;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAnnotation?: Annotation;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAttachment?: Attachment;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCoding?: Coding;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContactPoint?: ContactPoint;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCount?: Count;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDistance?: Distance;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDuration?: Duration;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueHumanName?: HumanName;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueIdentifier?: Identifier;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMoney?: Money;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePeriod?: Period;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueQuantity?: Quantity;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRange?: Range;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRatio?: Ratio;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRatioRange?: RatioRange;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueReference?: Reference;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueSampledData?: SampledData;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueSignature?: Signature;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTiming?: Timing;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContactDetail?: ContactDetail;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueExpression?: Expression;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUsageContext?: UsageContext;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAvailability?: Availability;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDosage?: Dosage;
    /**
     * Value of extension
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMeta?: Meta;
}
/**
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available
 * The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
 */
export interface MarketingStatus extends BackboneType {
    /**
     * The country in which the marketing authorization has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements
     * The country in which the marketing authorization has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
     */
    country?: CodeableConcept;
    /**
     * Where a Medicines Regulatory Agency has granted a marketing authorization for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified
     * Where a Medicines Regulatory Agency has granted a marketing authorization for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
     */
    jurisdiction?: CodeableConcept;
    /**
     * This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples
     * This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.
     */
    status: CodeableConcept;
    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain
     * The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
     */
    dateRange?: Period;
    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain
     * The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
     */
    restoreDate?: dateTime;
    /**
     * Extension for restoreDate
     **/
    _restoreDate?: Element;
}
/**
 * Metadata about a resource
 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
 */
export interface Meta extends DataType {
    /**
     * Version specific identifier
     * The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
     * The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
     */
    versionId?: id;
    /**
     * Extension for versionId
     **/
    _versionId?: Element;
    /**
     * When the resource version last changed
     * When the resource last changed - e.g. when the version changed.
     * This element is generally omitted in instances submitted in a PUT or POST. Instead, it is populated in the response instance and when retrieving information using a GET. The server / resource manager sets this value; what a client provides is irrelevant. This is equivalent to the HTTP Last-Modified and SHOULD have the same value on a [read](http.html#read) interaction.
     */
    lastUpdated?: instant;
    /**
     * Extension for lastUpdated
     **/
    _lastUpdated?: Element;
    /**
     * Identifies where the resource comes from
     * A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
     * The exact use of the source (and the possible implied Provenance.entity.role and agent.role) is left to implementer discretion. Only one nominated source is allowed; for additional provenance details, a full Provenance resource should be used. The source may correspond to Provenance.entity.what[x] or Provenance.agent.who[x], though it may be a more general or abstract reference.

This element can be used to indicate where the current master source of a resource that has a canonical URL if the resource is no longer hosted at the canonical URL.
     */
    source?: uri;
    /**
     * Extension for source
     **/
    _source?: Element;
    /**
     * Profiles this resource claims to conform to
     * A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).
     * It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
     */
    profile?: canonical[];
    /**
     * Extension for profile
     **/
    _profile?: Element[];
    /**
     * Security Labels applied to this resource
     * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
     * The security labels can be updated without changing the stated version of the resource. The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
     */
    security?: Coding[];
    /**
     * Tags applied to this resource
     * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
     * The tags can be updated without changing the stated version of the resource. The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
     */
    tag?: Coding[];
}
/**
 * An amount of economic utility in some recognized currency
 * An amount of economic utility in some recognized currency.
 */
export interface Money extends DataType {
    /**
     * Numerical value (with implicit precision)
     * Numerical value (with implicit precision).
     * Monetary values have their own rules for handling precision (refer to standard accounting text books).
     */
    value?: decimal;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * ISO 4217 Currency Code
     * ISO 4217 Currency Code.
     */
    currency?: code;
    /**
     * Extension for currency
     **/
    _currency?: Element;
}
/**
 * Time range defined by start and end date/time
 * A time period defined by a start and end date and optionally time.
 * A Period specifies a range of time; the context of use will specify whether the entire range applies (e.g. "the patient was an inpatient of the hospital for this time range") or one value from the range applies (e.g. "give to the patient between these two times").

Period is not used for a duration (a measure of elapsed time). See [Duration](datatypes.html#Duration).
 */
export interface Period extends DataType {
    /**
     * Starting time with inclusive boundary
     * The start of the period. The boundary is inclusive.
     * If the low element is missing, the meaning is that the low boundary is not known.
     */
    start?: dateTime;
    /**
     * Extension for start
     **/
    _start?: Element;
    /**
     * End time with inclusive boundary, if not ongoing
     * The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
     * The end value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
     */
    end?: dateTime;
    /**
     * Extension for end
     **/
    _end?: Element;
}
/**
 * The shelf-life and storage information for a medicinal product item or container can be described using this class
 * The shelf-life and storage information for a medicinal product item or container can be described using this class.
 */
export interface ProductShelfLife extends BackboneType {
    /**
     * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified
     * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    type?: CodeableConcept;
    /**
     * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used
     * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    periodDuration?: Duration;
    /**
     * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used
     * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    periodString?: string;
    /**
     * Extension for periodString
     **/
    _periodString?: Element;
    /**
     * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified
     * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    specialPrecautionsForStorage?: CodeableConcept[];
}
/**
 * Set of values bounded by low and high
 * A set of ordered Quantities defined by a low and high limit.
 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
 */
export interface Range extends DataType {
    /**
     * Low limit
     * The low limit. The boundary is inclusive.
     * If the low element is missing, the low boundary is not known.
     */
    low?: Quantity;
    /**
     * High limit
     * The high limit. The boundary is inclusive.
     * If the high element is missing, the high boundary is not known.
     */
    high?: Quantity;
}
/**
 * A ratio of two Quantity values - a numerator and a denominator
 * A relationship of two Quantity values - expressed as a numerator and a denominator.
 * The Ratio datatype should only be used to express a relationship of two numbers if the relationship cannot be suitably expressed using a Quantity and a common unit.  Where the denominator value is known to be fixed to "1", Quantity should be used instead of Ratio.
 */
export interface Ratio extends DataType {
    /**
     * Numerator value
     * The value of the numerator.
     */
    numerator?: Quantity;
    /**
     * Denominator value
     * The value of the denominator.
     */
    denominator?: Quantity;
}
/**
 * Range of ratio values
 * A range of ratios expressed as a low and high numerator and a denominator.
 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
 */
export interface RatioRange extends DataType {
    /**
     * Low Numerator limit
     * The value of the low limit numerator.
     * If the low element is missing, the low boundary is not known.
     */
    lowNumerator?: Quantity;
    /**
     * High Numerator limit
     * The value of the high limit numerator.
     * If the high element is missing, the high boundary is not known.
     */
    highNumerator?: Quantity;
    /**
     * Denominator value
     * The value of the denominator.
     */
    denominator?: Quantity;
}
/**
 * A reference from one resource to another
 * A reference from one resource to another.
 * References SHALL be a reference to an actual FHIR resource, and SHALL be resolvable (allowing for access control, temporary unavailability, etc.). Resolution can be either by retrieval from the URL, or, where applicable by resource type, by treating an absolute reference as a canonical URL and looking it up in a local registry/repository.
 */
export interface Reference extends DataType {
    /**
     * Literal reference, Relative, internal or absolute URL
     * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
     * Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a flexible approach suitable for use when trading across closed eco-system boundaries.   Absolute URLs do not need to point to a FHIR RESTful server, though this is the preferred approach. If the URL conforms to the structure "[type]/[id]" then it should be assumed that the reference is to a FHIR RESTful server.
     */
    reference?: string;
    /**
     * Extension for reference
     **/
    _reference?: Element;
    /**
     * Type the reference refers to (e.g. "Patient") - must be a resource in resources
     * The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
     * This element is used to indicate the type of  the target of the reference. This may be used which ever of the other elements are populated (or not). In some cases, the type of the target may be determined by inspection of the reference (e.g. a known RESTful URL) or by resolving the target of the reference.
     */
    type?: uri;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Logical reference, when literal reference is not known
     * An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
     * When an identifier is provided in place of a reference, any system processing the reference will only be able to resolve the identifier to a reference if it understands the business context in which the identifier is used. Sometimes this is global (e.g. a national identifier) but often it is not. For this reason, none of the useful mechanisms described for working with references (e.g. chaining, includes) are possible, nor should servers be expected to be able resolve the reference. Servers may accept an identifier based reference untouched, resolve it, and/or reject it - see CapabilityStatement.rest.resource.referencePolicy.

When both an identifier and a literal reference are provided, the literal reference is preferred. Applications processing the resource are allowed - but not required - to check that the identifier matches the literal reference

Applications converting a logical reference to a literal reference may choose to leave the logical reference present, or remove it.

Reference is intended to point to a structure that can potentially be expressed as a FHIR resource, though there is no need for it to exist as an actual FHIR resource instance - except in as much as an application wishes to actual find the target of the reference. The content referred to be the identifier must meet the logical constraints implied by any limitations on what resource types are permitted for the reference.  For example, it would not be legitimate to send the identifier for a drug prescription if the type were Reference(Observation|DiagnosticReport).  One of the use-cases for Reference.identifier is the situation where no FHIR representation exists (where the type is Reference (Any).

This element only allows for a single identifier. In the case where additional identifers are required, use the [http://hl7.org/fhir/StructureDefinition/additionalIdentifier](http://hl7.org/fhir/extensions/StructureDefinition-additionalIdentifier.html) extension.
     */
    identifier?: Identifier;
    /**
     * Text alternative for the resource
     * Plain text narrative that identifies the resource in addition to the resource reference.
     * This is generally not the same as the Resource.text of the referenced resource.  The purpose is to identify what's being referenced, not to fully describe it.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
}
/**
 * A series of measurements taken by a device
 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
 * The data is not interpretable without at least origin, period, and dimensions, but these are optional to allow a separation between the template of measurement and the actual measurement, such as between DeviceCapabilities and DeviceLog.  When providing a summary view (for example with Observation.value[x]) SampledData should be represented with a brief display text such as "Sampled Data".
 */
export interface SampledData extends DataType {
    /**
     * Zero value and units
     * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
     */
    origin: Quantity;
    /**
     * Number of intervalUnits between samples
     * Amount of intervalUnits between samples, e.g. milliseconds for time-based sampling.
     * This is usually a whole number.
     */
    interval?: decimal;
    /**
     * Extension for interval
     **/
    _interval?: Element;
    /**
     * The measurement unit of the interval between samples
     * The measurement unit in which the sample interval is expressed.
     */
    intervalUnit: code;
    /**
     * Extension for intervalUnit
     **/
    _intervalUnit?: Element;
    /**
     * Multiply data by this before adding to origin
     * A correction factor that is applied to the sampled data points before they are added to the origin.
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Lower limit of detection
     * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
     */
    lowerLimit?: decimal;
    /**
     * Extension for lowerLimit
     **/
    _lowerLimit?: Element;
    /**
     * Upper limit of detection
     * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
     */
    upperLimit?: decimal;
    /**
     * Extension for upperLimit
     **/
    _upperLimit?: Element;
    /**
     * Number of sample points at each time point
     * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
     * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
     */
    dimensions: positiveInt;
    /**
     * Extension for dimensions
     **/
    _dimensions?: Element;
    /**
     * Defines the codes used in the data
     * Reference to ConceptMap that defines the codes used in the data.
     * The ConceptMap cannot define meanings for the codes 'E', 'U', or 'L' (nor 'e', 'u', or 'l').
     */
    codeMap?: canonical;
    /**
     * Extension for codeMap
     **/
    _codeMap?: Element;
    /**
     * Offsets, typically in time, at which data values were taken
     * A series of data points which are decimal values separated by a single space (character u20).  The units in which the offsets are expressed are found in intervalUnit.  The absolute point at which the measurements begin SHALL be conveyed outside the scope of this datatype, e.g. Observation.effectiveDateTime for a timing offset.
     * If offsets is present, the number of data points must be equal to the number of offsets mlutipled by the dimensions.
     */
    offsets?: string;
    /**
     * Extension for offsets
     **/
    _offsets?: Element;
    /**
     * Decimal values with spaces, or "E" | "U" | "L", or another code
     * A series of data points which are decimal values or codes separated by a single space (character u20). The special codes "E" (error), "L" (below detection limit) and "U" (above detection limit) are also defined for used in place of decimal values.
     * The data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.
     */
    data?: string;
    /**
     * Extension for data
     **/
    _data?: Element;
}
/**
 * A Signature - XML DigSig, JWS, Graphical image of signature, etc.
 * A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
 * The elements of the Signature Resource are for ease of access of these elements. For digital signatures (Xml DigSig, JWS), the non-repudiation proof comes from the Signature  validation, which includes validation of the referenced objects (e.g. Resources) (a.k.a., Content) in the XML-Signature Detached form.
 */
export interface Signature extends DataType {
    /**
     * Indication of the reason the entity signed the object(s)
     * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
     * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &quot;Commitment Type Indication&quot;.
     */
    type?: Coding[];
    /**
     * When the signature was created
     * When the digital signature was signed.
     * This should agree with the information in the signature.
     */
    when?: instant;
    /**
     * Extension for when
     **/
    _when?: Element;
    /**
     * Who signed
     * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
     * This should agree with the information in the signature.
     */
    who?: Reference;
    /**
     * The party represented
     * A reference to an application-usable description of the identity that is represented by the signature.
     * The party that can't sign. For example a child.
     */
    onBehalfOf?: Reference;
    /**
     * The technical format of the signed resources
     * A mime type that indicates the technical format of the target resources signed by the signature.
     * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
     */
    targetFormat?: code;
    /**
     * Extension for targetFormat
     **/
    _targetFormat?: Element;
    /**
     * The technical format of the signature
     * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
     */
    sigFormat?: code;
    /**
     * Extension for sigFormat
     **/
    _sigFormat?: Element;
    /**
     * The actual signature content (XML DigSig. JWS, picture, etc.)
     * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
     * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
     */
    data?: base64Binary;
    /**
     * Extension for data
     **/
    _data?: Element;
}
/**
 * A fixed quantity (no comparator)
 * The comparator is not used on a SimpleQuantity
 */
export interface SimpleQuantity extends Quantity {
    /**
     * Not allowed to be used in this context
     */
    comparator?: undefined;
}
/**
 * Describes the context of use for a conformance or knowledge resource
 * Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
 */
export interface UsageContext extends DataType {
    /**
     * Type of context being specified
     * A code that identifies the type of context being specified by this usage context.
     */
    code: Coding;
    /**
     * Value that defines the context
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value that defines the context
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueQuantity?: Quantity;
    /**
     * Value that defines the context
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueRange?: Range;
    /**
     * Value that defines the context
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueReference?: Reference;
}
/**
 * Virtual Service Contact Details
 * Virtual Service Contact Details.
 */
export interface VirtualServiceDetail extends DataType {
    /**
     * Channel Type
     * The type of virtual service to connect to (i.e. Teams, Zoom, Specific VMR technology, WhatsApp).
     * As this type defines what the virtual service is, it then defines what address and additional information might be relevant.

Some profiles could be used for specific types to define what the other values could/should be.
     */
    channelType?: Coding;
    /**
     * Contact address/number
     * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
     */
    addressUrl?: url;
    /**
     * Extension for addressUrl
     **/
    _addressUrl?: Element;
    /**
     * Contact address/number
     * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
     */
    addressString?: string;
    /**
     * Extension for addressString
     **/
    _addressString?: Element;
    /**
     * Contact address/number
     * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
     */
    addressContactPoint?: ContactPoint;
    /**
     * Contact address/number
     * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
     */
    addressExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Address to see alternative connection details
     * Address to see alternative connection details.
     * This web address can be used to provide additional details on the call, such as alternative/regional call in numbers, or other associated services.
     */
    additionalInfo?: url[];
    /**
     * Extension for additionalInfo
     **/
    _additionalInfo?: Element[];
    /**
     * Maximum number of participants supported by the virtual service
     * Maximum number of participants supported by the virtual service.
     * Some services have only a limitted number of participants permitted to connect at a time, this is typically used in "shared" virtual services that you might find on location resources.

Typically on-demand services might not have these restrictions.
     */
    maxParticipants?: positiveInt;
    /**
     * Extension for maxParticipants
     **/
    _maxParticipants?: Element;
    /**
     * Session Key required by the virtual service
     * Session Key required by the virtual service.
     * Some services require a session key to be able to access the service once connected.

This could be in cases where a shared number is used, and a session key is added to put into a private line, or to identify the participant in a call.
     */
    sessionKey?: string;
    /**
     * Extension for sessionKey
     **/
    _sessionKey?: Element;
}
/**
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats)
 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
The ISO21090-codedString may be used to provide a coded representation of the contents of strings in an Address.
 * Note: address is intended to describe postal addresses for administrative purposes, not to describe absolute geographical coordinates.  Postal addresses are often used as proxies for physical locations (also see the [Location](location.html#) resource).
 */
export interface Address extends DataType {
    /**
     * Text representation of the address
     * Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
     * Can provide both a text representation and parts. Applications updating an address SHALL ensure that  when both text and parts are present,  no content is included in the text that isn't found in a part.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Street name, number, direction & P.O. Box etc.
     * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
     */
    line?: string[];
    /**
     * Extension for line
     **/
    _line?: Element[];
    /**
     * Name of city, town etc.
     * The name of the city, town, suburb, village or other community or delivery center.
     */
    city?: string;
    /**
     * Extension for city
     **/
    _city?: Element;
    /**
     * District name (aka county)
     * The name of the administrative area (county).
     * District is sometimes known as county, but in some regions 'county' is used in place of city (municipality), so county name should be conveyed in city instead.
     */
    district?: string;
    /**
     * Extension for district
     **/
    _district?: Element;
    /**
     * Sub-unit of country (abbreviations ok)
     * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
     */
    state?: string;
    /**
     * Extension for state
     **/
    _state?: Element;
    /**
     * Postal code for area
     * A postal code designating a region defined by the postal service.
     */
    postalCode?: string;
    /**
     * Extension for postalCode
     **/
    _postalCode?: Element;
    /**
     * Country (e.g. may be ISO 3166 2 or 3 letter code)
     * Country - a nation as commonly understood or generally accepted.
     * ISO 3166 2- or 3- letter codes MAY be used in place of a human readable country name.
     */
    country?: string;
    /**
     * Extension for country
     **/
    _country?: Element;
    /**
     * Time period when address was/is in use
     * Time period when address was/is in use.
     */
    period?: Period;
    /**
     * home | work | temp | old | billing - purpose of this address
     * The purpose of this address.
     * Applications can assume that an address is current unless it explicitly says that it is temporary or old.
     */
    use?: AddressUse;
    /**
     * postal | physical | both
     * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
     * The definition of Address states that "address is intended to describe postal addresses, not physical locations". However, many applications track whether an address has a dual purpose of being a location that can be visited as well as being a valid delivery destination, and Postal addresses are often used as proxies for physical locations (also see the [Location](location.html#) resource).
     */
    type?: AddressType;
}
/**
 * Times the {item} is available
 * Times the {item} is available.
 */
export interface AvailabilityAvailableTime extends Element {
    /**
     * Always available? i.e. 24 hour service
     * Always available? i.e. 24 hour service.
     */
    allDay?: boolean;
    /**
     * Extension for allDay
     **/
    _allDay?: Element;
    /**
     * Opening time of day (ignored if allDay = true)
     * Opening time of day (ignored if allDay = true).
     * The timezone is expected to be specified or implied by the context this datatype is used.
     */
    availableStartTime?: time;
    /**
     * Extension for availableStartTime
     **/
    _availableStartTime?: Element;
    /**
     * Closing time of day (ignored if allDay = true)
     * Closing time of day (ignored if allDay = true).
     * The timezone is expected to be specified or implied by the context this datatype is used.
     */
    availableEndTime?: time;
    /**
     * Extension for availableEndTime
     **/
    _availableEndTime?: Element;
    /**
     * mon | tue | wed | thu | fri | sat | sun
     * mon | tue | wed | thu | fri | sat | sun.
     */
    daysOfWeek?: AvailabilityDaysOfWeek[];
}
/**
 * Not available during this time due to provided reason
 * Not available during this time due to provided reason.
 */
export interface AvailabilityNotAvailableTime extends Element {
    /**
     * Reason presented to the user explaining why time not available
     * Reason presented to the user explaining why time not available.
     * The reason will generally be provided to give the textual reason for displaying when the {item} is not available, e.g. 'Closed public holidays' or 'Independence Day'. In cases such as this, the `during` might not be included and local knowledge would be required in such cases (as don't desire to keep updating when the holiday occurs each year).

e.g.2: 'Closed for maintenance over the summer' for this example you would want to include the `during` period, unless this was a university hospital and the "summer" period was well known, but would recommend its inclusion anyway.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Service not available during this period
     * Service not available during this period.
     */
    during?: Period;
}
/**
 * Availability data for an {item}
 * Availability data for an {item}.
 */
export interface Availability extends DataType {
    /**
     * Times the {item} is available
     * Times the {item} is available.
     */
    availableTime?: AvailabilityAvailableTime[];
    /**
     * Not available during this time due to provided reason
     * Not available during this time due to provided reason.
     */
    notAvailableTime?: AvailabilityNotAvailableTime[];
}
/**
 * Details of a Technology mediated contact point (phone, fax, email, etc.)
 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
 */
export interface ContactPoint extends DataType {
    /**
     * The actual contact point details
     * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
     * Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
     */
    value?: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * Specify preferred order of use (1 = highest)
     * Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
     * Note that rank does not necessarily follow the order in which the contacts are represented in the instance.

Ranks need not be unique.  E.g. it's possible to have multiple contacts with rank=1.  If the ranks have different systems or uses, this would be interpreted to mean "X is my most preferred phone number, Y is my most preferred email address" or "X is my preferred home email and Y is my preferred work email".  If the system and use for equally-ranked contacts are the same, then the level of preference is equivalent for both repetitions.

Ranks need not be sequential and not all repetitions must have a rank.  For example, it's possible to have 4 contacts with ranks of 2, 5 and two with no rank specified.  That would be interpreted to mean the first is preferred over the second and no preference stated for the remaining contacts.
     */
    rank?: positiveInt;
    /**
     * Extension for rank
     **/
    _rank?: Element;
    /**
     * Time period when the contact point was/is in use
     * Time period when the contact point was/is in use.
     */
    period?: Period;
    /**
     * phone | fax | email | pager | url | sms | other
     * Telecommunications form for contact point - what communications system is required to make use of the contact.
     */
    system?: ContactPointSystem;
    /**
     * home | work | temp | old | mobile - purpose of this contact point
     * Identifies the purpose for the contact point.
     * Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
     */
    use?: ContactPointUse;
}
/**
 * Contributor information
 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
 */
export interface Contributor extends DataType {
    /**
     * Who contributed the content
     * The name of the individual or organization responsible for the contribution.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Contact details of the contributor
     * Contact details to assist a user in finding and communicating with the contributor.
     */
    contact?: ContactDetail[];
    /**
     * author | editor | reviewer | endorser
     * The type of contributor.
     */
    type: ContributorType;
}
/**
 * What codes are expected
 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
export interface DataRequirementCodeFilter extends Element {
    /**
     * A code-valued attribute to filter on
     * The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
     * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * A coded (token) parameter to search on
     * A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
     */
    searchParam?: string;
    /**
     * Extension for searchParam
     **/
    _searchParam?: Element;
    /**
     * ValueSet for the filter
     * The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * What code is expected
     * The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
     */
    code?: Coding[];
}
/**
 * What dates/date ranges are expected
 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
export interface DataRequirementDateFilter extends Element {
    /**
     * A date-valued attribute to filter on
     * The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
     * The path attribute contains a [Simple FHIR Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * A date valued parameter to search on
     * A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
     */
    searchParam?: string;
    /**
     * Extension for searchParam
     **/
    _searchParam?: Element;
    /**
     * The value of the filter, as a Period, DateTime, or Duration value
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * The value of the filter, as a Period, DateTime, or Duration value
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valuePeriod?: Period;
    /**
     * The value of the filter, as a Period, DateTime, or Duration value
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDuration?: Duration;
}
/**
 * What values are expected
 * Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed).
 */
export interface DataRequirementValueFilter extends Element {
    /**
     * An attribute to filter on
     * The attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of a type that is comparable to the valueFilter.value[x] element for the filter.
     * The path attribute contains a [Simple FHIR Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * A parameter to search on
     * A search parameter defined on the specified type of the DataRequirement, and which searches on elements of a type compatible with the type of the valueFilter.value[x] for the filter.
     */
    searchParam?: string;
    /**
     * Extension for searchParam
     **/
    _searchParam?: Element;
    /**
     * The value of the filter, as a Period, DateTime, or Duration value
     * The value of the filter.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * The value of the filter, as a Period, DateTime, or Duration value
     * The value of the filter.
     */
    valuePeriod?: Period;
    /**
     * The value of the filter, as a Period, DateTime, or Duration value
     * The value of the filter.
     */
    valueDuration?: Duration;
    /**
     * eq | gt | lt | ge | le | sa | eb
     * The comparator to be used to determine whether the value is matching.
     */
    comparator?: DataRequirementValueFilterComparator;
}
/**
 * Order of the results
 * Specifies the order of the results to be returned.
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
export interface DataRequirementSort extends Element {
    /**
     * The name of the attribute to perform the sort
     * The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.
     */
    path: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * ascending | descending
     * The direction of the sort, ascending or descending.
     */
    direction: DataRequirementSortDirection;
}
/**
 * Describes a required data item
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export interface DataRequirement extends DataType {
    /**
     * The type of the required data
     * The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
     */
    type: code;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * The profile of the required data
     * The profile of the required data, specified as the uri of the profile definition.
     */
    profile?: canonical[];
    /**
     * Extension for profile
     **/
    _profile?: Element[];
    /**
     * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
     * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
     * The subject of a data requirement is critical, as the data being specified is determined with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what data is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
     * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
     * The subject of a data requirement is critical, as the data being specified is determined with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what data is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
     */
    subjectReference?: Reference;
    /**
     * Indicates specific structure elements that are referenced by the knowledge module
     * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.

The value of mustSupport SHALL be a FHIRPath resolvable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    mustSupport?: string[];
    /**
     * Extension for mustSupport
     **/
    _mustSupport?: Element[];
    /**
     * What codes are expected
     * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
     */
    codeFilter?: DataRequirementCodeFilter[];
    /**
     * What dates/date ranges are expected
     * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
     */
    dateFilter?: DataRequirementDateFilter[];
    /**
     * What values are expected
     * Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed).
     */
    valueFilter?: DataRequirementValueFilter[];
    /**
     * Number of results
     * Specifies a maximum number of results that are required (uses the _count search parameter).
     * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5".
     */
    limit?: positiveInt;
    /**
     * Extension for limit
     **/
    _limit?: Element;
    /**
     * Order of the results
     * Specifies the order of the results to be returned.
     * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
     */
    sort?: DataRequirementSort[];
}
/**
 * Element values that are used to distinguish the slices
 * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
 * If there is no discriminator, the content is hard to process, so this should be avoided.
 */
export interface ElementDefinitionSlicingDiscriminator extends Element {
    /**
     * Path to element value
     * A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
     */
    path: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * value | exists | type | profile | position
     * How the element value is interpreted when discrimination is evaluated.
     * 'pattern' is deprecated - it works exactly the same as 'value'.
     */
    type: ElementDefinitionDiscriminatorType;
}
/**
 * This element is sliced - slices follow
 * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export interface ElementDefinitionSlicing extends Element {
    /**
     * Element values that are used to distinguish the slices
     * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
     * If there is no discriminator, the content is hard to process, so this should be avoided.
     */
    discriminator?: ElementDefinitionSlicingDiscriminator[];
    /**
     * Text description of how slicing works (or not)
     * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
     * If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * If elements must be in same order as slices
     * If the matching elements have to occur in the same order as defined in the profile.
     * Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.
     */
    ordered?: boolean;
    /**
     * Extension for ordered
     **/
    _ordered?: Element;
    /**
     * closed | open | openAtEnd
     * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
     * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
     */
    rules: ElementDefinitionSlicingRules;
}
/**
 * Base definition information for tools
 * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - e.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
 */
export interface ElementDefinitionBase extends Element {
    /**
     * Path that identifies the base element
     * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
     */
    path: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * Min cardinality of the base element
     * Minimum cardinality of the base element identified by the path.
     * This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).
     */
    min: unsignedInt;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Max cardinality of the base element
     * Maximum cardinality of the base element identified by the path.
     * This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max > 1. Also, some forms of code generation may differ.
     */
    max: string;
    /**
     * Extension for max
     **/
    _max?: Element;
}
/**
 * Data type and Profile for this element
 * The data type or resource that the value of this element is permitted to be.
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export interface ElementDefinitionType extends Element {
    /**
     * Data type or Resource (reference to definition)
     * URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
     * If the element is a reference to another resource, this element contains "Reference", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
     */
    code: uri;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Profiles (StructureDefinition or IG) - one must apply
     * Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
     * It is possible to profile  backbone element (e.g. part of a resource), using the [http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element](http://hl7.org/fhir/extensions/StructureDefinition-elementdefinition-profile-element.html) extension.
     */
    profile?: canonical[];
    /**
     * Extension for profile
     **/
    _profile?: Element[];
    /**
     * Profile (StructureDefinition or IG) on the Reference/canonical target - one must apply
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     */
    targetProfile?: canonical[];
    /**
     * Extension for targetProfile
     **/
    _targetProfile?: Element[];
    /**
     * contained | referenced | bundled - how aggregated
     * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
     * See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
     */
    aggregation?: ElementDefinitionAggregationMode[];
    /**
     * either | independent | specific
     * Whether this reference needs to be version specific or version independent, or whether either can be used.
     * The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
     */
    versioning?: ElementDefinitionReferenceVersionRules;
}
/**
 * Example value (as defined for type)
 * A sample value for this element demonstrating the type of information that would typically be found in the element.
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export interface ElementDefinitionExample extends Element {
    /**
     * Describes the purpose of this example
     * Describes the purpose of this example among the set of examples.
     */
    label: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAddress?: Address;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAge?: Age;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAnnotation?: Annotation;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAttachment?: Attachment;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCoding?: Coding;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContactPoint?: ContactPoint;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCount?: Count;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDistance?: Distance;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDuration?: Duration;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueHumanName?: HumanName;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueIdentifier?: Identifier;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMoney?: Money;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePeriod?: Period;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueQuantity?: Quantity;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRange?: Range;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRatio?: Ratio;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRatioRange?: RatioRange;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueReference?: Reference;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueSampledData?: SampledData;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueSignature?: Signature;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTiming?: Timing;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContactDetail?: ContactDetail;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueExpression?: Expression;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUsageContext?: UsageContext;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAvailability?: Availability;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDosage?: Dosage;
    /**
     * Value of Example (one of allowed types)
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMeta?: Meta;
}
/**
 * Condition that must evaluate to true
 * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export interface ElementDefinitionConstraint extends Element {
    /**
     * Target of 'condition' reference above
     * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
     */
    key: id;
    /**
     * Extension for key
     **/
    _key?: Element;
    /**
     * Why this constraint is necessary or appropriate
     * Description of why this constraint is necessary or appropriate.
     * To be used if the reason for the constraint might not be intuitive to all implementers.
     */
    requirements?: markdown;
    /**
     * Extension for requirements
     **/
    _requirements?: Element;
    /**
     * Suppress warning or hint in profile
     * If true, indicates that the warning or best practice guideline should be suppressed.
     * This element should only be present in a derived profile where a warning or hint has been determined to be spurious/incorrect. E.g. a warning encouraging the inclusion of an element that the profile explicitly prohibits.
     */
    suppress?: boolean;
    /**
     * Extension for suppress
     **/
    _suppress?: Element;
    /**
     * Human description of constraint
     * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
     * Should be expressed in business terms as much as possible.
     */
    human: string;
    /**
     * Extension for human
     **/
    _human?: Element;
    /**
     * FHIRPath expression of constraint
     * A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
     * In the absense of an expression, the expression is likely not enforceable by validators, and might be missed by many systems.
     */
    expression?: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * Reference to original source of constraint
     * A reference to the original source of the constraint, for traceability purposes.
     * This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.
     */
    source?: canonical;
    /**
     * Extension for source
     **/
    _source?: Element;
    /**
     * error | warning
     * Identifies the impact constraint violation has on the conformance of the instance.
     * This allows constraints to be asserted as "shall" (error) and "should" (warning).
     */
    severity: ElementDefinitionConstraintSeverity;
}
/**
 * Additional Bindings - more rules about the binding
 * Additional bindings that help applications implementing this element. Additional bindings do not replace the main binding but provide more information and/or context.
 */
export interface ElementDefinitionBindingAdditional extends Element {
    /**
     * The value set for the additional binding
     * The valueSet that is being bound for the purpose.
     */
    valueSet: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * Documentation of the purpose of use of the binding
     * Documentation of the purpose of use of the bindingproviding additional information about how it is intended to be used.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Concise documentation - for summary tables
     * Concise documentation - for summary tables.
     */
    shortDoco?: string;
    /**
     * Extension for shortDoco
     **/
    _shortDoco?: Element;
    /**
     * Qualifies the usage - jurisdiction, gender, workflow status etc.
     * Qualifies the usage of the binding. Typically bindings are qualified by jurisdiction, but they may also be qualified by gender, workflow status, clinical domain etc. The information to decide whether a usege context applies is usually outside the resource, determined by context, and this might present challenges for validation tooling.
     * This specification does not define exactly how the context is determined for the usage; typically, this will be described in implementation guides.
     */
    usage?: UsageContext[];
    /**
     * Whether binding can applies to all repeats, or just one
     * Whether the binding applies to all repeats, or just to any one of them. This is only relevant for elements that can repeat.
     * A common pattern is to make a conformance binding to all repeats, and then make a binding that one of the repeats must conform to.
     */
    any?: boolean;
    /**
     * Extension for any
     **/
    _any?: Element;
    /**
     * maximum | minimum | required | extensible | candidate | current | preferred | ui | starter | component
     * The use of this additional binding.
     * Conformance bindings are in addition to the base binding, not instead of it.
     */
    purpose: ElementDefinitionAdditionalBindingPurpose;
}
/**
 * ValueSet details if this is coded
 * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export interface ElementDefinitionBinding extends Element {
    /**
     * Intended use of codes in the bound value set
     * Describes the intended use of this particular set of codes.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Source of value set
     * Refers to the value set that identifies the set of codes the binding refers to.
     * The reference may be version-specific or not (e.g. have a |[version] at the end of the canonical URL).
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * Additional Bindings - more rules about the binding
     * Additional bindings that help applications implementing this element. Additional bindings do not replace the main binding but provide more information and/or context.
     */
    additional?: ElementDefinitionBindingAdditional[];
    /**
     * required | extensible | preferred | example
     * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
     * For further discussion, see [Using Terminologies](terminologies.html).
     */
    strength: ElementDefinitionBindingStrength;
}
/**
 * Map element to another set of definitions
 * Identifies a concept from an external specification that roughly corresponds to this element.
 * Mappings are not necessarily specific enough for safe translation.
 */
export interface ElementDefinitionMapping extends Element {
    /**
     * Reference to mapping declaration
     * An internal reference to the definition of a mapping.
     */
    identity: id;
    /**
     * Extension for identity
     **/
    _identity?: Element;
    /**
     * Computable language of mapping
     * Identifies the computable language in which mapping.map is expressed.
     * If omitted, then there can be no expectation of computational interpretation of the mapping.
     */
    language?: code;
    /**
     * Extension for language
     **/
    _language?: Element;
    /**
     * Details of the mapping
     * Expresses what part of the target specification corresponds to this element.
     * For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.
     */
    map: string;
    /**
     * Extension for map
     **/
    _map?: Element;
    /**
     * Comments about the mapping or its use
     * Comments that provide information about the mapping or its use.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
}
/**
 * Definition of an element in a resource or extension
 * Captures constraints on each element within the resource, profile, or extension.
 */
export interface ElementDefinition extends BackboneType {
    /**
     * Path of the element in the hierarchy of elements
     * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
     */
    path: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * Name for this particular element (in a set of slices)
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     * The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).
     */
    sliceName?: string;
    /**
     * Extension for sliceName
     **/
    _sliceName?: Element;
    /**
     * If this slice definition constrains an inherited slice definition (or not)
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     * If set to true, an ancestor profile SHALL have a slicing definition with this name.  If set to false, no ancestor profile is permitted to have a slicing definition with this name.
     */
    sliceIsConstraining?: boolean;
    /**
     * Extension for sliceIsConstraining
     **/
    _sliceIsConstraining?: Element;
    /**
     * Name for element to display with or prompt for element
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     * See also the extension [http://hl7.org/fhir/StructureDefinition/elementdefinition-question](http://hl7.org/fhir/extensions/StructureDefinition-elementdefinition-question.html).
     */
    label?: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Corresponding codes in terminologies
     * A code that has the same meaning as the element in a particular terminology.
     * The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.
     */
    code?: Coding[];
    /**
     * This element is sliced - slices follow
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
     */
    slicing?: ElementDefinitionSlicing;
    /**
     * Concise definition for space-constrained presentation
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     * It is easy for a different short definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing short definitions in a profile.
     */
    short?: string;
    /**
     * Extension for short
     **/
    _short?: Element;
    /**
     * Full formal definition as narrative text
     * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     * It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions in a profile.
     */
    definition?: markdown;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Comments about the use of this element
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     * If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * Why this resource has been created
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     * This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.
     */
    requirements?: markdown;
    /**
     * Extension for requirements
     **/
    _requirements?: Element;
    /**
     * Other names
     * Identifies additional names by which this element might also be known.
     */
    alias?: string[];
    /**
     * Extension for alias
     **/
    _alias?: Element[];
    /**
     * Minimum Cardinality
     * The minimum number of times this element SHALL appear in the instance.
     */
    min?: unsignedInt;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Maximum Cardinality (a number or *)
     * The maximum number of times this element is permitted to appear in the instance.
     */
    max?: string;
    /**
     * Extension for max
     **/
    _max?: Element;
    /**
     * Base definition information for tools
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - e.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
     */
    base?: ElementDefinitionBase;
    /**
     * Reference to definition of content for the element
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     * ContentReferences can only be defined in specializations, not constrained types, and they cannot be changed and always reference the non-constrained definition.
     */
    contentReference?: uri;
    /**
     * Extension for contentReference
     **/
    _contentReference?: Element;
    /**
     * Data type and Profile for this element
     * The data type or resource that the value of this element is permitted to be.
     * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
     */
    type?: ElementDefinitionType[];
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueBase64Binary?: base64Binary;
    /**
     * Extension for defaultValueBase64Binary
     **/
    _defaultValueBase64Binary?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueBoolean?: boolean;
    /**
     * Extension for defaultValueBoolean
     **/
    _defaultValueBoolean?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueCanonical?: canonical;
    /**
     * Extension for defaultValueCanonical
     **/
    _defaultValueCanonical?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueCode?: code;
    /**
     * Extension for defaultValueCode
     **/
    _defaultValueCode?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDate?: date;
    /**
     * Extension for defaultValueDate
     **/
    _defaultValueDate?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDateTime?: dateTime;
    /**
     * Extension for defaultValueDateTime
     **/
    _defaultValueDateTime?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDecimal?: decimal;
    /**
     * Extension for defaultValueDecimal
     **/
    _defaultValueDecimal?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueId?: id;
    /**
     * Extension for defaultValueId
     **/
    _defaultValueId?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueInstant?: instant;
    /**
     * Extension for defaultValueInstant
     **/
    _defaultValueInstant?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueInteger?: integer;
    /**
     * Extension for defaultValueInteger
     **/
    _defaultValueInteger?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueInteger64?: integer64;
    /**
     * Extension for defaultValueInteger64
     **/
    _defaultValueInteger64?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueMarkdown?: markdown;
    /**
     * Extension for defaultValueMarkdown
     **/
    _defaultValueMarkdown?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueOid?: oid;
    /**
     * Extension for defaultValueOid
     **/
    _defaultValueOid?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValuePositiveInt?: positiveInt;
    /**
     * Extension for defaultValuePositiveInt
     **/
    _defaultValuePositiveInt?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueString?: string;
    /**
     * Extension for defaultValueString
     **/
    _defaultValueString?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueTime?: time;
    /**
     * Extension for defaultValueTime
     **/
    _defaultValueTime?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueUnsignedInt?: unsignedInt;
    /**
     * Extension for defaultValueUnsignedInt
     **/
    _defaultValueUnsignedInt?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueUri?: uri;
    /**
     * Extension for defaultValueUri
     **/
    _defaultValueUri?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueUrl?: url;
    /**
     * Extension for defaultValueUrl
     **/
    _defaultValueUrl?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueUuid?: uuid;
    /**
     * Extension for defaultValueUuid
     **/
    _defaultValueUuid?: Element;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueAddress?: Address;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueAge?: Age;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueAnnotation?: Annotation;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueAttachment?: Attachment;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueCodeableConcept?: CodeableConcept;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueCodeableReference?: CodeableReference;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueCoding?: Coding;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueContactPoint?: ContactPoint;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueCount?: Count;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDistance?: Distance;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDuration?: Duration;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueHumanName?: HumanName;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueIdentifier?: Identifier;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueMoney?: Money;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValuePeriod?: Period;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueQuantity?: Quantity;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueRange?: Range;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueRatio?: Ratio;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueRatioRange?: RatioRange;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueReference?: Reference;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueSampledData?: SampledData;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueSignature?: Signature;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueTiming?: Timing;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueContactDetail?: ContactDetail;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDataRequirement?: DataRequirement;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueExpression?: Expression;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueParameterDefinition?: ParameterDefinition;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueRelatedArtifact?: RelatedArtifact;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueTriggerDefinition?: TriggerDefinition;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueUsageContext?: UsageContext;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueAvailability?: Availability;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueDosage?: Dosage;
    /**
     * Specified value if missing from instance
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.

No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
     */
    defaultValueMeta?: Meta;
    /**
     * Implicit meaning when this element is missing
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     * Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.
     */
    meaningWhenMissing?: markdown;
    /**
     * Extension for meaningWhenMissing
     **/
    _meaningWhenMissing?: Element;
    /**
     * What the order of the elements means
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
     * This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.
     */
    orderMeaning?: string;
    /**
     * Extension for orderMeaning
     **/
    _orderMeaning?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedBase64Binary?: base64Binary;
    /**
     * Extension for fixedBase64Binary
     **/
    _fixedBase64Binary?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedBoolean?: boolean;
    /**
     * Extension for fixedBoolean
     **/
    _fixedBoolean?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedCanonical?: canonical;
    /**
     * Extension for fixedCanonical
     **/
    _fixedCanonical?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedCode?: code;
    /**
     * Extension for fixedCode
     **/
    _fixedCode?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDate?: date;
    /**
     * Extension for fixedDate
     **/
    _fixedDate?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDateTime?: dateTime;
    /**
     * Extension for fixedDateTime
     **/
    _fixedDateTime?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDecimal?: decimal;
    /**
     * Extension for fixedDecimal
     **/
    _fixedDecimal?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedId?: id;
    /**
     * Extension for fixedId
     **/
    _fixedId?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedInstant?: instant;
    /**
     * Extension for fixedInstant
     **/
    _fixedInstant?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedInteger?: integer;
    /**
     * Extension for fixedInteger
     **/
    _fixedInteger?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedInteger64?: integer64;
    /**
     * Extension for fixedInteger64
     **/
    _fixedInteger64?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedMarkdown?: markdown;
    /**
     * Extension for fixedMarkdown
     **/
    _fixedMarkdown?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedOid?: oid;
    /**
     * Extension for fixedOid
     **/
    _fixedOid?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedPositiveInt?: positiveInt;
    /**
     * Extension for fixedPositiveInt
     **/
    _fixedPositiveInt?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedString?: string;
    /**
     * Extension for fixedString
     **/
    _fixedString?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedTime?: time;
    /**
     * Extension for fixedTime
     **/
    _fixedTime?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedUnsignedInt?: unsignedInt;
    /**
     * Extension for fixedUnsignedInt
     **/
    _fixedUnsignedInt?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedUri?: uri;
    /**
     * Extension for fixedUri
     **/
    _fixedUri?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedUrl?: url;
    /**
     * Extension for fixedUrl
     **/
    _fixedUrl?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedUuid?: uuid;
    /**
     * Extension for fixedUuid
     **/
    _fixedUuid?: Element;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedAddress?: Address;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedAge?: Age;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedAnnotation?: Annotation;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedAttachment?: Attachment;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedCodeableConcept?: CodeableConcept;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedCodeableReference?: CodeableReference;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedCoding?: Coding;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedContactPoint?: ContactPoint;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedCount?: Count;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDistance?: Distance;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDuration?: Duration;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedHumanName?: HumanName;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedIdentifier?: Identifier;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedMoney?: Money;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedPeriod?: Period;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedQuantity?: Quantity;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedRange?: Range;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedRatio?: Ratio;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedRatioRange?: RatioRange;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedReference?: Reference;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedSampledData?: SampledData;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedSignature?: Signature;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedTiming?: Timing;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedContactDetail?: ContactDetail;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDataRequirement?: DataRequirement;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedExpression?: Expression;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedParameterDefinition?: ParameterDefinition;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedRelatedArtifact?: RelatedArtifact;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedTriggerDefinition?: TriggerDefinition;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedUsageContext?: UsageContext;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedAvailability?: Availability;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedDosage?: Dosage;
    /**
     * Value must be exactly this
     * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
     */
    fixedMeta?: Meta;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternBase64Binary?: base64Binary;
    /**
     * Extension for patternBase64Binary
     **/
    _patternBase64Binary?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternBoolean?: boolean;
    /**
     * Extension for patternBoolean
     **/
    _patternBoolean?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternCanonical?: canonical;
    /**
     * Extension for patternCanonical
     **/
    _patternCanonical?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternCode?: code;
    /**
     * Extension for patternCode
     **/
    _patternCode?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDate?: date;
    /**
     * Extension for patternDate
     **/
    _patternDate?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDateTime?: dateTime;
    /**
     * Extension for patternDateTime
     **/
    _patternDateTime?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDecimal?: decimal;
    /**
     * Extension for patternDecimal
     **/
    _patternDecimal?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternId?: id;
    /**
     * Extension for patternId
     **/
    _patternId?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternInstant?: instant;
    /**
     * Extension for patternInstant
     **/
    _patternInstant?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternInteger?: integer;
    /**
     * Extension for patternInteger
     **/
    _patternInteger?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternInteger64?: integer64;
    /**
     * Extension for patternInteger64
     **/
    _patternInteger64?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternMarkdown?: markdown;
    /**
     * Extension for patternMarkdown
     **/
    _patternMarkdown?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternOid?: oid;
    /**
     * Extension for patternOid
     **/
    _patternOid?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternPositiveInt?: positiveInt;
    /**
     * Extension for patternPositiveInt
     **/
    _patternPositiveInt?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternString?: string;
    /**
     * Extension for patternString
     **/
    _patternString?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternTime?: time;
    /**
     * Extension for patternTime
     **/
    _patternTime?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternUnsignedInt?: unsignedInt;
    /**
     * Extension for patternUnsignedInt
     **/
    _patternUnsignedInt?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternUri?: uri;
    /**
     * Extension for patternUri
     **/
    _patternUri?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternUrl?: url;
    /**
     * Extension for patternUrl
     **/
    _patternUrl?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternUuid?: uuid;
    /**
     * Extension for patternUuid
     **/
    _patternUuid?: Element;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternAddress?: Address;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternAge?: Age;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternAnnotation?: Annotation;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternAttachment?: Attachment;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternCodeableConcept?: CodeableConcept;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternCodeableReference?: CodeableReference;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternCoding?: Coding;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternContactPoint?: ContactPoint;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternCount?: Count;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDistance?: Distance;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDuration?: Duration;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternHumanName?: HumanName;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternIdentifier?: Identifier;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternMoney?: Money;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternPeriod?: Period;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternQuantity?: Quantity;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternRange?: Range;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternRatio?: Ratio;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternRatioRange?: RatioRange;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternReference?: Reference;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternSampledData?: SampledData;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternSignature?: Signature;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternTiming?: Timing;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternContactDetail?: ContactDetail;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDataRequirement?: DataRequirement;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternExpression?: Expression;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternParameterDefinition?: ParameterDefinition;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternRelatedArtifact?: RelatedArtifact;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternTriggerDefinition?: TriggerDefinition;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternUsageContext?: UsageContext;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternAvailability?: Availability;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternDosage?: Dosage;
    /**
     * Value must have at least these property values
     * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
     * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
     */
    patternMeta?: Meta;
    /**
     * Example value (as defined for type)
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
     */
    example?: ElementDefinitionExample[];
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueDate?: date;
    /**
     * Extension for minValueDate
     **/
    _minValueDate?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueDateTime?: dateTime;
    /**
     * Extension for minValueDateTime
     **/
    _minValueDateTime?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueInstant?: instant;
    /**
     * Extension for minValueInstant
     **/
    _minValueInstant?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueTime?: time;
    /**
     * Extension for minValueTime
     **/
    _minValueTime?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueDecimal?: decimal;
    /**
     * Extension for minValueDecimal
     **/
    _minValueDecimal?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueInteger?: integer;
    /**
     * Extension for minValueInteger
     **/
    _minValueInteger?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueInteger64?: integer64;
    /**
     * Extension for minValueInteger64
     **/
    _minValueInteger64?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValuePositiveInt?: positiveInt;
    /**
     * Extension for minValuePositiveInt
     **/
    _minValuePositiveInt?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueUnsignedInt?: unsignedInt;
    /**
     * Extension for minValueUnsignedInt
     **/
    _minValueUnsignedInt?: Element;
    /**
     * Minimum Allowed Value (for some types)
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
     */
    minValueQuantity?: Quantity;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueDate?: date;
    /**
     * Extension for maxValueDate
     **/
    _maxValueDate?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueDateTime?: dateTime;
    /**
     * Extension for maxValueDateTime
     **/
    _maxValueDateTime?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueInstant?: instant;
    /**
     * Extension for maxValueInstant
     **/
    _maxValueInstant?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueTime?: time;
    /**
     * Extension for maxValueTime
     **/
    _maxValueTime?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueDecimal?: decimal;
    /**
     * Extension for maxValueDecimal
     **/
    _maxValueDecimal?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueInteger?: integer;
    /**
     * Extension for maxValueInteger
     **/
    _maxValueInteger?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueInteger64?: integer64;
    /**
     * Extension for maxValueInteger64
     **/
    _maxValueInteger64?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValuePositiveInt?: positiveInt;
    /**
     * Extension for maxValuePositiveInt
     **/
    _maxValuePositiveInt?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueUnsignedInt?: unsignedInt;
    /**
     * Extension for maxValueUnsignedInt
     **/
    _maxValueUnsignedInt?: Element;
    /**
     * Maximum Allowed Value (for some types)
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
     */
    maxValueQuantity?: Quantity;
    /**
     * Max length for string type data
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element. ```maxLength``` SHOULD only be used on primitive data types that have a string representation (see [http://hl7.org/fhir/StructureDefinition/structuredefinition-type-characteristics](http://hl7.org/fhir/extensions/StructureDefinition-structuredefinition-type-characteristics.html)).
     * Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.
     */
    maxLength?: integer;
    /**
     * Extension for maxLength
     **/
    _maxLength?: Element;
    /**
     * Reference to invariant about presence
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     */
    condition?: id[];
    /**
     * Extension for condition
     **/
    _condition?: Element[];
    /**
     * Condition that must evaluate to true
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
     */
    constraint?: ElementDefinitionConstraint[];
    /**
     * For primitives, that a value must be present - not replaced by an extension
     * Specifies for a primitive data type that the value of the data type cannot be replaced by an extension.
     * Typical extensions that can be provided in place of a the value are [http://hl7.org/fhir/StructureDefinition/data-absent-reason](http://hl7.org/fhir/extensions/StructureDefinition-data-absent-reason.html),  [http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor](http://hl7.org/fhir/extensions/StructureDefinition-iso21090-nullFlavor.html),  [http://hl7.org/fhir/StructureDefinition/originalText](http://hl7.org/fhir/extensions/StructureDefinition-originalText.html), and [http://hl7.org/fhir/StructureDefinition/cqf-expression](http://hl7.org/fhir/extensions/StructureDefinition-cqf-expression.html). Note that this element has no meaning when a value is provided, and extensions can be provided in addition to a value.
     */
    mustHaveValue?: boolean;
    /**
     * Extension for mustHaveValue
     **/
    _mustHaveValue?: Element;
    /**
     * Extensions that are allowed to replace a primitive value
     * Specifies a list of extensions that can appear in place of a primitive value.
     * if mustHaveValue is true, then this element should not be present, since no extensions are allowed in place of the value. Note that this element has no impact if the value is present.
     */
    valueAlternatives?: canonical[];
    /**
     * Extension for valueAlternatives
     **/
    _valueAlternatives?: Element[];
    /**
     * If the element must be supported (discouraged - see obligations)
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way. Note that this is being phased out and replaced by obligations (see below).  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     * "Something meaningful" is context dependent and impossible to describe in the base FHIR specification. For this reason, the mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles.  A profile on a type can always make mustSupport = true if it is false in the base type but cannot make mustSupport = false if it is true in the base type.   This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of "support" is required, as this can mean many things.    Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.
     */
    mustSupport?: boolean;
    /**
     * Extension for mustSupport
     **/
    _mustSupport?: Element;
    /**
     * If this modifies the meaning of other elements
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system. When used on the root element in an extension definition, this indicates whether or not the extension is a modifier extension.
     * Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles (except in the special case of the defining a new extension). An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.
     */
    isModifier?: boolean;
    /**
     * Extension for isModifier
     **/
    _isModifier?: Element;
    /**
     * Reason that this element is marked as a modifier
     * Explains how that element affects the interpretation of the resource or element that contains it.
     */
    isModifierReason?: string;
    /**
     * Extension for isModifierReason
     **/
    _isModifierReason?: Element;
    /**
     * Include when _summary = true?
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     * Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance. When a request is made with _summary=true, serializers only include elements marked as 'isSummary = true'. With a few exceptions (listed below), all datatype properties are included in the summary form. In resource and datatype definitions, if an element has a descendant marked as isSummary=true or if it satisfies both of the following conditions, it must be marked as isSummary=true:
* is at the root or has a parent that is 'mustSupport'
* has a minimum cardinality of 1 or is a modifier element

The following datatype properties are exceptions, and are not marked as isSummary:
* Attachment.data
* Signature.data, Signature.targetFormat, Signature.sigFormat
* Narrative.status, Narrative.div
* SampledData.data.
     */
    isSummary?: boolean;
    /**
     * Extension for isSummary
     **/
    _isSummary?: Element;
    /**
     * ValueSet details if this is coded
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
     */
    binding?: ElementDefinitionBinding;
    /**
     * Map element to another set of definitions
     * Identifies a concept from an external specification that roughly corresponds to this element.
     * Mappings are not necessarily specific enough for safe translation.
     */
    mapping?: ElementDefinitionMapping[];
    /**
     * xmlAttr | xmlText | typeAttr | cdaText | xhtml
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case. No extensions are allowed on elements with a representation of 'xmlAttr', no matter what FHIR serialization format is used.
     * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).
     */
    representation?: ElementDefinitionPropertyRepresentation[];
}
/**
 * An expression that can be used to generate a value
 * A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
 */
export interface Expression extends DataType {
    /**
     * Natural language description of the condition
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Short name assigned to expression for reuse
     * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
     */
    name?: code;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Expression in specified language
     * An expression in the specified language that returns a value.
     * If Expression.expression and Expression.reference are both present, the Expression.expression might just be a name pointing something within the referenced content.
     */
    expression?: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * Where the expression is found
     * A URI that defines where the expression is found.
     * If both a reference and an expression is found, the reference SHALL point to the same expression.
     */
    reference?: uri;
    /**
     * Extension for reference
     **/
    _reference?: Element;
    /**
     * text/cql | text/fhirpath | application/x-fhir-query | etc.
     * The media type of the language for the expression.
     */
    language?: ExpressionLanguage;
}
/**
 * Name of a human or other living entity - parts and usage
 * A name, normally of a human, that can be used for other living entities (e.g. animals but not organizations) that have been assigned names by a human and may need the use of name parts or the need for usage information.
 * Names may be changed, or repudiated, or people may have different names in different contexts. Names may be divided into parts of different type that have variable significance depending on context, though the division into parts does not always matter. With personal names, the different parts might or might not be imbued with some implicit meaning; various cultures associate different importance with the name parts and the degree to which systems must care about name parts around the world varies widely.
 */
export interface HumanName extends DataType {
    /**
     * Text representation of the full name
     * Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
     * Can provide both a text representation and parts. Applications updating a name SHALL ensure that when both text and parts are present,  no content is included in the text that isn't found in a part.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Family name (often called 'Surname')
     * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
     * Family Name may be decomposed into specific parts using extensions (de, nl, es related cultures).
     */
    family?: string;
    /**
     * Extension for family
     **/
    _family?: Element;
    /**
     * Given names (not always 'first'). Includes middle names
     * Given name.
     * If only initials are recorded, they may be used in place of the full name parts. Initials may be separated into multiple given names but often aren't due to paractical limitations.  This element is not called "first name" since given names do not always come first.
     */
    given?: string[];
    /**
     * Extension for given
     **/
    _given?: Element[];
    /**
     * Parts that come before the name
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
     */
    prefix?: string[];
    /**
     * Extension for prefix
     **/
    _prefix?: Element[];
    /**
     * Parts that come after the name
     * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
     */
    suffix?: string[];
    /**
     * Extension for suffix
     **/
    _suffix?: Element[];
    /**
     * Time period when name was/is in use
     * Indicates the period of time when this name was valid for the named person.
     */
    period?: Period;
    /**
     * usual | official | temp | nickname | anonymous | old | maiden
     * Identifies the purpose for this name.
     * Applications can assume that a name is current unless it explicitly says that it is temporary or old.
     */
    use?: HumanNameNameUse;
}
/**
 * An identifier intended for computation
 * An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
 * The rules of the identifier.type  determine if a check digit is part of the ID value or sent separately, such as through the checkDigit extension.
 */
export interface Identifier extends DataType {
    /**
     * Description of identifier
     * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
     * This element deals only with general categories of identifiers.  It SHOULD not be used for codes that correspond 1..1 with the Identifier.system. Some identifiers may fall into multiple categories due to common usage.   Where the system is known, a type is unnecessary because the type is always part of the system definition. However systems often need to handle identifiers where the system is not known. There is not a 1:1 relationship between type and system, since many different systems have the same type.
     */
    type?: CodeableConcept;
    /**
     * The namespace for the identifier value
     * Establishes the namespace for the value - that is, an absolute URL that describes a set values that are unique.
     * Identifier.system is always case sensitive.
     */
    system?: uri;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * The value that is unique
     * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
     * If the value is a full URI, then the system SHALL be urn:ietf:rfc:3986.  The value's primary purpose is computational mapping.  As a result, it may be normalized for comparison purposes (e.g. removing non-significant whitespace, dashes, etc.)  A value formatted for human display can be conveyed using the [http://hl7.org/fhir/StructureDefinition/rendered-value](http://hl7.org/fhir/extensions/StructureDefinition-rendered-value.html)). Identifier.value is to be treated as case sensitive unless knowledge of the Identifier.system allows the processer to be confident that non-case-sensitive processing is safe.
     */
    value?: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * Time period when id is/was valid for use
     * Time period during which identifier is/was valid for use.
     */
    period?: Period;
    /**
     * Organization that issued id (may be just text)
     * Organization that issued/manages the identifier.
     * The Identifier.assigner may omit the .reference element and only contain a .display element reflecting the name or other textual information about the assigning organization.
     */
    assigner?: Reference;
    /**
     * usual | official | temp | secondary | old (If known)
     * The purpose of this identifier.
     * Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
     */
    use?: IdentifierUse;
}
/**
 * Availability data for an {item}
 * Availability data for an {item}.
 */
export interface MonetaryComponent extends DataType {
    /**
     * Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     * Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     */
    code?: CodeableConcept;
    /**
     * Factor used for calculating this component
     * Factor used for calculating this component.
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Explicit value amount to be used
     * Explicit value amount to be used.
     */
    amount?: Money;
    /**
     * base | surcharge | deduction | discount | tax | informational
     * base | surcharge | deduction | discount | tax | informational.
     */
    type: MonetaryComponentPriceComponentType;
}
/**
 * Human-readable summary of the resource (essential clinical and business information)
 * A human-readable summary of the resource conveying the essential clinical and business information for the resource.
 */
export interface Narrative extends DataType {
    /**
     * Limited xhtml content
     * The actual narrative content, a stripped down version of XHTML.
     * The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, <a> elements (either name or href), images and internally contained stylesheets. The XHTML content SHALL NOT contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.
     */
    div: xhtml;
    /**
     * Extension for div
     **/
    _div?: Element;
    /**
     * generated | extensions | additional | empty
     * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
     */
    status: NarrativeStatus;
}
/**
 * Definition of a parameter to a module
 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
 */
export interface ParameterDefinition extends DataType {
    /**
     * Name used to access the parameter value
     * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
     */
    name?: code;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Minimum cardinality
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    min?: integer;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Maximum cardinality (a number of *)
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    max?: string;
    /**
     * Extension for max
     **/
    _max?: Element;
    /**
     * A brief description of the parameter
     * A brief discussion of what the parameter is for and how it is used by the module.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * What type of value
     * The type of the parameter.
     */
    type: code;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * What profile the value is expected to be
     * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
     */
    profile?: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
    /**
     * in | out
     * Whether the parameter is input or output for the module.
     */
    use: ParameterDefinitionParameterUse;
}
/**
 * A measured or measurable amount
 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Quantity extends DataType {
    /**
     * Numerical value (with implicit precision)
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
     */
    value?: decimal;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * Unit representation
     * A human-readable form of the unit.
     */
    unit?: string;
    /**
     * Extension for unit
     **/
    _unit?: Element;
    /**
     * System that defines coded unit form
     * The identification of the system that provides the coded form of the unit.
     */
    system?: uri;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * Coded form of the unit
     * A computer processable form of the unit in some unit representation system.
     * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
     */
    code?: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * < | <= | >= | > | ad - how to understand the value
     * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: QuantityComparator;
}
/**
 * Related artifacts for a knowledge resource
 * Related artifacts such as additional documentation, justification, or bibliographic references.
 * Each related artifact is either an attachment, or a reference to another knowledge resource, but not both.
 */
export interface RelatedArtifact extends DataType {
    /**
     * Additional classifiers
     * Provides additional classifiers of the related artifact.
     */
    classifier?: CodeableConcept[];
    /**
     * Short label
     * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
     */
    label?: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Brief description of the related artifact
     * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Bibliographic citation for the artifact
     * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
     * Additional structured information about citations should be captured as extensions.
     */
    citation?: markdown;
    /**
     * Extension for citation
     **/
    _citation?: Element;
    /**
     * What document is being referenced
     * The document being referenced, represented as an attachment. This is exclusive with the resource element.
     */
    document?: Attachment;
    /**
     * What artifact is being referenced
     * The related artifact, such as a library, value set, profile, or other knowledge resource.
     * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
     */
    resource?: canonical;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * What artifact, if not a conformance resource
     * The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.
     * If both resource and resourceReference are present, they SHOULD be consistent and reference the same resource. Although relatedArtifact is intended to support references to definitional resources, there are cases where non-definitional resources can be definitional (such as Location where the kind is mode). Related artifacts SHOULD be used to reference definitional resources, and profiles SHOULD be used to make that explicit for particular use cases.
     */
    resourceReference?: Reference;
    /**
     * Date of publication of the artifact being referred to
     * The date of publication of the artifact being referred to.
     */
    publicationDate?: date;
    /**
     * Extension for publicationDate
     **/
    _publicationDate?: Element;
    /**
     * documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of | part-of | amends | amended-with | appends | appended-with | cites | cited-by | comments-on | comment-in | contains | contained-in | corrects | correction-in | replaces | replaced-with | retracts | retracted-by | signs | similar-to | supports | supported-with | transforms | transformed-into | transformed-with | documents | specification-of | created-with | cite-as
     * The type of relationship to the related artifact.
     * The presence of both sides of a relationship type (e.g. successor and predecessor) is required to support use cases where one side of a relationship is not represented in FHIR. However, this feature SHALL NOT be used to create bi-directional resource links in FHIR instances. Specifically, following the methodology of "new points to old" and "many points to one", when using related artifact elements to describe and reference FHIR resources, the type element SHALL be drawn from the fhir-related-artifact-type ValueSet.
     */
    type: RelatedArtifactType;
    /**
     * draft | active | retired | unknown
     * The publication status of the artifact being referred to.
     */
    publicationStatus?: RelatedArtifactPublicationStatus;
}
/**
 * When the event is to occur
 * A set of rules that describe when the event is scheduled.
 */
export interface TimingRepeat extends Element {
    /**
     * Length/Range of lengths, or (Start and/or end) limits
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsDuration?: Duration;
    /**
     * Length/Range of lengths, or (Start and/or end) limits
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsRange?: Range;
    /**
     * Length/Range of lengths, or (Start and/or end) limits
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsPeriod?: Period;
    /**
     * Number of times to repeat
     * A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
     * If you have both bounds and count, then this should be understood as within the bounds period, until count times happens.
     */
    count?: positiveInt;
    /**
     * Extension for count
     **/
    _count?: Element;
    /**
     * Maximum number of times to repeat
     * If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
     */
    countMax?: positiveInt;
    /**
     * Extension for countMax
     **/
    _countMax?: Element;
    /**
     * How long when it happens
     * How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
     * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
     */
    duration?: decimal;
    /**
     * Extension for duration
     **/
    _duration?: Element;
    /**
     * How long when it happens (Max)
     * If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
     * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
     */
    durationMax?: decimal;
    /**
     * Extension for durationMax
     **/
    _durationMax?: Element;
    /**
     * Indicates the number of repetitions that should occur within a period. I.e. Event occurs frequency times per period
     * The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
     */
    frequency?: positiveInt;
    /**
     * Extension for frequency
     **/
    _frequency?: Element;
    /**
     * Event occurs up to frequencyMax times per period
     * If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
     */
    frequencyMax?: positiveInt;
    /**
     * Extension for frequencyMax
     **/
    _frequencyMax?: Element;
    /**
     * The duration to which the frequency applies. I.e. Event occurs frequency times per period
     * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
     */
    period?: decimal;
    /**
     * Extension for period
     **/
    _period?: Element;
    /**
     * Upper limit of period (3-4 hours)
     * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
     */
    periodMax?: decimal;
    /**
     * Extension for periodMax
     **/
    _periodMax?: Element;
    /**
     * Time of day for action
     * Specified time of day for action to take place.
     * When time of day is specified, it is inferred that the action happens every day (as filtered by dayofWeek) on the specified times. If there's a timeOfDay, there cannot be a when, or vice versa.
     */
    timeOfDay?: time[];
    /**
     * Extension for timeOfDay
     **/
    _timeOfDay?: Element[];
    /**
     * Code for time period of occurrence
     * An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
     * When more than one event is listed, the event is tied to the union of the specified events.
     */
    when?: code[];
    /**
     * Extension for when
     **/
    _when?: Element[];
    /**
     * Minutes from event (before or after)
     * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
     */
    offset?: unsignedInt;
    /**
     * Extension for offset
     **/
    _offset?: Element;
    /**
     * s | min | h | d | wk | mo | a - unit of time (UCUM)
     * The units of time for the duration, in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.
     */
    durationUnit?: TimingUnitsOfTime;
    /**
     * s | min | h | d | wk | mo | a - unit of time (UCUM)
     * The units of time for the period in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.
     */
    periodUnit?: TimingUnitsOfTime;
    /**
     * mon | tue | wed | thu | fri | sat | sun
     * If one or more days of week is provided, then the action happens only on the specified day(s).
     * If no days are specified, the action is assumed to happen every day as otherwise specified.
     */
    dayOfWeek?: TimingDayOfWeek[];
}
/**
 * A timing schedule that specifies an event that may occur multiple times
 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
 * Describes the occurrence of an event that may occur multiple times. Timing schedules are used for specifying when events are expected or requested to occur, and may also be used to represent the summary of a past or ongoing event.  For simplicity, the definitions of Timing components are expressed as 'future' events, but such components can also be used to describe historic or ongoing events.

A Timing schedule can be a list of events and/or criteria for when the event happens, which can be expressed in a structured form and/or as a code. When both event and a repeating specification are provided, the list of events should be understood as an interpretation of the information in the repeat structure.
 */
export interface Timing extends BackboneType {
    /**
     * When the event occurs
     * Identifies specific times when the event occurs.
     */
    event?: dateTime[];
    /**
     * Extension for event
     **/
    _event?: Element[];
    /**
     * When the event is to occur
     * A set of rules that describe when the event is scheduled.
     */
    repeat?: TimingRepeat;
    /**
     * C | BID | TID | QID | AM | PM | QD | QOD | +
     * A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
     * BID etc. are defined as 'at institutionally specified times'. For example, an institution may choose that BID is "always at 7am and 6pm".  If it is inappropriate for this choice to be made, the code BID should not be used. Instead, a distinct organization-specific code should be used in place of the HL7-defined BID code and/or a structured representation should be used (in this case, specifying the two event times).
     */
    code?: CodeableConcept;
}
/**
 * Defines an expected trigger for a module
 * A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
 * If an event is a named-event, it means the event is completely pre-coordinated, and no other information can be specified for the event. If the event is one of the data- events, the data and condition elements specify the triggering criteria. The data element specifies the structured component, and the condition element provides additional optional refinement of that structured component. If the event is periodic, the timing element defines when the event is triggered. For both data- and periodic events, a name can be provided as a shorthand for the formal semantics provided by the other elements.
 */
export interface TriggerDefinition extends DataType {
    /**
     * Name or URI that identifies the event
     * A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
     * An event name can be provided for all event types, but is required for named events. If a name is provided for a type other than named events, it is considered to be a shorthand for the semantics described by the formal description of the event.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Coded definition of the event
     * A code that identifies the event.
     */
    code?: CodeableConcept;
    /**
     * What event
     * A reference to a SubscriptionTopic resource that defines the event. If this element is provided, no other information about the trigger definition may be supplied.
     */
    subscriptionTopic?: canonical;
    /**
     * Extension for subscriptionTopic
     **/
    _subscriptionTopic?: Element;
    /**
     * Timing of the event
     * The timing of the event (if this is a periodic trigger).
     */
    timingTiming?: Timing;
    /**
     * Timing of the event
     * The timing of the event (if this is a periodic trigger).
     */
    timingReference?: Reference;
    /**
     * Timing of the event
     * The timing of the event (if this is a periodic trigger).
     */
    timingDate?: date;
    /**
     * Extension for timingDate
     **/
    _timingDate?: Element;
    /**
     * Timing of the event
     * The timing of the event (if this is a periodic trigger).
     */
    timingDateTime?: dateTime;
    /**
     * Extension for timingDateTime
     **/
    _timingDateTime?: Element;
    /**
     * Triggering data of the event (multiple = 'and')
     * The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
     * This element shall be present for any data type trigger.
     */
    data?: DataRequirement[];
    /**
     * Whether the event triggers (boolean expression)
     * A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
     * This element can be only be specified for data type triggers and provides additional semantics for the trigger. The context available within the condition is based on the type of data event. For all events, the current resource will be available as context. In addition, for modification events, the previous resource will also be available. The expression may be inlined, or may be a simple absolute URI, which is a reference to a named expression within a logic library referenced by a library element or extension within the containing resource. If the expression is a FHIR Path expression, it evaluates in the context of a resource of one of the type identified in the data requirement, and may also refer to the variable %previous for delta comparisons on events of type data-changed, data-modified, and data-deleted which will always have the same type.
     */
    condition?: Expression;
    /**
     * named-event | periodic | data-changed | data-added | data-modified | data-removed | data-accessed | data-access-ended
     * The type of triggering event.
     */
    type: TriggerDefinitionTriggerType;
}
/**
 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
 * Typically. this may be some form of insurance, internal charges, or self-pay.

Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
export interface AccountCoverage extends BackboneElement {
    /**
     * The party(s), such as insurances, that may contribute to the payment of this account
     * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).

A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
     */
    coverage: Reference;
    /**
     * The priority of the coverage in the context of this account
     * The priority of the coverage in the context of this account.
     * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
     */
    priority?: positiveInt;
    /**
     * Extension for priority
     **/
    _priority?: Element;
}
/**
 * The parties ultimately responsible for balancing the Account
 * The parties responsible for balancing the account if other payment options fall short.
 */
export interface AccountGuarantor extends BackboneElement {
    /**
     * Responsible entity
     * The entity who is responsible.
     */
    party: Reference;
    /**
     * Credit or other hold applied
     * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
     */
    onHold?: boolean;
    /**
     * Extension for onHold
     **/
    _onHold?: Element;
    /**
     * Guarantee account during
     * The timeframe during which the guarantor accepts responsibility for the account.
     */
    period?: Period;
}
/**
 * The list of diagnoses relevant to this account
 * When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
 */
export interface AccountDiagnosis extends BackboneElement {
    /**
     * Ranking of the diagnosis (for each type)
     * Ranking of the diagnosis (for each type).
     */
    sequence?: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * The diagnosis relevant to the account
     * The diagnosis relevant to the account.
     */
    condition: CodeableReference;
    /**
     * Date of the diagnosis (when coded diagnosis)
     * Ranking of the diagnosis (for each type).
     */
    dateOfDiagnosis?: dateTime;
    /**
     * Extension for dateOfDiagnosis
     **/
    _dateOfDiagnosis?: Element;
    /**
     * Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …)
     * Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …).
     */
    type?: CodeableConcept[];
    /**
     * Diagnosis present on Admission
     * Was the Diagnosis present on Admission in the related Encounter.
     */
    onAdmission?: boolean;
    /**
     * Extension for onAdmission
     **/
    _onAdmission?: Element;
    /**
     * Package Code specific for billing
     * The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs.
     */
    packageCode?: CodeableConcept[];
}
/**
 * The list of procedures relevant to this account
 * When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
 */
export interface AccountProcedure extends BackboneElement {
    /**
     * Ranking of the procedure (for each type)
     * Ranking of the procedure (for each type).
     */
    sequence?: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * The procedure relevant to the account
     * The procedure relevant to the account.
     */
    code: CodeableReference;
    /**
     * Date of the procedure (when coded procedure)
     * Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used.
     */
    dateOfService?: dateTime;
    /**
     * Extension for dateOfService
     **/
    _dateOfService?: Element;
    /**
     * How this procedure value should be used in charging the account
     * How this procedure value should be used in charging the account.
     */
    type?: CodeableConcept[];
    /**
     * Package Code specific for billing
     * The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs.
     */
    packageCode?: CodeableConcept[];
    /**
     * Any devices that were associated with the procedure
     * Any devices that were associated with the procedure relevant to the account.
     */
    device?: Reference[];
}
/**
 * Other associated accounts related to this account
 * Other associated accounts related to this account.
 */
export interface AccountRelatedAccount extends BackboneElement {
    /**
     * Relationship of the associated Account
     * Relationship of the associated Account.
     */
    relationship?: CodeableConcept;
    /**
     * Reference to an associated Account
     * Reference to an associated Account.
     */
    account: Reference;
}
/**
 * Calculated account balance(s)
 * The calculated account balances - these are calculated and processed by the finance system.

The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.
 */
export interface AccountBalance extends BackboneElement {
    /**
     * Who is expected to pay this part of the balance
     * Who is expected to pay this part of the balance.
     */
    aggregate?: CodeableConcept;
    /**
     * current | 30 | 60 | 90 | 120
     * The term of the account balances - The balance value is the amount that was outstanding for this age.
     */
    term?: CodeableConcept;
    /**
     * Estimated balance
     * The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process).
     */
    estimate?: boolean;
    /**
     * Extension for estimate
     **/
    _estimate?: Element;
    /**
     * Calculated amount
     * The actual balance value calculated for the age defined in the term property.
     */
    amount: Money;
}
/**
 * Tracks balance, charges, for patient or cost center
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export interface Account extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Account';
    /**
     * Account number
     * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
     */
    identifier?: Identifier[];
    /**
     * Tracks the lifecycle of the account through the billing process
     * The BillingStatus tracks the lifecycle of the account through the billing process. It indicates how transactions are treated when they are allocated to the account.
     */
    billingStatus?: CodeableConcept;
    /**
     * E.g. patient, expense, depreciation
     * Categorizes the account for reporting and searching purposes.
     */
    type?: CodeableConcept;
    /**
     * Human-readable label
     * Name used for the account when displaying it to humans in reports, etc.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * The entity that caused the expenses
     * Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
     * Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.
     */
    subject?: Reference[];
    /**
     * Transaction window
     * The date range of services associated with this account.
     * It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.
     */
    servicePeriod?: Period;
    /**
     * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
     * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
     * Typically. this may be some form of insurance, internal charges, or self-pay.

Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
     */
    coverage?: AccountCoverage[];
    /**
     * Entity managing the Account
     * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
     */
    owner?: Reference;
    /**
     * Explanation of purpose/use
     * Provides additional information about what the account tracks and how it is used.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The parties ultimately responsible for balancing the Account
     * The parties responsible for balancing the account if other payment options fall short.
     */
    guarantor?: AccountGuarantor[];
    /**
     * The list of diagnoses relevant to this account
     * When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
     */
    diagnosis?: AccountDiagnosis[];
    /**
     * The list of procedures relevant to this account
     * When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
     */
    procedure?: AccountProcedure[];
    /**
     * Other associated accounts related to this account
     * Other associated accounts related to this account.
     */
    relatedAccount?: AccountRelatedAccount[];
    /**
     * The base or default currency
     * The default currency for the account.
     */
    currency?: CodeableConcept;
    /**
     * Calculated account balance(s)
     * The calculated account balances - these are calculated and processed by the finance system.

The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.
     */
    balance?: AccountBalance[];
    /**
     * Time the balance amount was calculated
     * Time the balance amount was calculated.
     * The total(s) are not typically updated using the restful API but more often by back-end processes included in a typical finance system.
     */
    calculatedAt?: instant;
    /**
     * Extension for calculatedAt
     **/
    _calculatedAt?: Element;
    /**
     * active | inactive | entered-in-error | on-hold | unknown
     * Indicates whether the account is presently used/usable or not.
     * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
     */
    status: AccountStatus;
}
/**
 * Who should participate in the action
 * Indicates who should participate in performing the action described.
 */
export interface ActivityDefinitionParticipant extends BackboneElement {
    /**
     * Who or what can participate
     * The type of participant in the action.
     */
    typeCanonical?: canonical;
    /**
     * Extension for typeCanonical
     **/
    _typeCanonical?: Element;
    /**
     * Who or what can participate
     * The type of participant in the action.
     * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
     */
    typeReference?: Reference;
    /**
     * E.g. Nurse, Surgeon, Parent, etc
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
    /**
     * E.g. Author, Reviewer, Witness, etc
     * Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
     */
    function?: CodeableConcept;
    /**
     * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
     * The type of participant in the action.
     */
    type?: ActivityDefinitionActivityParticipantType;
}
/**
 * Dynamic aspects of the definition
 * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
 * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
 */
export interface ActivityDefinitionDynamicValue extends BackboneElement {
    /**
     * The path to the element to be set dynamically
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
     */
    path: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * An expression that provides the dynamic value for the customization
     * An expression specifying the value of the customized element.
     * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
     */
    expression: Expression;
}
/**
 * The definition of a specific activity to be taken, independent of any particular patient or context
 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
 */
export interface ActivityDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ActivityDefinition';
    /**
     * Canonical identifier for this activity definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the activity definition
     * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the activity definition
     * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
     * There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the activity definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this activity definition (computer friendly)
     * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this activity definition (human friendly)
     * A short, descriptive, user-friendly title for the activity definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate title of the activity definition
     * An explanatory or alternate title for the activity definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of activity definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Type of individual the activity definition is intended for
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * Type of individual the activity definition is intended for
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
     */
    subjectReference?: Reference;
    /**
     * Type of individual the activity definition is intended for
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
     */
    subjectCanonical?: canonical;
    /**
     * Extension for subjectCanonical
     **/
    _subjectCanonical?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the activity definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the activity definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the activity definition
     * A free text natural language description of the activity definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the activity definition is presumed to be the predominant language in the place the activity definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for activity definition (if applicable)
     * A legal or geographic region in which the activity definition is intended to be used.
     * It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this activity definition is defined
     * Explanation of why this activity definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the activity definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Describes the clinical usage of the activity definition
     * A detailed description of how the activity definition is used from a clinical perspective.
     */
    usage?: markdown;
    /**
     * Extension for usage
     **/
    _usage?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the activity definition was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the activity definition was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the activity definition is expected to be used
     * The period during which the activity definition content was or is planned to be in active use.
     * The effective period for an activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a activity intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the content
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Logic used by the activity definition
     * A reference to a Library resource containing any formal logic used by the activity definition.
     */
    library?: canonical[];
    /**
     * Extension for library
     **/
    _library?: Element[];
    /**
     * Kind of resource
     * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
     * The kind element may only specify Request resource types to facilitate considering user input as part of processing the result of any automated clinical reasoning processes. To support creation of event resources, such as Observations, RiskAssessments, and DetectedIssues, use a Task resource with the focus of the task set to the event resource to be created. Note that the kind of resource to be created may determine what types of extensions are permitted.
     */
    kind?: code;
    /**
     * Extension for kind
     **/
    _kind?: Element;
    /**
     * What profile the resource needs to conform to
     * A profile to which the target of the activity definition is expected to conform.
     */
    profile?: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
    /**
     * Detail type of activity
     * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
     * Tends to be less relevant for activities involving particular products.
     */
    code?: CodeableConcept;
    /**
     * True if the activity should not be performed
     * Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
     * This element is not intended to be used to communicate a decision support response to cancel an order in progress. That should be done with the "remove" type of a PlanDefinition or RequestOrchestration.
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * When activity is to occur
     * The timing or frequency upon which the described activity is to occur.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingTiming?: Timing;
    /**
     * When activity is to occur
     * The timing or frequency upon which the described activity is to occur.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingAge?: Age;
    /**
     * When activity is to occur
     * The timing or frequency upon which the described activity is to occur.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingRange?: Range;
    /**
     * When activity is to occur
     * The timing or frequency upon which the described activity is to occur.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingDuration?: Duration;
    /**
     * Preconditions for service
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededBoolean?: boolean;
    /**
     * Extension for asNeededBoolean
     **/
    _asNeededBoolean?: Element;
    /**
     * Preconditions for service
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * Where it should happen
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     * May reference a specific clinical location or may just identify a type of location.
     */
    location?: CodeableReference;
    /**
     * Who should participate in the action
     * Indicates who should participate in performing the action described.
     */
    participant?: ActivityDefinitionParticipant[];
    /**
     * What's administered/supplied
     * Identifies the food, drug or other product being consumed or supplied in the activity.
     */
    productReference?: Reference;
    /**
     * What's administered/supplied
     * Identifies the food, drug or other product being consumed or supplied in the activity.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * How much is administered/consumed/supplied
     * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
     */
    quantity?: Quantity;
    /**
     * Detailed dosage instructions
     * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
     * If a dosage instruction is used, the definition should not specify timing or quantity.
     */
    dosage?: Dosage[];
    /**
     * What part of body to perform on
     * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
     * Only used if not implicit in the code found in ServiceRequest.type.
     */
    bodySite?: CodeableConcept[];
    /**
     * What specimens are required to perform this action
     * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
     */
    specimenRequirement?: canonical[];
    /**
     * Extension for specimenRequirement
     **/
    _specimenRequirement?: Element[];
    /**
     * What observations are required to perform this action
     * Defines observation requirements for the action to be performed, such as body weight or surface area.
     */
    observationRequirement?: canonical[];
    /**
     * Extension for observationRequirement
     **/
    _observationRequirement?: Element[];
    /**
     * What observations must be produced by this action
     * Defines the observations that are expected to be produced by the action.
     */
    observationResultRequirement?: canonical[];
    /**
     * Extension for observationResultRequirement
     **/
    _observationResultRequirement?: Element[];
    /**
     * Transform to apply the template
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     * Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
     */
    transform?: canonical;
    /**
     * Extension for transform
     **/
    _transform?: Element;
    /**
     * Dynamic aspects of the definition
     * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
     * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
     */
    dynamicValue?: ActivityDefinitionDynamicValue[];
    /**
     * draft | active | retired | unknown
     * The status of this activity definition. Enables tracking the life-cycle of the content.
     * Allows filtering of activity definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ActivityDefinitionPublicationStatus;
    /**
     * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
     * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
     */
    intent?: ActivityDefinitionRequestIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the activity  should be addressed with respect to other requests.
     */
    priority?: ActivityDefinitionRequestPriority;
}
/**
 * An application that exchanges data
 * Describes an actor - a human or an application that plays a role in data exchange, and that may have obligations associated with the role the actor plays.
 */
export interface ActorDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ActorDefinition';
    /**
     * Canonical identifier for this actor definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this actor definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this actor definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the actor definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the actor definition (business identifier)
     * A formal identifier that is used to identify this actor definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the actor definition
     * The identifier that is used to identify this version of the actor definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the actor definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different actor definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the actor definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this actor definition (computer friendly)
     * A natural language name identifying the actor definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this actor definition (human friendly)
     * A short, descriptive, user-friendly title for the actor definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this actor definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of actor definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the actor definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the actor definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the actor definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the actor definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the actor definition is the organization or individual primarily responsible for the maintenance and upkeep of the actor definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the actor definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the actor
     * A free text natural language description of the actor.
     * This description can be used for a general description of the actor, and which covers why it was defined.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate actor definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for actor definition (if applicable)
     * A legal or geographic region in which the actor definition is intended to be used.
     * It may be possible for the actor definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this actor definition is defined
     * Explanation of why this actor definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the actor definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this actor definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the actor definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the actor definition.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Functionality associated with the actor
     * Documentation about the functionality of the actor.
     * In general terms, the description desribes what the actor is, and this element describes what the actor does (or is expected to do).
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Reference to more information about the actor
     * A reference to additional documentation about the actor, but description and documentation.
     */
    reference?: url[];
    /**
     * Extension for reference
     **/
    _reference?: Element[];
    /**
     * CapabilityStatement for the actor (if applicable)
     * The capability statement for the actor (if the concept is applicable).
     */
    capabilities?: canonical;
    /**
     * Extension for capabilities
     **/
    _capabilities?: Element;
    /**
     * Definition of this actor in another context / IG
     * A url that identifies the definition of this actor in another IG (which IG must be listed in the dependencies). This actor inherits all the obligations etc. as defined in the other IG.
     */
    derivedFrom?: canonical[];
    /**
     * Extension for derivedFrom
     **/
    _derivedFrom?: Element[];
    /**
     * draft | active | retired | unknown
     * The status of this actor definition. Enables tracking the life-cycle of the content.
     * Allows filtering of actor definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ActorDefinitionPublicationStatus;
    /**
     * person | system
     * Whether the actor represents a human or an appliction.
     */
    type: ActorDefinitionExampleScenarioActorType;
}
/**
 * Characteristics e.g. a product's onset of action
 * Characteristics e.g. a product's onset of action.
 */
export interface AdministrableProductDefinitionProperty extends BackboneElement {
    /**
     * A code expressing the type of characteristic
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueReference?: Reference;
    /**
     * The status of characteristic e.g. assigned or pending
     * The status of characteristic e.g. assigned or pending.
     */
    status?: CodeableConcept;
}
/**
 * A species specific time during which consumption of animal product is not appropriate
 * A species specific time during which consumption of animal product is not appropriate.
 */
export interface AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends BackboneElement {
    /**
     * The type of tissue for which the withdrawal period applies, e.g. meat, milk
     * Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, milk.
     */
    tissue: CodeableConcept;
    /**
     * A value for the time
     * A value for the time.
     */
    value: Quantity;
    /**
     * Extra information about the withdrawal period
     * Extra information about the withdrawal period.
     */
    supportingInformation?: string;
    /**
     * Extension for supportingInformation
     **/
    _supportingInformation?: Element;
}
/**
 * A species for which this route applies
 * A species for which this route applies.
 */
export interface AdministrableProductDefinitionRouteOfAdministrationTargetSpecies extends BackboneElement {
    /**
     * Coded expression for the species
     * Coded expression for the species.
     */
    code: CodeableConcept;
    /**
     * A species specific time during which consumption of animal product is not appropriate
     * A species specific time during which consumption of animal product is not appropriate.
     */
    withdrawalPeriod?: AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod[];
}
/**
 * The path by which the product is taken into or makes contact with the body
 * The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. RouteOfAdministration cannot be used when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa).
 */
export interface AdministrableProductDefinitionRouteOfAdministration extends BackboneElement {
    /**
     * Coded expression for the route
     * Coded expression for the route.
     */
    code: CodeableConcept;
    /**
     * The first dose (dose quantity) administered can be specified for the product
     * The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement.
     */
    firstDose?: Quantity;
    /**
     * The maximum single dose that can be administered
     * The maximum single dose that can be administered, specified using a numerical value and its unit of measurement.
     */
    maxSingleDose?: Quantity;
    /**
     * The maximum dose quantity to be administered in any one 24-h period
     * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered.
     */
    maxDosePerDay?: Quantity;
    /**
     * The maximum dose per treatment period that can be administered
     * The maximum dose per treatment period that can be administered.
     */
    maxDosePerTreatmentPeriod?: Ratio;
    /**
     * The maximum treatment period during which the product can be administered
     * The maximum treatment period during which the product can be administered.
     */
    maxTreatmentPeriod?: Duration;
    /**
     * A species for which this route applies
     * A species for which this route applies.
     */
    targetSpecies?: AdministrableProductDefinitionRouteOfAdministrationTargetSpecies[];
}
/**
 * A medicinal product in the final form, suitable for administration - after any mixing of multiple components
 * A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).
 */
export interface AdministrableProductDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'AdministrableProductDefinition';
    /**
     * An identifier for the administrable product
     * An identifier for the administrable product.
     */
    identifier?: Identifier[];
    /**
     * References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product
     * References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product.  If this administrable product describes the administration of a crushed tablet, the 'formOf' would be the product representing a distribution containing tablets and possibly also a cream.  This is distinct from the 'producedFrom' which refers to the specific components of the product that are used in this preparation, rather than the product as a whole.
     */
    formOf?: Reference[];
    /**
     * The dose form of the final product after necessary reconstitution or processing
     * The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection').
     */
    administrableDoseForm?: CodeableConcept;
    /**
     * The presentation type in which this item is given to a patient. e.g. for a spray - 'puff'
     * The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per vial').
     */
    unitOfPresentation?: CodeableConcept;
    /**
     * Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form
     * Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form.  In some cases, an administrable form might use all of the items from the overall product (or there might only be one item), while in other cases, an administrable form might use only a subset of the items available in the overall product.  For example, an administrable form might involve combining a liquid and a powder available as part of an overall product, but not involve applying the also supplied cream.
     */
    producedFrom?: Reference[];
    /**
     * The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton, or using by incoming references from the Ingredient resource
     * The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton (via AdministrableProductDefinition.producedFrom) to state which component items are used to make this, or using by incoming references from the Ingredient resource, to state in detail which substances exist within this. This element allows a basic coded ingredient to be used.
     */
    ingredient?: CodeableConcept[];
    /**
     * A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product
     * A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co-packaged.
     */
    device?: Reference;
    /**
     * A general description of the product, when in its final form, suitable for administration e.g. effervescent blue liquid, to be swallowed
     * A general description of the product, when in its final form, suitable for administration e.g. effervescent blue liquid, to be swallowed. Intended to be used when the other structured properties of this resource are insufficient or cannot be supported. It is not intended to duplicate information already carried elswehere.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Characteristics e.g. a product's onset of action
     * Characteristics e.g. a product's onset of action.
     */
    property?: AdministrableProductDefinitionProperty[];
    /**
     * The path by which the product is taken into or makes contact with the body
     * The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. RouteOfAdministration cannot be used when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa).
     */
    routeOfAdministration: AdministrableProductDefinitionRouteOfAdministration[];
    /**
     * draft | active | retired | unknown
     * The status of this administrable product. Enables tracking the life-cycle of the content.
     * Allows filtering of administrable products that are appropriate for use versus not.
     */
    status: AdministrableProductDefinitionPublicationStatus;
}
/**
 * Who was involved in the adverse event or the potential adverse event and what they did
 * Indicates who or what participated in the adverse event and how they were involved.
 */
export interface AdverseEventParticipant extends BackboneElement {
    /**
     * Type of involvement
     * Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.
     */
    function?: CodeableConcept;
    /**
     * Who was involved in the adverse event or the potential adverse event
     * Indicates who or what participated in the event.
     * For example, the physician prescribing a drug, a nurse administering the drug, a device that administered the drug, a witness to the event, or an informant of clinical history.
     */
    actor: Reference;
}
/**
 * Information on the possible cause of the event
 * Information on the possible cause of the event.
 */
export interface AdverseEventSuspectEntityCausality extends BackboneElement {
    /**
     * Method of evaluating the relatedness of the suspected entity to the event
     * The method of evaluating the relatedness of the suspected entity to the event.
     */
    assessmentMethod?: CodeableConcept;
    /**
     * Result of the assessment regarding the relatedness of the suspected entity to the event
     * The result of the assessment regarding the relatedness of the suspected entity to the event.
     */
    entityRelatedness?: CodeableConcept;
    /**
     * Author of the information on the possible cause of the event
     * The author of the information on the possible cause of the event.
     */
    author?: Reference;
}
/**
 * The suspected agent causing the adverse event
 * Describes the entity that is suspected to have caused the adverse event.
 */
export interface AdverseEventSuspectEntity extends BackboneElement {
    /**
     * Refers to the specific entity that caused the adverse event
     * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
     */
    instanceCodeableConcept?: CodeableConcept;
    /**
     * Refers to the specific entity that caused the adverse event
     * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
     */
    instanceReference?: Reference;
    /**
     * Information on the possible cause of the event
     * Information on the possible cause of the event.
     */
    causality?: AdverseEventSuspectEntityCausality;
}
/**
 * Contributing factors suspected to have increased the probability or severity of the adverse event
 * The contributing factors suspected to have increased the probability or severity of the adverse event.
 */
export interface AdverseEventContributingFactor extends BackboneElement {
    /**
     * Item suspected to have increased the probability or severity of the adverse event
     * The item that is suspected to have increased the probability or severity of the adverse event.
     */
    itemReference?: Reference;
    /**
     * Item suspected to have increased the probability or severity of the adverse event
     * The item that is suspected to have increased the probability or severity of the adverse event.
     */
    itemCodeableConcept?: CodeableConcept;
}
/**
 * Preventive actions that contributed to avoiding the adverse event
 * Preventive actions that contributed to avoiding the adverse event.
 */
export interface AdverseEventPreventiveAction extends BackboneElement {
    /**
     * Action that contributed to avoiding the adverse event
     * The action that contributed to avoiding the adverse event.
     */
    itemReference?: Reference;
    /**
     * Action that contributed to avoiding the adverse event
     * The action that contributed to avoiding the adverse event.
     */
    itemCodeableConcept?: CodeableConcept;
}
/**
 * Ameliorating actions taken after the adverse event occured in order to reduce the extent of harm
 * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
 */
export interface AdverseEventMitigatingAction extends BackboneElement {
    /**
     * Ameliorating action taken after the adverse event occured in order to reduce the extent of harm
     * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
     */
    itemReference?: Reference;
    /**
     * Ameliorating action taken after the adverse event occured in order to reduce the extent of harm
     * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
     */
    itemCodeableConcept?: CodeableConcept;
}
/**
 * Supporting information relevant to the event
 * Supporting information relevant to the event.
 */
export interface AdverseEventSupportingInfo extends BackboneElement {
    /**
     * Subject medical history or document relevant to this adverse event
     * Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
     */
    itemReference?: Reference;
    /**
     * Subject medical history or document relevant to this adverse event
     * Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
     */
    itemCodeableConcept?: CodeableConcept;
}
/**
 * An event that may be related to unintended effects on a patient or research participant
 * An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.
 */
export interface AdverseEvent extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'AdverseEvent';
    /**
     * Business identifier for the event
     * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * wrong-patient | procedure-mishap | medication-mishap | device | unsafe-physical-environment | hospital-aquired-infection | wrong-body-site
     * The overall type of event, intended for search and filtering purposes.
     */
    category?: CodeableConcept[];
    /**
     * Event or incident that occurred or was averted
     * Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.
     */
    code?: CodeableConcept;
    /**
     * Subject impacted by event
     * This subject or group impacted by the event.
     * If AdverseEvent.resultingEffect differs among members of the group, then use Patient as the subject.
     */
    subject: Reference;
    /**
     * The Encounter associated with the start of the AdverseEvent
     * The Encounter associated with the start of the AdverseEvent.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. For example, if a medication administration was considered an adverse event because it resulted in a rash, then the encounter when the medication administration was given is the associated encounter. If the patient reports the AdverseEvent during a second encounter, that second encounter is not the associated encounter.
     */
    encounter?: Reference;
    /**
     * When the event occurred
     * The date (and perhaps time) when the adverse event occurred.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When the event occurred
     * The date (and perhaps time) when the adverse event occurred.
     */
    occurrencePeriod?: Period;
    /**
     * When the event occurred
     * The date (and perhaps time) when the adverse event occurred.
     */
    occurrenceTiming?: Timing;
    /**
     * When the event was detected
     * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
     */
    detected?: dateTime;
    /**
     * Extension for detected
     **/
    _detected?: Element;
    /**
     * When the event was recorded
     * The date on which the existence of the AdverseEvent was first recorded.
     * The recordedDate represents the date when this particular AdverseEvent record was created in the system, not the date of the most recent update.  The date of the last record modification can be retrieved from the resource metadata.
     */
    recordedDate?: dateTime;
    /**
     * Extension for recordedDate
     **/
    _recordedDate?: Element;
    /**
     * Effect on the subject due to this event
     * Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.
     */
    resultingEffect?: Reference[];
    /**
     * Location where adverse event occurred
     * The information about where the adverse event occurred.
     */
    location?: Reference;
    /**
     * Seriousness or gravity of the event
     * Assessment whether this event, or averted event, was of clinical importance.
     * Using an example, a rash can have an AdverseEvent.resultingEffect.severity = severe, yet an AdverseEvent.seriousness = non-serious.  Alternatively, a medication given with the wrong dose (chemotherapy given with too low of a dose) can have an AdverseEvent.resultingEffect.severity = mild, yet an adverseEvent.seriousness = serious.  Another example would be a beta blocker clinical trial where patients with asthma should be excluded, yet a patient with asthma was included and had an asthmatic episode where  AdverseEvent.resultingEffect.severity = mild, yet an adverseEvent.seriousness = serious.
     */
    seriousness?: CodeableConcept;
    /**
     * Type of outcome from the adverse event
     * Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
     */
    outcome?: CodeableConcept[];
    /**
     * Who recorded the adverse event
     * Information on who recorded the adverse event.  May be the patient or a practitioner.
     */
    recorder?: Reference;
    /**
     * Who was involved in the adverse event or the potential adverse event and what they did
     * Indicates who or what participated in the adverse event and how they were involved.
     */
    participant?: AdverseEventParticipant[];
    /**
     * Research study that the subject is enrolled in
     * The research study that the subject is enrolled in.
     */
    study?: Reference[];
    /**
     * Considered likely or probable or anticipated in the research study
     * Considered likely or probable or anticipated in the research study.  Whether the reported event matches any of the outcomes for the patient that are considered by the study as known or likely.
     */
    expectedInResearchStudy?: boolean;
    /**
     * Extension for expectedInResearchStudy
     **/
    _expectedInResearchStudy?: Element;
    /**
     * The suspected agent causing the adverse event
     * Describes the entity that is suspected to have caused the adverse event.
     */
    suspectEntity?: AdverseEventSuspectEntity[];
    /**
     * Contributing factors suspected to have increased the probability or severity of the adverse event
     * The contributing factors suspected to have increased the probability or severity of the adverse event.
     */
    contributingFactor?: AdverseEventContributingFactor[];
    /**
     * Preventive actions that contributed to avoiding the adverse event
     * Preventive actions that contributed to avoiding the adverse event.
     */
    preventiveAction?: AdverseEventPreventiveAction[];
    /**
     * Ameliorating actions taken after the adverse event occured in order to reduce the extent of harm
     * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
     */
    mitigatingAction?: AdverseEventMitigatingAction[];
    /**
     * Supporting information relevant to the event
     * Supporting information relevant to the event.
     */
    supportingInfo?: AdverseEventSupportingInfo[];
    /**
     * Comment on adverse event
     * Comments made about the adverse event by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * in-progress | completed | entered-in-error | unknown
     * The current state of the adverse event or potential adverse event.
     * This is not the reporting of the event to any regulatory or quality organization.  This is not the outcome of the patient's condition.
     */
    status: AdverseEventStatus;
    /**
     * actual | potential
     * Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely.
     * AllergyIntolerance should be used for the initial capture or recording of the individual's propensity to an adverse reaction to a substance.  If an AllergyIntolerance does not exist, then an adverse reaction should be recorded as an AllergyIntolerance. If an AllergyIntolerance does exist and the substance was given, then an adverse reaction should be recorded as an AdverseEvent due to the aberrant workflow.
     */
    actuality: AdverseEventActuality;
}
/**
 * Who or what participated in the activities related to the allergy or intolerance and how they were involved
 * Indicates who or what participated in the activities related to the allergy or intolerance and how they were involved.
 */
export interface AllergyIntoleranceParticipant extends BackboneElement {
    /**
     * Type of involvement
     * Distinguishes the type of involvement of the actor in the activities related to the allergy or intolerance.
     */
    function?: CodeableConcept;
    /**
     * Who or what participated in the activities related to the allergy or intolerance
     * Indicates who or what participated in the activities related to the allergy or intolerance.
     */
    actor: Reference;
}
/**
 * Adverse Reaction Events linked to exposure to substance
 * Details about each adverse reaction event linked to exposure to the identified substance.
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
    /**
     * Specific substance or pharmaceutical product considered to be responsible for event
     * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     * Coding of the specific substance (or pharmaceutical product) with a terminology capable of triggering decision support should be used wherever possible.  The 'code' element allows for the use of a specific substance or pharmaceutical product, or a group or class of substances. In the case of an allergy or intolerance to a class of substances, (for example, "penicillins"), the 'reaction.substance' element could be used to code the specific substance that was identified as having caused the reaction (for example, "amoxycillin"). Duplication of the value in the 'code' and 'reaction.substance' elements is acceptable when a specific substance has been recorded in 'code'.
     */
    substance?: CodeableConcept;
    /**
     * Clinical symptoms/signs associated with the Event
     * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
     * Manifestation can be expressed as a single word, phrase or brief description. For example: nausea, rash or no reaction. It is preferable that manifestation should be coded with a terminology, where possible. The values entered here may be used to display on an application screen as part of a list of adverse reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly used include, but are not limited to, SNOMED CT or ICD10.
     */
    manifestation: CodeableReference[];
    /**
     * Description of the event as a whole
     * Text description about the reaction as a whole, including details of the manifestation if required.
     * Use the description to provide any details of a particular event of the occurred reaction such as circumstances, reaction specifics, what happened before/after. Information, related to the event, but not describing a particular care should be captured in the note field. For example: at the age of four, the patient was given penicillin for strep throat and subsequently developed severe hives.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Date(/time) when manifestations showed
     * Record of the date and/or time of the onset of the Reaction.
     */
    onset?: dateTime;
    /**
     * Extension for onset
     **/
    _onset?: Element;
    /**
     * How the subject was exposed to the substance
     * Identification of the route by which the subject was exposed to the substance.
     * Coding of the route of exposure with a terminology should be used wherever possible.
     */
    exposureRoute?: CodeableConcept;
    /**
     * Text about event not captured in other fields
     * Additional text about the adverse reaction event not captured in other fields.
     * Use this field to record information indirectly related to a particular event and not captured in the description. For example: Clinical records are no longer available, recorded based on information provided to the patient by her mother and her mother is deceased.
     */
    note?: Annotation[];
    /**
     * mild | moderate | severe (of event as a whole)
     * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
     * It is acknowledged that this assessment is very subjective. There may be some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
     */
    severity?: AllergyIntoleranceSeverity;
}
/**
 * Allergy or Intolerance (generally: Risk of adverse reaction to a substance)
 * Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance.
 * Substances include, but are not limited to: a therapeutic substance administered correctly at an appropriate dosage for the individual; food; material derived from plants or animals; or venom from insect stings.
 */
export interface AllergyIntolerance extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'AllergyIntolerance';
    /**
     * External ids for this item
     * Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * active | inactive | resolved
     * The clinical status of the allergy or intolerance.
     * AllergyIntolerance.clinicalStatus should be present if verificationStatus is not entered-in-error and the AllergyIntolerance.code isn't negated (No Known Allergy, No Drug Allergy, No Food Allergy, No Latex Allergy).
Refer to [discussion](extensibility.html#Special-Case) if clinicalStatus is missing data.
The data type is CodeableConcept because clinicalStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * unconfirmed | presumed | confirmed | refuted | entered-in-error
     * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).  The verification status pertains to the allergy or intolerance, itself, not to any specific AllergyIntolerance attribute.
     * The data type is CodeableConcept because verificationStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
     */
    verificationStatus?: CodeableConcept;
    /**
     * allergy | intolerance - Underlying mechanism (if known)
     * Identification of the underlying physiological mechanism for the reaction risk.
     * Allergic (typically immune-mediated) reactions have been traditionally regarded as an indicator for potential escalation to significant future risk. Contemporary knowledge suggests that some reactions previously thought to be immune-mediated are, in fact, non-immune, but in some cases can still pose a life threatening risk. It is acknowledged that many clinicians might not be in a position to distinguish the mechanism of a particular reaction. Often the term "allergy" is used rather generically and may overlap with the use of "intolerance" - in practice the boundaries between these two concepts might not be well-defined or understood. This data element is included nevertheless, because many legacy systems have captured this attribute. Immunologic testing may provide supporting evidence for the basis of the reaction and the causative substance, but no tests are 100% sensitive or specific for sensitivity to a particular substance. If, as is commonly the case, it is unclear whether the reaction is due to an allergy or an intolerance, then the type element should be omitted from the resource.
     */
    type?: CodeableConcept;
    /**
     * Code that identifies the allergy or intolerance
     * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     * It is strongly recommended that this element be populated using a terminology, where possible. For example, some terminologies used include RxNorm, SNOMED CT, DM+D, NDFRT, ICD-9, IDC-10, UNII, and ATC. Plain text should only be used if there is no appropriate terminology available. Additional details can be specified in the text.

When a substance or product code is specified for the 'code' element, the "default" semantic context is that this is a positive statement of an allergy or intolerance (depending on the value of the 'type' element, if present) condition to the specified substance/product.  In the corresponding SNOMED CT allergy model, the specified substance/product is the target (destination) of the "Causative agent" relationship.

The 'substanceExposureRisk' extension is available as a structured and more flexible alternative to the 'code' element for making positive or negative allergy or intolerance statements.  This extension provides the capability to make "no known allergy" (or "no risk of adverse reaction") statements regarding any coded substance/product (including cases when a pre-coordinated "no allergy to x" concept for that substance/product does not exist).  If the 'substanceExposureRisk' extension is present, the AllergyIntolerance.code element SHALL be omitted.
     */
    code?: CodeableConcept;
    /**
     * Who the allergy or intolerance is for
     * The patient who has the allergy or intolerance.
     */
    patient: Reference;
    /**
     * Encounter when the allergy or intolerance was asserted
     * The encounter when the allergy or intolerance was asserted.
     */
    encounter?: Reference;
    /**
     * When allergy or intolerance was identified
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
     */
    onsetDateTime?: dateTime;
    /**
     * Extension for onsetDateTime
     **/
    _onsetDateTime?: Element;
    /**
     * When allergy or intolerance was identified
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
     */
    onsetAge?: Age;
    /**
     * When allergy or intolerance was identified
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
     */
    onsetPeriod?: Period;
    /**
     * When allergy or intolerance was identified
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
     */
    onsetRange?: Range;
    /**
     * When allergy or intolerance was identified
     * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
     * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
     */
    onsetString?: string;
    /**
     * Extension for onsetString
     **/
    _onsetString?: Element;
    /**
     * Date allergy or intolerance was first recorded
     * The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
     * When onset date is unknown, recordedDate can be used to establish if the allergy or intolerance was present on or before a given date.  If the recordedDate is known and provided by a sending system, it is preferred that the receiving system preserve that recordedDate value. If the recordedDate is not provided by the sending system, the receipt timestamp is sometimes used as the recordedDate.
     */
    recordedDate?: dateTime;
    /**
     * Extension for recordedDate
     **/
    _recordedDate?: Element;
    /**
     * Who or what participated in the activities related to the allergy or intolerance and how they were involved
     * Indicates who or what participated in the activities related to the allergy or intolerance and how they were involved.
     */
    participant?: AllergyIntoleranceParticipant[];
    /**
     * Date(/time) of last known occurrence of a reaction
     * Represents the date and/or time of the last known occurrence of a reaction event.
     * This date may be replicated by one of the Onset of Reaction dates. Where a textual representation of the date of last occurrence is required e.g. 'In Childhood, '10 years ago' the AllergyIntolerance.note element should be used.
     */
    lastOccurrence?: dateTime;
    /**
     * Extension for lastOccurrence
     **/
    _lastOccurrence?: Element;
    /**
     * Additional text not captured in other fields
     * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
     * For example: including reason for flagging a seriousness of 'High Risk'; and instructions related to future exposure or administration of the substance, such as administration within an Intensive Care Unit or under corticosteroid cover. The notes should be related to an allergy or intolerance as a condition in general and not related to any particular episode of it. For episode notes and descriptions, use AllergyIntolerance.event.description and  AllergyIntolerance.event.notes.
     */
    note?: Annotation[];
    /**
     * Adverse Reaction Events linked to exposure to substance
     * Details about each adverse reaction event linked to exposure to the identified substance.
     */
    reaction?: AllergyIntoleranceReaction[];
    /**
     * food | medication | environment | biologic
     * Category of the identified substance.
     * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
     */
    category?: AllergyIntoleranceCategory[];
    /**
     * low | high | unable-to-assess
     * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
     * The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).  Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
     */
    criticality?: AllergyIntoleranceCriticality;
}
/**
 * Participants involved in appointment
 * List of participants involved in the appointment.
 */
export interface AppointmentParticipant extends BackboneElement {
    /**
     * Role of participant in the appointment
     * Role of participant in the appointment.
     * The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.

If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.

This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
     */
    type?: CodeableConcept[];
    /**
     * Participation period of the actor
     * Participation period of the actor.
     */
    period?: Period;
    /**
     * The individual, device, location, or service participating in the appointment
     * The individual, device, location, or service participating in the appointment.
     * Where a CareTeam is provided, this does not imply that the entire team is included, just a single member from the group with the appropriate role. Where multiple members are required, please include the CareTeam the required number of times.
     */
    actor?: Reference;
    /**
     * The participant is required to attend (optional when false)
     * Whether this participant is required to be present at the meeting. If false, the participant is optional.
     * For the use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present include the patient in the subject field, but do not include them as a participant - this was formerly done prior to R5 with required='information-only'.
     */
    required?: boolean;
    /**
     * Extension for required
     **/
    _required?: Element;
    /**
     * accepted | declined | tentative | needs-action
     * Participation status of the actor.
     */
    status: AppointmentParticipationStatus;
}
/**
 * Information about weekly recurring appointments
 * Information about weekly recurring appointments.
 */
export interface AppointmentRecurrenceTemplateWeeklyTemplate extends BackboneElement {
    /**
     * Recurs on Mondays
     * Indicates that recurring appointments should occur on Mondays.
     */
    monday?: boolean;
    /**
     * Extension for monday
     **/
    _monday?: Element;
    /**
     * Recurs on Tuesday
     * Indicates that recurring appointments should occur on Tuesdays.
     */
    tuesday?: boolean;
    /**
     * Extension for tuesday
     **/
    _tuesday?: Element;
    /**
     * Recurs on Wednesday
     * Indicates that recurring appointments should occur on Wednesdays.
     */
    wednesday?: boolean;
    /**
     * Extension for wednesday
     **/
    _wednesday?: Element;
    /**
     * Recurs on Thursday
     * Indicates that recurring appointments should occur on Thursdays.
     */
    thursday?: boolean;
    /**
     * Extension for thursday
     **/
    _thursday?: Element;
    /**
     * Recurs on Friday
     * Indicates that recurring appointments should occur on Fridays.
     */
    friday?: boolean;
    /**
     * Extension for friday
     **/
    _friday?: Element;
    /**
     * Recurs on Saturday
     * Indicates that recurring appointments should occur on Saturdays.
     */
    saturday?: boolean;
    /**
     * Extension for saturday
     **/
    _saturday?: Element;
    /**
     * Recurs on Sunday
     * Indicates that recurring appointments should occur on Sundays.
     */
    sunday?: boolean;
    /**
     * Extension for sunday
     **/
    _sunday?: Element;
    /**
     * Recurs every nth week
     * The interval defines if the recurrence is every nth week. The default is every week, so it is expected that this value will be 2 or more.

e.g. For recurring every second week this interval would be 2, or every third week the interval would be 3.
     */
    weekInterval?: positiveInt;
    /**
     * Extension for weekInterval
     **/
    _weekInterval?: Element;
}
/**
 * Information about monthly recurring appointments
 * Information about monthly recurring appointments.
 */
export interface AppointmentRecurrenceTemplateMonthlyTemplate extends BackboneElement {
    /**
     * Recurs on a specific day of the month
     * Indicates that appointments in the series of recurring appointments should occur on a specific day of the month.
     */
    dayOfMonth?: positiveInt;
    /**
     * Extension for dayOfMonth
     **/
    _dayOfMonth?: Element;
    /**
     * Indicates which week of the month the appointment should occur
     * Indicates which week within a month the appointments in the series of recurring appointments should occur on.
     */
    nthWeekOfMonth?: Coding;
    /**
     * Indicates which day of the week the appointment should occur
     * Indicates which day of the week the recurring appointments should occur each nth week.
     * This property is intended to be used with Appointment.recurrenceTemplate.monthly.nthWeek.
     */
    dayOfWeek?: Coding;
    /**
     * Recurs every nth month
     * Indicates that recurring appointments should occur every nth month.
     */
    monthInterval: positiveInt;
    /**
     * Extension for monthInterval
     **/
    _monthInterval?: Element;
}
/**
 * Information about yearly recurring appointments
 * Information about yearly recurring appointments.
 */
export interface AppointmentRecurrenceTemplateYearlyTemplate extends BackboneElement {
    /**
     * Recurs every nth year
     * Appointment recurs every nth year.
     */
    yearInterval: positiveInt;
    /**
     * Extension for yearInterval
     **/
    _yearInterval?: Element;
}
/**
 * Details of the recurrence pattern/template used to generate occurrences
 * The details of the recurrence pattern or template that is used to generate recurring appointments.
 */
export interface AppointmentRecurrenceTemplate extends BackboneElement {
    /**
     * The timezone of the occurrences
     * The timezone of the recurring appointment occurrences.
     */
    timezone?: CodeableConcept;
    /**
     * The frequency of the recurrence
     * How often the appointment series should recur.
     */
    recurrenceType: CodeableConcept;
    /**
     * The date when the recurrence should end
     * Recurring appointments will not occur after this date.
     */
    lastOccurrenceDate?: date;
    /**
     * Extension for lastOccurrenceDate
     **/
    _lastOccurrenceDate?: Element;
    /**
     * The number of planned occurrences
     * How many appointments are planned in the recurrence.
     */
    occurrenceCount?: positiveInt;
    /**
     * Extension for occurrenceCount
     **/
    _occurrenceCount?: Element;
    /**
     * Specific dates for a recurring set of appointments (no template)
     * The list of specific dates that will have appointments generated.
     */
    occurrenceDate?: date[];
    /**
     * Extension for occurrenceDate
     **/
    _occurrenceDate?: Element[];
    /**
     * Information about weekly recurring appointments
     * Information about weekly recurring appointments.
     */
    weeklyTemplate?: AppointmentRecurrenceTemplateWeeklyTemplate;
    /**
     * Information about monthly recurring appointments
     * Information about monthly recurring appointments.
     */
    monthlyTemplate?: AppointmentRecurrenceTemplateMonthlyTemplate;
    /**
     * Information about yearly recurring appointments
     * Information about yearly recurring appointments.
     */
    yearlyTemplate?: AppointmentRecurrenceTemplateYearlyTemplate;
    /**
     * Any dates that should be excluded from the series
     * Any dates, such as holidays, that should be excluded from the recurrence.
     * excludingDate is an alternative to excludingRecurrenceId.  You may say either that 12/25/XXXX should be excluded using excludingDate, or you may indicate the recurrenceId of the appointment that would fall on the excluded date in the excludingRecurrenceId property.
     */
    excludingDate?: date[];
    /**
     * Extension for excludingDate
     **/
    _excludingDate?: Element[];
    /**
     * Any recurrence IDs that should be excluded from the recurrence
     * Any dates, such as holidays, that should be excluded from the recurrence.
     * excludingRecurrenceId is an alternative to excludingDate.  You may say either that 12/25/XXXX should be excluded using excludingDate, or you may indicate the recurrenceId of the appointment that would fall on the excluded date in the excludingRecurrenceId property.
     */
    excludingRecurrenceId?: positiveInt[];
    /**
     * Extension for excludingRecurrenceId
     **/
    _excludingRecurrenceId?: Element[];
}
/**
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s)
 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
 */
export interface Appointment extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Appointment';
    /**
     * External Ids for this item
     * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
     */
    identifier?: Identifier[];
    /**
     * The coded reason for the appointment being cancelled
     * The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
     */
    cancellationReason?: CodeableConcept;
    /**
     * Classification when becoming an encounter
     * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
     */
    class?: CodeableConcept[];
    /**
     * A broad categorization of the service that is to be performed during this appointment
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The specific service that is to be performed during this appointment
     * The specific service that is to be performed during this appointment.
     * For a provider to provider appointment the code "FOLLOWUP" may be appropriate, as this is expected to be discussing some patient that was seen in the past.
     */
    serviceType?: CodeableReference[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * The style of appointment or patient that has been booked in the slot (not service type)
     * The style of appointment or patient that has been booked in the slot (not service type).
     */
    appointmentType?: CodeableConcept;
    /**
     * Reason this appointment is scheduled
     * The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
     */
    reason?: CodeableReference[];
    /**
     * Used to make informed decisions if needing to re-prioritize
     * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
     * Seeking implementer feedback on this property and how interoperable it is.

Using an extension to record a CodeableConcept for named values may be tested at a future connectathon.
     */
    priority?: CodeableConcept;
    /**
     * Shown on a subject line in a meeting request, or appointment list
     * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the note field.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Appointment replaced by this Appointment
     * Appointment replaced by this Appointment in cases where there is a cancellation, the details of the cancellation can be found in the cancellationReason property (on the referenced resource).
     */
    replaces?: Reference[];
    /**
     * Connection details of a virtual service (e.g. conference call)
     * Connection details of a virtual service (e.g. conference call).
     * There are two types of virtual meetings that often exist:

* a persistent, virtual meeting room that can only be used for a single purpose at a time,
* and a dynamic virtual meeting room that is generated on demand for a specific purpose.

Implementers may consider using Location.virtualService for persistent meeting rooms.

If each participant would have a different meeting link, an extension using the VirtualServiceContactDetail  can be applied to the Appointment.participant BackboneElement.
     */
    virtualService?: VirtualServiceDetail[];
    /**
     * Additional information to support the appointment
     * Additional information to support the appointment provided when making the appointment.
     */
    supportingInformation?: Reference[];
    /**
     * The previous appointment in a series
     * The previous appointment in a series of related appointments.
     * This property is intended for use when representing a series of related appointments.  For example, in a nuclear medicine procedure, where there is an appointment for the injection of the isotopes, and then a subsequent appointment for the scan, the scan appointment would refer to the injection appointment via Appointment.previousAppointment.  For representing recurring appointments, see the guidance on recurring vs. series appointments.
     */
    previousAppointment?: Reference;
    /**
     * The originating appointment in a recurring set of appointments
     * The originating appointment in a recurring set of related appointments.
     * This property is intended for use when representing a recurring set of related appointments.

For example, a patient undergoing physical therapy may have a recurring appointment every Tuesday and Thursday.  Each occurrence of the set will refer to the originating appointment, which contains the recurring template information.  For representing appointment series, see the guidance on recurring vs. series appointments.
     */
    originatingAppointment?: Reference;
    /**
     * When appointment is to take place
     * Date/Time that the appointment is to take place.
     * If actual start/end times are not known then the requested period start/end can be used.
     */
    start?: instant;
    /**
     * Extension for start
     **/
    _start?: Element;
    /**
     * When appointment is to conclude
     * Date/Time that the appointment is to conclude.
     * If actual start/end times are not known then the requested period start/end can be used.
     */
    end?: instant;
    /**
     * Extension for end
     **/
    _end?: Element;
    /**
     * Can be less than start/end (e.g. estimate)
     * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
     */
    minutesDuration?: positiveInt;
    /**
     * Extension for minutesDuration
     **/
    _minutesDuration?: Element;
    /**
     * Potential date/time interval(s) requested to allocate the appointment within
     * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.

The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.
     * This does not introduce a capacity for recurring appointments.
     */
    requestedPeriod?: Period[];
    /**
     * The slots that this appointment is filling
     * The slots from the participants' schedules that will be filled by the appointment.
     */
    slot?: Reference[];
    /**
     * The set of accounts that may be used for billing for this Appointment
     * The set of accounts that is expected to be used for billing the activities that result from this Appointment.
     * The specified account(s) could be those identified during pre-registration workflows in preparation for an upcoming Encounter.
     */
    account?: Reference[];
    /**
     * The date that this appointment was initially created
     * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
     * This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
     */
    created?: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * When the appointment was cancelled
     * The date/time describing when the appointment was cancelled.
     * If the appointment was cancelled multiple times, this would reflect the most recent cancellation.
     */
    cancellationDate?: dateTime;
    /**
     * Extension for cancellationDate
     **/
    _cancellationDate?: Element;
    /**
     * Additional comments
     * Additional notes/comments about the appointment.
     * Additional text to aid in facilitating the appointment. For instance, a note might be, "patient should proceed immediately to infusion room upon arrival"

Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.

Typically only the concept.text will be used, however occasionally a reference to some generic documentation (or specific) and also supports coded instructions if/when they are required.
     */
    note?: Annotation[];
    /**
     * Detailed information and instructions for the patient
     * While Appointment.note contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
     */
    patientInstruction?: CodeableReference[];
    /**
     * The request this appointment is allocated to assess
     * The request this appointment is allocated to assess (e.g. incoming referral or procedure request).
     */
    basedOn?: Reference[];
    /**
     * The patient or group associated with the appointment
     * The patient or group associated with the appointment, if they are to be present (usually) then they should also be included in the participant backbone element.
     */
    subject?: Reference;
    /**
     * Participants involved in appointment
     * List of participants involved in the appointment.
     */
    participant: AppointmentParticipant[];
    /**
     * The sequence number in the recurrence
     * The sequence number that identifies a specific appointment in a recurring pattern.
     */
    recurrenceId?: positiveInt;
    /**
     * Extension for recurrenceId
     **/
    _recurrenceId?: Element;
    /**
     * Indicates that this appointment varies from a recurrence pattern
     * This appointment varies from the recurring pattern.
     * For example, if a patient has physical therapy appointments every Tuesday and Thursday, but due to a national holiday, a single occurrence was rescheduled to a different day, while the rest of the recurring series remained on Tuesday / Thursday.
     */
    occurrenceChanged?: boolean;
    /**
     * Extension for occurrenceChanged
     **/
    _occurrenceChanged?: Element;
    /**
     * Details of the recurrence pattern/template used to generate occurrences
     * The details of the recurrence pattern or template that is used to generate recurring appointments.
     */
    recurrenceTemplate?: AppointmentRecurrenceTemplate[];
    /**
     * proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist
     * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
     * If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.

This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
     */
    status: AppointmentStatus;
}
/**
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection
 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
 */
export interface AppointmentResponse extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'AppointmentResponse';
    /**
     * External Ids for this item
     * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    identifier?: Identifier[];
    /**
     * Appointment this response relates to
     * Appointment that this response is replying to.
     */
    appointment: Reference;
    /**
     * Indicator for a counter proposal
     * Indicates that the response is proposing a different time that was initially requested.  The new proposed time will be indicated in the start and end properties.
     */
    proposedNewTime?: boolean;
    /**
     * Extension for proposedNewTime
     **/
    _proposedNewTime?: Element;
    /**
     * Time from appointment, or requested new start time
     * Date/Time that the appointment is to take place, or requested new start time.
     * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
     */
    start?: instant;
    /**
     * Extension for start
     **/
    _start?: Element;
    /**
     * Time from appointment, or requested new end time
     * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
     */
    end?: instant;
    /**
     * Extension for end
     **/
    _end?: Element;
    /**
     * Role of participant in the appointment
     * Role of participant in the appointment.
     * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.

If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.

This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
     */
    participantType?: CodeableConcept[];
    /**
     * Person(s), Location, HealthcareService, or Device
     * A Person, Location, HealthcareService, or Device that is participating in the appointment.
     */
    actor?: Reference;
    /**
     * Additional comments
     * Additional comments about the appointment.
     * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * This response is for all occurrences in a recurring request
     * Indicates that this AppointmentResponse applies to all occurrences in a recurring request.
     * When a recurring appointment is requested, the participant may choose to respond to each individual occurrence, in which case AppointmentResponse.recurring should be false.  If the participant chooses to respond the same way for all occurrences, they may instead use a single AppointmentResponse with recurring set to true.  These may be combined as the participant chooses.  For example, they may accept all occurrences (recurring = true), but then send a decline for a specific occurrence (recurring=false).
     */
    recurring?: boolean;
    /**
     * Extension for recurring
     **/
    _recurring?: Element;
    /**
     * Original date within a recurring request
     * The original date within a recurring request. This could be used in place of the recurrenceId to be more direct (or where the template is provided through the simple list of dates in `Appointment.occurrenceDate`).
     */
    occurrenceDate?: date;
    /**
     * Extension for occurrenceDate
     **/
    _occurrenceDate?: Element;
    /**
     * The recurrence ID of the specific recurring request
     * The recurrence ID (sequence number) of the specific appointment when responding to a recurring request.
     * If the recurrence template was defined using the list of occurrenceDates then this property might not be used.
     */
    recurrenceId?: positiveInt;
    /**
     * Extension for recurrenceId
     **/
    _recurrenceId?: Element;
    /**
     * accepted | declined | tentative | needs-action | entered-in-error
     * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
     * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
     */
    participantStatus: AppointmentResponseParticipantStatus;
}
/**
 * Comment, classifier, or rating content
 * A component comment, classifier, or rating of the artifact.
 */
export interface ArtifactAssessmentContent extends BackboneElement {
    /**
     * Brief summary of the content
     * A brief summary of the content of this component.
     */
    summary?: markdown;
    /**
     * Extension for summary
     **/
    _summary?: Element;
    /**
     * What type of content
     * Indicates what type of content this component represents.
     */
    type?: CodeableConcept;
    /**
     * Rating, classifier, or assessment
     * Represents a rating, classifier, or assessment of the artifact.
     */
    classifier?: CodeableConcept[];
    /**
     * Quantitative rating
     * A quantitative rating of the artifact.
     */
    quantity?: Quantity;
    /**
     * Who authored the content
     * Indicates who or what authored the content.
     */
    author?: Reference;
    /**
     * What the comment is directed to
     * A URI that points to what the comment is about, such as a line of text in the CQL, or a specific element in a resource.
     * The target element is used to point the comment to aspect of the artifact, such as a text range within a CQL library (e.g. #content?0:0-120:80).
     */
    path?: uri[];
    /**
     * Extension for path
     **/
    _path?: Element[];
    /**
     * Additional information
     * Additional related artifacts that provide supporting documentation, additional evidence, or further information related to the content.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Acceptable to publicly share the resource content
     * Acceptable to publicly share the comment, classifier or rating.
     */
    freeToShare?: boolean;
    /**
     * Extension for freeToShare
     **/
    _freeToShare?: Element;
    /**
     * Contained content
     * If the informationType is container, the components of the content.
     */
    component?: ArtifactAssessmentContent[];
    /**
     * comment | classifier | rating | container | response | change-request
     * The type of information this component of the content represents.
     */
    informationType?: ArtifactAssessmentInformationType;
}
/**
 * Adds metadata-supported comments, classifiers or ratings related to a Resource
 * This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content.
 */
export interface ArtifactAssessment extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ArtifactAssessment';
    /**
     * Additional identifier for the artifact assessment
     * A formal identifier that is used to identify this artifact assessment when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * A short title for the assessment for use in displaying and selecting
     * A short title for the assessment for use in displaying and selecting.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * How to cite the comment or rating
     * Display of or reference to the bibliographic citation of the comment, classifier, or rating.
     */
    citeAsReference?: Reference;
    /**
     * How to cite the comment or rating
     * Display of or reference to the bibliographic citation of the comment, classifier, or rating.
     */
    citeAsMarkdown?: markdown;
    /**
     * Extension for citeAsMarkdown
     **/
    _citeAsMarkdown?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the artifact assessment was published. The date must change when the disposition changes and it must change if the workflow status code changes. In addition, it should change when the substantive content of the artifact assessment changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the artifact assessment. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the artifact assessment and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the artifact assessment.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * When the artifact assessment was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the artifact assessment was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * The artifact assessed, commented upon or rated
     * A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about.
     */
    artifactReference?: Reference;
    /**
     * The artifact assessed, commented upon or rated
     * A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about.
     */
    artifactCanonical?: canonical;
    /**
     * Extension for artifactCanonical
     **/
    _artifactCanonical?: Element;
    /**
     * The artifact assessed, commented upon or rated
     * A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about.
     */
    artifactUri?: uri;
    /**
     * Extension for artifactUri
     **/
    _artifactUri?: Element;
    /**
     * Comment, classifier, or rating content
     * A component comment, classifier, or rating of the artifact.
     */
    content?: ArtifactAssessmentContent[];
    /**
     * submitted | triaged | waiting-for-input | resolved-no-change | resolved-change-required | deferred | duplicate | applied | published | entered-in-error
     * Indicates the workflow status of the comment or change request.
     */
    workflowStatus?: ArtifactAssessmentWorkflowStatus;
    /**
     * unresolved | not-persuasive | persuasive | persuasive-with-modification | not-persuasive-with-modification
     * Indicates the disposition of the responsible party to the comment or change request.
     */
    disposition?: ArtifactAssessmentDisposition;
}
/**
 * Whether the event succeeded or failed
 * Indicates whether the event succeeded or failed. A free text descripiton can be given in outcome.text.
 * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
 */
export interface AuditEventOutcome extends BackboneElement {
    /**
     * Whether the event succeeded or failed
     * Indicates whether the event succeeded or failed.
     * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
     */
    code: Coding;
    /**
     * Additional outcome detail
     * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
     * A human readable description of the error issue SHOULD be placed in details.text.
     */
    detail?: CodeableConcept[];
}
/**
 * Actor involved in the event
 * An actor taking an active role in the event or activity that is logged.
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.

For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.

When a network are used in an event being recorded, there should be distinct agent elements for the known actors using the network. The agent with a network detail would be the responsible agent for use of that network.
 */
export interface AuditEventAgent extends BackboneElement {
    /**
     * How agent participated
     * The Functional Role of the user when performing the event.
     * For example: assembler, author, prescriber, signer, investigator, etc.
     */
    type?: CodeableConcept;
    /**
     * Agent role in the event
     * The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
     * For example: Chief-of-Radiology, Nurse, Physician, Medical-Student, etc.
     */
    role?: CodeableConcept[];
    /**
     * Identifier of who
     * Reference to who this agent is that was involved in the event.
     * Where a User ID is available it will go into who.identifier. Where a name of the user (human readable) it will go into who.display.
     */
    who: Reference;
    /**
     * Whether user is initiator
     * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
     * There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
     */
    requestor?: boolean;
    /**
     * Extension for requestor
     **/
    _requestor?: Element;
    /**
     * The agent location when the event occurred
     * Where the agent location is known, the agent location when the event occurred.
     */
    location?: Reference;
    /**
     * Policy that authorized the agent participation in the event
     * Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
     * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
     */
    policy?: uri[];
    /**
     * Extension for policy
     **/
    _policy?: Element[];
    /**
     * This agent network location for the activity
     * When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
     * When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
     */
    networkReference?: Reference;
    /**
     * This agent network location for the activity
     * When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
     * When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
     */
    networkUri?: uri;
    /**
     * Extension for networkUri
     **/
    _networkUri?: Element;
    /**
     * This agent network location for the activity
     * When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
     * When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
     */
    networkString?: string;
    /**
     * Extension for networkString
     **/
    _networkString?: Element;
    /**
     * Allowable authorization for this agent
     * The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
     * Use AuditEvent.agent.authorization when you know that is specific to the agent, otherwise use AuditEvent.authorization. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
     */
    authorization?: CodeableConcept[];
}
/**
 * Audit Event Reporter
 * The actor that is reporting the event.
 * Events are reported by the actor that detected them. This may be one of the participating actors, but may also be different. The actor may be a human such as a medical-records clerk disclosing data manually, that clerk would be the source for the record of disclosure.
 */
export interface AuditEventSource extends BackboneElement {
    /**
     * Logical source location within the enterprise
     * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
     */
    site?: Reference;
    /**
     * The identity of source detecting the event
     * Identifier of the source where the event was detected.
     */
    observer: Reference;
    /**
     * The type of source where event originated
     * Code specifying the type of source where event originated.
     */
    type?: CodeableConcept[];
}
/**
 * Additional Information about the entity
 * Tagged value pairs for conveying additional information about the entity.
 */
export interface AuditEventEntityDetail extends BackboneElement {
    /**
     * Name of the property
     * The type of extra detail provided in the value.
     */
    type: CodeableConcept;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueQuantity?: Quantity;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueRange?: Range;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueRatio?: Ratio;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valuePeriod?: Period;
    /**
     * Property value
     * The  value of the extra detail.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
}
/**
 * Data or objects used
 * Specific instances of data or objects that have been accessed.
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export interface AuditEventEntity extends BackboneElement {
    /**
     * Specific instance of resource
     * Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource.
     * Use .what.display when all you have is a string (e.g. ParticipantObjectName).
     */
    what?: Reference;
    /**
     * What role the entity played
     * Code representing the role the entity played in the event being audited.
     */
    role?: CodeableConcept;
    /**
     * Security labels on the entity
     * Security labels for the identified entity.
     * Copied from entity meta security tags.
     */
    securityLabel?: CodeableConcept[];
    /**
     * Query parameters
     * The query parameters for a query-type entities.
     * The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.

The DICOM AuditMessage schema does not support both .name and .query being populated.
     */
    query?: base64Binary;
    /**
     * Extension for query
     **/
    _query?: Element;
    /**
     * Additional Information about the entity
     * Tagged value pairs for conveying additional information about the entity.
     */
    detail?: AuditEventEntityDetail[];
    /**
     * Entity is attributed to this agent
     * The entity is attributed to an agent to express the agent's responsibility for that entity in the activity. This is most used to indicate when persistence media (the entity) are used by an agent. For example when importing data from a device, the device would be described in an entity, and the user importing data from that media would be indicated as the entity.agent.
     * A usecase where one AuditEvent.entity.agent is used where the Entity that was used in the creation/updating of a target resource, is not in the context of the same custodianship as the target resource, and thus the meaning of AuditEvent.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 V2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the provenance of that Entity's use in the context of this AuditEvent activity.
     */
    agent?: AuditEventAgent[];
}
/**
 * Record of an event
 * A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.
 * Based on IHE-ATNA.
 */
export interface AuditEvent extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'AuditEvent';
    /**
     * Type/identifier of event
     * Classification of the type of event.
     */
    category?: CodeableConcept[];
    /**
     * Specific type of event
     * Describes what happened. The most specific code for the event.
     */
    code: CodeableConcept;
    /**
     * Type of action performed during the event
     * Indicator for type of action performed during the event that generated the audit.
     */
    action?: code;
    /**
     * Extension for action
     **/
    _action?: Element;
    /**
     * When the activity occurred
     * The time or period during which the activity occurred.
     * The time or period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
     */
    occurredPeriod?: Period;
    /**
     * When the activity occurred
     * The time or period during which the activity occurred.
     * The time or period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
     */
    occurredDateTime?: dateTime;
    /**
     * Extension for occurredDateTime
     **/
    _occurredDateTime?: Element;
    /**
     * Time when the event was recorded
     * The time when the event was recorded.
     * In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
     */
    recorded: instant;
    /**
     * Extension for recorded
     **/
    _recorded?: Element;
    /**
     * Whether the event succeeded or failed
     * Indicates whether the event succeeded or failed. A free text descripiton can be given in outcome.text.
     * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
     */
    outcome?: AuditEventOutcome;
    /**
     * Authorization related to the event
     * The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
     * Use AuditEvent.agent.authorization when you know that it is specific to the agent, otherwise use AuditEvent.authorization. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
     */
    authorization?: CodeableConcept[];
    /**
     * Workflow authorization within which this event occurred
     * Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
     */
    basedOn?: Reference[];
    /**
     * The patient is the subject of the data used/created/updated/deleted during the activity
     * The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
     */
    patient?: Reference;
    /**
     * Encounter within which this event occurred or which the event is tightly associated
     * This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
     */
    encounter?: Reference;
    /**
     * Actor involved in the event
     * An actor taking an active role in the event or activity that is logged.
     * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.

For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.

When a network are used in an event being recorded, there should be distinct agent elements for the known actors using the network. The agent with a network detail would be the responsible agent for use of that network.
     */
    agent: AuditEventAgent[];
    /**
     * Audit Event Reporter
     * The actor that is reporting the event.
     * Events are reported by the actor that detected them. This may be one of the participating actors, but may also be different. The actor may be a human such as a medical-records clerk disclosing data manually, that clerk would be the source for the record of disclosure.
     */
    source: AuditEventSource;
    /**
     * Data or objects used
     * Specific instances of data or objects that have been accessed.
     * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
     */
    entity?: AuditEventEntity[];
    /**
     * emergency | alert | critical | error | warning | notice | informational | debug
     * Indicates and enables segmentation of various severity including debugging from critical.
     * ATNA will map this to the SYSLOG PRI element.
     */
    severity?: AuditEventSeverity;
}
/**
 * Resource for non-supported content
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
 */
export interface Basic extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Basic';
    /**
     * Business identifier
     * Identifier assigned to the resource for business purposes, outside the context of FHIR.
     */
    identifier?: Identifier[];
    /**
     * Kind of Resource
     * Identifies the 'type' of resource - equivalent to the resource name for other resources.
     * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.

This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
     */
    code: CodeableConcept;
    /**
     * Identifies the focus of this resource
     * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
     * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
     */
    subject?: Reference;
    /**
     * When created
     * Identifies when the resource was first created.
     */
    created?: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Who created
     * Indicates who was responsible for creating the resource instance.
     */
    author?: Reference;
}
/**
 * Pure binary content defined by a format other than FHIR
 * A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
 * Typically, Binary resources are used for handling content such as:

* CDA Documents (i.e. with XDS)
* PDF Documents
* Images.
 */
export interface Binary extends Resource {
    /**
     * MimeType of the binary content
     * MimeType of the binary content represented as a standard MimeType (BCP 13).
     */
    contentType: code;
    /**
     * Extension for contentType
     **/
    _contentType?: Element;
    /**
     * Identifies another resource to use as proxy when enforcing access control
     * This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient.
     * Very often, a server will also know of a resource that references the binary, and can automatically apply the appropriate access rules based on that reference. However, there are some circumstances where this is not appropriate, e.g. the binary is uploaded directly to the server without any linking resource, the binary is referred to from multiple different resources, and/or the binary is content such as an application logo that has less protection than any of the resources that reference it.
     */
    securityContext?: Reference;
    /**
     * The actual content
     * The actual content, base64 encoded.
     * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
     */
    data?: base64Binary;
    /**
     * Extension for data
     **/
    _data?: Element;
}
/**
 * How this product was collected
 * How this product was collected.
 */
export interface BiologicallyDerivedProductCollection extends BackboneElement {
    /**
     * Individual performing collection
     * Healthcare professional who is performing the collection.
     */
    collector?: Reference;
    /**
     * The patient who underwent the medical procedure to collect the product or the organization that facilitated the collection
     * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
     */
    source?: Reference;
    /**
     * Time of product collection
     * Time of product collection.
     */
    collectedDateTime?: dateTime;
    /**
     * Extension for collectedDateTime
     **/
    _collectedDateTime?: Element;
    /**
     * Time of product collection
     * Time of product collection.
     */
    collectedPeriod?: Period;
}
/**
 * A property that is specific to this BiologicallyDerviedProduct instance
 * A property that is specific to this BiologicallyDerviedProduct instance.
 * Property can be used to provide information on a wide range of additional information specific to a particular biologicallyDerivedProduct.
 */
export interface BiologicallyDerivedProductProperty extends BackboneElement {
    /**
     * Code that specifies the property
     * Code that specifies the property. It should reference an established coding system.
     * The element is identified by name and system URI in the type. Some types may have multiple occurrences.
     */
    type: CodeableConcept;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valuePeriod?: Period;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueQuantity?: Quantity;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueRange?: Range;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueRatio?: Ratio;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Property values
     * Property values.
     * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
     */
    valueAttachment?: Attachment;
}
/**
 * This resource reflects an instance of a biologically derived product
 * This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.
 * Substances include, but are not limited to: whole blood, bone marrow, organs, and manipulated blood cells.
 */
export interface BiologicallyDerivedProduct extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'BiologicallyDerivedProduct';
    /**
     * organ | tissue | fluid | cells | biologicalAgent
     * Broad category of this product.
     */
    productCategory?: Coding;
    /**
     * A code that identifies the kind of this biologically derived product
     * A codified value that systematically supports characterization and classification of medical products of human origin inclusive of processing conditions such as additives, volumes and handling conditions.
     */
    productCode?: CodeableConcept;
    /**
     * The parent biologically-derived product
     * Parent product (if any) for this biologically-derived product.
     * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
     */
    parent?: Reference[];
    /**
     * Request to obtain and/or infuse this product
     * Request to obtain and/or infuse this biologically derived product.
     */
    request?: Reference[];
    /**
     * Instance identifier
     * Unique instance identifiers assigned to a biologically derived product. Note: This is a business identifier, not a resource identifier.
     * This identifier should uniquely identify the product instance in the business domain.  Ideally it should be a globally unique identifier under the control of an ISO/IEC 15459 Issuing Agency.
     */
    identifier?: Identifier[];
    /**
     * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled
     * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
     * Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
     */
    biologicalSourceEvent?: Identifier;
    /**
     * Processing facilities responsible for the labeling and distribution of this biologically derived product
     * Processing facilities responsible for the labeling and distribution of this biologically derived product.
     */
    processingFacility?: Reference[];
    /**
     * A unique identifier for an aliquot of a product
     * A unique identifier for an aliquot of a product.  Used to distinguish individual aliquots of a product carrying the same biologicalSource and productCode identifiers.
     */
    division?: string;
    /**
     * Extension for division
     **/
    _division?: Element;
    /**
     * available | unavailable
     * Whether the product is currently available.
     */
    productStatus?: Coding;
    /**
     * Date, and where relevant time, of expiration
     * Date, and where relevant time, of expiration.
     */
    expirationDate?: dateTime;
    /**
     * Extension for expirationDate
     **/
    _expirationDate?: Element;
    /**
     * How this product was collected
     * How this product was collected.
     */
    collection?: BiologicallyDerivedProductCollection;
    /**
     * Product storage temperature requirements
     * The temperature requirements for storage of the biologically-derived product.
     * May be extracted from information held in the Product Description Code.
     */
    storageTempRequirements?: Range;
    /**
     * A property that is specific to this BiologicallyDerviedProduct instance
     * A property that is specific to this BiologicallyDerviedProduct instance.
     * Property can be used to provide information on a wide range of additional information specific to a particular biologicallyDerivedProduct.
     */
    property?: BiologicallyDerivedProductProperty[];
}
/**
 * Indicates who or what performed an action
 * Indicates who or what performed an action.
 */
export interface BiologicallyDerivedProductDispensePerformer extends BackboneElement {
    /**
     * Identifies the function of the performer during the dispense
     * Identifies the function of the performer during the dispense.
     */
    function?: CodeableConcept;
    /**
     * Who performed the action
     * Identifies the person responsible for the action.
     */
    actor: Reference;
}
/**
 * A record of dispensation of a biologically derived product
 * This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application.
 */
export interface BiologicallyDerivedProductDispense extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'BiologicallyDerivedProductDispense';
    /**
     * Business identifier for this dispense
     * Unique instance identifiers assigned to a biologically derived product dispense. Note: This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * The order or request that this dispense is fulfilling
     * The order or request that the dispense is fulfilling. This is a reference to a ServiceRequest resource.
     */
    basedOn?: Reference[];
    /**
     * Short description
     * A larger event of which this particular event is a component.
     */
    partOf?: Reference[];
    /**
     * Relationship between the donor and intended recipient
     * Indicates the relationship between the donor of the biologically derived product and the intended recipient.
     */
    originRelationshipType?: CodeableConcept;
    /**
     * The BiologicallyDerivedProduct that is dispensed
     * A link to a resource identifying the biologically derived product that is being dispensed.
     */
    product: Reference;
    /**
     * The intended recipient of the dispensed product
     * A link to a resource representing the patient that the product is dispensed for.
     */
    patient: Reference;
    /**
     * Indicates the type of matching associated with the dispense
     * Indicates the type of matching associated with the dispense.
     */
    matchStatus?: CodeableConcept;
    /**
     * Indicates who or what performed an action
     * Indicates who or what performed an action.
     */
    performer?: BiologicallyDerivedProductDispensePerformer[];
    /**
     * Where the dispense occurred
     * The physical location where the dispense was performed.
     */
    location?: Reference;
    /**
     * Amount dispensed
     * The amount of product in the dispense. Quantity will depend on the product being dispensed. Examples are: volume; cell count; concentration.
     */
    quantity?: Quantity;
    /**
     * When product was selected/matched
     * When the product was selected/ matched.
     */
    preparedDate?: dateTime;
    /**
     * Extension for preparedDate
     **/
    _preparedDate?: Element;
    /**
     * When the product was dispatched
     * When the product was dispatched for clinical use.
     */
    whenHandedOver?: dateTime;
    /**
     * Extension for whenHandedOver
     **/
    _whenHandedOver?: Element;
    /**
     * Where the product was dispatched to
     * Link to a resource identifying the physical location that the product was dispatched to.
     */
    destination?: Reference;
    /**
     * Additional notes
     * Additional notes.
     */
    note?: Annotation[];
    /**
     * Specific instructions for use
     * Specific instructions for use.
     */
    usageInstruction?: string;
    /**
     * Extension for usageInstruction
     **/
    _usageInstruction?: Element;
    /**
     * preparation | in-progress | allocated | issued | unfulfilled | returned | entered-in-error | unknown
     * A code specifying the state of the dispense event.
     */
    status: BiologicallyDerivedProductDispenseStatus;
}
/**
 * Landmark relative location
 * The distance in centimeters a certain observation is made from a body landmark.
 */
export interface BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark extends BackboneElement {
    /**
     * Measurement device
     * An instrument, tool, analyzer, etc. used in the measurement.
     */
    device?: CodeableReference[];
    /**
     * Measured distance from body landmark
     * The measured distance (e.g., in cm) from a body landmark.
     */
    value?: Quantity[];
}
/**
 * Landmark relative location
 * Body locations in relation to a specific body landmark (tatoo, scar, other body structure).
 */
export interface BodyStructureIncludedStructureBodyLandmarkOrientation extends BackboneElement {
    /**
     * Body ]andmark description
     * A description of a landmark on the body used as a reference to locate something else.
     */
    landmarkDescription?: CodeableConcept[];
    /**
     * Clockface orientation
     * An description of the direction away from a landmark something is located based on a radial clock dial.
     */
    clockFacePosition?: CodeableConcept[];
    /**
     * Landmark relative location
     * The distance in centimeters a certain observation is made from a body landmark.
     */
    distanceFromLandmark?: BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark[];
    /**
     * Relative landmark surface orientation
     * The surface area a body location is in relation to a landmark.
     */
    surfaceOrientation?: CodeableConcept[];
}
/**
 * Included anatomic location(s)
 * The anatomical location(s) or region(s) of the specimen, lesion, or body structure.
 */
export interface BodyStructureIncludedStructure extends BackboneElement {
    /**
     * Code that represents the included structure
     * Code that represents the included structure.
     */
    structure: CodeableConcept;
    /**
     * Code that represents the included structure laterality
     * Code that represents the included structure laterality.
     */
    laterality?: CodeableConcept;
    /**
     * Landmark relative location
     * Body locations in relation to a specific body landmark (tatoo, scar, other body structure).
     */
    bodyLandmarkOrientation?: BodyStructureIncludedStructureBodyLandmarkOrientation[];
    /**
     * Cartesian reference for structure
     * XY or XYZ-coordinate orientation for structure.
     */
    spatialReference?: Reference[];
    /**
     * Code that represents the included structure qualifier
     * Code that represents the included structure qualifier.
     */
    qualifier?: CodeableConcept[];
}
/**
 * Specific and identified anatomical structure
 * Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
 */
export interface BodyStructure extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'BodyStructure';
    /**
     * Bodystructure identifier
     * Identifier for this instance of the anatomical structure.
     */
    identifier?: Identifier[];
    /**
     * Whether this record is in active use
     * Whether this body site is in active use.
     * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * Kind of Structure
     * The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.
     * The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
     */
    morphology?: CodeableConcept;
    /**
     * Included anatomic location(s)
     * The anatomical location(s) or region(s) of the specimen, lesion, or body structure.
     */
    includedStructure: BodyStructureIncludedStructure[];
    /**
     * Excluded anatomic locations(s)
     * The anatomical location(s) or region(s) not occupied or represented by the specimen, lesion, or body structure.
     */
    excludedStructure?: BodyStructureIncludedStructure[];
    /**
     * Text description
     * A summary, characterization or explanation of the body structure.
     * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Attached images
     * Image or images used to identify a location.
     */
    image?: Attachment[];
    /**
     * Who this is about
     * The person to which the body site belongs.
     */
    patient: Reference;
}
/**
 * Links related to this Bundle
 * A series of links that provide context to this bundle.
 * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)).

Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.

This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.  The behavior of navigation link types (next/prev/first/last) are well defined for searchset and history Bundles but are not currently defined for other types. Implementers who choose to use such link relationships for other bundle types will need to negotiate behavior with their interoperability partners.
 */
export interface BundleLink extends BackboneElement {
    /**
     * See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
     * A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
     */
    relation: code;
    /**
     * Extension for relation
     **/
    _relation?: Element;
    /**
     * Reference details for the link
     * The reference details for the link.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
}
/**
 * Search related information
 * Information about the search process that lead to the creation of this entry.
 */
export interface BundleEntrySearch extends BackboneElement {
    /**
     * Search ranking (between 0 and 1)
     * When searching, the server's search ranking score for the entry.
     * Servers are not required to return a ranking score. 1 is most relevant, and 0 is least relevant. Often, search results are sorted by score, but the client may specify a different sort order.

See [Patient Match](patient-operation-match.html) for the EMPI search which relates to this element.
     */
    score?: decimal;
    /**
     * Extension for score
     **/
    _score?: Element;
    /**
     * match | include - why this is in the result set
     * Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
     * There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
     */
    mode?: BundleSearchEntryMode;
}
/**
 * Additional execution information (transaction/batch/history)
 * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
 */
export interface BundleEntryRequest extends BackboneElement {
    /**
     * URL for HTTP equivalent of this entry
     * The URL for this entry, relative to the root (the address to which the request is posted).
     * E.g. for a Patient Create, the method would be "POST" and the URL would be "Patient". For a Patient Update, the method would be PUT and the URL would be "Patient/[id]".
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * For managing cache validation
     * If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
     */
    ifNoneMatch?: string;
    /**
     * Extension for ifNoneMatch
     **/
    _ifNoneMatch?: Element;
    /**
     * For managing cache currency
     * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
     */
    ifModifiedSince?: instant;
    /**
     * Extension for ifModifiedSince
     **/
    _ifModifiedSince?: Element;
    /**
     * For managing update contention
     * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
     */
    ifMatch?: string;
    /**
     * Extension for ifMatch
     **/
    _ifMatch?: Element;
    /**
     * For conditional creates
     * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
     */
    ifNoneExist?: string;
    /**
     * Extension for ifNoneExist
     **/
    _ifNoneExist?: Element;
    /**
     * GET | HEAD | POST | PUT | DELETE | PATCH
     * In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
     */
    method: BundleHTTPVerb;
}
/**
 * Results of execution (transaction/batch/history)
 * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
 */
export interface BundleEntryResponse extends BackboneElement {
    /**
     * Status response code (text optional)
     * The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
     */
    status: string;
    /**
     * Extension for status
     **/
    _status?: Element;
    /**
     * The location (if the operation returns a location)
     * The location header created by processing this operation, populated if the operation returns a location.
     */
    location?: uri;
    /**
     * Extension for location
     **/
    _location?: Element;
    /**
     * The Etag for the resource (if relevant)
     * The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
     * Etags match the Resource.meta.versionId. The ETag has to match the version id in the header if a resource is included.
     */
    etag?: string;
    /**
     * Extension for etag
     **/
    _etag?: Element;
    /**
     * Server's date time modified
     * The date/time that the resource was modified on the server.
     * This has to match the same time in the meta header (meta.lastUpdated) if a resource is included.
     */
    lastModified?: instant;
    /**
     * Extension for lastModified
     **/
    _lastModified?: Element;
    /**
     * OperationOutcome with hints and warnings (for batch/transaction)
     * An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
     * For a POST/PUT operation, this is the equivalent outcome that would be returned for prefer = operationoutcome - except that the resource is always returned whether or not the outcome is returned.

This outcome is not used for error responses in batch/transaction, only for hints and warnings. In a batch operation, the error will be in Bundle.entry.response, and for transaction, there will be a single OperationOutcome instead of a bundle in the case of an error.
     */
    outcome?: Resource;
}
/**
 * Entry in the bundle - will have a resource or information
 * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
 */
export interface BundleEntry extends BackboneElement {
    /**
     * Links related to this entry
     * A series of links that provide context to this entry.
     */
    link?: BundleLink[];
    /**
     * URI for resource (e.g. the absolute URL server address, URI for UUID/OID, etc.)
     * The Absolute URL for the resource. Except for transactions and batches, each entry in a Bundle must have a fullUrl. The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. Even when not required, fullUrl MAY be set to a urn:uuid to allow referencing entries in a transaction. The fullUrl can be an arbitrary URI and is not limited to urn:uuid, urn:oid, http, and https. The fullUrl element SHALL have a value except when:
* invoking a create
* invoking or responding to an operation where the body is not a single identified resource
* invoking or returning the results of a search or history operation.
     * fullUrl might not be [unique in the context of a resource](bundle.html#bundle-unique). Note that since [FHIR resources do not need to be served through the FHIR API](references.html), the fullURL might be a URN or an absolute URL that does not end with the logical id of the resource (Resource.id). However, but if the fullUrl does look like a RESTful server URL (e.g. meets the [regex](references.html#regex), then the 'id' portion of the fullUrl SHALL end with the Resource.id.

Note that the fullUrl is not the same as the canonical URL - it's an absolute url for an endpoint serving the resource (these will happen to have the same value on the canonical server for the resource with the canonical URL).
     */
    fullUrl?: uri;
    /**
     * Extension for fullUrl
     **/
    _fullUrl?: Element;
    /**
     * A resource in the bundle
     * The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type. This is allowed to be a Parameters resource if and only if it is referenced by something else within the Bundle that provides context/meaning.
     */
    resource?: Resource;
    /**
     * Search related information
     * Information about the search process that lead to the creation of this entry.
     */
    search?: BundleEntrySearch;
    /**
     * Additional execution information (transaction/batch/history)
     * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
     */
    request?: BundleEntryRequest;
    /**
     * Results of execution (transaction/batch/history)
     * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
     */
    response?: BundleEntryResponse;
}
/**
 * Contains a collection of resources
 * A container for a collection of resources.
 */
export interface Bundle extends Resource {
    /**
     * Persistent identifier for the bundle
     * A persistent identifier for the bundle that won't change as a bundle is copied from server to server.
     * Persistent identity generally only matters for batches of type Document, Message, and Collection. It would not normally be populated for search and history results and servers ignore Bundle.identifier when processing batches and transactions. For Documents  the .identifier SHALL be populated such that the .identifier is globally unique.
     */
    identifier?: Identifier;
    /**
     * When the bundle was assembled
     * The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.
     * For many bundles, the timestamp is equal to .meta.lastUpdated, because they are not stored (e.g. search results). When a bundle is placed in a persistent store, .meta.lastUpdated will be usually be changed by the server. When the bundle is a message, a middleware agent altering the message (even if not stored) SHOULD update .meta.lastUpdated. .timestamp is used to track the original time of the Bundle, and SHOULD be populated.

Usage:

* document : the date the document was created. Note: the composition may predate the document, or be associated with multiple documents. The date of the composition - the authoring time - may be earlier than the document assembly time
* message : the date that the content of the message was assembled. This date is not changed by middleware engines unless they add additional data that changes the meaning of the time of the message
* history : the date that the history was assembled. This time would be used as the _since time to ask for subsequent updates
* searchset : the time that the search set was assembled. Note that different pages MAY have different timestamps but need not. Having different timestamps does not imply that subsequent pages will represent or include changes made since the initial query
* transaction | transaction-response | batch | batch-response | collection : no particular assigned meaning

The timestamp value should be greater than the lastUpdated and other timestamps in the resources in the bundle, and it should be equal or earlier than the .meta.lastUpdated on the Bundle itself.
     */
    timestamp?: instant;
    /**
     * Extension for timestamp
     **/
    _timestamp?: Element;
    /**
     * If search, the total number of matches
     * If a set of search matches, this is the (potentially estimated) total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.
     * Only used if the bundle is a search result set. The total does not include resources such as OperationOutcome and included resources, only the total number of matching resources.
     */
    total?: unsignedInt;
    /**
     * Extension for total
     **/
    _total?: Element;
    /**
     * Links related to this Bundle
     * A series of links that provide context to this bundle.
     * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)).

Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.

This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.  The behavior of navigation link types (next/prev/first/last) are well defined for searchset and history Bundles but are not currently defined for other types. Implementers who choose to use such link relationships for other bundle types will need to negotiate behavior with their interoperability partners.
     */
    link?: BundleLink[];
    /**
     * Entry in the bundle - will have a resource or information
     * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
     */
    entry?: BundleEntry[];
    /**
     * Digital Signature
     * Digital Signature - base64 encoded. XML-DSig or a JWS.
     * The signature could be created by the "author" of the bundle or by the originating device.   Requirements around inclusion of a signature, verification of signatures and treatment of signed/non-signed bundles is implementation-environment specific.
     */
    signature?: Signature;
    /**
     * Issues with the Bundle
     * Captures issues and warnings that relate to the construction of the Bundle and the content within it.
     * Usage notes: These issues and warnings must apply to the Bundle as a whole, not to individual entries.Messages relating to the processing of individual entries (e.g. in a batch or transaction) SHALL be reported in the entry.response.outcome for that entry.  If there are errors that arise in the creation of the Bundle, then that should be handled by an OperationOutcome being returned instead of the Bundle.
     */
    issues?: Resource;
    /**
     * document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
     * Indicates the purpose of this bundle - how it is intended to be used.
     * It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
     */
    type: BundleType;
}
/**
 * Common Interface declaration for definitional resources
 * Common Interface declaration for conformance and knowledge artifact resources.
 */
export interface CanonicalResource extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CanonicalResource';
    /**
     * Canonical identifier for this {{title}}, represented as an absolute URI (globally unique)
     * An absolute URI that is used to identify this {{title}} when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this {{title}} is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the {{title}} is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the {{title}}
     * A formal identifier that is used to identify this {{title}} when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this {{title}} outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the {{title}}
     * The identifier that is used to identify this version of the {{title}} when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the {{title}} author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge.  (See the versionAlgorithm element.)
     * There may be different {{title}}s that have the same url but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the {{title}} with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this {{title}} (computer friendly)
     * A natural language name identifying the {{title}}. This name should be usable as an identifier for the resource by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type no-whitespace name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this {{title}} (human friendly)
     * A short, descriptive, user-friendly title for the {{title}}.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this {{title}} is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
     * Allows filtering of {{title}}s that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date (and optionally time) when the {{title}} was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the {{title}} changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the {{title}}. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the {{title}}.
     * Usually an organization but may be an individual. The publisher (or steward) of the {{title}} is the organization or individual primarily responsible for the maintenance and upkeep of the {{title}}. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the {{title}}. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the {{title}}
     * A free text natural language description of the {{title}} from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the {{title}} as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate {{title}}s.
     * When multiple useContexts are specified, there is no expectation that all or even any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for {{title}} (if applicable)
     * A legal or geographic region in which the {{title}} is intended to be used.
     * It may be possible for the {{title}} to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this {{title}} is defined
     * Explanation of why this {{title}} is needed and why it has been designed as it has.
     * This element does not describe the usage of the {{title}}. Instead, it provides traceability of "why" the resource is either needed or "why" it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this {{title}}.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * draft | active | retired | unknown
     * The current state of this {{title}}.
     * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation.

Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: CanonicalResourcePublicationStatus;
}
/**
 * Software that is covered by this capability statement
 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
 */
export interface CapabilityStatementSoftware extends BackboneElement {
    /**
     * A name the software is known by
     * Name the software is known by.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Version covered by this statement
     * The version identifier for the software covered by this statement.
     * If possible, a version should be specified, as statements are likely to be different for different versions of software.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Date this version was released
     * Date this version of the software was released.
     */
    releaseDate?: dateTime;
    /**
     * Extension for releaseDate
     **/
    _releaseDate?: Element;
}
/**
 * If this describes a specific instance
 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export interface CapabilityStatementImplementation extends BackboneElement {
    /**
     * Describes this specific instance
     * Information about the specific installation that this capability statement relates to.
     */
    description: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Base URL for the installation
     * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
     */
    url?: url;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Organization that manages the data
     * The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
     */
    custodian?: Reference;
}
/**
 * Information about security of implementation
 * Information about security implementation from an interface perspective - what a client needs to know.
 */
export interface CapabilityStatementRestSecurity extends BackboneElement {
    /**
     * Adds CORS Headers (http://enable-cors.org/)
     * Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.
     * The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.
     */
    cors?: boolean;
    /**
     * Extension for cors
     **/
    _cors?: Element;
    /**
     * OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
     * Types of security services that are supported/required by the system.
     */
    service?: CodeableConcept[];
    /**
     * General description of how security works
     * General description of how security works.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
}
/**
 * What operations are supported?
 * Identifies a restful operation supported by the solution.
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
export interface CapabilityStatementRestResourceInteraction extends BackboneElement {
    /**
     * Anything special about operation behavior
     * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * read | vread | update | patch | delete | history-instance | history-type | create | search-type
     * Coded identifier of the operation, supported by the system resource.
     */
    code: CapabilityStatementTypeRestfulInteraction;
}
/**
 * Search parameters supported by implementation
 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
export interface CapabilityStatementRestResourceSearchParam extends BackboneElement {
    /**
     * Name for parameter in search url
     * The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.
     * Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Source of definition for parameter
     * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
     * This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
     */
    definition?: canonical;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Server-specific usage
     * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * number | date | string | token | reference | composite | quantity | uri | special
     * The type of value a search parameter refers to, and how the content is interpreted.
     * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
     */
    type: CapabilityStatementSearchParamType;
}
/**
 * Definition of a resource operation
 * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.

If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
export interface CapabilityStatementRestResourceOperation extends BackboneElement {
    /**
     * Name by which the operation/query is invoked
     * The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.
     * The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the "$" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * The defined operation/query
     * Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.
     * This can be used to build an HTML form to invoke the operation, for instance.
     */
    definition: canonical;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Specific details about operation behavior
     * Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
}
/**
 * Resource served on the REST interface
 * A specification of the restful capabilities of the solution for a specific resource type.
 * Max of one repetition per resource type.
 */
export interface CapabilityStatementRestResource extends BackboneElement {
    /**
     * A resource type that is supported
     * A type of resource exposed via the restful interface.
     */
    type: code;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * System-wide profile
     * A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the "superset" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).
     * All other profiles for this type that are listed in `.rest.resource.supportedProfile` must conform to this profile.
     */
    profile?: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
    /**
     * Use-case specific profiles
     * A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).
     * Supported profiles must conform to the resource profile in the `.rest.resource.profile` element if it is present. The resource profile is a system-wide profile applied across *all* instances of the resource supported by the system. A supported profile is a statement about the functionality of the data and services provided by the server (or used by the client) for a particular set of use cases and will not necessarily apply to all data consumed or exposed by the server.
     */
    supportedProfile?: canonical[];
    /**
     * Extension for supportedProfile
     **/
    _supportedProfile?: Element[];
    /**
     * Additional information about the use of the resource type
     * Additional information about the resource type used by the system.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * What operations are supported?
     * Identifies a restful operation supported by the solution.
     * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
     */
    interaction?: CapabilityStatementRestResourceInteraction[];
    /**
     * Whether vRead can return past versions
     * A flag for whether the server is able to return past versions as part of the vRead operation.
     * It is useful to support the vRead operation for current operations, even if past versions aren't available.
     */
    readHistory?: boolean;
    /**
     * Extension for readHistory
     **/
    _readHistory?: Element;
    /**
     * If update can commit to a new identity
     * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
     * Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.
     */
    updateCreate?: boolean;
    /**
     * Extension for updateCreate
     **/
    _updateCreate?: Element;
    /**
     * If allows/uses conditional create
     * A flag that indicates that the server supports conditional create.
     * Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.
     */
    conditionalCreate?: boolean;
    /**
     * Extension for conditionalCreate
     **/
    _conditionalCreate?: Element;
    /**
     * If allows/uses conditional update
     * A flag that indicates that the server supports conditional update.
     * Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.
     */
    conditionalUpdate?: boolean;
    /**
     * Extension for conditionalUpdate
     **/
    _conditionalUpdate?: Element;
    /**
     * If allows/uses conditional patch
     * A flag that indicates that the server supports conditional patch.
     * Conditional Patch is mainly appropriate for interface engine scripts converting from other formats, such as v2.
     */
    conditionalPatch?: boolean;
    /**
     * Extension for conditionalPatch
     **/
    _conditionalPatch?: Element;
    /**
     * _include values supported by the server
     * A list of _include values supported by the server.
     * Documenting [`_include`](http://hl7.org/fhir/R5/search.html#revinclude) support helps set conformance expectations for the desired system. Still, it is a level of detail that might not be exposed by production servers or clients when using CapabilityStatement to describe an actual implementation. If this list is empty, the server does not support includes. Support for *iterative* (a.k.a., recursive) `_include` is communicated by listing the iterative includes values supported by the server in the `searchInclude` element of the "root" resource type. For example, to support the following search:

`GET [base]/CarePlan?_include=CarePlan:activity-reference:DeviceRequest&_include:iterate=DeviceRequest:device`

These values would be listed as part of capabilities for "CarePlan":

"searchInclude" : ["CarePlan:activity-reference:DeviceRequest","DeviceRequest:device"],

     */
    searchInclude?: string[];
    /**
     * Extension for searchInclude
     **/
    _searchInclude?: Element[];
    /**
     * _revinclude values supported by the server
     * A list of _revinclude (reverse include) values supported by the server.
     * See `CapabilityStatement.rest.resource.searchInclude` comments.
     */
    searchRevInclude?: string[];
    /**
     * Extension for searchRevInclude
     **/
    _searchRevInclude?: Element[];
    /**
     * Search parameters supported by implementation
     * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
     * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
     */
    searchParam?: CapabilityStatementRestResourceSearchParam[];
    /**
     * Definition of a resource operation
     * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
     * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.

If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
     */
    operation?: CapabilityStatementRestResourceOperation[];
    /**
     * no-version | versioned | versioned-update
     * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
     * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
     */
    versioning?: CapabilityStatementResourceVersionPolicy;
    /**
     * not-supported | modified-since | not-match | full-support
     * A code that indicates how the server supports conditional read.
     * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
     */
    conditionalRead?: CapabilityStatementConditionalReadStatus;
    /**
     * not-supported | single | multiple - how conditional delete is supported
     * A code that indicates how the server supports conditional delete.
     * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
     */
    conditionalDelete?: CapabilityStatementConditionalDeleteStatus;
    /**
     * literal | logical | resolves | enforced | local
     * A set of flags that defines how references are supported.
     */
    referencePolicy?: CapabilityStatementReferenceHandlingPolicy[];
}
/**
 * What operations are supported?
 * A specification of restful operations supported by the system.
 */
export interface CapabilityStatementRestInteraction extends BackboneElement {
    /**
     * Anything special about operation behavior
     * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * transaction | batch | search-system | history-system
     * A coded identifier of the operation, supported by the system.
     */
    code: CapabilityStatementSystemRestfulInteraction;
}
/**
 * If the endpoint is a RESTful one
 * A definition of the restful capabilities of the solution, if any.
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export interface CapabilityStatementRest extends BackboneElement {
    /**
     * General description of implementation
     * Information about the system's restful capabilities that apply across all applications, such as security.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Information about security of implementation
     * Information about security implementation from an interface perspective - what a client needs to know.
     */
    security?: CapabilityStatementRestSecurity;
    /**
     * Resource served on the REST interface
     * A specification of the restful capabilities of the solution for a specific resource type.
     * Max of one repetition per resource type.
     */
    resource?: CapabilityStatementRestResource[];
    /**
     * What operations are supported?
     * A specification of restful operations supported by the system.
     */
    interaction?: CapabilityStatementRestInteraction[];
    /**
     * Search parameters for searching all resources
     * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. This is only for searches executed against the system-level endpoint.
     * Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
     */
    searchParam?: CapabilityStatementRestResourceSearchParam[];
    /**
     * Definition of a system level operation
     * Definition of an operation or a named query together with its parameters and their meaning and type.
     * CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.
     */
    operation?: CapabilityStatementRestResourceOperation[];
    /**
     * Compartments served/used by system
     * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
     * At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
     */
    compartment?: canonical[];
    /**
     * Extension for compartment
     **/
    _compartment?: Element[];
    /**
     * client | server
     * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
     */
    mode: CapabilityStatementRestfulCapabilityMode;
}
/**
 * Where messages should be sent
 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
 */
export interface CapabilityStatementMessagingEndpoint extends BackboneElement {
    /**
     * http | ftp | mllp +
     * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
     */
    protocol: Coding;
    /**
     * Network address or identifier of the end-point
     * The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
     */
    address: url;
    /**
     * Extension for address
     **/
    _address?: Element;
}
/**
 * Messages supported by this system
 * References to message definitions for messages this system can send or receive.
 * This is a proposed alternative to the messaging.event structure.
 */
export interface CapabilityStatementMessagingSupportedMessage extends BackboneElement {
    /**
     * Message supported by this system
     * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
     */
    definition: canonical;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * sender | receiver
     * The mode of this event declaration - whether application is sender or receiver.
     */
    mode: CapabilityStatementEventCapabilityMode;
}
/**
 * If messaging is supported
 * A description of the messaging capabilities of the solution.
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export interface CapabilityStatementMessaging extends BackboneElement {
    /**
     * Where messages should be sent
     * An endpoint (network accessible address) to which messages and/or replies are to be sent.
     */
    endpoint?: CapabilityStatementMessagingEndpoint[];
    /**
     * Reliable Message Cache Length (min)
     * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
     * If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.
     */
    reliableCache?: unsignedInt;
    /**
     * Extension for reliableCache
     **/
    _reliableCache?: Element;
    /**
     * Messaging interface behavior details
     * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Messages supported by this system
     * References to message definitions for messages this system can send or receive.
     * This is a proposed alternative to the messaging.event structure.
     */
    supportedMessage?: CapabilityStatementMessagingSupportedMessage[];
}
/**
 * Document definition
 * A document definition.
 */
export interface CapabilityStatementDocument extends BackboneElement {
    /**
     * Description of document support
     * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Constraint on the resources used in the document
     * A profile on the document Bundle that constrains which resources are present, and their contents.
     * The profile is actually on the Bundle.
     */
    profile: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
    /**
     * producer | consumer
     * Mode of this document declaration - whether an application is a producer or consumer.
     */
    mode: CapabilityStatementDocumentMode;
}
/**
 * A statement of system capabilities
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 * Applications may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, then a CapabilityStatement describes the system's support for a particular version of FHIR, and the server will have multiple statements, one for each version.
 */
export interface CapabilityStatement extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CapabilityStatement';
    /**
     * Canonical identifier for this capability statement, represented as a URI (globally unique)
     * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the CapabilityStatement (business identifier)
     * A formal identifier that is used to identify this CapabilityStatement when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the capability statement
     * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this capability statement (computer friendly)
     * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this capability statement (human friendly)
     * A short, descriptive, user-friendly title for the capability statement.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of capability statements that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the capability statement was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the capability statement.
     * Usually an organization but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the capability statement
     * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement is presumed to be the predominant language in the place the capability statement was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for capability statement (if applicable)
     * A legal or geographic region in which the capability statement is intended to be used.
     * It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this capability statement is defined
     * Explanation of why this capability statement is needed and why it has been designed as it has.
     * This element does not describe the usage of the capability statement. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Canonical URL of another capability statement this implements
     * Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
     * HL7 defines the following Services: [Terminology Service](terminology-service.html).

Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
     */
    instantiates?: canonical[];
    /**
     * Extension for instantiates
     **/
    _instantiates?: Element[];
    /**
     * Canonical URL of another capability statement this adds to
     * Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
     * the contents of any directly or indirectly imported CapabilityStatements SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.

A capability statement that imports another CapabilityStatement automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatements that are suitable for importing).
     */
    imports?: canonical[];
    /**
     * Extension for imports
     **/
    _imports?: Element[];
    /**
     * Software that is covered by this capability statement
     * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
     */
    software?: CapabilityStatementSoftware;
    /**
     * If this describes a specific instance
     * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
     */
    implementation?: CapabilityStatementImplementation;
    /**
     * FHIR Version the system supports
     * The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
     * Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, and the CapabilityStatement is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.
     */
    fhirVersion: code;
    /**
     * Extension for fhirVersion
     **/
    _fhirVersion?: Element;
    /**
     * formats supported (xml | json | ttl | mime type)
     * A list of the formats supported by this implementation using their content types.
     * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
     */
    format: code[];
    /**
     * Extension for format
     **/
    _format?: Element[];
    /**
     * Patch formats supported
     * A list of the patch formats supported by this implementation using their content types.
     * At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
     */
    patchFormat?: code[];
    /**
     * Extension for patchFormat
     **/
    _patchFormat?: Element[];
    /**
     * Languages supported
     * A list of the languages supported by this implementation that are usefully supported in the ```Accept-Language``` header.
     * In general, if a server gets a request with an Accept-Language that it doesn't support, it should still reutrn the resource, just in its default language for the resource.
     */
    acceptLanguage?: code[];
    /**
     * Extension for acceptLanguage
     **/
    _acceptLanguage?: Element[];
    /**
     * Implementation guides supported
     * A list of implementation guides that the server does (or should) support in their entirety.
     * Note: this is primarily only relevant in terms of ImplementationGuides that don't define specific CapabilityStatements declaring the expectation of distinct roles.  (E.g. generic IGs that establish privacy policies.)  In situations where an ImplementationGuide does define CapabilityStatements, asserting CapabilityStatement.implementationGuide means that the implementation adheres to any Implementation.global definitions present in that IG as well as any textual requirements around security or other general interoperability behaviors. However, it does not make any assertions as to conformance with any of the CapabilityStatements defined in the IG. To assert conformance with CapabilityStatements in a referenced IG, it is necessary to use the CapabilityStatement.instantiates element.
     */
    implementationGuide?: canonical[];
    /**
     * Extension for implementationGuide
     **/
    _implementationGuide?: Element[];
    /**
     * If the endpoint is a RESTful one
     * A definition of the restful capabilities of the solution, if any.
     * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
     */
    rest?: CapabilityStatementRest[];
    /**
     * If messaging is supported
     * A description of the messaging capabilities of the solution.
     * Multiple repetitions allow the documentation of multiple endpoints per solution.
     */
    messaging?: CapabilityStatementMessaging[];
    /**
     * Document definition
     * A document definition.
     */
    document?: CapabilityStatementDocument[];
    /**
     * draft | active | retired | unknown
     * The status of this capability statement. Enables tracking the life-cycle of the content.
     * Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: CapabilityStatementPublicationStatus;
    /**
     * instance | capability | requirements
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind: CapabilityStatementKind;
}
/**
 * Action to occur or has occurred as part of plan
 * Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc.
 */
export interface CarePlanActivity extends BackboneElement {
    /**
     * Results of the activity (concept, or Appointment, Encounter, Procedure, etc.)
     * Identifies the activity that was performed. For example, an activity could be patient education, exercise, or a medication administration. The reference to an "event" resource, such as Procedure or Encounter or Observation, represents the activity that was performed. The requested activity can be conveyed using the CarePlan.activity.plannedActivityReference (a reference to a “request” resource).
     * Note that this should not duplicate the activity status (e.g. completed or in progress). The activity performed is independent of the outcome of the related goal(s). For example, if the goal is to achieve a target body weight of 150 lbs and an activity is defined to exercise, then the activity performed could be amount and intensity of exercise performed whereas the goal outcome is an observation for the actual body weight measured.
     */
    performedActivity?: CodeableReference[];
    /**
     * Comments about the activity status/progress
     * Notes about the adherence/status/progress of the activity.
     * This element should NOT be used to describe the activity to be performed - that occurs either within the resource pointed to by activity.detail.reference or in activity.detail.description.
     */
    progress?: Annotation[];
    /**
     * Activity that is intended to be part of the care plan
     * The details of the proposed activity represented in a specific resource.
     * Standard extension exists ([http://hl7.org/fhir/StructureDefinition/resource-pertainsToGoal](http://hl7.org/fhir/extensions/StructureDefinition-resource-pertainsToGoal.html)) that allows goals to be referenced from any of the referenced resources in CarePlan.activity.plannedActivityReference.
The goal should be visible when the resource referenced by CarePlan.activity.plannedActivityReference is viewed independently from the CarePlan.  Requests that are pointed to by a CarePlan using this element should *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that are part of a CarePlan are not "based on" the CarePlan.
     */
    plannedActivityReference?: Reference;
}
/**
 * Healthcare plan for patient or group
 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
 */
export interface CarePlan extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CarePlan';
    /**
     * External Ids for this plan
     * Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * Fulfills plan, proposal or order
     * A higher-level request resource (i.e. a plan, proposal or order) that is fulfilled in whole or in part by this care plan.
     */
    basedOn?: Reference[];
    /**
     * CarePlan replaced by this CarePlan
     * Completed or terminated care plan whose function is taken by this new care plan.
     * The replacement could be because the initial care plan was immediately rejected (due to an issue) or because the previous care plan was completed, but the need for the action described by the care plan remains ongoing.
     */
    replaces?: Reference[];
    /**
     * Part of referenced CarePlan
     * A larger care plan of which this particular care plan is a component or step.
     * Each care plan is an independent request, such that having a care plan be part of another care plan can cause issues with cascading statuses.  As such, this element is still being discussed.
     */
    partOf?: Reference[];
    /**
     * Type of plan
     * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
     * There may be multiple axes of categorization and one plan may serve multiple purposes.  In some cases, this may be redundant with references to CarePlan.addresses.
     */
    category?: CodeableConcept[];
    /**
     * Human-friendly name for the care plan
     * Human-friendly name for the care plan.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Summary of nature of plan
     * A description of the scope and nature of the plan.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Who the care plan is for
     * Identifies the patient or group whose intended care is described by the plan.
     */
    subject: Reference;
    /**
     * The Encounter during which this CarePlan was created
     * The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. CarePlan activities conducted as a result of the care plan may well occur as part of other encounters.
     */
    encounter?: Reference;
    /**
     * Time period plan covers
     * Indicates when the plan did (or is intended to) come into effect and end.
     * Any activities scheduled as part of the plan should be constrained to the specified period regardless of whether the activities are planned within a single encounter/episode or across multiple encounters/episodes (e.g. the longitudinal management of a chronic condition).
     */
    period?: Period;
    /**
     * Date record was first recorded
     * Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
     */
    created?: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Who is the designated responsible party
     * When populated, the custodian is responsible for the care plan. The care plan is attributed to the custodian.
     * The custodian might or might not be a contributor.
     */
    custodian?: Reference;
    /**
     * Who provided the content of the care plan
     * Identifies the individual(s), organization or device who provided the contents of the care plan.
     * Collaborative care plans may have multiple contributors.
     */
    contributor?: Reference[];
    /**
     * Who's involved in plan?
     * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
     */
    careTeam?: Reference[];
    /**
     * Health issues this plan addresses
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
     * Use CarePlan.addresses.concept when a code sufficiently describes the concern (e.g. condition, problem, diagnosis, risk). Use CarePlan.addresses.reference when referencing a resource, which allows more information to be conveyed, such as onset date. CarePlan.addresses.concept and CarePlan.addresses.reference are not meant to be duplicative. For a single concern, either CarePlan.addresses.concept or CarePlan.addresses.reference can be used. CarePlan.addresses.concept may be a summary code, or CarePlan.addresses.reference may be used to reference a very precise definition of the concern using Condition. Both CarePlan.addresses.concept and CarePlan.addresses.reference can be used if they are describing different concerns for the care plan.
     */
    addresses?: CodeableReference[];
    /**
     * Information considered as part of plan
     * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
     * Use "concern" to identify specific conditions addressed by the care plan.  supportingInfo can be used to convey one or more Advance Directives or Medical Treatment Consent Directives by referencing Consent or any other request resource with intent = directive.
     */
    supportingInfo?: Reference[];
    /**
     * Desired outcome of plan
     * Describes the intended objective(s) of carrying out the care plan.
     * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
     */
    goal?: Reference[];
    /**
     * Action to occur or has occurred as part of plan
     * Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc.
     */
    activity?: CarePlanActivity[];
    /**
     * Comments about the plan
     * General notes about the care plan not covered elsewhere.
     */
    note?: Annotation[];
    /**
     * draft | active | on-hold | revoked | completed | entered-in-error | unknown
     * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
     * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.

This element is labeled as a modifier because the status contains the code entered-in-error that marks the plan as not currently valid.
     */
    status: CarePlanStatus;
    /**
     * proposal | plan | order | option | directive
     * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
     * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
This element is expected to be immutable. E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance. Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.
     */
    intent: CarePlanIntent;
}
/**
 * Members of the team
 * Identifies all people and organizations who are expected to be involved in the care team.
 */
export interface CareTeamParticipant extends BackboneElement {
    /**
     * Type of involvement
     * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
     * Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.  If a participant has multiple roles within the team, then there should be multiple participants.
     */
    role?: CodeableConcept;
    /**
     * Who is involved
     * The specific person or organization who is participating/expected to participate in the care team.
     * Patient only needs to be listed if they have a role other than "subject of care".

Member is optional because some participants may be known only by their role, particularly in draft plans.
     */
    member?: Reference;
    /**
     * Organization of the practitioner
     * The organization of the practitioner.
     */
    onBehalfOf?: Reference;
    /**
     * When the member is generally available within this care team
     * When the member is generally available within this care team.
     * This is populated while creating / managing the CareTeam to ensure there is coverage when servicing CarePlan activities from the Schedule.
     */
    coveragePeriod?: Period;
    /**
     * When the member is generally available within this care team
     * When the member is generally available within this care team.
     * This is populated while creating / managing the CareTeam to ensure there is coverage when servicing CarePlan activities from the Schedule.
     */
    coverageTiming?: Timing;
}
/**
 * Planned participants in the coordination and delivery of care
 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care.
 */
export interface CareTeam extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CareTeam';
    /**
     * External Ids for this team
     * Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Type of team
     * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
     * There may be multiple axis of categorization and one team may serve multiple purposes.
     */
    category?: CodeableConcept[];
    /**
     * Name of the team, such as crisis assessment team
     * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
     * The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly.).
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Who care team is for
     * Identifies the patient or group whose intended care is handled by the team.
     * Use Group for care provision to all members of the group (e.g. group therapy).  Use Patient for care provision to an individual patient.
     */
    subject?: Reference;
    /**
     * Time period team covers
     * Indicates when the team did (or is intended to) come into effect and end.
     */
    period?: Period;
    /**
     * Members of the team
     * Identifies all people and organizations who are expected to be involved in the care team.
     */
    participant?: CareTeamParticipant[];
    /**
     * Why the care team exists
     * Describes why the care team exists.
     */
    reason?: CodeableReference[];
    /**
     * Organization responsible for the care team
     * The organization responsible for the care team.
     */
    managingOrganization?: Reference[];
    /**
     * A contact detail for the care team (that applies to all members)
     * A central contact detail for the care team (that applies to all members).
     * The ContactPoint.use code of home is not appropriate to use. These contacts are not the contact details of individual care team members.
     */
    telecom?: ContactPoint[];
    /**
     * Comments made about the CareTeam
     * Comments made about the CareTeam.
     */
    note?: Annotation[];
    /**
     * proposed | active | suspended | inactive | entered-in-error
     * Indicates the current state of the care team.
     * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
     */
    status?: CareTeamStatus;
}
/**
 * Who performed charged service
 * Indicates who or what performed or participated in the charged service.
 */
export interface ChargeItemPerformer extends BackboneElement {
    /**
     * What type of performance was done
     * Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
     */
    function?: CodeableConcept;
    /**
     * Individual who was performing
     * The device, practitioner, etc. who performed or participated in the service.
     */
    actor: Reference;
}
/**
 * Item containing charge code(s) associated with the provision of healthcare provider products
 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
 */
export interface ChargeItem extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ChargeItem';
    /**
     * Business Identifier for item
     * Identifiers assigned to this event performer or other systems.
     */
    identifier?: Identifier[];
    /**
     * Defining information about the code of this charge item
     * References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
     */
    definitionUri?: uri[];
    /**
     * Extension for definitionUri
     **/
    _definitionUri?: Element[];
    /**
     * Resource defining the code of this ChargeItem
     * References the source of pricing information, rules of application for the code this ChargeItem uses.
     */
    definitionCanonical?: canonical[];
    /**
     * Extension for definitionCanonical
     **/
    _definitionCanonical?: Element[];
    /**
     * Part of referenced ChargeItem
     * ChargeItems can be grouped to larger ChargeItems covering the whole set.
     */
    partOf?: Reference[];
    /**
     * A code that identifies the charge, like a billing code
     * A code that identifies the charge, like a billing code.
     */
    code: CodeableConcept;
    /**
     * Individual service was done for/to
     * The individual or set of individuals the action is being or was performed on.
     */
    subject: Reference;
    /**
     * Encounter associated with this ChargeItem
     * This ChargeItem has the details of how the associated Encounter should be billed or otherwise be handled by finance systems.
     * This ChargeItem may be recorded during planning, execution or after the actual encounter takes place.
     */
    encounter?: Reference;
    /**
     * When the charged service was applied
     * Date/time(s) or duration when the charged service was applied.
     * The list of types may be constrained as appropriate for the type of charge item.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When the charged service was applied
     * Date/time(s) or duration when the charged service was applied.
     * The list of types may be constrained as appropriate for the type of charge item.
     */
    occurrencePeriod?: Period;
    /**
     * When the charged service was applied
     * Date/time(s) or duration when the charged service was applied.
     * The list of types may be constrained as appropriate for the type of charge item.
     */
    occurrenceTiming?: Timing;
    /**
     * Who performed charged service
     * Indicates who or what performed or participated in the charged service.
     */
    performer?: ChargeItemPerformer[];
    /**
     * Organization providing the charged service
     * The organization performing the service.
     * Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
     */
    performingOrganization?: Reference;
    /**
     * Organization requesting the charged service
     * The organization requesting the service.
     * The rendered Service might not be associated with a Request. This property indicates which Organization requested the services to be rendered. (In many cases, this may just be the Department associated with the Encounter.location).
     */
    requestingOrganization?: Reference;
    /**
     * Organization that has ownership of the (potential, future) revenue
     * The financial cost center permits the tracking of charge attribution.
     * The costCenter could either be given as a reference to an Organization(Role) resource or as the identifier of the cost center determined by Reference.identifier.value and Reference.identifier.system, depending on use case requirements.
     */
    costCenter?: Reference;
    /**
     * Quantity of which the charge item has been serviced
     * Quantity of which the charge item has been serviced.
     * In many cases this may just be a value, if the underlying units are implicit in the definition of the charge item code.
     */
    quantity?: Quantity;
    /**
     * Anatomical location, if relevant
     * The anatomical location where the related service has been applied.
     * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
     */
    bodysite?: CodeableConcept[];
    /**
     * Unit price overriding the associated rules
     * The unit price of the chargable item.
     * This could be communicated in ChargeItemDefinition. But if ChargeItemDefinition is not supported or not available, the unit price can be communicated in this property.
     */
    unitPriceComponent?: MonetaryComponent;
    /**
     * Total price overriding the associated rules
     * The total price for the chargable item, accounting for the quantity.
     *  Often, the total price may be be calculated and recorded on the Invoice, but if a calculated total price must be exchanged prior to Invoice creation, it can be communicated in this property.
     */
    totalPriceComponent?: MonetaryComponent;
    /**
     * Reason for overriding the list price/factor
     * If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
     */
    overrideReason?: CodeableConcept;
    /**
     * Individual who was entering
     * The device, practitioner, etc. who entered the charge item.
     * The enterer is also the person considered responsible for factor/price overrides if applicable.
     */
    enterer?: Reference;
    /**
     * Date the charge item was entered
     * Date the charge item was entered.
     * The actual date when the service associated with the charge has been rendered is captured in occurrence[x].
     */
    enteredDate?: dateTime;
    /**
     * Extension for enteredDate
     **/
    _enteredDate?: Element;
    /**
     * Why was the charged  service rendered?
     * Describes why the event occurred in coded or textual form.
     * If the application of the charge item requires a reason to be given, it can be captured here. Textual reasons can be captured using reasonCode.text.
     */
    reason?: CodeableConcept[];
    /**
     * Which rendered service is being charged?
     * Indicated the rendered service that caused this charge.
     */
    service?: CodeableReference[];
    /**
     * Product charged
     * Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
     */
    product?: CodeableReference[];
    /**
     * Account to place this charge
     * Account into which this ChargeItems belongs.
     * Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the postprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
     */
    account?: Reference[];
    /**
     * Comments made about the ChargeItem
     * Comments made about the event by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Further information supporting this charge
     * Further information supporting this charge.
     */
    supportingInformation?: Reference[];
    /**
     * planned | billable | not-billable | aborted | billed | entered-in-error | unknown
     * The current state of the ChargeItem.
     * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
     */
    status: ChargeItemStatus;
}
/**
 * Whether or not the billing code is applicable
 * Expressions that describe applicability criteria for the billing code.
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
export interface ChargeItemDefinitionApplicability extends BackboneElement {
    /**
     * Boolean-valued expression
     * An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.
     * Please note that FHIRPath Expressions can only be evaluated in the scope of the current ChargeItem resource to which this definition is being applied.
FHIRPath expressions can traverse into other resources linked from the ChargeItem resource, however, testing rules such as that a billing code may be billed only once per encounter need a wider scope. In such scenarios, CQL may be the appropriate choice.
     */
    condition?: Expression;
    /**
     * When the charge item definition is expected to be used
     * The period during which the charge item definition content was or is planned to be in active use.
     * The effective period for a charge item definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
     */
    effectivePeriod?: Period;
    /**
     * Reference to / quotation of the external source of the group of properties
     * Reference to / quotation of the external source of the group of properties.
     */
    relatedArtifact?: RelatedArtifact;
}
/**
 * Group of properties which are applicable under the same conditions
 * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
 */
export interface ChargeItemDefinitionPropertyGroup extends BackboneElement {
    /**
     * Conditions under which the priceComponent is applicable
     * Expressions that describe applicability criteria for the priceComponent.
     * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
     */
    applicability?: ChargeItemDefinitionApplicability[];
    /**
     * Components of total line item price
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
     */
    priceComponent?: MonetaryComponent[];
}
/**
 * Definition of properties and rules about how the price and the applicability of a ChargeItem can be determined
 * The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
 */
export interface ChargeItemDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ChargeItemDefinition';
    /**
     * Canonical identifier for this charge item definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the charge item definition
     * A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this charge item definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the charge item definition
     * The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
     * There may be different charge item definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the charge item definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this charge item definition (computer friendly)
     * A natural language name identifying the ChargeItemDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this charge item definition (human friendly)
     * A short, descriptive, user-friendly title for the charge item definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Underlying externally-defined charge item definition
     * The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
     */
    derivedFromUri?: uri[];
    /**
     * Extension for derivedFromUri
     **/
    _derivedFromUri?: Element[];
    /**
     * A larger definition of which this particular definition is a component or step
     * A larger definition of which this particular definition is a component or step.
     */
    partOf?: canonical[];
    /**
     * Extension for partOf
     **/
    _partOf?: Element[];
    /**
     * Completed or terminated request(s) whose function is taken by this new request
     * As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
     */
    replaces?: canonical[];
    /**
     * Extension for replaces
     **/
    _replaces?: Element[];
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of charge item definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the charge item definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the charge item definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the charge item definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the charge item definition is the organization or individual primarily responsible for the maintenance and upkeep of the charge item definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the charge item definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the charge item definition
     * A free text natural language description of the charge item definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the charge item definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the charge item definition is presumed to be the predominant language in the place the charge item definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for charge item definition (if applicable)
     * A legal or geographic region in which the charge item definition is intended to be used.
     * It may be possible for the charge item definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this charge item definition is defined
     * Explanation of why this charge item definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the charge item definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this charge item definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the charge item definition was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the charge item definition was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * Billing code or product type this definition applies to
     * The defined billing details in this resource pertain to the given billing code.
     */
    code?: CodeableConcept;
    /**
     * Instances this definition applies to
     * The defined billing details in this resource pertain to the given product instance(s).
     * In case of highly customized, individually produced or fitted devices/substances, the pricing information may be different for each instance of the product. This reference links pricing details to specific product instances.
     */
    instance?: Reference[];
    /**
     * Whether or not the billing code is applicable
     * Expressions that describe applicability criteria for the billing code.
     * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
     */
    applicability?: ChargeItemDefinitionApplicability[];
    /**
     * Group of properties which are applicable under the same conditions
     * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
     */
    propertyGroup?: ChargeItemDefinitionPropertyGroup[];
    /**
     * draft | active | retired | unknown
     * The current state of the ChargeItemDefinition.
     * Allows filtering of charge item definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ChargeItemDefinitionPublicationStatus;
}
/**
 * A human-readable display of key concepts to represent the citation
 * A human-readable display of key concepts to represent the citation.
 */
export interface CitationSummary extends BackboneElement {
    /**
     * Format for display of the citation summary
     * Format for display of the citation summary.
     */
    style?: CodeableConcept;
    /**
     * The human-readable display of the citation summary
     * The human-readable display of the citation summary.
     */
    text: markdown;
    /**
     * Extension for text
     **/
    _text?: Element;
}
/**
 * The assignment to an organizing scheme
 * The assignment to an organizing scheme.
 * Use this element if you need to classify the citation record independently from classifying the cited artifact.
 */
export interface CitationClassification extends BackboneElement {
    /**
     * The kind of classifier (e.g. publication type, keyword)
     * The kind of classifier (e.g. publication type, keyword).
     */
    type?: CodeableConcept;
    /**
     * The specific classification value
     * The specific classification value.
     */
    classifier?: CodeableConcept[];
}
/**
 * An effective date or period for a status of the citation record
 * The state or status of the citation record paired with an effective date or period for that state.
 * Use this if needed for reporting the state or status of the citation record, NOT FOR reporting the state or status of the cited article.
 */
export interface CitationStatusDate extends BackboneElement {
    /**
     * Classification of the status
     * The state or status of the citation record (that will be paired with the period).
     */
    activity: CodeableConcept;
    /**
     * Either occurred or expected
     * Whether the status date is actual (has occurred) or expected (estimated or anticipated).
     */
    actual?: boolean;
    /**
     * Extension for actual
     **/
    _actual?: Element;
    /**
     * When the status started and/or ended
     * When the status started and/or ended.
     * For an instance, place the same value in both start and end elements.
     */
    period: Period;
}
/**
 * The defined version of the cited artifact
 * The defined version of the cited artifact.
 */
export interface CitationCitedArtifactVersion extends BackboneElement {
    /**
     * The version number or other version identifier
     * The version number or other version identifier.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * Citation for the main version of the cited artifact
     * Citation for the main version of the cited artifact.
     * When referencing a baseCitation, one may inherit any data from the referenced Citation Resource and consider any data in the current Citation Resource as superceding to be version-specific.
     */
    baseCitation?: Reference;
}
/**
 * An effective date or period for a status of the cited artifact
 * An effective date or period, historical or future, actual or expected, for a status of the cited artifact.
 */
export interface CitationCitedArtifactStatusDate extends BackboneElement {
    /**
     * Classification of the status
     * A definition of the status associated with a date or period.
     */
    activity: CodeableConcept;
    /**
     * Either occurred or expected
     * Either occurred or expected.
     */
    actual?: boolean;
    /**
     * Extension for actual
     **/
    _actual?: Element;
    /**
     * When the status started and/or ended
     * When the status started and/or ended.
     * For an instance, place the same value in both start and end elements.
     */
    period: Period;
}
/**
 * The title details of the article or artifact
 * The title details of the article or artifact.
 */
export interface CitationCitedArtifactTitle extends BackboneElement {
    /**
     * The kind of title
     * Used to express the reason for or classification of the title.
     */
    type?: CodeableConcept[];
    /**
     * Used to express the specific language
     * Used to express the specific language of the title.
     */
    language?: CodeableConcept;
    /**
     * The title of the article or artifact
     * The title of the article or artifact.
     */
    text: markdown;
    /**
     * Extension for text
     **/
    _text?: Element;
}
/**
 * Summary of the article or artifact
 * The abstract may be used to convey article-contained abstracts, externally-created abstracts, or other descriptive summaries.
 */
export interface CitationCitedArtifactAbstract extends BackboneElement {
    /**
     * The kind of abstract
     * Used to express the reason for or classification of the abstract.
     */
    type?: CodeableConcept;
    /**
     * Used to express the specific language
     * Used to express the specific language of the abstract.
     */
    language?: CodeableConcept;
    /**
     * Abstract content
     * Abstract content.
     */
    text: markdown;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Copyright notice for the abstract
     * Copyright notice for the abstract.
     * There is also a copyright element in the publicationForm element, so this copyright element is intended for copyright of the abstract.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
}
/**
 * The component of the article or artifact
 * The component of the article or artifact.
 */
export interface CitationCitedArtifactPart extends BackboneElement {
    /**
     * The kind of component
     * The kind of component.
     */
    type?: CodeableConcept;
    /**
     * The specification of the component
     * The specification of the component.
     */
    value?: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * The citation for the full article or artifact
     * The citation for the full article or artifact.
     * When referencing a baseCitation, one may inherit any data from the referenced Citation Resource and consider any data in the current Citation Resource as superceding to be specific to the citation of the specified part. For example, the part-specific Citation may have additional contributorship data that supercedes the contributorship data for the full citation when there is a need to uniquely report the contributorship for an image or supplement associated with the fuller citation record.
     */
    baseCitation?: Reference;
}
/**
 * The artifact related to the cited artifact
 * The artifact related to the cited artifact.
 * The citedArtifact.relatesTo element uses a BackboneElement instead of the RelatedArtifact Datatype to enable use of an extended value set for the required code for the type of relationship.
 */
export interface CitationCitedArtifactRelatesTo extends BackboneElement {
    /**
     * Additional classifiers
     * Provides additional classifiers of the related artifact.
     */
    classifier?: CodeableConcept[];
    /**
     * Short label
     * A short label that can be used to reference the related artifact from elsewhere in the containing artifact, such as a footnote index.
     * Though not commonly used in citation records, this could be used for referencing other articles in the abstract or explanatory notes.
     */
    label?: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Brief description of the related artifact
     * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Bibliographic citation for the artifact
     * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
     */
    citation?: markdown;
    /**
     * Extension for citation
     **/
    _citation?: Element;
    /**
     * What document is being referenced
     * The document being referenced, represented as an attachment. Do not use this element if using the resource element to provide the canonical to the related artifact.
     * To refer to related artifacts by URL, the FHIR Attachment Datatype includes a url element, so the path would be Citation.citedArtifact.relatesTo.document.url
     */
    document?: Attachment;
    /**
     * What artifact is being referenced
     * The related artifact, such as a library, value set, profile, or other knowledge resource.
     * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource
     */
    resource?: canonical;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * What artifact, if not a conformance resource
     * The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.
     * If both resource and resourceReference are present, they SHOULD be consistent and reference the same resource. Although relatedArtifact is intended to support references to definitional resources, there are cases where non-definitional resources can be definitional (such as Location where the kind is mode). Related artifacts SHOULD be used to reference definitional resources, and profiles SHOULD be used to make that explicit for particular use cases.
     */
    resourceReference?: Reference;
    /**
     * documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of | part-of | amends | amended-with | appends | appended-with | cites | cited-by | comments-on | comment-in | contains | contained-in | corrects | correction-in | replaces | replaced-with | retracts | retracted-by | signs | similar-to | supports | supported-with | transforms | transformed-into | transformed-with | documents | specification-of | created-with | cite-as | reprint | reprint-of
     * The type of relationship to the related artifact.
     */
    type: CitationRelatedArtifactTypeExpanded;
}
/**
 * The collection the cited article or artifact is published in
 * The collection the cited article or artifact is published in.
 */
export interface CitationCitedArtifactPublicationFormPublishedIn extends BackboneElement {
    /**
     * Kind of container (e.g. Periodical, database, or book)
     * Kind of container (e.g. Periodical, database, or book).
     * Journals and newspapers are coded as Periodical.
     */
    type?: CodeableConcept;
    /**
     * Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN
     * Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
     */
    identifier?: Identifier[];
    /**
     * Name of the database or title of the book or journal
     * Name of the database or title of the book or journal.
     * ClinicalTrials.gov is a name of a database.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Name of or resource describing the publisher
     * Name of or resource describing the publisher.
     */
    publisher?: Reference;
    /**
     * Geographic location of the publisher
     * Geographic location of the publisher.
     */
    publisherLocation?: string;
    /**
     * Extension for publisherLocation
     **/
    _publisherLocation?: Element;
}
/**
 * If multiple, used to represent alternative forms of the article that are not separate citations
 * If multiple, used to represent alternative forms of the article that are not separate citations.
 * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
 */
export interface CitationCitedArtifactPublicationForm extends BackboneElement {
    /**
     * The collection the cited article or artifact is published in
     * The collection the cited article or artifact is published in.
     */
    publishedIn?: CitationCitedArtifactPublicationFormPublishedIn;
    /**
     * Internet or Print
     * Describes the form of the medium cited. Common codes are "Internet" or "Print". The CitedMedium value set has 6 codes. The codes internet, print, and offline-digital-storage are the common codes for a typical publication form, though internet and print are more common for study citations. Three additional codes (each appending one of the primary codes with "-without-issue" are used for situations when a study is published both within an issue (of a periodical release as commonly done for journals) AND is published separately from the issue (as commonly done with early online publication), to represent specific identification of the publication form not associated with the issue.
     */
    citedMedium?: CodeableConcept;
    /**
     * Volume number of journal or other collection in which the article is published
     * Volume number of journal or other collection in which the article is published.
     */
    volume?: string;
    /**
     * Extension for volume
     **/
    _volume?: Element;
    /**
     * Issue, part or supplement of journal or other collection in which the article is published
     * Issue, part or supplement of journal or other collection in which the article is published.
     */
    issue?: string;
    /**
     * Extension for issue
     **/
    _issue?: Element;
    /**
     * The date the article was added to the database, or the date the article was released
     * The date the article was added to the database, or the date the article was released.
     * The articleDate is the preferred element for expressing the publication date as structured data.
     */
    articleDate?: dateTime;
    /**
     * Extension for articleDate
     **/
    _articleDate?: Element;
    /**
     * Text representation of the date on which the issue of the cited artifact was published
     * Text representation of the date on which the issue of the cited artifact was published.
     * The publicationDateText element is prefererntially used when a date is not represented in a form that can be handled as structured data in other elements.
     */
    publicationDateText?: string;
    /**
     * Extension for publicationDateText
     **/
    _publicationDateText?: Element;
    /**
     * Season in which the cited artifact was published
     * Spring, Summer, Fall/Autumn, Winter.
     */
    publicationDateSeason?: string;
    /**
     * Extension for publicationDateSeason
     **/
    _publicationDateSeason?: Element;
    /**
     * The date the article was last revised or updated in the database
     * The date the article was last revised or updated in the database.
     * The lastRevisionDate is used for the cited article and not the date the Citation Resource is last revised.
     */
    lastRevisionDate?: dateTime;
    /**
     * Extension for lastRevisionDate
     **/
    _lastRevisionDate?: Element;
    /**
     * Language(s) in which this form of the article is published
     * The language or languages in which this form of the article is published.
     */
    language?: CodeableConcept[];
    /**
     * Entry number or identifier for inclusion in a database
     * Entry number or identifier for inclusion in a database.
     * Accession numbers may be used instead of or in addition to page numbers.  Accession numbers are functionally identifiers when coupled with the identity of the database for which they are accession numbers. Accession numbers which are used for indexing citations in a dataset of citations should NOT be entered in Citation.citedArtifact.publicationForm.accessionNumber -- this use would be a type of Citation.identifier for the citation record itself.
     */
    accessionNumber?: string;
    /**
     * Extension for accessionNumber
     **/
    _accessionNumber?: Element;
    /**
     * Used for full display of pagination
     * Used for full display of pagination.
     */
    pageString?: string;
    /**
     * Extension for pageString
     **/
    _pageString?: Element;
    /**
     * Used for isolated representation of first page
     * Used for isolated representation of first page.
     */
    firstPage?: string;
    /**
     * Extension for firstPage
     **/
    _firstPage?: Element;
    /**
     * Used for isolated representation of last page
     * Used for isolated representation of last page.
     */
    lastPage?: string;
    /**
     * Extension for lastPage
     **/
    _lastPage?: Element;
    /**
     * Number of pages or screens
     * Actual or approximate number of pages or screens. Distinct from reporting the page numbers.
     */
    pageCount?: string;
    /**
     * Extension for pageCount
     **/
    _pageCount?: Element;
    /**
     * Copyright notice for the full article or artifact
     * Copyright notice for the full article or artifact.
     * It is possible that different publication forms have different copyright notices.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
}
/**
 * Used for any URL for the article or artifact cited
 * Used for any URL for the article or artifact cited.
 */
export interface CitationCitedArtifactWebLocation extends BackboneElement {
    /**
     * Code the reason for different URLs, e.g. abstract and full-text
     * A characterization of the object expected at the web location.
     * Categories that may be frequently used for study citations may include abstract, full-text, supplement, webpage, and doi-based.
     */
    classifier?: CodeableConcept[];
    /**
     * The specific URL
     * The specific URL.
     * Persistent URLs, like doi, are preferred.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
}
/**
 * The assignment to an organizing scheme
 * The assignment to an organizing scheme.
 */
export interface CitationCitedArtifactClassification extends BackboneElement {
    /**
     * The kind of classifier (e.g. publication type, keyword)
     * The kind of classifier (e.g. publication type, keyword).
     */
    type?: CodeableConcept;
    /**
     * The specific classification value
     * The specific classification value.
     */
    classifier?: CodeableConcept[];
    /**
     * Complex or externally created classification
     * Complex or externally created classification.
     * Examples relevant to study citations include MeSH Headings or Keywords that contain qualifier codings or sub-classifications, and include risk of bias assessments created by persons different from the creator of the citation record.
     */
    artifactAssessment?: Reference[];
}
/**
 * Contributions with accounting for time or number
 * Contributions with accounting for time or number.
 */
export interface CitationCitedArtifactContributorshipEntryContributionInstance extends BackboneElement {
    /**
     * The specific contribution
     * The specific contribution.
     */
    type: CodeableConcept;
    /**
     * The time that the contribution was made
     * The time that the contribution was made.
     */
    time?: dateTime;
    /**
     * Extension for time
     **/
    _time?: Element;
}
/**
 * An individual entity named as a contributor
 * An individual entity named as a contributor, for example in the author list or contributor list.
 * Used to report contributorship in individualized ways.
 */
export interface CitationCitedArtifactContributorshipEntry extends BackboneElement {
    /**
     * The identity of the individual contributor
     * The identity of the individual contributor.
     * If naming a contributor without additional detail or further structured data, the display element within the Reference datatype may be used for a simple string without referencing another resource.
     */
    contributor: Reference;
    /**
     * For citation styles that use initials
     * For citation styles that use initials.
     * This element is used to support a data element used for citations that is not otherwise supported fully by FHIR HumanName datatype. In some citation summary styles (e.g. Medline), authors are presented with full spelling of their last name (family name) and initials for all forenames (first names, middle names, preceding names, given names). As the FHIR HumanName Datatype does not have a specific element for forename initials and this is common in citation usage, the element is added to contributorship.entry directly.
     */
    forenameInitials?: string;
    /**
     * Extension for forenameInitials
     **/
    _forenameInitials?: Element;
    /**
     * Organizational affiliation
     * Organization affiliated with the contributor.
     * If naming an organization without additional detail or further structured data, the display element within the Reference datatype may be used for a simple string without referencing another resource.
     */
    affiliation?: Reference[];
    /**
     * The specific contribution
     * This element identifies the specific nature of an individual’s contribution with respect to the cited work.
     * The CreDiT taxonomy provides a way to encode contribution information. The purpose of CRediT is to provide transparency in contributions to scholarly published work, to enable improved systems of attribution, credit, and accountability.
     */
    contributionType?: CodeableConcept[];
    /**
     * The role of the contributor (e.g. author, editor, reviewer, funder)
     * The role of the contributor (e.g. author, editor, reviewer, funder).
     */
    role?: CodeableConcept;
    /**
     * Contributions with accounting for time or number
     * Contributions with accounting for time or number.
     */
    contributionInstance?: CitationCitedArtifactContributorshipEntryContributionInstance[];
    /**
     * Whether the contributor is the corresponding contributor for the role
     * Whether the contributor is the corresponding contributor for the role.
     * If there are multiple authors and one serves as the corresponding author, then that one would have correspondingContact = true.
     */
    correspondingContact?: boolean;
    /**
     * Extension for correspondingContact
     **/
    _correspondingContact?: Element;
    /**
     * Ranked order of contribution
     * Provides a numerical ranking to represent the degree of contributorship relative to other contributors, such as 1 for first author and 2 for second author.
     * Used to retain order of authorship as structured data
     */
    rankingOrder?: positiveInt;
    /**
     * Extension for rankingOrder
     **/
    _rankingOrder?: Element;
}
/**
 * Used to record a display of the author/contributor list without separate data element for each list member
 * Used to record a display of the author/contributor list without separate data element for each list member.
 */
export interface CitationCitedArtifactContributorshipSummary extends BackboneElement {
    /**
     * Such as author list, contributorship statement, funding statement, acknowledgements statement, or conflicts of interest statement
     * Used most commonly to express an author list or a contributorship statement.
     */
    type?: CodeableConcept;
    /**
     * The format for the display string
     * The format for the display string, such as author last name with first letter capitalized followed by forename initials.
     */
    style?: CodeableConcept;
    /**
     * Used to code the producer or rule for creating the display string
     * Used to code the producer or rule for creating the display string.
     */
    source?: CodeableConcept;
    /**
     * The display string for the author list, contributor list, or contributorship statement
     * The display string for the author list, contributor list, or contributorship statement.
     */
    value: markdown;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Attribution of authors and other contributors
 * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
 */
export interface CitationCitedArtifactContributorship extends BackboneElement {
    /**
     * Indicates if the list includes all authors and/or contributors
     * Indicates if the list includes all authors and/or contributors.
     * If list is incomplete, "et al" can be appended to Contributorship.summary.value for display purposes.
     */
    complete?: boolean;
    /**
     * Extension for complete
     **/
    _complete?: Element;
    /**
     * An individual entity named as a contributor
     * An individual entity named as a contributor, for example in the author list or contributor list.
     * Used to report contributorship in individualized ways.
     */
    entry?: CitationCitedArtifactContributorshipEntry[];
    /**
     * Used to record a display of the author/contributor list without separate data element for each list member
     * Used to record a display of the author/contributor list without separate data element for each list member.
     */
    summary?: CitationCitedArtifactContributorshipSummary[];
}
/**
 * The article or artifact being described
 * The article or artifact being described.
 */
export interface CitationCitedArtifact extends BackboneElement {
    /**
     * Unique identifier. May include DOI, PMID, PMCID, etc
     * A formal identifier that is used to identify the cited artifact when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * This element will contain unique identifiers that support de-duplication of citations. Commonly used identifiers for study citations include digital object identifier (DOI), PubMed ID (PMID), and PubMed Central ID (PMCID). To maintain interoperability, the suggested identifier.system values to use for these 3 identifiers are: DOI = "https://doi.org" PMID = "https://pubmed.ncbi.nlm.nih.gov" PMCID = "https://www.ncbi.nlm.nih.gov/pmc/"
     */
    identifier?: Identifier[];
    /**
     * Identifier not unique to the cited artifact. May include trial registry identifiers
     * A formal identifier that is used to identify things closely related to the cited artifact.
     * May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This related identifier would not be used as unique identifier for the cited artifact itself. Multiple published articles (each with their own unique identifier) may relate to the same study record in a research registry. Commonly used related identifiers for study registries include ClinicalTrials.gov identifier (NCTId) and PROSPERO identifier (used for registration of systematic reviews). To maintain interoperability, the suggested identifier.system values to use for these 2 identifiers are: ClinicalTrials.gov = "https://clinicaltrials.gov" PROSPERO = "https://www.crd.york.ac.uk/prospero/"
     */
    relatedIdentifier?: Identifier[];
    /**
     * When the cited artifact was accessed
     * When the cited artifact was accessed.
     * Use this element when citing an artifact from a potentially unstable source, such as a webpage, to note the date (and time) the source was accessed.
     */
    dateAccessed?: dateTime;
    /**
     * Extension for dateAccessed
     **/
    _dateAccessed?: Element;
    /**
     * The defined version of the cited artifact
     * The defined version of the cited artifact.
     */
    version?: CitationCitedArtifactVersion;
    /**
     * The status of the cited artifact
     * The status of the cited artifact.
     */
    currentState?: CodeableConcept[];
    /**
     * An effective date or period for a status of the cited artifact
     * An effective date or period, historical or future, actual or expected, for a status of the cited artifact.
     */
    statusDate?: CitationCitedArtifactStatusDate[];
    /**
     * The title details of the article or artifact
     * The title details of the article or artifact.
     */
    title?: CitationCitedArtifactTitle[];
    /**
     * Summary of the article or artifact
     * The abstract may be used to convey article-contained abstracts, externally-created abstracts, or other descriptive summaries.
     */
    abstract?: CitationCitedArtifactAbstract[];
    /**
     * The component of the article or artifact
     * The component of the article or artifact.
     */
    part?: CitationCitedArtifactPart;
    /**
     * The artifact related to the cited artifact
     * The artifact related to the cited artifact.
     * The citedArtifact.relatesTo element uses a BackboneElement instead of the RelatedArtifact Datatype to enable use of an extended value set for the required code for the type of relationship.
     */
    relatesTo?: CitationCitedArtifactRelatesTo[];
    /**
     * If multiple, used to represent alternative forms of the article that are not separate citations
     * If multiple, used to represent alternative forms of the article that are not separate citations.
     * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
     */
    publicationForm?: CitationCitedArtifactPublicationForm[];
    /**
     * Used for any URL for the article or artifact cited
     * Used for any URL for the article or artifact cited.
     */
    webLocation?: CitationCitedArtifactWebLocation[];
    /**
     * The assignment to an organizing scheme
     * The assignment to an organizing scheme.
     */
    classification?: CitationCitedArtifactClassification[];
    /**
     * Attribution of authors and other contributors
     * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
     */
    contributorship?: CitationCitedArtifactContributorship;
    /**
     * Any additional information or content for the article or artifact
     * Any additional information or content for the article or artifact.
     */
    note?: Annotation[];
}
/**
 * A description of identification, location, or contributorship of a publication (article or artifact)
 * The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
 */
export interface Citation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Citation';
    /**
     * Canonical identifier for this citation record, represented as a globally unique URI
     * An absolute URI that is used to identify this citation record when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
     * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Identifier for the citation record itself
     * A formal identifier that is used to identify this citation record when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Use this element if you need to identify the citation record independently from identifying the cited artifact.
     */
    identifier?: Identifier[];
    /**
     * Business version of the citation record
     * The identifier that is used to identify this version of the citation record when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation record author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different citation record instances that have the same identifier but different versions. The version can be appended to the url in a reference to allow a reference to a particular business version of the citation record with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this citation record (computer friendly)
     * A natural language name identifying the citation record. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this citation record (human friendly)
     * A short, descriptive, user-friendly title for the citation record.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc. Use this element if you have a need for naming the citation record for human use, such as a display name for the citation record that is used when selecting citations from a list.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this citation record is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of citation records that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date (and optionally time) when the citation record was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation record changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the citation record. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The publisher of the citation record, not the publisher of the article or artifact being cited
     * The name of the organization or individual that published the citation record.
     * Usually an organization but may be an individual. The publisher (or steward) of the citation record is the organization or individual primarily responsible for the maintenance and upkeep of the citation record. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the citation record. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher of the citation record
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the citation
     * A free text natural language description of the citation from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the citation as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the citation is presumed to be the predominant language in the place the citation was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the citation record content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate citation record instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for citation record (if applicable)
     * A legal or geographic region in which the citation record is intended to be used.
     * It may be possible for the citation record to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this citation is defined
     * Explanation of why this citation is needed and why it has been designed as it has.
     * This element does not describe the usage of the citation. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this citation.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions for the citation record, not for the cited artifact
     * Use and/or publishing restrictions for the citation record, not for the cited artifact.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s) for the ciation record, not for the cited artifact
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the citation record was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the citation record was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the citation record is expected to be used
     * The period during which the citation record content was or is planned to be in active use.
     * The effective period for a citation record determines when the content is applicable for usage and is independent of publication and review dates. For example, a citation intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * Who authored the citation record
     * Who authored or created the citation record.
     * The Citation.author element is structured to support a name (with a string datatype) and contact point information for the author/creator, and is not structured to support unique identifiers for the author. If detailed contributorship data is needed for the authorship of the citation record, then one can create a Citation Resource for the Citation Resource.
     */
    author?: ContactDetail[];
    /**
     * Who edited the citation record
     * Who edited or revised the citation record.
     * The Citation.editor element is structured to support a name (with a string datatype) and contact point information for the editor, and is not structured to support unique identifiers for the editor. If detailed contributorship data is needed for the editing of the citation record, then one can create a Citation Resource for the Citation Resource.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the citation record
     * Who reviewed the citation record.
     * The Citation.reviewer element is structured to support a name (with a string datatype) and contact point information for the reviewer, and is not structured to support unique identifiers for the reviewer. If detailed contributorship data is needed for the review of the citation record, then one can create a Citation Resource for the Citation Resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the citation record
     * Who endorsed the citation record.
     * The Citation.endorser element is structured to support a name (with a string datatype) and contact point information for the endorser, and is not structured to support unique identifiers for the endorser. If detailed contributorship data is needed for the endorsement of the citation record, then one can create a Citation Resource for the Citation Resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * A human-readable display of key concepts to represent the citation
     * A human-readable display of key concepts to represent the citation.
     */
    summary?: CitationSummary[];
    /**
     * The assignment to an organizing scheme
     * The assignment to an organizing scheme.
     * Use this element if you need to classify the citation record independently from classifying the cited artifact.
     */
    classification?: CitationClassification[];
    /**
     * Used for general notes and annotations not coded elsewhere
     * Used for general notes and annotations not coded elsewhere.
     */
    note?: Annotation[];
    /**
     * The status of the citation record
     * The status of the citation record.
     * Use this if needed for reporting the state or status of the citation record, NOT FOR reporting the state or status of the cited article.
     */
    currentState?: CodeableConcept[];
    /**
     * An effective date or period for a status of the citation record
     * The state or status of the citation record paired with an effective date or period for that state.
     * Use this if needed for reporting the state or status of the citation record, NOT FOR reporting the state or status of the cited article.
     */
    statusDate?: CitationStatusDate[];
    /**
     * Artifact related to the citation record
     * Artifact related to the citation record.
     * Use this if needed for reporting artifacts related to the citation record, NOT FOR reporting artifacts related to the cited article. For example, one may use this element to report the data source for generation of the Citation Resource instance if it was automatically generated, such as conversion from a citation repository.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * The article or artifact being described
     * The article or artifact being described.
     */
    citedArtifact?: CitationCitedArtifact;
    /**
     * draft | active | retired | unknown
     * The status of this summary. Enables tracking the life-cycle of the content.
     * Allows filtering of summaries that are appropriate for use versus not. Use "active" when the citation record is the version for others to actively use, "draft" while you are developing the content, and "retired" when this record should no longer be used for any purpose.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: CitationPublicationStatus;
}
/**
 * Prior or corollary claims
 * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
 * For example,  for the original treatment and follow-up exams.
 */
export interface ClaimRelated extends BackboneElement {
    /**
     * Reference to the related claim
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * How the reference claim is related
     * A code to convey how the claims are related.
     * For example, prior claim or umbrella.
     */
    relationship?: CodeableConcept;
    /**
     * File or case reference
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     * For example, Property/Casualty insurer claim # or Workers Compensation case # .
     */
    reference?: Identifier;
}
/**
 * Recipient of benefits payable
 * The party to be reimbursed for cost of the products and services according to the terms of the policy.
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export interface ClaimPayee extends BackboneElement {
    /**
     * Category of recipient
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    type: CodeableConcept;
    /**
     * Recipient reference
     * Reference to the individual or organization to whom any payment will be made.
     * Not required if the payee is 'subscriber' or 'provider'.
     */
    party?: Reference;
}
/**
 * Event information
 * Information code for an event with a corresponding date or period.
 */
export interface ClaimEvent extends BackboneElement {
    /**
     * Specific event
     * A coded event such as when a service is expected or a card printed.
     */
    type: CodeableConcept;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenDateTime?: dateTime;
    /**
     * Extension for whenDateTime
     **/
    _whenDateTime?: Element;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenPeriod?: Period;
}
/**
 * Members of the care team
 * The members of the team who provided the products and services.
 */
export interface ClaimCareTeam extends BackboneElement {
    /**
     * Order of care team
     * A number to uniquely identify care team entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Practitioner or organization
     * Member of the team who provided the product or service.
     */
    provider: Reference;
    /**
     * Indicator of the lead practitioner
     * The party who is billing and/or responsible for the claimed products or services.
     * Responsible might not be required when there is only a single provider listed.
     */
    responsible?: boolean;
    /**
     * Extension for responsible
     **/
    _responsible?: Element;
    /**
     * Function within the team
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     * Role might not be required when there is only a single provider listed.
     */
    role?: CodeableConcept;
    /**
     * Practitioner or provider specialization
     * The specialization of the practitioner or provider which is applicable for this service.
     */
    specialty?: CodeableConcept;
}
/**
 * Supporting information
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export interface ClaimSupportingInfo extends BackboneElement {
    /**
     * Information instance identifier
     * A number to uniquely identify supporting information entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Classification of the supplied information
     * The general class of the information supplied: information; exception; accident, employment; onset, etc.
     * This may contain a category for the local bill type codes.
     */
    category: CodeableConcept;
    /**
     * Type of information
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    code?: CodeableConcept;
    /**
     * When it occurred
     * The date when or period to which this information refers.
     */
    timingDate?: date;
    /**
     * Extension for timingDate
     **/
    _timingDate?: Element;
    /**
     * When it occurred
     * The date when or period to which this information refers.
     */
    timingPeriod?: Period;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueQuantity?: Quantity;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueAttachment?: Attachment;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueReference?: Reference;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueIdentifier?: Identifier;
    /**
     * Explanation for the information
     * Provides the reason in the situation where a reason code is required in addition to the content.
     * For example: the reason for the additional stay, or why a tooth is  missing.
     */
    reason?: CodeableConcept;
}
/**
 * Pertinent diagnosis information
 * Information about diagnoses relevant to the claim items.
 */
export interface ClaimDiagnosis extends BackboneElement {
    /**
     * Diagnosis instance identifier
     * A number to uniquely identify diagnosis entries.
     * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Nature of illness or problem
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * Nature of illness or problem
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
    /**
     * Timing or nature of the diagnosis
     * When the condition was observed or the relative ranking.
     * For example: admitting, primary, secondary, discharge.
     */
    type?: CodeableConcept[];
    /**
     * Present on admission
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    onAdmission?: CodeableConcept;
}
/**
 * Clinical procedures performed
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export interface ClaimProcedure extends BackboneElement {
    /**
     * Procedure instance identifier
     * A number to uniquely identify procedure entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Category of Procedure
     * When the condition was observed or the relative ranking.
     * For example: primary, secondary.
     */
    type?: CodeableConcept[];
    /**
     * When the procedure was performed
     * Date and optionally time the procedure was performed.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Specific clinical procedure
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureCodeableConcept?: CodeableConcept;
    /**
     * Specific clinical procedure
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureReference?: Reference;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}
/**
 * Patient insurance information
 * Financial instruments for reimbursement for the health care products and services specified on the claim.
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface ClaimInsurance extends BackboneElement {
    /**
     * Insurance instance identifier
     * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Coverage to be used for adjudication
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
     */
    focal: boolean;
    /**
     * Extension for focal
     **/
    _focal?: Element;
    /**
     * Pre-assigned Claim number
     * The business identifier to be used when the claim is sent for adjudication against this insurance policy.
     * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
     */
    identifier?: Identifier;
    /**
     * Insurance information
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Additional provider contract number
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * Extension for businessArrangement
     **/
    _businessArrangement?: Element;
    /**
     * Prior authorization reference number
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
     */
    preAuthRef?: string[];
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element[];
    /**
     * Adjudication results
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     * Must not be specified when 'focal=true' for this insurance.
     */
    claimResponse?: Reference;
}
/**
 * Details of the event
 * Details of an accident which resulted in injuries which required the products and services listed in the claim.
 */
export interface ClaimAccident extends BackboneElement {
    /**
     * When the incident occurred
     * Date of an accident event  related to the products and services contained in the claim.
     * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
     */
    date: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The nature of the accident
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    type?: CodeableConcept;
    /**
     * Where the event occurred
     * The physical location of the accident event.
     */
    locationAddress?: Address;
    /**
     * Where the event occurred
     * The physical location of the accident event.
     */
    locationReference?: Reference;
}
/**
 * Anatomical location
 * Physical location where the service is performed or applies.
 */
export interface ClaimItemBodySite extends BackboneElement {
    /**
     * Location
     * Physical service site on the patient (limb, tooth, etc.).
     * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
     */
    site: CodeableReference[];
    /**
     * Sub-location
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
}
/**
 * Product or service provided
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
    /**
     * Item instance identifier
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for line item.detail.subDetail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}
/**
 * Product or service provided
 * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export interface ClaimItemDetail extends BackboneElement {
    /**
     * Item instance identifier
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Product or service provided
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    subDetail?: ClaimItemDetailSubDetail[];
}
/**
 * Product or service provided
 * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
 */
export interface ClaimItem extends BackboneElement {
    /**
     * Item instance identifier
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Applicable careTeam members
     * CareTeam members related to this service or product.
     */
    careTeamSequence?: positiveInt[];
    /**
     * Extension for careTeamSequence
     **/
    _careTeamSequence?: Element[];
    /**
     * Applicable diagnoses
     * Diagnosis applicable for this service or product.
     */
    diagnosisSequence?: positiveInt[];
    /**
     * Extension for diagnosisSequence
     **/
    _diagnosisSequence?: Element[];
    /**
     * Applicable procedures
     * Procedures applicable for this service or product.
     */
    procedureSequence?: positiveInt[];
    /**
     * Extension for procedureSequence
     **/
    _procedureSequence?: Element[];
    /**
     * Applicable exception and supporting information
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    informationSequence?: positiveInt[];
    /**
     * Extension for informationSequence
     **/
    _informationSequence?: Element[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Request or Referral for Service
     * Request or Referral for Goods or Service to be rendered.
     */
    request?: Reference[];
    /**
     * Product or service billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Anatomical location
     * Physical location where the service is performed or applies.
     */
    bodySite?: ClaimItemBodySite[];
    /**
     * Encounters associated with the listed treatments
     * Healthcare encounters related to this claim.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference[];
    /**
     * Product or service provided
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    detail?: ClaimItemDetail[];
}
/**
 * Claim, Pre-determination or Pre-authorization
 * A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
 * The Claim resource fulfills three information request requirements: Claim - a request for adjudication for reimbursement for products and/or services provided; Preauthorization - a request to authorize the future provision of products and/or services including an anticipated adjudication; and, Predetermination - a request for a non-bind adjudication of possible future products and/or services.
 */
export interface Claim extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Claim';
    /**
     * Business Identifier for claim
     * A unique identifier assigned to this claim.
     */
    identifier?: Identifier[];
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Category or discipline
     * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
     * The code system provides oral, pharmacy, vision, professional and institutional claim types. Those supported depends on the requirements of the jurisdiction. The valueset is extensible to accommodate other types of claims as required by the jurisdiction.
     */
    type: CodeableConcept;
    /**
     * More granular claim type
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
     */
    subType?: CodeableConcept;
    /**
     * The recipient of the products and services
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
     */
    patient: Reference;
    /**
     * Relevant time frame for the claim
     * The period for which charges are being submitted.
     * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
     */
    billablePeriod?: Period;
    /**
     * Resource creation date
     * The date this resource was created.
     * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Author of the claim
     * Individual who created the claim, predetermination or preauthorization.
     */
    enterer?: Reference;
    /**
     * Target
     * The Insurer who is target of the request.
     */
    insurer?: Reference;
    /**
     * Party responsible for the claim
     * The provider which is responsible for the claim, predetermination or preauthorization.
     * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
     */
    provider?: Reference;
    /**
     * Desired processing urgency
     * The provider-required urgency of processing the request. Typical values include: stat, normal, deferred.
     * If a claim processor is unable to complete the processing as per the priority then they should generate an error and not process the request.
     */
    priority?: CodeableConcept;
    /**
     * For whom to reserve funds
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     * This field is only used for preauthorizations.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Prior or corollary claims
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     * For example,  for the original treatment and follow-up exams.
     */
    related?: ClaimRelated[];
    /**
     * Prescription authorizing services and products
     * Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.
     */
    prescription?: Reference;
    /**
     * Original prescription if superseded by fulfiller
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
     */
    originalPrescription?: Reference;
    /**
     * Recipient of benefits payable
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
     */
    payee?: ClaimPayee;
    /**
     * Treatment referral
     * The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.
     * The referral resource which lists the date, practitioner, reason and other supporting information.
     */
    referral?: Reference;
    /**
     * Encounters associated with the listed treatments
     * Healthcare encounters related to this claim.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference[];
    /**
     * Servicing facility
     * Facility where the services were provided.
     */
    facility?: Reference;
    /**
     * Package billing code
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
     */
    diagnosisRelatedGroup?: CodeableConcept;
    /**
     * Event information
     * Information code for an event with a corresponding date or period.
     */
    event?: ClaimEvent[];
    /**
     * Members of the care team
     * The members of the team who provided the products and services.
     */
    careTeam?: ClaimCareTeam[];
    /**
     * Supporting information
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     * Often there are multiple jurisdiction specific valuesets which are required.
     */
    supportingInfo?: ClaimSupportingInfo[];
    /**
     * Pertinent diagnosis information
     * Information about diagnoses relevant to the claim items.
     */
    diagnosis?: ClaimDiagnosis[];
    /**
     * Clinical procedures performed
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    procedure?: ClaimProcedure[];
    /**
     * Patient insurance information
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
     */
    insurance?: ClaimInsurance[];
    /**
     * Details of the event
     * Details of an accident which resulted in injuries which required the products and services listed in the claim.
     */
    accident?: ClaimAccident;
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Product or service provided
     * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
     */
    item?: ClaimItem[];
    /**
     * Total claim cost
     * The total value of the all the items in the claim.
     */
    total?: Money;
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ClaimStatus;
    /**
     * claim | preauthorization | predetermination
     * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
     */
    use: ClaimUse;
}
/**
 * Event information
 * Information code for an event with a corresponding date or period.
 */
export interface ClaimResponseEvent extends BackboneElement {
    /**
     * Specific event
     * A coded event such as when a service is expected or a card printed.
     */
    type: CodeableConcept;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenDateTime?: dateTime;
    /**
     * Extension for whenDateTime
     **/
    _whenDateTime?: Element;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenPeriod?: Period;
}
/**
 * Adjudication results
 * The high-level results of the adjudication if adjudication has been performed.
 */
export interface ClaimResponseItemReviewOutcome extends BackboneElement {
    /**
     * Result of the adjudication
     * The result of the claim, predetermination, or preauthorization adjudication.
     * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amount will be paid (partial).
     */
    decision?: CodeableConcept;
    /**
     * Reason for result of the adjudication
     * The reasons for the result of the claim, predetermination, or preauthorization adjudication.
     */
    reason?: CodeableConcept[];
    /**
     * Preauthorization reference
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     * This value is only present on preauthorization adjudications.
     */
    preAuthRef?: string;
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element;
    /**
     * Preauthorization reference effective period
     * The time frame during which this authorization is effective.
     */
    preAuthPeriod?: Period;
}
/**
 * Adjudication details
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
    /**
     * Type of adjudication information
     * A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
     * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
     */
    category: CodeableConcept;
    /**
     * Explanation of adjudication outcome
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     * For example may indicate that the funds for this benefit type have been exhausted.
     */
    reason?: CodeableConcept;
    /**
     * Monetary amount
     * Monetary amount associated with the category.
     * For example: amount submitted, eligible amount, co-payment, and benefit payable.
     */
    amount?: Money;
    /**
     * Non-monetary value
     * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
     * For example: eligible percentage or co-payment percentage.
     */
    quantity?: Quantity;
}
/**
 * Adjudication for claim sub-details
 * A sub-detail adjudication of a simple product or service.
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
    /**
     * Claim sub-detail instance identifier
     * A number to uniquely reference the claim sub-detail entry.
     */
    subDetailSequence: positiveInt;
    /**
     * Extension for subDetailSequence
     **/
    _subDetailSequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Subdetail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ClaimResponseItemReviewOutcome;
    /**
     * Subdetail level adjudication details
     * The adjudication results.
     */
    adjudication?: ClaimResponseItemAdjudication[];
}
/**
 * Adjudication for claim details
 * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
 */
export interface ClaimResponseItemDetail extends BackboneElement {
    /**
     * Claim detail instance identifier
     * A number to uniquely reference the claim detail entry.
     */
    detailSequence: positiveInt;
    /**
     * Extension for detailSequence
     **/
    _detailSequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Detail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ClaimResponseItemReviewOutcome;
    /**
     * Detail level adjudication details
     * The adjudication results.
     */
    adjudication?: ClaimResponseItemAdjudication[];
    /**
     * Adjudication for claim sub-details
     * A sub-detail adjudication of a simple product or service.
     */
    subDetail?: ClaimResponseItemDetailSubDetail[];
}
/**
 * Adjudication for claim line items
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export interface ClaimResponseItem extends BackboneElement {
    /**
     * Claim item instance identifier
     * A number to uniquely reference the claim item entries.
     */
    itemSequence: positiveInt;
    /**
     * Extension for itemSequence
     **/
    _itemSequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ClaimResponseItemReviewOutcome;
    /**
     * Adjudication details
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    adjudication?: ClaimResponseItemAdjudication[];
    /**
     * Adjudication for claim details
     * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    detail?: ClaimResponseItemDetail[];
}
/**
 * Anatomical location
 * Physical location where the service is performed or applies.
 */
export interface ClaimResponseAddItemBodySite extends BackboneElement {
    /**
     * Location
     * Physical service site on the patient (limb, tooth, etc.).
     * For example: Providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
     */
    site: CodeableReference[];
    /**
     * Sub-location
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
}
/**
 * Insurer added line items
 * The third-tier service adjudications for payor added services.
 */
export interface ClaimResponseAddItemDetailSubDetail extends BackboneElement {
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Added items subdetail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ClaimResponseItemReviewOutcome;
    /**
     * Added items subdetail adjudication
     * The adjudication results.
     */
    adjudication?: ClaimResponseItemAdjudication[];
}
/**
 * Insurer added line details
 * The second-tier service adjudications for payor added services.
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Added items detail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ClaimResponseItemReviewOutcome;
    /**
     * Added items detail adjudication
     * The adjudication results.
     */
    adjudication?: ClaimResponseItemAdjudication[];
    /**
     * Insurer added line items
     * The third-tier service adjudications for payor added services.
     */
    subDetail?: ClaimResponseAddItemDetailSubDetail[];
}
/**
 * Insurer added line items
 * The first-tier service adjudications for payor added product or service lines.
 */
export interface ClaimResponseAddItem extends BackboneElement {
    /**
     * Item sequence number
     * Claim items which this service line is intended to replace.
     */
    itemSequence?: positiveInt[];
    /**
     * Extension for itemSequence
     **/
    _itemSequence?: Element[];
    /**
     * Detail sequence number
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    detailSequence?: positiveInt[];
    /**
     * Extension for detailSequence
     **/
    _detailSequence?: Element[];
    /**
     * Subdetail sequence number
     * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
     */
    subdetailSequence?: positiveInt[];
    /**
     * Extension for subdetailSequence
     **/
    _subdetailSequence?: Element[];
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Authorized providers
     * The providers who are authorized for the services rendered to the patient.
     */
    provider?: Reference[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Request or Referral for Service
     * Request or Referral for Goods or Service to be rendered.
     */
    request?: Reference[];
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Anatomical location
     * Physical location where the service is performed or applies.
     */
    bodySite?: ClaimResponseAddItemBodySite[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Added items adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ClaimResponseItemReviewOutcome;
    /**
     * Added items adjudication
     * The adjudication results.
     */
    adjudication?: ClaimResponseItemAdjudication[];
    /**
     * Insurer added line details
     * The second-tier service adjudications for payor added services.
     */
    detail?: ClaimResponseAddItemDetail[];
}
/**
 * Adjudication totals
 * Categorized monetary totals for the adjudication.
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export interface ClaimResponseTotal extends BackboneElement {
    /**
     * Type of adjudication information
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
     */
    category: CodeableConcept;
    /**
     * Financial total for the category
     * Monetary total amount associated with the category.
     */
    amount: Money;
}
/**
 * Payment Details
 * Payment details for the adjudication of the claim.
 */
export interface ClaimResponsePayment extends BackboneElement {
    /**
     * Partial or complete payment
     * Whether this represents partial or complete payment of the benefits payable.
     */
    type: CodeableConcept;
    /**
     * Payment adjustment for non-claim issues
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
     */
    adjustment?: Money;
    /**
     * Explanation for the adjustment
     * Reason for the payment adjustment.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * Expected date of payment
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    date?: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Payable amount after adjustment
     * Benefits payable less any payment adjustment.
     */
    amount: Money;
    /**
     * Business identifier for the payment
     * Issuer's unique identifier for the payment instrument.
     * For example: EFT number or check number.
     */
    identifier?: Identifier;
}
/**
 * Note concerning adjudication
 * A note that describes or explains adjudication results in a human readable form.
 */
export interface ClaimResponseProcessNote extends BackboneElement {
    /**
     * Note instance identifier
     * A number to uniquely identify a note entry.
     */
    number?: positiveInt;
    /**
     * Extension for number
     **/
    _number?: Element;
    /**
     * Note purpose
     * The business purpose of the note text.
     */
    type?: CodeableConcept;
    /**
     * Note explanatory text
     * The explanation or description associated with the processing.
     */
    text: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Language of the text
     * A code to define the language used in the text of the note.
     * Only required if the language is different from the resource language.
     */
    language?: CodeableConcept;
}
/**
 * Patient insurance information
 * Financial instruments for reimbursement for the health care products and services specified on the claim.
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface ClaimResponseInsurance extends BackboneElement {
    /**
     * Insurance instance identifier
     * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Coverage to be used for adjudication
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
     */
    focal: boolean;
    /**
     * Extension for focal
     **/
    _focal?: Element;
    /**
     * Insurance information
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Additional provider contract number
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * Extension for businessArrangement
     **/
    _businessArrangement?: Element;
    /**
     * Adjudication results
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     * Must not be specified when 'focal=true' for this insurance.
     */
    claimResponse?: Reference;
}
/**
 * Processing errors
 * Errors encountered during the processing of the adjudication.
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
export interface ClaimResponseError extends BackboneElement {
    /**
     * Item sequence number
     * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    itemSequence?: positiveInt;
    /**
     * Extension for itemSequence
     **/
    _itemSequence?: Element;
    /**
     * Detail sequence number
     * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    detailSequence?: positiveInt;
    /**
     * Extension for detailSequence
     **/
    _detailSequence?: Element;
    /**
     * Subdetail sequence number
     * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    subDetailSequence?: positiveInt;
    /**
     * Extension for subDetailSequence
     **/
    _subDetailSequence?: Element;
    /**
     * Error code detailing processing issues
     * An error code, from a specified code system, which details why the claim could not be adjudicated.
     */
    code: CodeableConcept;
    /**
     * FHIRPath of element(s) related to issue
     * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
     * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
     */
    expression?: string[];
    /**
     * Extension for expression
     **/
    _expression?: Element[];
}
/**
 * Response to a claim predetermination or preauthorization
 * This resource provides the adjudication details from the processing of a Claim resource.
 */
export interface ClaimResponse extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ClaimResponse';
    /**
     * Business Identifier for a claim response
     * A unique identifier assigned to this claim response.
     */
    identifier?: Identifier[];
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * More granular claim type
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
     */
    type: CodeableConcept;
    /**
     * More granular claim type
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
     */
    subType?: CodeableConcept;
    /**
     * The recipient of the products and services
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
     */
    patient: Reference;
    /**
     * Response creation date
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Party responsible for reimbursement
     * The party responsible for authorization, adjudication and reimbursement.
     */
    insurer?: Reference;
    /**
     * Party responsible for the claim
     * The provider which is responsible for the claim, predetermination or preauthorization.
     * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner..
     */
    requestor?: Reference;
    /**
     * Id of resource triggering adjudication
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * Result of the adjudication
     * The result of the claim, predetermination, or preauthorization adjudication.
     * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amount will be paid (partial).
     */
    decision?: CodeableConcept;
    /**
     * Disposition Message
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Extension for disposition
     **/
    _disposition?: Element;
    /**
     * Preauthorization reference
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     * This value is only present on preauthorization adjudications.
     */
    preAuthRef?: string;
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element;
    /**
     * Preauthorization reference effective period
     * The time frame during which this authorization is effective.
     */
    preAuthPeriod?: Period;
    /**
     * Event information
     * Information code for an event with a corresponding date or period.
     */
    event?: ClaimResponseEvent[];
    /**
     * Party to be paid any benefits payable
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    payeeType?: CodeableConcept;
    /**
     * Encounters associated with the listed treatments
     * Healthcare encounters related to this claim.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference[];
    /**
     * Package billing code
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
     */
    diagnosisRelatedGroup?: CodeableConcept;
    /**
     * Adjudication for claim line items
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    item?: ClaimResponseItem[];
    /**
     * Insurer added line items
     * The first-tier service adjudications for payor added product or service lines.
     */
    addItem?: ClaimResponseAddItem[];
    /**
     * Header-level adjudication
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    adjudication?: ClaimResponseItemAdjudication[];
    /**
     * Adjudication totals
     * Categorized monetary totals for the adjudication.
     * Totals for amounts submitted, co-pays, benefits payable etc.
     */
    total?: ClaimResponseTotal[];
    /**
     * Payment Details
     * Payment details for the adjudication of the claim.
     */
    payment?: ClaimResponsePayment;
    /**
     * Funds reserved status
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Printed form identifier
     * A code for the form to be used for printing the content.
     * May be needed to identify specific jurisdictional forms.
     */
    formCode?: CodeableConcept;
    /**
     * Printed reference or actual form
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     * Needed to permit insurers to include the actual form.
     */
    form?: Attachment;
    /**
     * Note concerning adjudication
     * A note that describes or explains adjudication results in a human readable form.
     */
    processNote?: ClaimResponseProcessNote[];
    /**
     * Request for additional information
     * Request for additional supporting or authorizing information.
     * For example: professional reports, documents, images, clinical resources, or accident reports.
     */
    communicationRequest?: Reference[];
    /**
     * Patient insurance information
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
     */
    insurance?: ClaimResponseInsurance[];
    /**
     * Processing errors
     * Errors encountered during the processing of the adjudication.
     * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
     */
    error?: ClaimResponseError[];
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ClaimResponseStatus;
    /**
     * claim | preauthorization | predetermination
     * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
     */
    use: ClaimResponseUse;
    /**
     * queued | complete | error | partial
     * The outcome of the claim, predetermination, or preauthorization processing.
     * The resource may be used to indicate that the Claim/Preauthorization/Pre-determination has been received but processing has not begun (queued); that it has been processed and one or more errors have been detected (error); no errors were detected and some of the adjudication processing has been performed (partial); or all of the adjudication processing has completed without errors (complete).
     */
    outcome: ClaimResponseRemittanceOutcome;
}
/**
 * Possible or likely findings and diagnoses
 * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
 */
export interface ClinicalImpressionFinding extends BackboneElement {
    /**
     * What was found
     * Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
     */
    item?: CodeableReference;
    /**
     * Which investigations support finding
     * Which investigations support finding or diagnosis.
     */
    basis?: string;
    /**
     * Extension for basis
     **/
    _basis?: Element;
}
/**
 * A clinical assessment performed when planning treatments and management strategies for a patient
 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
 */
export interface ClinicalImpression extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ClinicalImpression';
    /**
     * Business identifier
     * Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Reason for current status
     * Captures the reason for the current state of the ClinicalImpression.
     * This is generally only used for "exception" statuses such as "not-done", "on-hold" or "stopped".
     */
    statusReason?: CodeableConcept;
    /**
     * Why/how the assessment was performed
     * A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Patient or group assessed
     * The patient or group of individuals assessed as part of this record.
     */
    subject: Reference;
    /**
     * The Encounter during which this ClinicalImpression was created
     * The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference;
    /**
     * Time of assessment
     * The point in time or period over which the subject was assessed.
     * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
     */
    effectiveDateTime?: dateTime;
    /**
     * Extension for effectiveDateTime
     **/
    _effectiveDateTime?: Element;
    /**
     * Time of assessment
     * The point in time or period over which the subject was assessed.
     * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
     */
    effectivePeriod?: Period;
    /**
     * When the assessment was documented
     * Indicates when the documentation of the assessment was complete.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The clinician performing the assessment
     * The clinician performing the assessment.
     */
    performer?: Reference;
    /**
     * Reference to last assessment
     * A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
     * It is always likely that multiple previous assessments exist for a patient. The point of quoting a previous assessment is that this assessment is relative to it (see resolved).
     */
    previous?: Reference;
    /**
     * Relevant impressions of patient state
     * A list of the relevant problems/conditions for a patient.
     * e.g. The patient is a pregnant, has congestive heart failure, has an ‎Adenocarcinoma, and is allergic to penicillin.
     */
    problem?: Reference[];
    /**
     * Change in the status/pattern of a subject's condition since previously assessed, such as worsening, improving, or no change
     * Change in the status/pattern of a subject's condition since previously assessed, such as worsening, improving, or no change.  It is a subjective assessment of the direction of the change.
     */
    changePattern?: CodeableConcept;
    /**
     * Clinical Protocol followed
     * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
     */
    protocol?: uri[];
    /**
     * Extension for protocol
     **/
    _protocol?: Element[];
    /**
     * Summary of the assessment
     * A text summary of the investigations and the diagnosis.
     */
    summary?: string;
    /**
     * Extension for summary
     **/
    _summary?: Element;
    /**
     * Possible or likely findings and diagnoses
     * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
     */
    finding?: ClinicalImpressionFinding[];
    /**
     * Estimate of likely outcome
     * Estimate of likely outcome.
     */
    prognosisCodeableConcept?: CodeableConcept[];
    /**
     * RiskAssessment expressing likely outcome
     * RiskAssessment expressing likely outcome.
     */
    prognosisReference?: Reference[];
    /**
     * Information supporting the clinical impression
     * Information supporting the clinical impression, which can contain investigation results.
     */
    supportingInfo?: Reference[];
    /**
     * Comments made about the ClinicalImpression
     * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
     * Don't use this element for content that should more properly appear as one of the specific elements of the impression.
     */
    note?: Annotation[];
    /**
     * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
     * Identifies the workflow status of the assessment.
     * This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
     */
    status: ClinicalImpressionStatus;
}
/**
 * Information about use of the product in relation to other therapies described as part of the contraindication
 * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
 */
export interface ClinicalUseDefinitionContraindicationOtherTherapy extends BackboneElement {
    /**
     * The type of relationship between the product indication/contraindication and another therapy
     * The type of relationship between the medicinal product indication or contraindication and another therapy.
     */
    relationshipType: CodeableConcept;
    /**
     * Reference to a specific medication, substance etc. as part of an indication or contraindication
     * Reference to a specific medication (active substance, medicinal product or class of products, biological, food etc.) as part of an indication or contraindication.
     */
    treatment: CodeableReference;
}
/**
 * Specifics for when this is a contraindication
 * Specifics for when this is a contraindication.
 */
export interface ClinicalUseDefinitionContraindication extends BackboneElement {
    /**
     * The situation that is being documented as contraindicating against this item
     * The situation that is being documented as contraindicating against this item.
     */
    diseaseSymptomProcedure?: CodeableReference;
    /**
     * The status of the disease or symptom for the contraindication
     * The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
     */
    diseaseStatus?: CodeableReference;
    /**
     * A comorbidity (concurrent condition) or coinfection
     * A comorbidity (concurrent condition) or coinfection.
     */
    comorbidity?: CodeableReference[];
    /**
     * The indication which this is a contraidication for
     * The indication which this is a contraidication for.
     */
    indication?: Reference[];
    /**
     * An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements
     * An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.
     * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
     */
    applicability?: Expression;
    /**
     * Information about use of the product in relation to other therapies described as part of the contraindication
     * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
     */
    otherTherapy?: ClinicalUseDefinitionContraindicationOtherTherapy[];
}
/**
 * Specifics for when this is an indication
 * Specifics for when this is an indication.
 */
export interface ClinicalUseDefinitionIndication extends BackboneElement {
    /**
     * The situation that is being documented as an indicaton for this item
     * The situation that is being documented as an indicaton for this item.
     */
    diseaseSymptomProcedure?: CodeableReference;
    /**
     * The status of the disease or symptom for the indication
     * The status of the disease or symptom for the indication, for example "chronic" or "metastatic".
     */
    diseaseStatus?: CodeableReference;
    /**
     * A comorbidity or coinfection as part of the indication
     * A comorbidity (concurrent condition) or coinfection as part of the indication.
     */
    comorbidity?: CodeableReference[];
    /**
     * The intended effect, aim or strategy to be achieved
     * The intended effect, aim or strategy to be achieved.
     */
    intendedEffect?: CodeableReference;
    /**
     * Timing or duration information
     * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
     */
    durationRange?: Range;
    /**
     * Timing or duration information
     * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
     */
    durationString?: string;
    /**
     * Extension for durationString
     **/
    _durationString?: Element;
    /**
     * An unwanted side effect or negative outcome of the subject of this resource when being used for this indication
     * An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.
     */
    undesirableEffect?: Reference[];
    /**
     * An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements
     * An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.
     * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
     */
    applicability?: Expression;
    /**
     * The use of the medicinal product in relation to other therapies described as part of the indication
     * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
     */
    otherTherapy?: ClinicalUseDefinitionContraindicationOtherTherapy[];
}
/**
 * The specific medication, product, food etc. or laboratory test that interacts
 * The specific medication, product, food, substance etc. or laboratory test that interacts.
 */
export interface ClinicalUseDefinitionInteractionInteractant extends BackboneElement {
    /**
     * The specific medication, product, food etc. or laboratory test that interacts
     * The specific medication, product, food, substance etc. or laboratory test that interacts.
     */
    itemReference?: Reference;
    /**
     * The specific medication, product, food etc. or laboratory test that interacts
     * The specific medication, product, food, substance etc. or laboratory test that interacts.
     */
    itemCodeableConcept?: CodeableConcept;
}
/**
 * Specifics for when this is an interaction
 * Specifics for when this is an interaction.
 */
export interface ClinicalUseDefinitionInteraction extends BackboneElement {
    /**
     * The specific medication, product, food etc. or laboratory test that interacts
     * The specific medication, product, food, substance etc. or laboratory test that interacts.
     */
    interactant?: ClinicalUseDefinitionInteractionInteractant[];
    /**
     * The type of the interaction e.g. drug-drug interaction, drug-lab test interaction
     * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
     */
    type?: CodeableConcept;
    /**
     * The effect of the interaction, for example "reduced gastric absorption of primary medication"
     * The effect of the interaction, for example "reduced gastric absorption of primary medication".
     */
    effect?: CodeableReference;
    /**
     * The incidence of the interaction, e.g. theoretical, observed
     * The incidence of the interaction, e.g. theoretical, observed.
     */
    incidence?: CodeableConcept;
    /**
     * Actions for managing the interaction
     * Actions for managing the interaction.
     */
    management?: CodeableConcept[];
}
/**
 * A possible negative outcome from the use of this treatment
 * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
 */
export interface ClinicalUseDefinitionUndesirableEffect extends BackboneElement {
    /**
     * The situation in which the undesirable effect may manifest
     * The situation in which the undesirable effect may manifest.
     */
    symptomConditionEffect?: CodeableReference;
    /**
     * High level classification of the effect
     * High level classification of the effect.
     */
    classification?: CodeableConcept;
    /**
     * How often the effect is seen
     * How often the effect is seen.
     */
    frequencyOfOccurrence?: CodeableConcept;
}
/**
 * Critical environmental, health or physical risks or hazards. For example 'Do not operate heavy machinery', 'May cause drowsiness'
 * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
 */
export interface ClinicalUseDefinitionWarning extends BackboneElement {
    /**
     * A textual definition of this warning, with formatting
     * A textual definition of this warning, with formatting.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * A coded or unformatted textual definition of this warning
     * A coded or unformatted textual definition of this warning.
     */
    code?: CodeableConcept;
}
/**
 * A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure
 * A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.
 */
export interface ClinicalUseDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ClinicalUseDefinition';
    /**
     * Business identifier for this issue
     * Business identifier for this issue.
     */
    identifier?: Identifier[];
    /**
     * A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy", "Overdose"
     * A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability to Drive and Use Machines".
     */
    category?: CodeableConcept[];
    /**
     * The medication, product, substance, device, procedure etc. for which this is an indication
     * The medication, product, substance, device, procedure etc. for which this is an indication.
     */
    subject?: Reference[];
    /**
     * Whether this is a current issue or one that has been retired etc
     * Whether this is a current issue or one that has been retired etc.
     */
    status?: CodeableConcept;
    /**
     * Specifics for when this is a contraindication
     * Specifics for when this is a contraindication.
     */
    contraindication?: ClinicalUseDefinitionContraindication;
    /**
     * Specifics for when this is an indication
     * Specifics for when this is an indication.
     */
    indication?: ClinicalUseDefinitionIndication;
    /**
     * Specifics for when this is an interaction
     * Specifics for when this is an interaction.
     */
    interaction?: ClinicalUseDefinitionInteraction;
    /**
     * The population group to which this applies
     * The population group to which this applies.
     */
    population?: Reference[];
    /**
     * Logic used by the clinical use definition
     * Logic used by the clinical use definition.
     */
    library?: canonical[];
    /**
     * Extension for library
     **/
    _library?: Element[];
    /**
     * A possible negative outcome from the use of this treatment
     * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
     */
    undesirableEffect?: ClinicalUseDefinitionUndesirableEffect;
    /**
     * Critical environmental, health or physical risks or hazards. For example 'Do not operate heavy machinery', 'May cause drowsiness'
     * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
     */
    warning?: ClinicalUseDefinitionWarning;
    /**
     * indication | contraindication | interaction | undesirable-effect | warning
     * indication | contraindication | interaction | undesirable-effect | warning.
     */
    type: ClinicalUseDefinitionType;
}
/**
 * Filter that can be used in a value set
 * A filter that can be used in a value set compose statement when selecting concepts using a filter.
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export interface CodeSystemFilter extends BackboneElement {
    /**
     * Code that identifies the filter
     * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * How or why the filter is used
     * A description of how or why the filter is used.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * What to use for the value
     * A description of what the value for the filter should be.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | child-of | descendent-leaf | exists
     * A list of operators that can be used with the filter.
     */
    operator: CodeSystemFilterOperator[];
}
/**
 * Additional information supplied about each concept
 * A property defines an additional slot through which additional information can be provided about a concept.
 * Multiple occurrences of CodeSystem.concept.property may occur for a CodeSystem.property where     CodeSystem.concept.property.code is the same and CodeSystem.concept.property.value differs. For example: multiple designations for a single concept.
 */
export interface CodeSystemProperty extends BackboneElement {
    /**
     * Identifies the property on the concepts, and when referred to in operations
     * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Formal identifier for the property
     * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
     */
    uri?: uri;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * Why the property is defined, and/or what it conveys
     * A description of the property- why it is defined, and how its value might be used.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * code | Coding | string | integer | boolean | dateTime | decimal
     * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
     */
    type: CodeSystemPropertyType;
}
/**
 * Additional representations for the concept
 * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export interface CodeSystemConceptDesignation extends BackboneElement {
    /**
     * Human language of the designation
     * The language this designation is defined for.
     * In the absence of a language, the resource language applies.
     */
    language?: code;
    /**
     * Extension for language
     **/
    _language?: Element;
    /**
     * Details how this designation would be used
     * A code that details how this designation would be used.
     * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
     */
    use?: Coding;
    /**
     * Additional ways how this designation would be used
     * Additional codes that detail how this designation would be used, if there is more than one use.
     * This was added rather than increasing the cardinality of .use to 0..* in order to maintain backward compatibility.
     */
    additionalUse?: Coding[];
    /**
     * The text value for this designation
     * The text value for this designation.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Property value for the concept
 * A property value for this concept.
 */
export interface CodeSystemConceptProperty extends BackboneElement {
    /**
     * Reference to CodeSystem.property.code
     * A code that is a reference to CodeSystem.property.code.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueCoding?: Coding;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
}
/**
 * Concepts in the code system
 * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export interface CodeSystemConcept extends BackboneElement {
    /**
     * Code that identifies concept
     * A code - a text symbol - that uniquely identifies the concept within the code system.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Text to display to the user
     * A human readable string that is the recommended default way to present this concept to a user.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Formal definition
     * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
     */
    definition?: string;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Additional representations for the concept
     * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
     * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
     */
    designation?: CodeSystemConceptDesignation[];
    /**
     * Property value for the concept
     * A property value for this concept.
     */
    property?: CodeSystemConceptProperty[];
    /**
     * Child Concepts (is-a/contains/categorizes)
     * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
     */
    concept?: CodeSystemConcept[];
}
/**
 * Declares the existence of and describes a code system or code system supplement
 * The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
 */
export interface CodeSystem extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CodeSystem';
    /**
     * Canonical identifier for this code system, represented as a URI (globally unique) (Coding.system)
     * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the code system (business identifier)
     * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
     */
    identifier?: Identifier[];
    /**
     * Business version of the code system (Coding.version)
     * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
     * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which CodeSystem is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which CodeSystem is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this code system (computer friendly)
     * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this code system (human friendly)
     * A short, descriptive, user-friendly title for the code system.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of code systems that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the code system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the code system.
     * Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the code system
     * A free text natural language description of the code system from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for code system (if applicable)
     * A legal or geographic region in which the code system is intended to be used.
     * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this code system is defined
     * Explanation of why this code system is needed and why it has been designed as it has.
     * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
     * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the CodeSystem was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the CodeSystem was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the CodeSystem is expected to be used
     * The period during which the CodeSystem content was or is planned to be in active use.
     * The effective period for a CodeSystem  determines when the content is applicable for usage and is independent of publication and review dates. For example, a system intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptions related to the content of the CodeSystem. Topics provide a high-level categorization as well as keywords for the CodeSystem that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the CodeSystem
     * An individiual or organization primarily involved in the creation and maintenance of the CodeSystem.
     */
    author?: ContactDetail[];
    /**
     * Who edited the CodeSystem
     * An individual or organization primarily responsible for internal coherence of the CodeSystem.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the CodeSystem
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the CodeSystem.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the CodeSystem
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the CodeSystem for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * If code comparison is case sensitive
     * If code comparison is case sensitive when codes within this system are compared to each other.
     * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
     */
    caseSensitive?: boolean;
    /**
     * Extension for caseSensitive
     **/
    _caseSensitive?: Element;
    /**
     * Canonical reference to the value set with entire code system
     * Canonical reference to the value set that contains all codes in the code system independent of code status.
     * The definition of the value set SHALL include all codes from this code system, independent of concept status, and only codes from this code system. It SHALL be immutable, and operations SHOULD support validation of any allowed code compositions.
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * If code system defines a compositional grammar
     * The code system defines a compositional (post-coordination) grammar.
     * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
     */
    compositional?: boolean;
    /**
     * Extension for compositional
     **/
    _compositional?: Element;
    /**
     * If definitions are not stable
     * This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.
     * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.

Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
     */
    versionNeeded?: boolean;
    /**
     * Extension for versionNeeded
     **/
    _versionNeeded?: Element;
    /**
     * Canonical URL of Code System this adds designations and properties to
     * The canonical URL of the code system that this code system supplement is adding designations and properties to.
     * The most common use of a code system supplement is to add additional language support.
     */
    supplements?: canonical;
    /**
     * Extension for supplements
     **/
    _supplements?: Element;
    /**
     * Total concepts in the code system
     * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.
     * The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
     */
    count?: unsignedInt;
    /**
     * Extension for count
     **/
    _count?: Element;
    /**
     * Filter that can be used in a value set
     * A filter that can be used in a value set compose statement when selecting concepts using a filter.
     * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
     */
    filter?: CodeSystemFilter[];
    /**
     * Additional information supplied about each concept
     * A property defines an additional slot through which additional information can be provided about a concept.
     * Multiple occurrences of CodeSystem.concept.property may occur for a CodeSystem.property where     CodeSystem.concept.property.code is the same and CodeSystem.concept.property.value differs. For example: multiple designations for a single concept.
     */
    property?: CodeSystemProperty[];
    /**
     * Concepts in the code system
     * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
     * If this is empty, it means that the code system resource does not represent the content of the code system.
     */
    concept?: CodeSystemConcept[];
    /**
     * draft | active | retired | unknown
     * The status of this code system. Enables tracking the life-cycle of the content.
     * Allows filtering of code systems that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: CodeSystemPublicationStatus;
    /**
     * grouped-by | is-a | part-of | classified-with
     * The meaning of the hierarchy of concepts as represented in this resource.
     * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
     */
    hierarchyMeaning?: CodeSystemHierarchyMeaning;
    /**
     * not-present | example | fragment | complete | supplement
     * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
     */
    content: CodeSystemContentMode;
}
/**
 * Message payload
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
export interface CommunicationPayload extends BackboneElement {
    /**
     * Message part content
     * A communicated content (or for multi-part communications, one portion of the communication).
     * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.

If the content isn't codified, contentCodeableConcept.text can be used.

When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
     */
    contentAttachment?: Attachment;
    /**
     * Message part content
     * A communicated content (or for multi-part communications, one portion of the communication).
     * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.

If the content isn't codified, contentCodeableConcept.text can be used.

When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
     */
    contentReference?: Reference;
    /**
     * Message part content
     * A communicated content (or for multi-part communications, one portion of the communication).
     * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.

If the content isn't codified, contentCodeableConcept.text can be used.

When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
     */
    contentCodeableConcept?: CodeableConcept;
}
/**
 * A clinical or business level record of information being transmitted or shared
 * A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition.
 */
export interface Communication extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Communication';
    /**
     * Unique identifier
     * Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * Request fulfilled by this communication
     * An order, proposal or plan fulfilled in whole or in part by this Communication.
     * This must point to some sort of a 'Request' resource, such as CarePlan, CommunicationRequest, ServiceRequest, MedicationRequest, etc.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event (e.g. Communication, Procedure)
     * A larger event (e.g. Communication, Procedure) of which this particular communication is a component or step.
     * The event the communication was part of - e.g. if you disclosed as "part" of counselling, it would be partOf that Procedure.
     */
    partOf?: Reference[];
    /**
     * Reply to
     * Prior communication that this communication is in response to.
     */
    inResponseTo?: Reference[];
    /**
     * Reason for current status
     * Captures the reason for the current state of the Communication.
     * This is generally only used for "exception" statuses such as "not-done", "suspended" or "aborted". The reason for performing the event at all is captured in reasonCode, not here.
     */
    statusReason?: CodeableConcept;
    /**
     * Message category
     * The type of message conveyed such as alert, notification, reminder, instruction, etc.
     * There may be multiple axes of categorization and one communication may serve multiple purposes.
     */
    category?: CodeableConcept[];
    /**
     * A channel of communication
     * A channel that was used for this communication (e.g. email, fax).
     */
    medium?: CodeableConcept[];
    /**
     * Focus of message
     * The patient or group that was the focus of this communication.
     */
    subject?: Reference;
    /**
     * Description of the purpose/content
     * Description of the purpose/content, similar to a subject line in an email.
     * Communication.topic.text can be used without any codings.
     */
    topic?: CodeableConcept;
    /**
     * Resources that pertain to this communication
     * Other resources that pertain to this communication and to which this communication should be associated.
     * Don't use Communication.about element when a more specific element exists, such as basedOn or reasonReference.
     */
    about?: Reference[];
    /**
     * The Encounter during which this Communication was created
     * The Encounter during which this Communication was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference;
    /**
     * When sent
     * The time when this communication was sent.
     */
    sent?: dateTime;
    /**
     * Extension for sent
     **/
    _sent?: Element;
    /**
     * When received
     * The time when this communication arrived at the destination.
     */
    received?: dateTime;
    /**
     * Extension for received
     **/
    _received?: Element;
    /**
     * Who the information is shared with
     * The entity (e.g. person, organization, clinical information system, care team or device) which is the target of the communication.
     * If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
     */
    recipient?: Reference[];
    /**
     * Who shares the information
     * The entity (e.g. person, organization, clinical information system, or device) which is the source of the communication.
     */
    sender?: Reference;
    /**
     * Indication for message
     * The reason or justification for the communication.
     * Textual reasons can be captured using reason.concept.text.
     */
    reason?: CodeableReference[];
    /**
     * Message payload
     * Text, attachment(s), or resource(s) that was communicated to the recipient.
     */
    payload?: CommunicationPayload[];
    /**
     * Comments made about the communication
     * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
     */
    note?: Annotation[];
    /**
     * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
     * The status of the transmission.
     * This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
     */
    status: CommunicationStatus;
    /**
     * routine | urgent | asap | stat
     * Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
     * Used to prioritize workflow (such as which communication to read first) when the communication is planned or in progress.
     */
    priority?: CommunicationPriority;
}
/**
 * Message payload
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
export interface CommunicationRequestPayload extends BackboneElement {
    /**
     * Message part content
     * The communicated content (or for multi-part communications, one portion of the communication).
     * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.

If the content isn't codified, contentCodeableConcept.text can be used.

When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
     */
    contentAttachment?: Attachment;
    /**
     * Message part content
     * The communicated content (or for multi-part communications, one portion of the communication).
     * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.

If the content isn't codified, contentCodeableConcept.text can be used.

When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
     */
    contentReference?: Reference;
    /**
     * Message part content
     * The communicated content (or for multi-part communications, one portion of the communication).
     * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.

If the content isn't codified, contentCodeableConcept.text can be used.

When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
     */
    contentCodeableConcept?: CodeableConcept;
}
/**
 * A request for information to be sent to a receiver
 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
 */
export interface CommunicationRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CommunicationRequest';
    /**
     * Unique identifier
     * Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Fulfills plan or proposal
     * A plan or proposal that is fulfilled in whole or in part by this request.
     */
    basedOn?: Reference[];
    /**
     * Request(s) replaced by this request
     * Completed or terminated request(s) whose function is taken by this new request.
     * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
     */
    replaces?: Reference[];
    /**
     * Composite request this is part of
     * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
     * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
     */
    groupIdentifier?: Identifier;
    /**
     * Reason for current status
     * Captures the reason for the current state of the CommunicationRequest.
     * This is generally only used for "exception" statuses such as "on-hold" or "revoked".  The reason why the CommunicationRequest was created at all is captured in reasonCode, not here.
     */
    statusReason?: CodeableConcept;
    /**
     * Message category
     * The type of message to be sent such as alert, notification, reminder, instruction, etc.
     * There may be multiple axes of categorization and one communication request may serve multiple purposes.
     */
    category?: CodeableConcept[];
    /**
     * True if request is prohibiting action
     * If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
     * The attributes provided with the request qualify what is not to be done.
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * A channel of communication
     * A channel that was used for this communication (e.g. email, fax).
     */
    medium?: CodeableConcept[];
    /**
     * Focus of message
     * The patient or group that is the focus of this communication request.
     */
    subject?: Reference;
    /**
     * Resources that pertain to this communication request
     * Other resources that pertain to this communication request and to which this communication request should be associated.
     * Don't use CommunicationRequest.about element when a more specific element exists, such as basedOn, reasonReference, or replaces.
     */
    about?: Reference[];
    /**
     * The Encounter during which this CommunicationRequest was created
     * The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference;
    /**
     * Message payload
     * Text, attachment(s), or resource(s) to be communicated to the recipient.
     */
    payload?: CommunicationRequestPayload[];
    /**
     * When scheduled
     * The time when this communication is to occur.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When scheduled
     * The time when this communication is to occur.
     */
    occurrencePeriod?: Period;
    /**
     * When request transitioned to being actionable
     * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Who asks for the information to be shared
     * The device, individual, or organization who asks for the information to be shared.
     */
    requester?: Reference;
    /**
     * Who to share the information with
     * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
     */
    recipient?: Reference[];
    /**
     * Who should share the information
     * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
     */
    informationProvider?: Reference[];
    /**
     * Why is communication needed?
     * Describes why the request is being made in coded or textual form.
     * Textual reasons can be captured using reasonCode.text.
     */
    reason?: CodeableReference[];
    /**
     * Comments made about communication request
     * Comments made about the request by the requester, sender, recipient, subject or other participants.
     */
    note?: Annotation[];
    /**
     * draft | active | on-hold | revoked | completed | entered-in-error | unknown
     * The status of the proposal or order.
     */
    status: CommunicationRequestStatus;
    /**
     * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
     * Indicates the level of authority/intentionality associated with the CommunicationRequest and where the request fits into the workflow chain.
     * This element is expected to be immutable.  E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance.  Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.

One exception to this is that the granularity of CommunicationRequest.intent is allowed to change.  For example, a Request identified as an "order" might later be clarified to be a "filler-order".  Or, in rarer cases (to meet recipient constraints), the reverse might also occur.
     */
    intent: CommunicationRequestIntent;
    /**
     * routine | urgent | asap | stat
     * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
     */
    priority?: CommunicationRequestCommunicationPriority;
}
/**
 * How a resource is related to the compartment
 * Information about how a resource is related to the compartment.
 */
export interface CompartmentDefinitionResource extends BackboneElement {
    /**
     * Name of resource type
     * The name of a resource supported by the server.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Search Parameter Name, or chained parameters
     * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
     * If no search parameters are listed, then the resource is not linked to the compartment.
     */
    param?: string[];
    /**
     * Extension for param
     **/
    _param?: Element[];
    /**
     * Additional documentation about the resource and compartment
     * Additional documentation about the resource and compartment.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Search Param for interpreting $everything.start
     * Search Parameter for mapping requests made with $everything.start (e.g. on [Patient.$everything](patient-operation-everything.html)).
     */
    startParam?: uri;
    /**
     * Extension for startParam
     **/
    _startParam?: Element;
    /**
     * Search Param for interpreting $everything.end
     * Search Parameter for mapping requests made with $everything.end (e.g. on [Patient.$everything](patient-operation-everything.html)).
     */
    endParam?: uri;
    /**
     * Extension for endParam
     **/
    _endParam?: Element;
}
/**
 * Compartment Definition for a resource
 * A compartment definition that defines how resources are accessed on a server.
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface CompartmentDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CompartmentDefinition';
    /**
     * Canonical identifier for this compartment definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business version of the compartment definition
     * The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different compartment definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the compartment definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this compartment definition (computer friendly)
     * A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.This is often the same as the code for the parameter, but does not need to be.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this compartment definition (human friendly)
     * A short, descriptive, user-friendly title for the capability statement.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of compartment definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the compartment definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the compartment definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the compartment definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the compartment definition is the organization or individual primarily responsible for the maintenance and upkeep of the compartment definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the compartment definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the compartment definition
     * A free text natural language description of the compartment definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the compartment definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the compartment definition is presumed to be the predominant language in the place the compartment definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Why this compartment definition is defined
     * Explanation of why this compartment definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the compartment definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this compartment definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Whether the search syntax is supported
     * Whether the search syntax is supported,.
     * Servers may define and use compartments to manage logical access without implementing the compartment related syntax.
     */
    search: boolean;
    /**
     * Extension for search
     **/
    _search?: Element;
    /**
     * How a resource is related to the compartment
     * Information about how a resource is related to the compartment.
     */
    resource?: CompartmentDefinitionResource[];
    /**
     * draft | active | retired | unknown
     * The status of this compartment definition. Enables tracking the life-cycle of the content.
     * Allows filtering of compartment definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: CompartmentDefinitionPublicationStatus;
    /**
     * Patient | Encounter | RelatedPerson | Practitioner | Device | EpisodeOfCare
     * Which compartment this definition describes.
     * Only the specification can define the compartments that can exist. Servers can choose to support them.
     */
    code: CompartmentDefinitionCompartmentType;
}
/**
 * Attests to accuracy of composition
 * A participant who has attested to the accuracy of the composition/document.
 * Only list each attester once.
 */
export interface CompositionAttester extends BackboneElement {
    /**
     * personal | professional | legal | official
     * The type of attestation the authenticator offers.
     */
    mode: CodeableConcept;
    /**
     * When the composition was attested
     * When the composition was attested by the party.
     */
    time?: dateTime;
    /**
     * Extension for time
     **/
    _time?: Element;
    /**
     * Who attested the composition
     * Who attested the composition in the specified way.
     */
    party?: Reference;
}
/**
 * The clinical service(s) being documented
 * The clinical service, such as a colonoscopy or an appendectomy, being documented.
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export interface CompositionEvent extends BackboneElement {
    /**
     * The period covered by the documentation
     * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
     */
    period?: Period;
    /**
     * The event(s) being documented, as code(s), reference(s), or both
     * Represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which case the procedure being documented is necessarily a "History and Physical" act. The events may be included as a code or as a reference to an other resource.
     * An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more events are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
     */
    detail?: CodeableReference[];
}
/**
 * Composition is broken into sections
 * The root of the sections that make up the composition.
 */
export interface CompositionSection extends BackboneElement {
    /**
     * Label for section (e.g. for ToC)
     * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
     * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Classification of section (recommended)
     * A code identifying the kind of content contained within the section. This must be consistent with the section title.
     * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.

If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
     */
    code?: CodeableConcept;
    /**
     * Who and/or what authored the section
     * Identifies who is responsible for the information in this section, not necessarily who typed it in.
     */
    author?: Reference[];
    /**
     * Who/what the section is about, when it is not about the subject of composition
     * The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
     * Typically, sections in a doument are about the subject of the document, whether that is a  patient, or group of patients, location, or device, or whatever. For some kind of documents, some sections actually contain data about related entities. Typical examples are  a section in a newborn discharge summary concerning the mother, or family history documents, with a section about each family member, though there are many other examples.
     */
    focus?: Reference;
    /**
     * Text summary of the section, for human interpretation
     * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
     * Document profiles may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    /**
     * Order of section entries
     * Specifies the order applied to the items in the section entries.
     * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
     */
    orderedBy?: CodeableConcept;
    /**
     * A reference to data that supports this section
     * A reference to the actual resource from which the narrative in the section is derived.
     * If there are no entries in the list, an emptyReason SHOULD be provided.
     */
    entry?: Reference[];
    /**
     * Why the section is empty
     * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
     * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
     */
    emptyReason?: CodeableConcept;
    /**
     * Nested Section
     * A nested sub-section within this section.
     * Nested sections are primarily used to help human readers navigate to particular portions of the document.
     */
    section?: CompositionSection[];
}
/**
 * A set of resources composed into a single coherent clinical statement with clinical attestation
 * A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
 * While the focus of this specification is on patient-specific clinical statements, this resource can also apply to other healthcare-related statements such as study protocol designs, healthcare invoices and other activities that are not necessarily patient-specific or clinical.
 */
export interface Composition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Composition';
    /**
     * Canonical identifier for this Composition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this Composition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Composition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Composition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Version-independent identifier for the Composition
     * A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
     * Similar to ClinicalDocument/setId in CDA. See discussion in resource definition for how these relate.
     */
    identifier?: Identifier[];
    /**
     * An explicitly assigned identifer of a variation of the content in the Composition
     * An explicitly assigned identifer of a variation of the content in the Composition.
     * While each resource, including the composition itself, has its own version identifier, this is a formal identifier for the logical version of the Composition as a whole. It would remain constant if the resources were moved to a new server, and all got new individual resource versions, for example.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Kind of composition (LOINC if possible)
     * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
     * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
     */
    type: CodeableConcept;
    /**
     * Categorization of Composition
     * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
     */
    category?: CodeableConcept[];
    /**
     * Who and/or what the composition is about
     * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
     * For clinical documents, this is usually the patient.
     */
    subject?: Reference[];
    /**
     * Context of the Composition
     * Describes the clinical encounter or type of care this documentation is associated with.
     */
    encounter?: Reference;
    /**
     * Composition editing time
     * The composition editing time, when the composition was last logically changed by the author.
     * The Last Modified Date on the composition may be after the date of the document was attested without being changed. This means that the date on an amended document is the date of the amendment, not the date of original authorship.
     */
    date: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Composition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Who and/or what authored the composition
     * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
     */
    author: Reference[];
    /**
     * Name for this Composition (computer friendly)
     * A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Human Readable name/title
     * Official human-readable label for the composition.
     * For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For any additional notes
     * For any additional notes.
     * A comment, general note or annotation not coded elsewhere.
     */
    note?: Annotation[];
    /**
     * Attests to accuracy of composition
     * A participant who has attested to the accuracy of the composition/document.
     * Only list each attester once.
     */
    attester?: CompositionAttester[];
    /**
     * Organization which maintains the composition
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
     * This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
     */
    custodian?: Reference;
    /**
     * Relationships to other compositions/documents
     * Relationships that this composition has with other compositions or documents that already exist.
     * To reference (using relatesTo) a Bundle of type "document" or another Composition where you only have the identifier, use a resourceReference with an identifier.\
When a Composition is an alternate representation of another type of document e.g. CDA, the other document could be referenced in a DocumentReference resource.
Here is an example of using relatesTo to reference another Bundle of type "document" or Composition where you only have the identifier:
```
"relatesTo": [{
  "type": "replaces",
  "resourceReference": {
    "identifier": {
      "system": "...",
      "value": "..."
    }
  }
}]
```
     */
    relatesTo?: RelatedArtifact[];
    /**
     * The clinical service(s) being documented
     * The clinical service, such as a colonoscopy or an appendectomy, being documented.
     * The event needs to be consistent with the type element, though can provide further information if desired.
     */
    event?: CompositionEvent[];
    /**
     * Composition is broken into sections
     * The root of the sections that make up the composition.
     */
    section?: CompositionSection[];
    /**
     * registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
     * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
     * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements.

Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
     */
    status: CompositionStatus;
}
/**
 * Additional properties of the mapping
 * A property defines a slot through which additional information can be provided about a map from source -> target.
 * Properties may be used to supply for example, mapping priority, provenance, presentation hints, flag as experimental, and additional documentation. Multiple occurrences of ConceptMap.group.element.target.property may occur for a ConceptMap.property where ConceptMap.group.element.target.property.code is the same and the values in ConceptMap.group.element.target.property.value differ.
 */
export interface ConceptMapProperty extends BackboneElement {
    /**
     * Identifies the property on the mappings, and when referred to in the $translate operation
     * A code that is used to identify the property. The code is used internally (in ConceptMap.group.element.target.property.code) and also in the $translate operation.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Formal identifier for the property
     * Reference to the formal meaning of the property.
     */
    uri?: uri;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * Why the property is defined, and/or what it conveys
     * A description of the property - why it is defined, and how its value might be used.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The CodeSystem from which code values come
     * The CodeSystem that defines the codes from which values of type ```code``` in property values.
     */
    system?: canonical;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * Coding | string | integer | boolean | dateTime | decimal | code
     * The type of the property value.
     */
    type: ConceptMapPropertyType;
}
/**
 * Definition of an additional attribute to act as a data source or target
 * An additionalAttribute defines an additional data element found in the source or target data model where the data will come from or be mapped to. Some mappings are based on data in addition to the source data element, where codes in multiple fields are combined to a single field (or vice versa).
 * Additional attributes are used to define additional data elements where mapping data can be found. For an example, see [Specimen Type v2 -> SNOMED CT Mapping(conceptmap-example-specimen-type.html)
 */
export interface ConceptMapAdditionalAttribute extends BackboneElement {
    /**
     * Identifies this additional attribute through this resource
     * A code that is used to identify this additional data attribute. The code is used internally in ConceptMap.group.element.target.dependsOn.attribute and ConceptMap.group.element.target.product.attribute.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Formal identifier for the data element referred to in this attribte
     * Reference to the formal definition of the source/target data element. For elements defined by the FHIR specification, or using a FHIR logical model, the correct format is {canonical-url}#{element-id}.
     */
    uri?: uri;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * Why the additional attribute is defined, and/or what the data element it refers to is
     * A description of the additional attribute and/or the data element it refers to - why it is defined, and how the value might be used in mappings, and a discussion of issues associated with the use of the data element.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * code | Coding | string | boolean | Quantity
     * The type of the source data contained in this concept map for this data element.
     * When the source or target is not content defined by FHIR, some additional application logic might be required to map from the FHIR Datatype to the externally defined content
     */
    type: ConceptMapmapAttributeType;
}
/**
 * Property value for the source -> target mapping
 * A property value for this source -> target mapping.
 */
export interface ConceptMapGroupElementTargetProperty extends BackboneElement {
    /**
     * Reference to ConceptMap.property.code
     * A reference to a mapping property defined in ConceptMap.property.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueCoding?: Coding;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Value of the property for this concept
     * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
}
/**
 * Other properties required for this mapping
 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified data attribute can be resolved, and it has the specified value.
 */
export interface ConceptMapGroupElementTargetDependsOn extends BackboneElement {
    /**
     * A reference to a mapping attribute defined in ConceptMap.additionalAttribute
     * A reference to the additional attribute that holds a value the map depends on.
     */
    attribute: code;
    /**
     * Extension for attribute
     **/
    _attribute?: Element;
    /**
     * Value of the referenced data element
     * Data element value that the map depends on / produces.
     * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of the referenced data element
     * Data element value that the map depends on / produces.
     * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
     */
    valueCoding?: Coding;
    /**
     * Value of the referenced data element
     * Data element value that the map depends on / produces.
     * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the referenced data element
     * Data element value that the map depends on / produces.
     * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the referenced data element
     * Data element value that the map depends on / produces.
     * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
     */
    valueQuantity?: Quantity;
    /**
     * The mapping depends on a data element with a value from this value set
     * This mapping applies if the data element value is a code from this value set.
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
}
/**
 * Concept in target system for element
 * A concept from the target value set that this concept maps to.
 * Ideally there would only be one map, with an 'equivalent' mapping. But multiple maps are allowed for several narrower (i.e. source-is-broader-than-target) options, or to assert that other concepts are not related.
 */
export interface ConceptMapGroupElementTarget extends BackboneElement {
    /**
     * Code that identifies the target element
     * Identity (code or path) or the element/item that the map refers to.
     */
    code?: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Display for the code
     * The display for the code. The display is only provided to help editors when editing the concept map.
     * The display is ignored when processing the map.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Identifies the set of target concepts
     * The set of concepts from the ConceptMap.group.target code system which are all being mapped to as part of this mapping rule. The effect of using this data element is the same as having multiple ConceptMap.group.element.target elements with one for each concept in the ConceptMap.group.element.target.valueSet value set.
     * If the the value set expansion is empty then the source concept(s) are unmapped and the behavior of ConceptMap.group.unmapped (if present) applies.
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * Description of status/issues in mapping
     * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * Property value for the source -> target mapping
     * A property value for this source -> target mapping.
     */
    property?: ConceptMapGroupElementTargetProperty[];
    /**
     * Other properties required for this mapping
     * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified data attribute can be resolved, and it has the specified value.
     */
    dependsOn?: ConceptMapGroupElementTargetDependsOn[];
    /**
     * Other data elements that this mapping also produces
     * Product is the output of a ConceptMap that provides additional values that go in other attributes / data elemnts of the target data.
     */
    product?: ConceptMapGroupElementTargetDependsOn[];
    /**
     * related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
     * The relationship between the source and target concepts. The relationship is read from source to target (e.g. source-is-narrower-than-target).
     * This element is labeled as a modifier because it may indicate that there is no mapping.
     */
    relationship: ConceptMapRelationship;
}
/**
 * Mappings for a concept from the source set
 * Mappings for an individual concept in the source to one or more concepts in the target.
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export interface ConceptMapGroupElement extends BackboneElement {
    /**
     * Identifies element being mapped
     * Identity (code or path) or the element/item being mapped.
     */
    code?: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Display for the code
     * The display for the code. The display is only provided to help editors when editing the concept map.
     * The display is ignored when processing the map.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Identifies the set of concepts being mapped
     * The set of concepts from the ConceptMap.group.source code system which are all being mapped to the target as part of this mapping rule.
     * If the value set expansion is empty then there are no source concepts to map in this rule.
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * No mapping to a target concept for this source concept
     * If noMap = true this indicates that no mapping to a target concept exists for this source concept.
     * If noMap = true, then the behavior of ConceptMap.group.unmapped (if present) does not apply.
     */
    noMap?: boolean;
    /**
     * Extension for noMap
     **/
    _noMap?: Element;
    /**
     * Concept in target system for element
     * A concept from the target value set that this concept maps to.
     * Ideally there would only be one map, with an 'equivalent' mapping. But multiple maps are allowed for several narrower (i.e. source-is-broader-than-target) options, or to assert that other concepts are not related.
     */
    target?: ConceptMapGroupElementTarget[];
}
/**
 * What to do when there is no mapping target for the source concept and ConceptMap.group.element.noMap is not true
 * What to do when there is no mapping to a target concept from the source concept and ConceptMap.group.element.noMap is not true. This provides the "default" to be applied when there is no target concept mapping specified or the expansion of ConceptMap.group.element.target.valueSet is empty.
 * The 'unmapped' element is ignored if a code is specified to have relationship = not-related-to or if ConceptMap.group.element.noMap = true.
 */
export interface ConceptMapGroupUnmapped extends BackboneElement {
    /**
     * Fixed code when mode = fixed
     * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
     */
    code?: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Display for the code
     * The display for the code. The display is only provided to help editors when editing the concept map.
     * The display is ignored when processing the map.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Fixed code set when mode = fixed
     * The set of fixed codes to use when the mode = 'fixed'  - all unmapped codes are mapped to each of the fixed codes.
     */
    valueSet?: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * canonical reference to an additional ConceptMap to use for mapping if the source concept is unmapped
     * The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
     */
    otherMap?: canonical;
    /**
     * Extension for otherMap
     **/
    _otherMap?: Element;
    /**
     * use-source-code | fixed | other-map
     * Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped source code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
     */
    mode: ConceptMapGroupUnmappedMode;
    /**
     * related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
     * The default relationship value to apply between the source and target concepts when the source code is unmapped and the mode is 'fixed' or 'use-source-code'.
     * This element is labeled as a modifier because it may indicate that there is no mapping.
     */
    relationship?: ConceptMapUnmappedConceptMapRelationship;
}
/**
 * Same source and target systems
 * A group of mappings that all have the same source and target system.
 */
export interface ConceptMapGroup extends BackboneElement {
    /**
     * Source system where concepts to be mapped are defined
     * An absolute URI that identifies the source system where the concepts to be mapped are defined.
     * This is not needed if the source value set is specified and it contains concepts from only a single system.
     */
    source?: canonical;
    /**
     * Extension for source
     **/
    _source?: Element;
    /**
     * Target system that the concepts are to be mapped to
     * An absolute URI that identifies the target system that the concepts will be mapped to.
     * This is not needed if the target value set is specified and it contains concepts from only a single system. The group target may also be omitted if all of the target element relationship values are 'not-related-to'.
     */
    target?: canonical;
    /**
     * Extension for target
     **/
    _target?: Element;
    /**
     * Mappings for a concept from the source set
     * Mappings for an individual concept in the source to one or more concepts in the target.
     * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
     */
    element: ConceptMapGroupElement[];
    /**
     * What to do when there is no mapping target for the source concept and ConceptMap.group.element.noMap is not true
     * What to do when there is no mapping to a target concept from the source concept and ConceptMap.group.element.noMap is not true. This provides the "default" to be applied when there is no target concept mapping specified or the expansion of ConceptMap.group.element.target.valueSet is empty.
     * The 'unmapped' element is ignored if a code is specified to have relationship = not-related-to or if ConceptMap.group.element.noMap = true.
     */
    unmapped?: ConceptMapGroupUnmapped;
}
/**
 * A map from one set of concepts to one or more other concepts
 * A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
 */
export interface ConceptMap extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ConceptMap';
    /**
     * Canonical identifier for this concept map, represented as a URI (globally unique)
     * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the concept map
     * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this concept map outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the concept map
     * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different concept map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the concept map with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which ConceptMap is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which ConceptMap is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this concept map (computer friendly)
     * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this concept map (human friendly)
     * A short, descriptive, user-friendly title for the concept map.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of concept maps that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the concept map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the concept map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the concept map.
     * Usually an organization but may be an individual. The publisher (or steward) of the concept map is the organization or individual primarily responsible for the maintenance and upkeep of the concept map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the concept map. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the concept map
     * A free text natural language description of the concept map from a consumer's perspective.
     * The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for concept map (if applicable)
     * A legal or geographic region in which the concept map is intended to be used.
     * It may be possible for the concept map to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this concept map is defined
     * Explanation of why this concept map is needed and why it has been designed as it has.
     * This element does not describe the usage of the concept map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this concept map.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
     * Frequently the copyright differs between the concept map and codes that are included. The copyright statement should clearly differentiate between these when required.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the ConceptMap was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the ConceptMap was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the ConceptMap is expected to be used
     * The period during which the ConceptMap content was or is planned to be in active use.
     * The effective period for a ConceptMap  determines when the content is applicable for usage and is independent of publication and review dates. For example, a map intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptions related to the content of the ConceptMap. Topics provide a high-level categorization as well as keywords for the ConceptMap that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the ConceptMap
     * An individiual or organization primarily involved in the creation and maintenance of the ConceptMap.
     */
    author?: ContactDetail[];
    /**
     * Who edited the ConceptMap
     * An individual or organization primarily responsible for internal coherence of the ConceptMap.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the ConceptMap
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ConceptMap.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the ConceptMap
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the ConceptMap for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Additional properties of the mapping
     * A property defines a slot through which additional information can be provided about a map from source -> target.
     * Properties may be used to supply for example, mapping priority, provenance, presentation hints, flag as experimental, and additional documentation. Multiple occurrences of ConceptMap.group.element.target.property may occur for a ConceptMap.property where ConceptMap.group.element.target.property.code is the same and the values in ConceptMap.group.element.target.property.value differ.
     */
    property?: ConceptMapProperty[];
    /**
     * Definition of an additional attribute to act as a data source or target
     * An additionalAttribute defines an additional data element found in the source or target data model where the data will come from or be mapped to. Some mappings are based on data in addition to the source data element, where codes in multiple fields are combined to a single field (or vice versa).
     * Additional attributes are used to define additional data elements where mapping data can be found. For an example, see [Specimen Type v2 -> SNOMED CT Mapping(conceptmap-example-specimen-type.html)
     */
    additionalAttribute?: ConceptMapAdditionalAttribute[];
    /**
     * The source value set that contains the concepts that are being mapped
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.  Limits the scope of the map to source codes (ConceptMap.group.element code or valueSet) that are members of this value set.
     * Should be a version specific reference. URIs SHOULD be absolute. If there is no sourceScope or targetScope value set, there is no specified context for the map (not recommended).  The sourceScope value set may select codes from either an explicit (standard or local) or implicit code system.
     */
    sourceScopeUri?: uri;
    /**
     * Extension for sourceScopeUri
     **/
    _sourceScopeUri?: Element;
    /**
     * The source value set that contains the concepts that are being mapped
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.  Limits the scope of the map to source codes (ConceptMap.group.element code or valueSet) that are members of this value set.
     * Should be a version specific reference. URIs SHOULD be absolute. If there is no sourceScope or targetScope value set, there is no specified context for the map (not recommended).  The sourceScope value set may select codes from either an explicit (standard or local) or implicit code system.
     */
    sourceScopeCanonical?: canonical;
    /**
     * Extension for sourceScopeCanonical
     **/
    _sourceScopeCanonical?: Element;
    /**
     * The target value set which provides context for the mappings
     * Identifier for the target value set that provides important context about how the mapping choices are made.  Limits the scope of the map to target codes (ConceptMap.group.element.target code or valueSet) that are members of this value set.
     * Should be a version specific reference. URIs SHOULD be absolute. If there is no sourceScope or targetScope value set, there is no specified context for the map (not recommended).  The targetScope value set may select codes from either an explicit (standard or local) or implicit code system.
     */
    targetScopeUri?: uri;
    /**
     * Extension for targetScopeUri
     **/
    _targetScopeUri?: Element;
    /**
     * The target value set which provides context for the mappings
     * Identifier for the target value set that provides important context about how the mapping choices are made.  Limits the scope of the map to target codes (ConceptMap.group.element.target code or valueSet) that are members of this value set.
     * Should be a version specific reference. URIs SHOULD be absolute. If there is no sourceScope or targetScope value set, there is no specified context for the map (not recommended).  The targetScope value set may select codes from either an explicit (standard or local) or implicit code system.
     */
    targetScopeCanonical?: canonical;
    /**
     * Extension for targetScopeCanonical
     **/
    _targetScopeCanonical?: Element;
    /**
     * Same source and target systems
     * A group of mappings that all have the same source and target system.
     */
    group?: ConceptMapGroup[];
    /**
     * draft | active | retired | unknown
     * The status of this concept map. Enables tracking the life-cycle of the content.
     * Allows filtering of concept maps that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ConceptMapPublicationStatus;
}
/**
 * Who or what participated in the activities related to the condition and how they were involved
 * Indicates who or what participated in the activities related to the condition and how they were involved.
 */
export interface ConditionParticipant extends BackboneElement {
    /**
     * Type of involvement
     * Distinguishes the type of involvement of the actor in the activities related to the condition.
     */
    function?: CodeableConcept;
    /**
     * Who or what participated in the activities related to the condition
     * Indicates who or what participated in the activities related to the condition.
     */
    actor: Reference;
}
/**
 * Stage/grade, usually assessed formally
 * A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
 */
export interface ConditionStage extends BackboneElement {
    /**
     * Simple summary (disease specific)
     * A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
     */
    summary?: CodeableConcept;
    /**
     * Formal record of assessment
     * Reference to a formal record of the evidence on which the staging assessment is based.
     */
    assessment?: Reference[];
    /**
     * Kind of staging
     * The kind of staging, such as pathological or clinical staging.
     */
    type?: CodeableConcept;
}
/**
 * Detailed information about conditions, problems or diagnoses
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
export interface Condition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Condition';
    /**
     * External Ids for this condition
     * Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * active | recurrence | relapse | inactive | remission | resolved | unknown
     * The clinical status of the condition.
     * The data type is CodeableConcept because clinicalStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.  clinicalStatus is required since it is a modifier element.  For conditions that are problems list items, the clinicalStatus should not be unknown.  For conditions that are not problem list items, the clinicalStatus may be unknown.  For example, conditions derived from a claim are point in time, so those conditions may have a clinicalStatus of unknown
     */
    clinicalStatus: CodeableConcept;
    /**
     * unconfirmed | provisional | differential | confirmed | refuted | entered-in-error
     * The verification status to support the clinical status of the condition.  The verification status pertains to the condition, itself, not to any specific condition attribute.
     * verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.
The data type is CodeableConcept because verificationStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
     */
    verificationStatus?: CodeableConcept;
    /**
     * problem-list-item | encounter-diagnosis
     * A category assigned to the condition.
     * The categorization is often highly contextual and may appear poorly differentiated or not very useful in other contexts.
     */
    category?: CodeableConcept[];
    /**
     * Subjective severity of condition
     * A subjective assessment of the severity of the condition as evaluated by the clinician.
     * Coding of the severity with a terminology is preferred, where possible.
     */
    severity?: CodeableConcept;
    /**
     * Identification of the condition, problem or diagnosis
     * Identification of the condition, problem or diagnosis.
     */
    code?: CodeableConcept;
    /**
     * Anatomical location, if relevant
     * The anatomical location where this condition manifests itself.
     * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodyStructure resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
     */
    bodySite?: CodeableConcept[];
    /**
     * Who has the condition?
     * Indicates the patient or group who the condition record is associated with.
     */
    subject: Reference;
    /**
     * The Encounter during which this Condition was created
     * The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. This record indicates the encounter this particular record is associated with.  In the case of a "new" diagnosis reflecting ongoing/revised information about the condition, this might be distinct from the first encounter in which the underlying condition was first "known".
     */
    encounter?: Reference;
    /**
     * Estimated or actual date,  date-time, or age
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    onsetDateTime?: dateTime;
    /**
     * Extension for onsetDateTime
     **/
    _onsetDateTime?: Element;
    /**
     * Estimated or actual date,  date-time, or age
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    onsetAge?: Age;
    /**
     * Estimated or actual date,  date-time, or age
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    onsetPeriod?: Period;
    /**
     * Estimated or actual date,  date-time, or age
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date,  date-time, or age
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    onsetString?: string;
    /**
     * Extension for onsetString
     **/
    _onsetString?: Element;
    /**
     * When in resolution/remission
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    abatementDateTime?: dateTime;
    /**
     * Extension for abatementDateTime
     **/
    _abatementDateTime?: Element;
    /**
     * When in resolution/remission
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    abatementAge?: Age;
    /**
     * When in resolution/remission
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    abatementPeriod?: Period;
    /**
     * When in resolution/remission
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    abatementRange?: Range;
    /**
     * When in resolution/remission
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
     */
    abatementString?: string;
    /**
     * Extension for abatementString
     **/
    _abatementString?: Element;
    /**
     * Date condition was first recorded
     * The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
     * When onset date is unknown, recordedDate can be used to establish if the condition was present on or before a given date.  If the recordedDate is known and provided by a sending system, it is preferred that the receiving system preserve that recordedDate value. If the recordedDate is not provided by the sending system, the receipt timestamp is sometimes used as the recordedDate.
     */
    recordedDate?: dateTime;
    /**
     * Extension for recordedDate
     **/
    _recordedDate?: Element;
    /**
     * Who or what participated in the activities related to the condition and how they were involved
     * Indicates who or what participated in the activities related to the condition and how they were involved.
     */
    participant?: ConditionParticipant[];
    /**
     * Stage/grade, usually assessed formally
     * A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
     */
    stage?: ConditionStage[];
    /**
     * Supporting evidence for the verification status
     * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
     * If the condition was confirmed, but subsequently refuted, then the evidence can be cumulative including all evidence over time.  The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.  For example, if the Condition.code is pneumonia, then there could be an evidence list where Condition.evidence.concept = fever (CodeableConcept), Condition.evidence.concept = cough (CodeableConcept), and Condition.evidence.reference = bronchitis (reference to Condition).
     */
    evidence?: CodeableReference[];
    /**
     * Additional information about the Condition
     * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
     */
    note?: Annotation[];
}
/**
 * Observations particularly relevant to this condition
 * Observations particularly relevant to this condition.
 */
export interface ConditionDefinitionObservation extends BackboneElement {
    /**
     * Category that is relevant
     * Category that is relevant.
     */
    category?: CodeableConcept;
    /**
     * Code for relevant Observation
     * Code for relevant Observation.
     */
    code?: CodeableConcept;
}
/**
 * Medications particularly relevant for this condition
 * Medications particularly relevant for this condition.
 */
export interface ConditionDefinitionMedication extends BackboneElement {
    /**
     * Category that is relevant
     * Category that is relevant.
     */
    category?: CodeableConcept;
    /**
     * Code for relevant Medication
     * Code for relevant Medication.
     */
    code?: CodeableConcept;
}
/**
 * Observation that suggets this condition
 * An observation that suggests that this condition applies.
 */
export interface ConditionDefinitionPrecondition extends BackboneElement {
    /**
     * Code for relevant Observation
     * Code for relevant Observation.
     */
    code: CodeableConcept;
    /**
     * Value of Observation
     * Value of Observation.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of Observation
     * Value of Observation.
     */
    valueQuantity?: Quantity;
    /**
     * sensitive | specific
     * Kind of pre-condition.
     */
    type: ConditionDefinitionConditionPreconditionType;
}
/**
 * Questionnaire for this condition
 * Questionnaire for this condition.
 */
export interface ConditionDefinitionQuestionnaire extends BackboneElement {
    /**
     * Specific Questionnaire
     * Specific Questionnaire.
     */
    reference: Reference;
    /**
     * preadmit | diff-diagnosis | outcome
     * Use of the questionnaire.
     */
    purpose: ConditionDefinitionConditionQuestionnairePurpose;
}
/**
 * Plan that is appropriate
 * Plan that is appropriate.
 */
export interface ConditionDefinitionPlan extends BackboneElement {
    /**
     * Use for the plan
     * Use for the plan.
     */
    role?: CodeableConcept;
    /**
     * The actual plan
     * The actual plan.
     */
    reference: Reference;
}
/**
 * A definition of a condition
 * A definition of a condition and information relevant to managing it.
 */
export interface ConditionDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ConditionDefinition';
    /**
     * Canonical identifier for this condition definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this condition definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this condition definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the condition definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the condition definition
     * A formal identifier that is used to identify this condition definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this condition definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the condition definition
     * The identifier that is used to identify this version of the condition definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the condition definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different condition definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the condition definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this condition definition (computer friendly)
     * A natural language name identifying the condition definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this condition definition (human friendly)
     * A short, descriptive, user-friendly title for the condition definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate title of the event definition
     * An explanatory or alternate title for the event definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this condition definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of condition definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the condition definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the condition definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the condition definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the condition definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the condition definition is the organization or individual primarily responsible for the maintenance and upkeep of the condition definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the condition definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the condition definition
     * A free text natural language description of the condition definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the condition definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the condition definition is presumed to be the predominant language in the place the condition definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate condition definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for condition definition (if applicable)
     * A legal or geographic region in which the condition definition is intended to be used.
     * It may be possible for the condition definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Identification of the condition, problem or diagnosis
     * Identification of the condition, problem or diagnosis.
     */
    code: CodeableConcept;
    /**
     * Subjective severity of condition
     * A subjective assessment of the severity of the condition as evaluated by the clinician.
     * Coding of the severity with a terminology is preferred, where possible.
     */
    severity?: CodeableConcept;
    /**
     * Anatomical location, if relevant
     * The anatomical location where this condition manifests itself.
     * Only used if not implicit in code found in ConditionDefinition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
     */
    bodySite?: CodeableConcept;
    /**
     * Stage/grade, usually assessed formally
     * Clinical stage or grade of a condition. May include formal severity assessments.
     */
    stage?: CodeableConcept;
    /**
     * Whether Severity is appropriate
     * Whether Severity is appropriate to collect for this condition.
     */
    hasSeverity?: boolean;
    /**
     * Extension for hasSeverity
     **/
    _hasSeverity?: Element;
    /**
     * Whether bodySite is appropriate
     * Whether bodySite is appropriate to collect for this condition.
     */
    hasBodySite?: boolean;
    /**
     * Extension for hasBodySite
     **/
    _hasBodySite?: Element;
    /**
     * Whether stage is appropriate
     * Whether stage is appropriate to collect for this condition.
     */
    hasStage?: boolean;
    /**
     * Extension for hasStage
     **/
    _hasStage?: Element;
    /**
     * Formal Definition for the condition
     * Formal definitions of the condition. These may be references to ontologies, published clinical protocols or research papers.
     */
    definition?: uri[];
    /**
     * Extension for definition
     **/
    _definition?: Element[];
    /**
     * Observations particularly relevant to this condition
     * Observations particularly relevant to this condition.
     */
    observation?: ConditionDefinitionObservation[];
    /**
     * Medications particularly relevant for this condition
     * Medications particularly relevant for this condition.
     */
    medication?: ConditionDefinitionMedication[];
    /**
     * Observation that suggets this condition
     * An observation that suggests that this condition applies.
     */
    precondition?: ConditionDefinitionPrecondition[];
    /**
     * Appropriate team for this condition
     * Appropriate team for this condition.
     */
    team?: Reference[];
    /**
     * Questionnaire for this condition
     * Questionnaire for this condition.
     */
    questionnaire?: ConditionDefinitionQuestionnaire[];
    /**
     * Plan that is appropriate
     * Plan that is appropriate.
     */
    plan?: ConditionDefinitionPlan[];
    /**
     * draft | active | retired | unknown
     * The status of this condition definition. Enables tracking the life-cycle of the content.
     * Allows filtering of condition definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ConditionDefinitionPublicationStatus;
}
/**
 * Computable version of the backing policy
 * A Reference or URL used to uniquely identify the policy the organization will enforce for this Consent. This Reference or URL should be specific to the version of the policy and should be dereferencable to a computable policy of some form.
 */
export interface ConsentPolicyBasis extends BackboneElement {
    /**
     * Reference backing policy resource
     * A Reference that identifies the policy the organization will enforce for this Consent.
     * While any resource may be used, Consent, PlanDefinition and Contract would be most frequent
     */
    reference?: Reference;
    /**
     * URL to a computable backing policy
     * A URL that links to a computable version of the policy the organization will enforce for this Consent.
     */
    url?: url;
    /**
     * Extension for url
     **/
    _url?: Element;
}
/**
 * Consent Verified by patient or family
 * Whether a treatment instruction (e.g. artificial respiration: yes or no) was verified with the patient, his/her family or another authorized person.
 */
export interface ConsentVerification extends BackboneElement {
    /**
     * Has been verified
     * Has the instruction been verified.
     */
    verified: boolean;
    /**
     * Extension for verified
     **/
    _verified?: Element;
    /**
     * Business case of verification
     * Extensible list of verification type starting with verification and re-validation.
     * This allows the verification element to hold multiple use cases including RelatedPerson verification of the Grantee decision and periodic re-validation of the consent.
     */
    verificationType?: CodeableConcept;
    /**
     * Person conducting verification
     * The person who conducted the verification/validation of the Grantor decision.
     */
    verifiedBy?: Reference;
    /**
     * Person who verified
     * Who verified the instruction (Patient, Relative or other Authorized Person).
     */
    verifiedWith?: Reference;
    /**
     * When consent verified
     * Date(s) verification was collected.
     * Allows for history of verification/validation.
     */
    verificationDate?: dateTime[];
    /**
     * Extension for verificationDate
     **/
    _verificationDate?: Element[];
}
/**
 * Who|what controlled by this provision (or group, by role)
 * Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
 */
export interface ConsentProvisionActor extends BackboneElement {
    /**
     * How the actor is involved
     * How the individual is involved in the resources content that is described in the exception.
     */
    role?: CodeableConcept;
    /**
     * Resource for the actor (or group, by role)
     * The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    reference?: Reference;
}
/**
 * Data controlled by this provision
 * The resources controlled by this provision if specific resources are referenced.
 */
export interface ConsentProvisionData extends BackboneElement {
    /**
     * The actual data reference
     * A reference to a specific resource that defines which resources are covered by this consent.
     */
    reference: Reference;
    /**
     * instance | related | dependents | authoredby
     * How the resource reference is interpreted when testing consent restrictions.
     */
    meaning: ConsentDataMeaning;
}
/**
 * Constraints to the base Consent.policyRule/Consent.policy
 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
 */
export interface ConsentProvision extends BackboneElement {
    /**
     * Timeframe for this provision
     * Timeframe for this provision.
     * This is the bound effective time of the consent and should be in the base provision in the Consent resource.
     */
    period?: Period;
    /**
     * Who|what controlled by this provision (or group, by role)
     * Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    actor?: ConsentProvisionActor[];
    /**
     * Actions controlled by this provision
     * Actions controlled by this provision.
     * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
     */
    action?: CodeableConcept[];
    /**
     * Security Labels that define affected resources
     * A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
     * If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
     */
    securityLabel?: Coding[];
    /**
     * Context of activities covered by this provision
     * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision.
     * When the purpose of use tag is on the data, access request purpose of use shall not conflict.
     */
    purpose?: Coding[];
    /**
     * e.g. Resource Type, Profile, CDA, etc
     * The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to.
     * Multiple types are or'ed together. The intention of the documentType element is that the codes refer to document types defined in a standard somewhere.
     */
    documentType?: Coding[];
    /**
     * e.g. Resource Type, Profile, etc
     * The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to.
     * Multiple types are or'ed together. The intention of the resourceType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
     */
    resourceType?: Coding[];
    /**
     * e.g. LOINC or SNOMED CT code, etc. in the content
     * If this code is found in an instance, then the provision applies.
     */
    code?: CodeableConcept[];
    /**
     * Timeframe for data controlled by this provision
     * Clinical or Operational Relevant period of time that bounds the data controlled by this provision.
     * This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
     */
    dataPeriod?: Period;
    /**
     * Data controlled by this provision
     * The resources controlled by this provision if specific resources are referenced.
     */
    data?: ConsentProvisionData[];
    /**
     * A computable expression of the consent
     * A computable (FHIRPath or other) definition of what is controlled by this consent.
     * Constraining the expression type for a specific implementation via profile is recommended
     */
    expression?: Expression;
    /**
     * Nested Exception Provisions
     * Provisions which provide exceptions to the base provision or subprovisions.
     */
    provision?: ConsentProvision[];
}
/**
 * A healthcare consumer's  or third party's choices to permit or deny recipients or roles to perform actions for specific purposes and periods of time
 * A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
 * Broadly, there are 3 key areas of consent for patients: Consent around sharing information (aka Privacy Consent Directive - Authorization to Collect, Use, or Disclose information), consent for specific treatment, or kinds of treatment and consent for research participation and data sharing.
 */
export interface Consent extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Consent';
    /**
     * Identifier for this record (external references)
     * Unique identifier for this copy of the Consent Statement.
     * This identifier identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
     */
    identifier?: Identifier[];
    /**
     * Classification of the consent statement - for indexing/retrieval
     * A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
     */
    category?: CodeableConcept[];
    /**
     * Who the consent applies to
     * The patient/healthcare practitioner or group of persons to whom this consent applies.
     */
    subject?: Reference;
    /**
     * Fully executed date of the consent
     * Date the consent instance was agreed to.
     */
    date?: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Effective period for this Consent
     * Effective period for this Consent Resource and all provisions unless specified in that provision.
     */
    period?: Period;
    /**
     * Who is granting rights according to the policy and rules
     * The entity responsible for granting the rights listed in a Consent Directive.
     */
    grantor?: Reference[];
    /**
     * Who is agreeing to the policy and rules
     * The entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
     * In a fully computable consent, both grantee and grantor  will be listed as actors within the consent. The Grantee and Grantor elements are for ease of search only.
     */
    grantee?: Reference[];
    /**
     * Consent workflow management
     * The actor that manages the consent through its lifecycle.
     */
    manager?: Reference[];
    /**
     * Consent Enforcer
     * The actor that controls/enforces the access according to the consent.
     */
    controller?: Reference[];
    /**
     * Source from which this consent is taken
     * The source on which this consent statement is based. The source might be a scanned original paper form.
     * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
     */
    sourceAttachment?: Attachment[];
    /**
     * Source from which this consent is taken
     * A reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
     * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
     */
    sourceReference?: Reference[];
    /**
     * Regulations establishing base Consent
     * A set of codes that indicate the regulatory basis (if any) that this consent supports.
     */
    regulatoryBasis?: CodeableConcept[];
    /**
     * Computable version of the backing policy
     * A Reference or URL used to uniquely identify the policy the organization will enforce for this Consent. This Reference or URL should be specific to the version of the policy and should be dereferencable to a computable policy of some form.
     */
    policyBasis?: ConsentPolicyBasis;
    /**
     * Human Readable Policy
     * A Reference to the human readable policy explaining the basis for the Consent.
     */
    policyText?: Reference[];
    /**
     * Consent Verified by patient or family
     * Whether a treatment instruction (e.g. artificial respiration: yes or no) was verified with the patient, his/her family or another authorized person.
     */
    verification?: ConsentVerification[];
    /**
     * Constraints to the base Consent.policyRule/Consent.policy
     * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
     */
    provision?: ConsentProvision[];
    /**
     * draft | active | inactive | not-done | entered-in-error | unknown
     * Indicates the current state of this Consent resource.
     * This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
     */
    status: ConsentState;
    /**
     * deny | permit
     * Action to take - permit or deny - as default.
     */
    decision?: ConsentProvisionType;
}
/**
 * Contract precursor content
 * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
 */
export interface ContractContentDefinition extends BackboneElement {
    /**
     * Content structure and use
     * Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
     */
    type: CodeableConcept;
    /**
     * Detailed Content Type Definition
     * Detailed Precusory content type.
     */
    subType?: CodeableConcept;
    /**
     * Publisher Entity
     * The  individual or organization that published the Contract precursor content.
     */
    publisher?: Reference;
    /**
     * When published
     * The date (and optionally time) when the contract was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
     */
    publicationDate?: dateTime;
    /**
     * Extension for publicationDate
     **/
    _publicationDate?: Element;
    /**
     * Publication Ownership
     * A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * amended | appended | cancelled | disputed | entered-in-error | executable +
     * amended | appended | cancelled | disputed | entered-in-error | executable +.
     */
    publicationStatus: ContractPublicationStatus;
}
/**
 * Protection for the Term
 * Security labels that protect the handling of information about the term and its elements, which may be specifically identified.
 * Within a Contract, a security label may apply to the one to many nested group of terms or to a term, whether inside a group or a singleton.  The security label on the entire set of term provision elements may be different from the security labels on a contained offer, asset, valuedItem, or data such as sensitive information, and must be the high water mark of all security labels within the term. Rationale is that a labelled term, which may be disaggregated from the Contract, and must persist the label on the term and on contained elements within other contexts. If more than one policy dictates a level of confidentiality of the term, then each applicable policy may be represented by a security label specific to its requirements.

A Security Label is comprised of 1..1 confidentiality code and 0..* other security label codes (aka "privacy tags". A Security Label is metadata assigned (aka "tagged") to Resources and Resource elements, which specify the confidentiality and sensitivity of the Resource or element and their related attributes, the purposes for which tagged items may be collected, access, used or disclosed, any limitation on the type of entities authorized to engage in permitted purposes, and handling instructions that obligate or prohibit certain actions on the tagged items.
 */
export interface ContractTermSecurityLabel extends BackboneElement {
    /**
     * Link to Security Labels
     * Number used to link this term or term element to the applicable Security Label.
     */
    number?: unsignedInt[];
    /**
     * Extension for number
     **/
    _number?: Element[];
    /**
     * Confidentiality Protection
     * Security label privacy tag that specifies the level of confidentiality protection required for this term and/or term elements.
     */
    classification: Coding;
    /**
     * Applicable Policy
     * Security label privacy tag that specifies the applicable privacy and security policies governing this term and/or term elements.
     */
    category?: Coding[];
    /**
     * Handling Instructions
     * Security label privacy tag that specifies the manner in which term and/or term elements are to be protected.
     */
    control?: Coding[];
}
/**
 * Offer Recipient
 * Offer Recipient.
 */
export interface ContractTermOfferParty extends BackboneElement {
    /**
     * Referenced entity
     * Participant in the offer.
     */
    reference: Reference[];
    /**
     * Participant engagement type
     * How the party participates in the offer.
     */
    role: CodeableConcept;
}
/**
 * Response to offer text
 * Response to offer text.
 */
export interface ContractTermOfferAnswer extends BackboneElement {
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueAttachment?: Attachment;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueCoding?: Coding;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueQuantity?: Quantity;
    /**
     * The actual answer response
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
     */
    valueReference?: Reference;
}
/**
 * Context of the Contract term
 * The matter of concern in the context of this provision of the agrement.
 */
export interface ContractTermOffer extends BackboneElement {
    /**
     * Offer business ID
     * Unique identifier for this particular Contract Provision.
     */
    identifier?: Identifier[];
    /**
     * Offer Recipient
     * Offer Recipient.
     */
    party?: ContractTermOfferParty[];
    /**
     * Negotiable offer asset
     * The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
     * The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee.
The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse.
However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.
If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
     */
    topic?: Reference;
    /**
     * Contract Offer Type or Form
     * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
     */
    type?: CodeableConcept;
    /**
     * Accepting party choice
     * Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
     */
    decision?: CodeableConcept;
    /**
     * How decision is conveyed
     * How the decision about a Contract was conveyed.
     */
    decisionMode?: CodeableConcept[];
    /**
     * Response to offer text
     * Response to offer text.
     */
    answer?: ContractTermOfferAnswer[];
    /**
     * Human readable offer text
     * Human readable form of this Contract Offer.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Pointer to text
     * The id of the clause or question text of the offer in the referenced questionnaire/response.
     */
    linkId?: string[];
    /**
     * Extension for linkId
     **/
    _linkId?: Element[];
    /**
     * Offer restriction numbers
     * Security labels that protects the offer.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Extension for securityLabelNumber
     **/
    _securityLabelNumber?: Element[];
}
/**
 * Circumstance of the asset
 * Circumstance of the asset.
 */
export interface ContractTermAssetContext extends BackboneElement {
    /**
     * Creator,custodian or owner
     * Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
     */
    reference?: Reference;
    /**
     * Codeable asset context
     * Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
     */
    code?: CodeableConcept[];
    /**
     * Context description
     * Context description.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
}
/**
 * Contract Valued Item List
 * Contract Valued Item List.
 */
export interface ContractTermAssetValuedItem extends BackboneElement {
    /**
     * Contract Valued Item Type
     * Specific type of Contract Valued Item that may be priced.
     */
    entityCodeableConcept?: CodeableConcept;
    /**
     * Contract Valued Item Type
     * Specific type of Contract Valued Item that may be priced.
     */
    entityReference?: Reference;
    /**
     * Contract Valued Item Number
     * Identifies a Contract Valued Item instance.
     */
    identifier?: Identifier;
    /**
     * Contract Valued Item Effective Tiem
     * Indicates the time during which this Contract ValuedItem information is effective.
     */
    effectiveTime?: dateTime;
    /**
     * Extension for effectiveTime
     **/
    _effectiveTime?: Element;
    /**
     * Count of Contract Valued Items
     * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
     */
    quantity?: Quantity;
    /**
     * Contract Valued Item fee, charge, or cost
     * A Contract Valued Item unit valuation measure.
     */
    unitPrice?: Money;
    /**
     * Contract Valued Item Price Scaling Factor
     * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Contract Valued Item Difficulty Scaling Factor
     * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
     */
    points?: decimal;
    /**
     * Extension for points
     **/
    _points?: Element;
    /**
     * Total Contract Valued Item Value
     * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Terms of valuation
     * Terms of valuation.
     */
    payment?: string;
    /**
     * Extension for payment
     **/
    _payment?: Element;
    /**
     * When payment is due
     * When payment is due.
     */
    paymentDate?: dateTime;
    /**
     * Extension for paymentDate
     **/
    _paymentDate?: Element;
    /**
     * Who will make payment
     * Who will make payment.
     */
    responsible?: Reference;
    /**
     * Who will receive payment
     * Who will receive payment.
     */
    recipient?: Reference;
    /**
     * Pointer to specific item
     * Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Extension for linkId
     **/
    _linkId?: Element[];
    /**
     * Security Labels that define affected terms
     * A set of security labels that define which terms are controlled by this condition.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Extension for securityLabelNumber
     **/
    _securityLabelNumber?: Element[];
}
/**
 * Contract Term Asset List
 * Contract Term Asset List.
 */
export interface ContractTermAsset extends BackboneElement {
    /**
     * Range of asset
     * Differentiates the kind of the asset .
     */
    scope?: CodeableConcept;
    /**
     * Asset category
     * Target entity type about which the term may be concerned.
     */
    type?: CodeableConcept[];
    /**
     * Associated entities
     * Associated entities.
     */
    typeReference?: Reference[];
    /**
     * Asset sub-category
     * May be a subtype or part of an offered asset.
     */
    subtype?: CodeableConcept[];
    /**
     * Kinship of the asset
     * Specifies the applicability of the term to an asset resource instance, and instances it refers to or instances that refer to it, and/or are owned by the offeree.
     */
    relationship?: Coding;
    /**
     * Circumstance of the asset
     * Circumstance of the asset.
     */
    context?: ContractTermAssetContext[];
    /**
     * Quality desctiption of asset
     * Description of the quality and completeness of the asset that may be a factor in its valuation.
     */
    condition?: string;
    /**
     * Extension for condition
     **/
    _condition?: Element;
    /**
     * Asset availability types
     * Type of Asset availability for use or ownership.
     */
    periodType?: CodeableConcept[];
    /**
     * Time period of the asset
     * Asset relevant contractual time period.
     */
    period?: Period[];
    /**
     * Time period
     * Time period of asset use.
     */
    usePeriod?: Period[];
    /**
     * Asset clause or question text
     * Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Pointer to asset text
     * Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Extension for linkId
     **/
    _linkId?: Element[];
    /**
     * Response to assets
     * Response to assets.
     */
    answer?: ContractTermOfferAnswer[];
    /**
     * Asset restriction numbers
     * Security labels that protects the asset.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Extension for securityLabelNumber
     **/
    _securityLabelNumber?: Element[];
    /**
     * Contract Valued Item List
     * Contract Valued Item List.
     */
    valuedItem?: ContractTermAssetValuedItem[];
}
/**
 * Entity of the action
 * Entity of the action.
 */
export interface ContractTermActionSubject extends BackboneElement {
    /**
     * Entity of the action
     * The entity the action is performed or not performed on or for.
     */
    reference: Reference[];
    /**
     * Role type of the agent
     * Role type of agent assigned roles in this Contract.
     */
    role?: CodeableConcept;
}
/**
 * Entity being ascribed responsibility
 * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export interface ContractTermAction extends BackboneElement {
    /**
     * True if the term prohibits the  action
     * True if the term prohibits the  action.
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * Type or form of the action
     * Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
     */
    type: CodeableConcept;
    /**
     * Entity of the action
     * Entity of the action.
     */
    subject?: ContractTermActionSubject[];
    /**
     * Purpose for the Contract Term Action
     * Reason or purpose for the action stipulated by this Contract Provision.
     */
    intent: CodeableConcept;
    /**
     * Pointer to specific item
     * Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
     */
    linkId?: string[];
    /**
     * Extension for linkId
     **/
    _linkId?: Element[];
    /**
     * State of the action
     * Current state of the term action.
     */
    status: CodeableConcept;
    /**
     * Episode associated with action
     * Encounter or Episode with primary association to the specified term activity.
     */
    context?: Reference;
    /**
     * Pointer to specific item
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    contextLinkId?: string[];
    /**
     * Extension for contextLinkId
     **/
    _contextLinkId?: Element[];
    /**
     * When action happens
     * When action happens.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When action happens
     * When action happens.
     */
    occurrencePeriod?: Period;
    /**
     * When action happens
     * When action happens.
     */
    occurrenceTiming?: Timing;
    /**
     * Who asked for action
     * Who or what initiated the action and has responsibility for its activation.
     */
    requester?: Reference[];
    /**
     * Pointer to specific item
     * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
     */
    requesterLinkId?: string[];
    /**
     * Extension for requesterLinkId
     **/
    _requesterLinkId?: Element[];
    /**
     * Kind of service performer
     * The type of individual that is desired or required to perform or not perform the action.
     */
    performerType?: CodeableConcept[];
    /**
     * Competency of the performer
     * The type of role or competency of an individual desired or required to perform or not perform the action.
     */
    performerRole?: CodeableConcept;
    /**
     * Actor that wil execute (or not) the action
     * Indicates who or what is being asked to perform (or not perform) the ction.
     */
    performer?: Reference;
    /**
     * Pointer to specific item
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    performerLinkId?: string[];
    /**
     * Extension for performerLinkId
     **/
    _performerLinkId?: Element[];
    /**
     * Why is action (not) needed?
     * Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited. Either a coded concept, or another resource whose existence justifies permitting or not permitting this action.
     */
    reason?: CodeableReference[];
    /**
     * Pointer to specific item
     * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
     */
    reasonLinkId?: string[];
    /**
     * Extension for reasonLinkId
     **/
    _reasonLinkId?: Element[];
    /**
     * Comments about the action
     * Comments made about the term action made by the requester, performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Action restriction numbers
     * Security labels that protects the action.
     */
    securityLabelNumber?: unsignedInt[];
    /**
     * Extension for securityLabelNumber
     **/
    _securityLabelNumber?: Element[];
}
/**
 * Contract Term List
 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
 */
export interface ContractTerm extends BackboneElement {
    /**
     * Contract Term Number
     * Unique identifier for this particular Contract Provision.
     */
    identifier?: Identifier;
    /**
     * Contract Term Issue Date Time
     * When this Contract Provision was issued.
     */
    issued?: dateTime;
    /**
     * Extension for issued
     **/
    _issued?: Element;
    /**
     * Contract Term Effective Time
     * Relevant time or time-period when this Contract Provision is applicable.
     */
    applies?: Period;
    /**
     * Term Concern
     * The entity that the term applies to.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * Term Concern
     * The entity that the term applies to.
     */
    topicReference?: Reference;
    /**
     * Contract Term Type or Form
     * A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
     */
    type?: CodeableConcept;
    /**
     * Contract Term Type specific classification
     * A specialized legal clause or condition based on overarching contract type.
     */
    subType?: CodeableConcept;
    /**
     * Term Statement
     * Statement of a provision in a policy or a contract.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Protection for the Term
     * Security labels that protect the handling of information about the term and its elements, which may be specifically identified.
     * Within a Contract, a security label may apply to the one to many nested group of terms or to a term, whether inside a group or a singleton.  The security label on the entire set of term provision elements may be different from the security labels on a contained offer, asset, valuedItem, or data such as sensitive information, and must be the high water mark of all security labels within the term. Rationale is that a labelled term, which may be disaggregated from the Contract, and must persist the label on the term and on contained elements within other contexts. If more than one policy dictates a level of confidentiality of the term, then each applicable policy may be represented by a security label specific to its requirements.

A Security Label is comprised of 1..1 confidentiality code and 0..* other security label codes (aka "privacy tags". A Security Label is metadata assigned (aka "tagged") to Resources and Resource elements, which specify the confidentiality and sensitivity of the Resource or element and their related attributes, the purposes for which tagged items may be collected, access, used or disclosed, any limitation on the type of entities authorized to engage in permitted purposes, and handling instructions that obligate or prohibit certain actions on the tagged items.
     */
    securityLabel?: ContractTermSecurityLabel[];
    /**
     * Context of the Contract term
     * The matter of concern in the context of this provision of the agrement.
     */
    offer: ContractTermOffer;
    /**
     * Contract Term Asset List
     * Contract Term Asset List.
     */
    asset?: ContractTermAsset[];
    /**
     * Entity being ascribed responsibility
     * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
     * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
     */
    action?: ContractTermAction[];
    /**
     * Nested Contract Term Group
     * Nested group of Contract Provisions.
     */
    group?: ContractTerm[];
}
/**
 * Contract Signatory
 * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export interface ContractSigner extends BackboneElement {
    /**
     * Contract Signatory Role
     * Role of this Contract signer, e.g. notary, grantee.
     */
    type: Coding;
    /**
     * Contract Signatory Party
     * Party which is a signator to this Contract.
     */
    party: Reference;
    /**
     * Contract Documentation Signature
     * Legally binding Contract DSIG signature contents in Base64.
     */
    signature: Signature[];
}
/**
 * Contract Friendly Language
 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
 */
export interface ContractFriendly extends BackboneElement {
    /**
     * Easily comprehended representation of this Contract
     * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
     */
    contentAttachment?: Attachment;
    /**
     * Easily comprehended representation of this Contract
     * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
     */
    contentReference?: Reference;
}
/**
 * Contract Legal Language
 * List of Legal expressions or representations of this Contract.
 */
export interface ContractLegal extends BackboneElement {
    /**
     * Contract Legal Text
     * Contract legal text in human renderable form.
     */
    contentAttachment?: Attachment;
    /**
     * Contract Legal Text
     * Contract legal text in human renderable form.
     */
    contentReference?: Reference;
}
/**
 * Computable Contract Language
 * List of Computable Policy Rule Language Representations of this Contract.
 */
export interface ContractRule extends BackboneElement {
    /**
     * Computable Contract Rules
     * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
     */
    contentAttachment?: Attachment;
    /**
     * Computable Contract Rules
     * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
     */
    contentReference?: Reference;
}
/**
 * Legal Agreement
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
 */
export interface Contract extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Contract';
    /**
     * Contract number
     * Unique identifier for this Contract or a derivative that references a Source Contract.
     */
    identifier?: Identifier[];
    /**
     * Basal definition
     * Canonical identifier for this contract, represented as a URI (globally unique).
     * Used in a domain that uses a supplied contract repository.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business edition
     * An edition identifier used for business purposes to label business significant variants.
     * Note -  This is a business versionId, not a resource version id (see discussion at [Versioning](resource.html#versions))
Comments - There may be different contract instances that have the same identifier but different versions. The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Negotiation status
     * Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
     */
    legalState?: CodeableConcept;
    /**
     * Source Contract Definition
     * The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
     */
    instantiatesCanonical?: Reference;
    /**
     * External Contract Definition
     * The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
     */
    instantiatesUri?: uri;
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element;
    /**
     * Content derived from the basal information
     * The minimal content derived from the basal information source at a specific stage in its lifecycle.
     */
    contentDerivative?: CodeableConcept;
    /**
     * When this Contract was issued
     * When this  Contract was issued.
     */
    issued?: dateTime;
    /**
     * Extension for issued
     **/
    _issued?: Element;
    /**
     * Effective time
     * Relevant time or time-period when this Contract is applicable.
     */
    applies?: Period;
    /**
     * Contract cessation cause
     * Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
     */
    expirationType?: CodeableConcept;
    /**
     * Contract Target Entity
     * The target entity impacted by or of interest to parties to the agreement.
     * The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason.
In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
     */
    subject?: Reference[];
    /**
     * Authority under which this Contract has standing
     * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
     */
    authority?: Reference[];
    /**
     * A sphere of control governed by an authoritative jurisdiction, organization, or person
     * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
     */
    domain?: Reference[];
    /**
     * Specific Location
     * Sites in which the contract is complied with,  exercised, or in force.
     */
    site?: Reference[];
    /**
     * Computer friendly designation
     * A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Human Friendly name
     * A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate Friendly name
     * A more detailed or qualifying explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * Acronym or short name
     * Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
     */
    alias?: string[];
    /**
     * Extension for alias
     **/
    _alias?: Element[];
    /**
     * Source of Contract
     * The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
     */
    author?: Reference;
    /**
     * Range of Legal Concerns
     * A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
     */
    scope?: CodeableConcept;
    /**
     * Focus of contract interest
     * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
     * Contractual areas of concern are very broad. This element supports narrowing the area of concern to more specific term topics within this Contract. Given the wide range of contract topics, implementers need to be cognizant of the business use case for which they are designing a FHIR Contract, and narrowly specify the topic being represented with respect to the Contract.type and any specializing Contract.subtype. The same topic, e.g., an asset such as a good or service, such as a real property, medical supply, insurance, information, a procedure or employment, or a manner of conduct, such adherence to a privacy, trust, or security policy, may be the topic of multiple types of contracts.
One way to determine the Contract.topic is to answer the question: "What is the overall objective of this legal instrument?". The Contract.topic is described with more detail by the terms of the Contract.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * Focus of contract interest
     * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
     * Contractual areas of concern are very broad. This element supports narrowing the area of concern to more specific term topics within this Contract. Given the wide range of contract topics, implementers need to be cognizant of the business use case for which they are designing a FHIR Contract, and narrowly specify the topic being represented with respect to the Contract.type and any specializing Contract.subtype. The same topic, e.g., an asset such as a good or service, such as a real property, medical supply, insurance, information, a procedure or employment, or a manner of conduct, such adherence to a privacy, trust, or security policy, may be the topic of multiple types of contracts.
One way to determine the Contract.topic is to answer the question: "What is the overall objective of this legal instrument?". The Contract.topic is described with more detail by the terms of the Contract.
     */
    topicReference?: Reference;
    /**
     * Legal instrument category
     * A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
     */
    type?: CodeableConcept;
    /**
     * Subtype within the context of type
     * Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
     */
    subType?: CodeableConcept[];
    /**
     * Contract precursor content
     * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
     */
    contentDefinition?: ContractContentDefinition;
    /**
     * Contract Term List
     * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
     */
    term?: ContractTerm[];
    /**
     * Extra Information
     * Information that may be needed by/relevant to the performer in their execution of this term action.
     */
    supportingInfo?: Reference[];
    /**
     * Key event in Contract History
     * Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provenance.entity indicates the target that was changed in the update (see [Provenance.entity](provenance-definitions.html#Provenance.entity)).
     */
    relevantHistory?: Reference[];
    /**
     * Contract Signatory
     * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
     * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
     */
    signer?: ContractSigner[];
    /**
     * Contract Friendly Language
     * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
     */
    friendly?: ContractFriendly[];
    /**
     * Contract Legal Language
     * List of Legal expressions or representations of this Contract.
     */
    legal?: ContractLegal[];
    /**
     * Computable Contract Language
     * List of Computable Policy Rule Language Representations of this Contract.
     */
    rule?: ContractRule[];
    /**
     * Binding Contract
     * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
     */
    legallyBindingAttachment?: Attachment;
    /**
     * Binding Contract
     * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
     */
    legallyBindingReference?: Reference;
    /**
     * amended | appended | cancelled | disputed | entered-in-error | executable +
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
     */
    status?: ContractStatus;
}
/**
 * Self-pay parties and responsibility
 * Link to the paying party and optionally what specifically they will be responsible to pay.
 */
export interface CoveragePaymentBy extends BackboneElement {
    /**
     * Parties performing self-payment
     * The list of parties providing non-insurance payment for the treatment costs.
     */
    party: Reference;
    /**
     * Party's responsibility
     *  Description of the financial responsibility.
     */
    responsibility?: string;
    /**
     * Extension for responsibility
     **/
    _responsibility?: Element;
}
/**
 * Additional coverage classifications
 * A suite of underwriter specific classifiers.
 * For example, class may be used to identify a class of coverage or employer group, policy, or plan.
 */
export interface CoverageClass extends BackboneElement {
    /**
     * Type of class such as 'group' or 'plan'
     * The type of classification for which an insurer-specific class label or number and optional name is provided.  For example, type may be used to identify a class of coverage or employer group, policy, or plan.
     */
    type: CodeableConcept;
    /**
     * Value associated with the type
     * The alphanumeric identifier associated with the insurer issued label.
     * For example, the Group or Plan number.
     */
    value: Identifier;
    /**
     * Human readable description of the type and value
     * A short description for the class.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
}
/**
 * Exceptions for patient payments
 * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
 */
export interface CoverageCostToBeneficiaryException extends BackboneElement {
    /**
     * Exception category
     * The code for the specific exception.
     */
    type: CodeableConcept;
    /**
     * The effective period of the exception
     * The timeframe the exception is in force.
     */
    period?: Period;
}
/**
 * Patient payments for services/products
 * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export interface CoverageCostToBeneficiary extends BackboneElement {
    /**
     * Cost category
     * The category of patient centric costs associated with treatment.
     * For example visit, specialist visits, emergency, inpatient care, etc.
     */
    type?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * In or out of network
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    network?: CodeableConcept;
    /**
     * Individual or family
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * Annual or lifetime
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    /**
     * The amount or percentage due from the beneficiary
     * The amount due from the patient for the cost category.
     * Amount may be expressed as a percentage of the service/product cost or a fixed amount of currency.
     */
    valueQuantity?: Quantity;
    /**
     * The amount or percentage due from the beneficiary
     * The amount due from the patient for the cost category.
     * Amount may be expressed as a percentage of the service/product cost or a fixed amount of currency.
     */
    valueMoney?: Money;
    /**
     * Exceptions for patient payments
     * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
     */
    exception?: CoverageCostToBeneficiaryException[];
}
/**
 * Insurance or medical plan or a payment agreement
 * Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
 * The Coverage resource contains the insurance card level information, which is customary to provide on claims and other communications between providers and insurers.
 */
export interface Coverage extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Coverage';
    /**
     * Business identifier(s) for this coverage
     * The identifier of the coverage as issued by the insurer.
     * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatenation of the Coverage.SubscriberID and the Coverage.dependant. Note that not all insurers issue unique member IDs therefore searches may result in multiple responses.
     */
    identifier?: Identifier[];
    /**
     * Self-pay parties and responsibility
     * Link to the paying party and optionally what specifically they will be responsible to pay.
     */
    paymentBy?: CoveragePaymentBy[];
    /**
     * Coverage category such as medical or accident
     * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
     */
    type?: CodeableConcept;
    /**
     * Owner of the policy
     * The party who 'owns' the insurance policy.
     * For example: may be an individual, corporation or the subscriber's employer.
     */
    policyHolder?: Reference;
    /**
     * Subscriber to the policy
     * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
     * May be self or a parent in the case of dependants. A subscriber is only required on certain types of policies not all policies and that it is appropriate to have just a policyholder and a beneficiary when not other party can join that policy instance.
     */
    subscriber?: Reference;
    /**
     * ID assigned to the subscriber
     * The insurer assigned ID for the Subscriber.
     */
    subscriberId?: Identifier[];
    /**
     * Plan beneficiary
     * The party who benefits from the insurance coverage; the patient when products and/or services are provided.
     */
    beneficiary: Reference;
    /**
     * Dependent number
     * A designator for a dependent under the coverage.
     * Sometimes the member number is constructed from the subscriberId and the dependant number.
     */
    dependent?: string;
    /**
     * Extension for dependent
     **/
    _dependent?: Element;
    /**
     * Beneficiary relationship to the subscriber
     * The relationship of beneficiary (patient) to the subscriber.
     * Typically, an individual uses policies which are theirs (relationship='self') before policies owned by others.
     */
    relationship?: CodeableConcept;
    /**
     * Coverage start and end dates
     * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
     */
    period?: Period;
    /**
     * Issuer of the policy
     * The program or plan underwriter, payor, insurance company.
     * May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
     */
    insurer?: Reference;
    /**
     * Additional coverage classifications
     * A suite of underwriter specific classifiers.
     * For example, class may be used to identify a class of coverage or employer group, policy, or plan.
     */
    class?: CoverageClass[];
    /**
     * Relative order of the coverage
     * The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care. For example; a patient might have (0) auto insurance (1) their own health insurance and (2) spouse's health insurance. When claiming for treatments which were not the result of an auto accident then only coverages (1) and (2) above would be applicatble and would apply in the order specified in parenthesis.
     */
    order?: positiveInt;
    /**
     * Extension for order
     **/
    _order?: Element;
    /**
     * Insurer network
     * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
     */
    network?: string;
    /**
     * Extension for network
     **/
    _network?: Element;
    /**
     * Patient payments for services/products
     * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
     * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
     */
    costToBeneficiary?: CoverageCostToBeneficiary[];
    /**
     * Reimbursement to insurer
     * When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
     * Typically, automotive and worker's compensation policies would be flagged with 'subrogation=true' to enable healthcare payors to collect against accident claims.
     */
    subrogation?: boolean;
    /**
     * Extension for subrogation
     **/
    _subrogation?: Element;
    /**
     * Contract details
     * The policy(s) which constitute this insurance coverage.
     */
    contract?: Reference[];
    /**
     * Insurance plan details
     * The insurance plan details, benefits and costs, which constitute this insurance coverage.
     */
    insurancePlan?: Reference;
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
     */
    status: CoverageStatus;
    /**
     * insurance | self-pay | other
     * The nature of the coverage be it insurance, or cash payment such as self-pay.
     */
    kind: CoverageKind;
}
/**
 * Event information
 * Information code for an event with a corresponding date or period.
 */
export interface CoverageEligibilityRequestEvent extends BackboneElement {
    /**
     * Specific event
     * A coded event such as when a service is expected or a card printed.
     */
    type: CodeableConcept;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenDateTime?: dateTime;
    /**
     * Extension for whenDateTime
     **/
    _whenDateTime?: Element;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenPeriod?: Period;
}
/**
 * Supporting information
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export interface CoverageEligibilityRequestSupportingInfo extends BackboneElement {
    /**
     * Information instance identifier
     * A number to uniquely identify supporting information entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    information: Reference;
    /**
     * Applies to all items
     * The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
     */
    appliesToAll?: boolean;
    /**
     * Extension for appliesToAll
     **/
    _appliesToAll?: Element;
}
/**
 * Patient insurance information
 * Financial instruments for reimbursement for the health care products and services.
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface CoverageEligibilityRequestInsurance extends BackboneElement {
    /**
     * Applicable coverage
     * A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.
     * A patient may (will) have multiple insurance policies which provide reimburement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for evaluating this request. Other requests would be created to request evaluation against the other listed policies.
     */
    focal?: boolean;
    /**
     * Extension for focal
     **/
    _focal?: Element;
    /**
     * Insurance information
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Additional provider contract number
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * Extension for businessArrangement
     **/
    _businessArrangement?: Element;
}
/**
 * Applicable diagnosis
 * Patient diagnosis for which care is sought.
 */
export interface CoverageEligibilityRequestItemDiagnosis extends BackboneElement {
    /**
     * Nature of illness or problem
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * Nature of illness or problem
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
}
/**
 * Item to be evaluated for eligibiity
 * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
 */
export interface CoverageEligibilityRequestItem extends BackboneElement {
    /**
     * Applicable exception or supporting information
     * Exceptions, special conditions and supporting information applicable for this service or product line.
     */
    supportingInfoSequence?: positiveInt[];
    /**
     * Extension for supportingInfoSequence
     **/
    _supportingInfoSequence?: Element[];
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * This contains the product, service, drug or other billing code for the item.
     * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
     */
    productOrService?: CodeableConcept;
    /**
     * Product or service billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Perfoming practitioner
     * The practitioner who is responsible for the product or service to be rendered to the patient.
     */
    provider?: Reference;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * The amount charged to the patient by the provider for a single unit.
     */
    unitPrice?: Money;
    /**
     * Servicing facility
     * Facility where the services will be provided.
     */
    facility?: Reference;
    /**
     * Applicable diagnosis
     * Patient diagnosis for which care is sought.
     */
    diagnosis?: CoverageEligibilityRequestItemDiagnosis[];
    /**
     * Product or service details
     * The plan/proposal/order describing the proposed service in detail.
     */
    detail?: Reference[];
}
/**
 * CoverageEligibilityRequest resource
 * The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
 */
export interface CoverageEligibilityRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CoverageEligibilityRequest';
    /**
     * Business Identifier for coverage eligiblity request
     * A unique identifier assigned to this coverage eligiblity request.
     */
    identifier?: Identifier[];
    /**
     * Desired processing priority
     * When the requestor expects the processor to complete processing.
     */
    priority?: CodeableConcept;
    /**
     * Intended recipient of products and services
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     * 1..1.
     */
    patient: Reference;
    /**
     * Event information
     * Information code for an event with a corresponding date or period.
     */
    event?: CoverageEligibilityRequestEvent[];
    /**
     * Estimated date or dates of service
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Estimated date or dates of service
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Creation date
     * The date when this resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Author
     * Person who created the request.
     */
    enterer?: Reference;
    /**
     * Party responsible for the request
     * The provider which is responsible for the request.
     * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
     */
    provider?: Reference;
    /**
     * Coverage issuer
     * The Insurer who issued the coverage in question and is the recipient of the request.
     */
    insurer: Reference;
    /**
     * Servicing facility
     * Facility where the services are intended to be provided.
     */
    facility?: Reference;
    /**
     * Supporting information
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     * Often there are multiple jurisdiction specific valuesets which are required.
     */
    supportingInfo?: CoverageEligibilityRequestSupportingInfo[];
    /**
     * Patient insurance information
     * Financial instruments for reimbursement for the health care products and services.
     * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
     */
    insurance?: CoverageEligibilityRequestInsurance[];
    /**
     * Item to be evaluated for eligibiity
     * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
     */
    item?: CoverageEligibilityRequestItem[];
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: CoverageEligibilityRequestEligibilityRequestStatus;
    /**
     * auth-requirements | benefits | discovery | validation
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    purpose: CoverageEligibilityRequestEligibilityRequestPurpose[];
}
/**
 * Event information
 * Information code for an event with a corresponding date or period.
 */
export interface CoverageEligibilityResponseEvent extends BackboneElement {
    /**
     * Specific event
     * A coded event such as when a service is expected or a card printed.
     */
    type: CodeableConcept;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenDateTime?: dateTime;
    /**
     * Extension for whenDateTime
     **/
    _whenDateTime?: Element;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenPeriod?: Period;
}
/**
 * Benefit Summary
 * Benefits used to date.
 */
export interface CoverageEligibilityResponseInsuranceItemBenefit extends BackboneElement {
    /**
     * Benefit classification
     * Classification of benefit being provided.
     * For example: deductible, visits, benefit amount.
     */
    type: CodeableConcept;
    /**
     * Benefits allowed
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: unsignedInt;
    /**
     * Extension for allowedUnsignedInt
     **/
    _allowedUnsignedInt?: Element;
    /**
     * Benefits allowed
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * Extension for allowedString
     **/
    _allowedString?: Element;
    /**
     * Benefits allowed
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedMoney?: Money;
    /**
     * Benefits used
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: unsignedInt;
    /**
     * Extension for usedUnsignedInt
     **/
    _usedUnsignedInt?: Element;
    /**
     * Benefits used
     * The quantity of the benefit which have been consumed to date.
     */
    usedString?: string;
    /**
     * Extension for usedString
     **/
    _usedString?: Element;
    /**
     * Benefits used
     * The quantity of the benefit which have been consumed to date.
     */
    usedMoney?: Money;
}
/**
 * Benefits and authorization details
 * Benefits and optionally current balances, and authorization details by category or service.
 */
export interface CoverageEligibilityResponseInsuranceItem extends BackboneElement {
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * This contains the product, service, drug or other billing code for the item.
     * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
     */
    productOrService?: CodeableConcept;
    /**
     * Product or service billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Performing practitioner
     * The practitioner who is eligible for the provision of the product or service.
     */
    provider?: Reference;
    /**
     * Excluded from the plan
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    excluded?: boolean;
    /**
     * Extension for excluded
     **/
    _excluded?: Element;
    /**
     * Short name for the benefit
     * A short name or tag for the benefit.
     * For example: MED01, or DENT2.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Description of the benefit or services covered
     * A richer description of the benefit or services covered.
     * For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * In or out of network
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    network?: CodeableConcept;
    /**
     * Individual or family
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * Annual or lifetime
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    /**
     * Benefit Summary
     * Benefits used to date.
     */
    benefit?: CoverageEligibilityResponseInsuranceItemBenefit[];
    /**
     * Authorization required flag
     * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
     */
    authorizationRequired?: boolean;
    /**
     * Extension for authorizationRequired
     **/
    _authorizationRequired?: Element;
    /**
     * Type of required supporting materials
     * Codes or comments regarding information or actions associated with the preauthorization.
     */
    authorizationSupporting?: CodeableConcept[];
    /**
     * Preauthorization requirements endpoint
     * A web location for obtaining requirements or descriptive information regarding the preauthorization.
     */
    authorizationUrl?: uri;
    /**
     * Extension for authorizationUrl
     **/
    _authorizationUrl?: Element;
}
/**
 * Patient insurance information
 * Financial instruments for reimbursement for the health care products and services.
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface CoverageEligibilityResponseInsurance extends BackboneElement {
    /**
     * Insurance information
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Coverage inforce indicator
     * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
     */
    inforce?: boolean;
    /**
     * Extension for inforce
     **/
    _inforce?: Element;
    /**
     * When the benefits are applicable
     * The term of the benefits documented in this response.
     */
    benefitPeriod?: Period;
    /**
     * Benefits and authorization details
     * Benefits and optionally current balances, and authorization details by category or service.
     */
    item?: CoverageEligibilityResponseInsuranceItem[];
}
/**
 * Processing errors
 * Errors encountered during the processing of the request.
 */
export interface CoverageEligibilityResponseError extends BackboneElement {
    /**
     * Error code detailing processing issues
     * An error code,from a specified code system, which details why the eligibility check could not be performed.
     */
    code: CodeableConcept;
    /**
     * FHIRPath of element(s) related to issue
     * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
     * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
     */
    expression?: string[];
    /**
     * Extension for expression
     **/
    _expression?: Element[];
}
/**
 * CoverageEligibilityResponse resource
 * This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
 */
export interface CoverageEligibilityResponse extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'CoverageEligibilityResponse';
    /**
     * Business Identifier for coverage eligiblity request
     * A unique identifier assigned to this coverage eligiblity request.
     */
    identifier?: Identifier[];
    /**
     * Intended recipient of products and services
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     */
    patient: Reference;
    /**
     * Event information
     * Information code for an event with a corresponding date or period.
     */
    event?: CoverageEligibilityResponseEvent[];
    /**
     * Estimated date or dates of service
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Estimated date or dates of service
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Response creation date
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Party responsible for the request
     * The provider which is responsible for the request.
     * This party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
     */
    requestor?: Reference;
    /**
     * Eligibility request reference
     * Reference to the original request resource.
     */
    request: Reference;
    /**
     * Disposition Message
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Extension for disposition
     **/
    _disposition?: Element;
    /**
     * Coverage issuer
     * The Insurer who issued the coverage in question and is the author of the response.
     */
    insurer: Reference;
    /**
     * Patient insurance information
     * Financial instruments for reimbursement for the health care products and services.
     * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
     */
    insurance?: CoverageEligibilityResponseInsurance[];
    /**
     * Preauthorization reference
     * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
     */
    preAuthRef?: string;
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element;
    /**
     * Printed form identifier
     * A code for the form to be used for printing the content.
     * May be needed to identify specific jurisdictional forms.
     */
    form?: CodeableConcept;
    /**
     * Processing errors
     * Errors encountered during the processing of the request.
     */
    error?: CoverageEligibilityResponseError[];
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: CoverageEligibilityResponseEligibilityResponseStatus;
    /**
     * auth-requirements | benefits | discovery | validation
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    purpose: CoverageEligibilityResponseEligibilityResponsePurpose[];
    /**
     * queued | complete | error | partial
     * The outcome of the request processing.
     * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
     */
    outcome: CoverageEligibilityResponseEligibilityOutcome;
}
/**
 * Supporting evidence
 * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
 */
export interface DetectedIssueEvidence extends BackboneElement {
    /**
     * Manifestation
     * A manifestation that led to the recording of this detected issue.
     */
    code?: CodeableConcept[];
    /**
     * Supporting information
     * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
     */
    detail?: Reference[];
}
/**
 * Step taken to address
 * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
 */
export interface DetectedIssueMitigation extends BackboneElement {
    /**
     * What mitigation?
     * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
     * The "text" component can be used for detail or when no appropriate code exists.
     */
    action: CodeableConcept;
    /**
     * Date committed
     * Indicates when the mitigating action was documented.
     * This might not be the same as when the mitigating step was actually taken.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who is committing?
     * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
     */
    author?: Reference;
    /**
     * Additional notes about the mitigation
     * Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided.
     */
    note?: Annotation[];
}
/**
 * Clinical issue with action
 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc.
 */
export interface DetectedIssue extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DetectedIssue';
    /**
     * Unique id for the detected issue
     * Business identifier associated with the detected issue record.
     */
    identifier?: Identifier[];
    /**
     * Type of detected issue, e.g. drug-drug, duplicate therapy, etc
     * A code that classifies the general type of detected issue.
     * In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
     */
    category?: CodeableConcept[];
    /**
     * Specific type of detected issue, e.g. drug-drug, duplicate therapy, etc
     * Identifies the specific type of issue identified.
     */
    code?: CodeableConcept;
    /**
     * Associated subject
     * Indicates the subject whose record the detected issue is associated with.
     */
    subject?: Reference;
    /**
     * Encounter detected issue is part of
     * The encounter during which this issue was detected.
     * This will typically be the encounter the DetectedIssue was created during, but some DetectedIssues may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
     */
    encounter?: Reference;
    /**
     * When identified
     * The date or period when the detected issue was initially identified.
     */
    identifiedDateTime?: dateTime;
    /**
     * Extension for identifiedDateTime
     **/
    _identifiedDateTime?: Element;
    /**
     * When identified
     * The date or period when the detected issue was initially identified.
     */
    identifiedPeriod?: Period;
    /**
     * The provider or device that identified the issue
     * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
     */
    author?: Reference;
    /**
     * Problem resource
     * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
     * There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
     */
    implicated?: Reference[];
    /**
     * Supporting evidence
     * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
     */
    evidence?: DetectedIssueEvidence[];
    /**
     * Description and context
     * A textual explanation of the detected issue.
     * Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
     */
    detail?: markdown;
    /**
     * Extension for detail
     **/
    _detail?: Element;
    /**
     * Authority for issue
     * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
     */
    reference?: uri;
    /**
     * Extension for reference
     **/
    _reference?: Element;
    /**
     * Step taken to address
     * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
     */
    mitigation?: DetectedIssueMitigation[];
    /**
     * preliminary | final | entered-in-error | mitigated
     * Indicates the status of the detected issue.
     * This element is labeled as a modifier because the status contains the code entered-in-error that marks the issue as not currently valid.
     */
    status: DetectedIssueStatus;
    /**
     * high | moderate | low
     * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
     */
    severity?: DetectedIssueSeverity;
}
/**
 * Unique Device Identifier (UDI) Barcode string
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export interface DeviceUdiCarrier extends BackboneElement {
    /**
     * Mandatory fixed portion of UDI
     * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
     */
    deviceIdentifier: string;
    /**
     * Extension for deviceIdentifier
     **/
    _deviceIdentifier?: Element;
    /**
     * UDI Issuing Organization
     * Organization that is charged with issuing UDIs for devices. For example, the US FDA issuers include:
1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di,
2) HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-diI,
3) ICCBBA for blood containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di,
4) ICCBA for other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di # Informationsstelle für Arzneispezialitäten (IFA GmbH) (EU only): http://hl7.org/fhir/NamingSystem/ifa-gmbh-di.
     */
    issuer: uri;
    /**
     * Extension for issuer
     **/
    _issuer?: Element;
    /**
     * Regional UDI authority
     * The identity of the authoritative source for UDI generation within a jurisdiction. All UDIs are globally unique within a single namespace with the appropriate repository uri as the system. For example, UDIs of devices managed in the U.S. by the FDA, the value is http://hl7.org/fhir/NamingSystem/us-fda-udi or in the European Union by the European Commission http://hl7.org/fhir/NamingSystem/eu-ec-udi.
     */
    jurisdiction?: uri;
    /**
     * Extension for jurisdiction
     **/
    _jurisdiction?: Element;
    /**
     * UDI Machine Readable Barcode String
     * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
     * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
     */
    carrierAIDC?: base64Binary;
    /**
     * Extension for carrierAIDC
     **/
    _carrierAIDC?: Element;
    /**
     * UDI Human Readable Barcode String
     * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
     * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
     */
    carrierHRF?: string;
    /**
     * Extension for carrierHRF
     **/
    _carrierHRF?: Element;
    /**
     * barcode | rfid | manual | card | self-reported | electronic-transmission | unknown
     * A coded entry to indicate how the data was entered.
     */
    entryType?: DeviceUDIEntryType;
}
/**
 * The name or names of the device as known to the manufacturer and/or patient
 * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
 */
export interface DeviceName extends BackboneElement {
    /**
     * The term that names the device
     * The actual name that identifies the device.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * The preferred device name
     * Indicates the default or preferred name to be displayed.
     */
    display?: boolean;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * registered-name | user-friendly-name | patient-reported-name
     * Indicates the kind of name. RegisteredName | UserFriendlyName | PatientReportedName.
     */
    type: DeviceNameType;
}
/**
 * The actual design of the device or software version running on the device
 * The actual design of the device or software version running on the device.
 */
export interface DeviceVersion extends BackboneElement {
    /**
     * The type of the device version, e.g. manufacturer, approved, internal
     * The type of the device version, e.g. manufacturer, approved, internal.
     */
    type?: CodeableConcept;
    /**
     * The hardware or software module of the device to which the version applies
     * The hardware or software module of the device to which the version applies.
     * Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
     */
    component?: Identifier;
    /**
     * The date the version was installed on the device
     * The date the version was installed on the device.
     */
    installDate?: dateTime;
    /**
     * Extension for installDate
     **/
    _installDate?: Element;
    /**
     * The version text
     * The version text.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
 * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
 */
export interface DeviceConformsTo extends BackboneElement {
    /**
     * Describes the common type of the standard, specification, or formal guidance.  communication | performance | measurement
     * Describes the type of the standard, specification, or formal guidance.
     */
    category?: CodeableConcept;
    /**
     * Identifies the standard, specification, or formal guidance that the device adheres to
     * Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
     */
    specification: CodeableConcept;
    /**
     * Specific form or variant of the standard
     * Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
}
/**
 * Inherent, essentially fixed, characteristics of the device.  e.g., time properties, size, material, etc.
 * Static or essentially fixed characteristics or features of the device (e.g., time or timing attributes, resolution, accuracy, intended use or instructions for use, and physical attributes) that are not otherwise captured in more specific attributes.
 * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific [DeviceMetric] and recorded using [Observation].  Static characteristics of a device could also be documented in an associated [DeviceDefinition] instance. The Device instance's properties, and their values, could be, but need not be, the same as those described in an associated DeviceDefinition.
 */
export interface DeviceProperty extends BackboneElement {
    /**
     * Code that specifies the property being represented
     * Code that specifies the property, such as resolution, color, size, being represented.
     */
    type: CodeableConcept;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueQuantity?: Quantity;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueRange?: Range;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
     */
    valueAttachment?: Attachment;
}
/**
 * Item used in healthcare
 * A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
 */
export interface Device extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Device';
    /**
     * Instance identifier
     * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
     * Certain attributes, like serial number and UDI Carrier (the HRF or AIDC barcode string) are not device instance identifiers as they are not consistently able to uniquely identify the instance of a device, thus are not appropriate to be used to value Device.identifier. The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used. The identifier is typically valued if the serialNumber or lotNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
     */
    identifier?: Identifier[];
    /**
     * The name used to display by default when the device is referenced
     * The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.name, or may be another simple name.
     */
    displayName?: string;
    /**
     * Extension for displayName
     **/
    _displayName?: Element;
    /**
     * The reference to the definition for the device
     * The reference to the definition for the device.
     */
    definition?: CodeableReference;
    /**
     * Unique Device Identifier (UDI) Barcode string
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
     */
    udiCarrier?: DeviceUdiCarrier[];
    /**
     * lost | damaged | destroyed | available
     * The availability of the device.
     */
    availabilityStatus?: CodeableConcept;
    /**
     * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled
     * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
     * Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
     */
    biologicalSourceEvent?: Identifier;
    /**
     * Name of device manufacturer
     * A name of the manufacturer or entity legally responsible for the device.
     */
    manufacturer?: string;
    /**
     * Extension for manufacturer
     **/
    _manufacturer?: Element;
    /**
     * Date when the device was made
     * The date and time when the device was manufactured.
     */
    manufactureDate?: dateTime;
    /**
     * Extension for manufactureDate
     **/
    _manufactureDate?: Element;
    /**
     * Date and time of expiry of this device (if applicable)
     * The date and time beyond which this device is no longer valid or should not be used (if applicable).
     */
    expirationDate?: dateTime;
    /**
     * Extension for expirationDate
     **/
    _expirationDate?: Element;
    /**
     * Lot number of manufacture
     * Lot number assigned by the manufacturer.
     */
    lotNumber?: string;
    /**
     * Extension for lotNumber
     **/
    _lotNumber?: Element;
    /**
     * Serial number assigned by the manufacturer
     * The serial number assigned by the organization when the device was manufactured.
     * Alphanumeric Maximum 20. While a serial number is a type of identifier, in the context of devices for which a UDI is required, thus a serial number may be part of the production identifier, it is more informative to have the serial number as a dedicated attribute together with the other UDI production identifier.  When the device is not subject to including the UDI (e.g., its presence and exchange is not mandated by local regulatory requirements or specific use case at hand), thus the concept of production identifiers is not relevant as a set, it remains helpful for consistency to still use Device.serialNumber rather than using Device.identifier with an appropriate type.  Systems that do not realize an identifier is a serial number may place it in Device.identifier or if the identifier.system is known for the serial number, it may also be populated in the Device.identifier as a globally unique id_.
     */
    serialNumber?: string;
    /**
     * Extension for serialNumber
     **/
    _serialNumber?: Element;
    /**
     * The name or names of the device as known to the manufacturer and/or patient
     * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
     */
    name?: DeviceName[];
    /**
     * The manufacturer's model number for the device
     * The manufacturer's model number for the device.
     */
    modelNumber?: string;
    /**
     * Extension for modelNumber
     **/
    _modelNumber?: Element;
    /**
     * The part number or catalog number of the device
     * The part number or catalog number of the device.
     * Alphanumeric Maximum 20.
     */
    partNumber?: string;
    /**
     * Extension for partNumber
     **/
    _partNumber?: Element;
    /**
     * Indicates a high-level grouping of the device
     * Devices may be associated with one or more categories.
     */
    category?: CodeableConcept[];
    /**
     * The kind or type of device
     * The kind or type of device. A device instance may have more than one type - in which case those are the types that apply to the specific instance of the device.
     * Multiple device types are use when a device is categorized in more than one context – for example, hybrid devices in which the device is both of type gateway and sensor.
     */
    type?: CodeableConcept[];
    /**
     * The actual design of the device or software version running on the device
     * The actual design of the device or software version running on the device.
     */
    version?: DeviceVersion[];
    /**
     * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
     * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
     */
    conformsTo?: DeviceConformsTo[];
    /**
     * Inherent, essentially fixed, characteristics of the device.  e.g., time properties, size, material, etc.
     * Static or essentially fixed characteristics or features of the device (e.g., time or timing attributes, resolution, accuracy, intended use or instructions for use, and physical attributes) that are not otherwise captured in more specific attributes.
     * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific [DeviceMetric] and recorded using [Observation].  Static characteristics of a device could also be documented in an associated [DeviceDefinition] instance. The Device instance's properties, and their values, could be, but need not be, the same as those described in an associated DeviceDefinition.
     */
    property?: DeviceProperty[];
    /**
     * The designated condition for performing a task
     * The designated condition for performing a task with the device.
     */
    mode?: CodeableConcept;
    /**
     * The series of occurrences that repeats during the operation of the device
     * The series of occurrences that repeats during the operation of the device.
     */
    cycle?: Count;
    /**
     * A measurement of time during the device's operation (e.g., days, hours, mins, etc.)
     * A measurement of time during the device's operation (e.g., days, hours, mins, etc.).
     */
    duration?: Duration;
    /**
     * Organization responsible for device
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    owner?: Reference;
    /**
     * Details for human/organization for support
     * Contact details for an organization or a particular human that is responsible for the device.
     * used for troubleshooting etc.
     */
    contact?: ContactPoint[];
    /**
     * Where the device is found
     * The place where the device can be found.
     */
    location?: Reference;
    /**
     * Network address to contact device
     * A network address on which the device may be contacted directly.
     * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Technical endpoints providing access to electronic services provided by the device
     * Technical endpoints providing access to services provided by the device defined at this resource.
     */
    endpoint?: Reference[];
    /**
     * Linked device acting as a communication/data collector, translator or controller
     * The linked device acting as a communication controller, data collector, translator, or concentrator for the current device (e.g., mobile phone application that relays a blood pressure device's data).
     * The Device.gateway may be used when the Device being referenced has a gateway and/or to capture one or more gateways associated with the device. If the Gateway is included in the Observation resource, the Observation.gatewayDevice should be used instead.
     */
    gateway?: CodeableReference[];
    /**
     * Device notes and comments
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Annotation[];
    /**
     * Safety Characteristics of Device
     * Provides additional safety characteristics about a medical device.  For example devices containing latex.
     */
    safety?: CodeableConcept[];
    /**
     * The higher level or encompassing device that this device is a logical part of
     * The higher level or encompassing device that this device is a logical part of.
     * For example a vital signs monitor (parent) where three separate modules can be plugged into such as interchangeable blood pressure, oximeter, temperature modules.  These modules are represented as devices with the .parent valued to the vital signs monitor when plugged in.
     */
    parent?: Reference;
    /**
     * active | inactive | entered-in-error
     * The Device record status. This is not the status of the device like availability.
     */
    status?: DeviceFHIRDeviceStatus;
}
/**
 * The details about the device when it is in use to describe its operation
 * The details about the device when it is in use to describe its operation.
 */
export interface DeviceAssociationOperation extends BackboneElement {
    /**
     * Device operational condition
     * Device operational condition corresponding to the association.
     */
    status: CodeableConcept;
    /**
     * The individual performing the action enabled by the device
     * The individual performing the action enabled by the device.
     */
    operator?: Reference[];
    /**
     * Begin and end dates and times for the device's operation
     * Begin and end dates and times for the device's operation.
     */
    period?: Period;
}
/**
 * A record of association or dissociation of a device with a patient
 * A record of association or dissociation of a device with a patient.
 */
export interface DeviceAssociation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DeviceAssociation';
    /**
     * Instance identifier
     * Instance identifier.
     */
    identifier?: Identifier[];
    /**
     * Reference to the devices associated with the patient or group
     * Reference to the devices associated with the patient or group.
     */
    device: Reference;
    /**
     * Describes the relationship between the device and subject
     * Describes the relationship between the device and subject.
     */
    category?: CodeableConcept[];
    /**
     * implanted | explanted | attached | entered-in-error | unknown
     * Indicates the state of the Device association.
     */
    status: CodeableConcept;
    /**
     * The reasons given for the current association status
     * The reasons given for the current association status.
     */
    statusReason?: CodeableConcept[];
    /**
     * The individual, group of individuals or device that the device is on or associated with
     * The individual, group of individuals or device that the device is on or associated with.
     */
    subject?: Reference;
    /**
     * Current anatomical location of the device in/on subject
     * Current anatomical location of the device in/on subject.
     */
    bodyStructure?: Reference;
    /**
     * Begin and end dates and times for the device association
     * Begin and end dates and times for the device association.
     */
    period?: Period;
    /**
     * The details about the device when it is in use to describe its operation
     * The details about the device when it is in use to describe its operation.
     */
    operation?: DeviceAssociationOperation[];
}
/**
 * Indicates whether and when the device is available on the market
 * Indicates where and when the device is available on the market.
 */
export interface DeviceDefinitionUdiDeviceIdentifierMarketDistribution extends BackboneElement {
    /**
     * Begin and end dates for the commercial distribution of the device
     * Begin and end dates for the commercial distribution of the device.
     */
    marketPeriod: Period;
    /**
     * National state or territory where the device is commercialized
     * National state or territory to which the marketDistribution recers, typically where the device is commercialized.
     */
    subJurisdiction: uri;
    /**
     * Extension for subJurisdiction
     **/
    _subJurisdiction?: Element;
}
/**
 * Unique Device Identifier (UDI) Barcode string
 * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
 */
export interface DeviceDefinitionUdiDeviceIdentifier extends BackboneElement {
    /**
     * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier
     * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.
     */
    deviceIdentifier: string;
    /**
     * Extension for deviceIdentifier
     **/
    _deviceIdentifier?: Element;
    /**
     * The organization that assigns the identifier algorithm
     * The organization that assigns the identifier algorithm.
     */
    issuer: uri;
    /**
     * Extension for issuer
     **/
    _issuer?: Element;
    /**
     * The jurisdiction to which the deviceIdentifier applies
     * The jurisdiction to which the deviceIdentifier applies.
     */
    jurisdiction: uri;
    /**
     * Extension for jurisdiction
     **/
    _jurisdiction?: Element;
    /**
     * Indicates whether and when the device is available on the market
     * Indicates where and when the device is available on the market.
     */
    marketDistribution?: DeviceDefinitionUdiDeviceIdentifierMarketDistribution[];
}
/**
 * Regulatory identifier(s) associated with this device
 * Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe.
 * This should not be used for regulatory authorization numbers which are to be captured elsewhere.
 */
export interface DeviceDefinitionRegulatoryIdentifier extends BackboneElement {
    /**
     * The identifier itself
     * The identifier itself.
     */
    deviceIdentifier: string;
    /**
     * Extension for deviceIdentifier
     **/
    _deviceIdentifier?: Element;
    /**
     * The organization that issued this identifier
     * The organization that issued this identifier.
     */
    issuer: uri;
    /**
     * Extension for issuer
     **/
    _issuer?: Element;
    /**
     * The jurisdiction to which the deviceIdentifier applies
     * The jurisdiction to which the deviceIdentifier applies.
     */
    jurisdiction: uri;
    /**
     * Extension for jurisdiction
     **/
    _jurisdiction?: Element;
    /**
     * basic | master | license
     * The type of identifier itself.
     */
    type: DeviceDefinitionDeviceRegulatoryIdentifierType;
}
/**
 * The name or names of the device as given by the manufacturer
 * The name or names of the device as given by the manufacturer.
 */
export interface DeviceDefinitionDeviceName extends BackboneElement {
    /**
     * A name that is used to refer to the device
     * A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * registered-name | user-friendly-name | patient-reported-name
     * The type of deviceName.
RegisteredName | UserFriendlyName | PatientReportedName.
     */
    type: DeviceDefinitionDeviceNameType;
}
/**
 * What kind of device or device system this is
 * What kind of device or device system this is.
 * In this element various classifications can be used, such as GMDN, EMDN, SNOMED CT, risk classes, national product codes.
 */
export interface DeviceDefinitionClassification extends BackboneElement {
    /**
     * A classification or risk class of the device model
     * A classification or risk class of the device model.
     */
    type: CodeableConcept;
    /**
     * Further information qualifying this classification of the device model
     * Further information qualifying this classification of the device model.
     */
    justification?: RelatedArtifact[];
}
/**
 * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
 * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
 */
export interface DeviceDefinitionConformsTo extends BackboneElement {
    /**
     * Describes the common type of the standard, specification, or formal guidance
     * Describes the type of the standard, specification, or formal guidance.
     */
    category?: CodeableConcept;
    /**
     * Identifies the standard, specification, or formal guidance that the device adheres to the Device Specification type
     * Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
     */
    specification: CodeableConcept;
    /**
     * The specific form or variant of the standard, specification or formal guidance
     * Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
     */
    version?: string[];
    /**
     * Extension for version
     **/
    _version?: Element[];
    /**
     * Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance
     * Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance.
     */
    source?: RelatedArtifact[];
}
/**
 * A device, part of the current one
 * A device that is part (for example a component) of the present device.
 */
export interface DeviceDefinitionHasPart extends BackboneElement {
    /**
     * Reference to the part
     * Reference to the device that is part of the current device.
     */
    reference: Reference;
    /**
     * Number of occurrences of the part
     * Number of instances of the component device in the current device.
     */
    count?: integer;
    /**
     * Extension for count
     **/
    _count?: Element;
}
/**
 * An organization that distributes the packaged device
 * An organization that distributes the packaged device.
 */
export interface DeviceDefinitionPackagingDistributor extends BackboneElement {
    /**
     * Distributor's human-readable name
     * Distributor's human-readable name.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Distributor as an Organization resource
     * Distributor as an Organization resource.
     */
    organizationReference?: Reference[];
}
/**
 * Information about the packaging of the device, i.e. how the device is packaged
 * Information about the packaging of the device, i.e. how the device is packaged.
 */
export interface DeviceDefinitionPackaging extends BackboneElement {
    /**
     * Business identifier of the packaged medication
     * The business identifier of the packaged medication.
     */
    identifier?: Identifier;
    /**
     * A code that defines the specific type of packaging
     * A code that defines the specific type of packaging.
     */
    type?: CodeableConcept;
    /**
     * The number of items contained in the package (devices or sub-packages)
     * The number of items contained in the package (devices or sub-packages).
     */
    count?: integer;
    /**
     * Extension for count
     **/
    _count?: Element;
    /**
     * An organization that distributes the packaged device
     * An organization that distributes the packaged device.
     */
    distributor?: DeviceDefinitionPackagingDistributor[];
    /**
     * Unique Device Identifier (UDI) Barcode string on the packaging
     * Unique Device Identifier (UDI) Barcode string on the packaging.
     */
    udiDeviceIdentifier?: DeviceDefinitionUdiDeviceIdentifier[];
    /**
     * Allows packages within packages
     * Allows packages within packages.
     */
    packaging?: DeviceDefinitionPackaging[];
}
/**
 * The version of the device or software
 * The version of the device or software.
 */
export interface DeviceDefinitionVersion extends BackboneElement {
    /**
     * The type of the device version, e.g. manufacturer, approved, internal
     * The type of the device version, e.g. manufacturer, approved, internal.
     */
    type?: CodeableConcept;
    /**
     * The hardware or software module of the device to which the version applies
     * The hardware or software module of the device to which the version applies.
     * Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
     */
    component?: Identifier;
    /**
     * The version text
     * The version text.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Inherent, essentially fixed, characteristics of this kind of device, e.g., time properties, size, etc
 * Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes.
 * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific DeviceMetric and recorded using Observation.  Static characteristics of an individual device could also be documented in a [Device] instance. The Device instance's properties, and their values, could be, but need not be, the same as in the associated DeviceDefinition.
 */
export interface DeviceDefinitionProperty extends BackboneElement {
    /**
     * Code that specifies the property being represented
     * Code that specifies the property such as a resolution or color being represented.
     */
    type: CodeableConcept;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueQuantity?: Quantity;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueRange?: Range;
    /**
     * Value of the property
     * The value of the property specified by the associated property.type code.
     * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
     */
    valueAttachment?: Attachment;
}
/**
 * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device
 * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
 */
export interface DeviceDefinitionLink extends BackboneElement {
    /**
     * The type indicates the relationship of the related device to the device instance
     * The type indicates the relationship of the related device to the device instance.
     */
    relation: Coding;
    /**
     * A reference to the linked device
     * A reference to the linked device.
     */
    relatedDevice: CodeableReference;
}
/**
 * A substance used to create the material(s) of which the device is made
 * A substance used to create the material(s) of which the device is made.
 */
export interface DeviceDefinitionMaterial extends BackboneElement {
    /**
     * A relevant substance that the device contains, may contain, or is made of
     * A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
     */
    substance: CodeableConcept;
    /**
     * Indicates an alternative material of the device
     * Indicates an alternative material of the device.
     */
    alternate?: boolean;
    /**
     * Extension for alternate
     **/
    _alternate?: Element;
    /**
     * Whether the substance is a known or suspected allergen
     * Whether the substance is a known or suspected allergen.
     */
    allergenicIndicator?: boolean;
    /**
     * Extension for allergenicIndicator
     **/
    _allergenicIndicator?: Element;
}
/**
 * Information aimed at providing directions for the usage of this model of device
 * Information aimed at providing directions for the usage of this model of device.
 * For more structured data, a ClinicalUseDefinition that points to the DeviceDefinition can be used.
 */
export interface DeviceDefinitionGuideline extends BackboneElement {
    /**
     * The circumstances that form the setting for using the device
     * The circumstances that form the setting for using the device.
     */
    useContext?: UsageContext[];
    /**
     * Detailed written and visual directions for the user on how to use the device
     * Detailed written and visual directions for the user on how to use the device.
     */
    usageInstruction?: markdown;
    /**
     * Extension for usageInstruction
     **/
    _usageInstruction?: Element;
    /**
     * A source of information or reference for this guideline
     * A source of information or reference for this guideline.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * A clinical condition for which the device was designed to be used
     * A clinical condition for which the device was designed to be used.
     * A ClinicalUseDefinition that points to the DeviceDefinition can be used if more structured data is needed.
     */
    indication?: CodeableConcept[];
    /**
     * A specific situation when a device should not be used because it may cause harm
     * A specific situation when a device should not be used because it may cause harm.
     * A ClinicalUseDefinition that points to the DeviceDefinition can be used if more structured data is needed.
     */
    contraindication?: CodeableConcept[];
    /**
     * Specific hazard alert information that a user needs to know before using the device
     * Specific hazard alert information that a user needs to know before using the device.
     * A ClinicalUseDefinition that points to the DeviceDefinition can be used if more structured data is needed.
     */
    warning?: CodeableConcept[];
    /**
     * A description of the general purpose or medical use of the device or its function
     * A description of the general purpose or medical use of the device or its function.
     */
    intendedUse?: string;
    /**
     * Extension for intendedUse
     **/
    _intendedUse?: Element;
}
/**
 * Tracking of latest field safety corrective action
 * Tracking of latest field safety corrective action.
 */
export interface DeviceDefinitionCorrectiveAction extends BackboneElement {
    /**
     * Whether the corrective action was a recall
     * Whether the last corrective action known for this device was a recall.
     * When a field safety action has been initiated but not yet resulted in a recall, this element will be set to 'false'.
     */
    recall: boolean;
    /**
     * Extension for recall
     **/
    _recall?: Element;
    /**
     * Start and end dates of the  corrective action
     * Start and end dates of the  corrective action.
     */
    period: Period;
    /**
     * model | lot-numbers | serial-numbers
     * The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.
     */
    scope?: DeviceDefinitionDeviceCorrectiveActionScope;
}
/**
 * Billing code or reference associated with the device
 * Billing code or reference associated with the device.
 */
export interface DeviceDefinitionChargeItem extends BackboneElement {
    /**
     * The code or reference for the charge item
     * The code or reference for the charge item.
     */
    chargeItemCode: CodeableReference;
    /**
     * Coefficient applicable to the billing code
     * Coefficient applicable to the billing code.
     */
    count: Quantity;
    /**
     * A specific time period in which this charge item applies
     * A specific time period in which this charge item applies.
     */
    effectivePeriod?: Period;
    /**
     * The context to which this charge item applies
     * The context to which this charge item applies.
     */
    useContext?: UsageContext[];
}
/**
 * An instance of a medical-related component of a medical device
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 * For the initial scope, this DeviceDefinition resource is only applicable to describe a single node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard and that does not represent a metric. Examples for such a node are MDS, VMD, or Channel.
 */
export interface DeviceDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DeviceDefinition';
    /**
     * Additional information to describe the device
     * Additional information to describe the device.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Instance identifier
     * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
     */
    identifier?: Identifier[];
    /**
     * Unique Device Identifier (UDI) Barcode string
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    udiDeviceIdentifier?: DeviceDefinitionUdiDeviceIdentifier[];
    /**
     * Regulatory identifier(s) associated with this device
     * Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe.
     * This should not be used for regulatory authorization numbers which are to be captured elsewhere.
     */
    regulatoryIdentifier?: DeviceDefinitionRegulatoryIdentifier[];
    /**
     * The part number or catalog number of the device
     * The part number or catalog number of the device.
     * Alphanumeric Maximum 20.
     */
    partNumber?: string;
    /**
     * Extension for partNumber
     **/
    _partNumber?: Element;
    /**
     * Name of device manufacturer
     * A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
     */
    manufacturer?: Reference;
    /**
     * The name or names of the device as given by the manufacturer
     * The name or names of the device as given by the manufacturer.
     */
    deviceName?: DeviceDefinitionDeviceName[];
    /**
     * The catalog or model number for the device for example as defined by the manufacturer
     * The model number for the device for example as defined by the manufacturer or labeler, or other agency.
     */
    modelNumber?: string;
    /**
     * Extension for modelNumber
     **/
    _modelNumber?: Element;
    /**
     * What kind of device or device system this is
     * What kind of device or device system this is.
     * In this element various classifications can be used, such as GMDN, EMDN, SNOMED CT, risk classes, national product codes.
     */
    classification?: DeviceDefinitionClassification[];
    /**
     * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
     * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
     */
    conformsTo?: DeviceDefinitionConformsTo[];
    /**
     * A device, part of the current one
     * A device that is part (for example a component) of the present device.
     */
    hasPart?: DeviceDefinitionHasPart[];
    /**
     * Information about the packaging of the device, i.e. how the device is packaged
     * Information about the packaging of the device, i.e. how the device is packaged.
     */
    packaging?: DeviceDefinitionPackaging[];
    /**
     * The version of the device or software
     * The version of the device or software.
     */
    version?: DeviceDefinitionVersion[];
    /**
     * Safety characteristics of the device
     * Safety characteristics of the device.
     */
    safety?: CodeableConcept[];
    /**
     * Shelf Life and storage information
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * Language code for the human-readable text strings produced by the device (all supported)
     * Language code for the human-readable text strings produced by the device (all supported).
     */
    languageCode?: CodeableConcept[];
    /**
     * Inherent, essentially fixed, characteristics of this kind of device, e.g., time properties, size, etc
     * Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes.
     * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific DeviceMetric and recorded using Observation.  Static characteristics of an individual device could also be documented in a [Device] instance. The Device instance's properties, and their values, could be, but need not be, the same as in the associated DeviceDefinition.
     */
    property?: DeviceDefinitionProperty[];
    /**
     * Organization responsible for device
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    owner?: Reference;
    /**
     * Details for human/organization for support
     * Contact details for an organization or a particular human that is responsible for the device.
     * used for troubleshooting etc.
     */
    contact?: ContactPoint[];
    /**
     * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device
     * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
     */
    link?: DeviceDefinitionLink[];
    /**
     * Device notes and comments
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Annotation[];
    /**
     * A substance used to create the material(s) of which the device is made
     * A substance used to create the material(s) of which the device is made.
     */
    material?: DeviceDefinitionMaterial[];
    /**
     * Information aimed at providing directions for the usage of this model of device
     * Information aimed at providing directions for the usage of this model of device.
     * For more structured data, a ClinicalUseDefinition that points to the DeviceDefinition can be used.
     */
    guideline?: DeviceDefinitionGuideline;
    /**
     * Tracking of latest field safety corrective action
     * Tracking of latest field safety corrective action.
     */
    correctiveAction?: DeviceDefinitionCorrectiveAction;
    /**
     * Billing code or reference associated with the device
     * Billing code or reference associated with the device.
     */
    chargeItem?: DeviceDefinitionChargeItem[];
    /**
     * lot-number | manufactured-date | serial-number | expiration-date | biological-source | software-version
     * Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
     */
    productionIdentifierInUDI?: DeviceDefinitionDeviceProductionIdentifierInUDI[];
}
/**
 * Who performed event
 * Indicates who or what performed the event.
 */
export interface DeviceDispensePerformer extends BackboneElement {
    /**
     * Who performed the dispense and what they did
     * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
     */
    function?: CodeableConcept;
    /**
     * Individual who was performing
     * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the device.
     */
    actor: Reference;
}
/**
 * A record of dispensation of a device
 * A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use.
 */
export interface DeviceDispense extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DeviceDispense';
    /**
     * Business identifier for this dispensation
     * Business identifier for this dispensation.
     * This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * The order or request that this dispense is fulfilling
     * The order or request that this dispense is fulfilling.
     */
    basedOn?: Reference[];
    /**
     * The bigger event that this dispense is a part of
     * The bigger event that this dispense is a part of.
     */
    partOf?: Reference[];
    /**
     * Why a dispense was or was not performed
     * Indicates the reason why a dispense was or was not performed.
     */
    statusReason?: CodeableReference;
    /**
     * Type of device dispense
     * Indicates the type of device dispense.
     * The category can be used to include where the device is expected to be consumed or other types of dispenses.  Invariants can be used to bind to different value sets when profiling to bind.
     */
    category?: CodeableConcept[];
    /**
     * What device was supplied
     * Identifies the device being dispensed. This is either a link to a resource representing the details of the device or a simple attribute carrying a code that identifies the device from a known list of devices.
     */
    device: CodeableReference;
    /**
     * Who the dispense is for
     * A link to a resource representing the person to whom the device is intended.
     * What about 'this measuring Device is now asigned to Dr X who needs it now'?
     */
    subject: Reference;
    /**
     * Who collected the device or where the medication was delivered
     * Identifies the person who picked up the device or the person or location where the device was delivered.  This may be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
     */
    receiver?: Reference;
    /**
     * Encounter associated with event
     * The encounter that establishes the context for this event.
     */
    encounter?: Reference;
    /**
     * Information that supports the dispensing of the device
     * Additional information that supports the device being dispensed.
     */
    supportingInformation?: Reference[];
    /**
     * Who performed event
     * Indicates who or what performed the event.
     */
    performer?: DeviceDispensePerformer[];
    /**
     * Where the dispense occurred
     * The principal physical location where the dispense was performed.
     */
    location?: Reference;
    /**
     * Trial fill, partial fill, emergency fill, etc
     * Indicates the type of dispensing event that is performed.
     */
    type?: CodeableConcept;
    /**
     * Amount dispensed
     * The number of devices that have been dispensed.
     */
    quantity?: Quantity;
    /**
     * When product was packaged and reviewed
     * The time when the dispensed product was packaged and reviewed.
     */
    preparedDate?: dateTime;
    /**
     * Extension for preparedDate
     **/
    _preparedDate?: Element;
    /**
     * When product was given out
     * The time the dispensed product was made available to the patient or their representative.
     */
    whenHandedOver?: dateTime;
    /**
     * Extension for whenHandedOver
     **/
    _whenHandedOver?: Element;
    /**
     * Where the device was sent or should be sent
     * Identification of the facility/location where the device was /should be shipped to, as part of the dispense process.
     */
    destination?: Reference;
    /**
     * Information about the dispense
     * Extra information about the dispense that could not be conveyed in the other attributes.
     */
    note?: Annotation[];
    /**
     * Full representation of the usage instructions
     * The full representation of the instructions.
     * The content of the renderedDosageInstructions must not be different than the dose represented in the dosageInstruction content.
     */
    usageInstruction?: markdown;
    /**
     * Extension for usageInstruction
     **/
    _usageInstruction?: Element;
    /**
     * A list of relevant lifecycle events
     * A summary of the events of interest that have occurred, such as when the dispense was verified.
     * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
     */
    eventHistory?: Reference[];
    /**
     * preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown
     * A code specifying the state of the set of dispense events.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: DeviceDispenseStatus;
}
/**
 * Describes the calibrations that have been performed or that are required to be performed
 * Describes the calibrations that have been performed or that are required to be performed.
 */
export interface DeviceMetricCalibration extends BackboneElement {
    /**
     * Describes the time last calibration has been performed
     * Describes the time last calibration has been performed.
     */
    time?: instant;
    /**
     * Extension for time
     **/
    _time?: Element;
    /**
     * unspecified | offset | gain | two-point
     * Describes the type of the calibration method.
     */
    type?: DeviceMetricCalibrationType;
    /**
     * not-calibrated | calibration-required | calibrated | unspecified
     * Describes the state of the calibration.
     */
    state?: DeviceMetricCalibrationState;
}
/**
 * Measurement, calculation or setting capability of a medical device
 * Describes a measurement, calculation or setting capability of a device.
 * The DeviceMetric resource is derived from the ISO/IEEE 11073-10201 Domain Information Model standard, but is more widely applicable.
 */
export interface DeviceMetric extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DeviceMetric';
    /**
     * Instance identifier
     * Instance identifiers assigned to a device, by the device or gateway software, manufacturers, other organizations or owners. For example, handle ID.
     * For identifiers assigned to a device by the device or gateway software, the `system` element of the identifier should be set to any identifier of the device.
     */
    identifier?: Identifier[];
    /**
     * Identity of metric, for example Heart Rate or PEEP Setting
     * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
     * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
     */
    type: CodeableConcept;
    /**
     * Unit of Measure for the Metric
     * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
     * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
     */
    unit?: CodeableConcept;
    /**
     * Describes the link to the Device
     * Describes the link to the Device.  This is also known as a channel device.
     * Note if this is not the top level device - also know as the source device, it may be referenced in the device.parent element.
     */
    device: Reference;
    /**
     * Color name (from CSS4) or #RRGGBB code
     * The preferred color associated with the metric (e.g., display color). This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth; the metrics are displayed in different characteristic colors, such as HR in blue, BP in green, and PR and SpO2 in magenta.
     */
    color?: code;
    /**
     * Extension for color
     **/
    _color?: Element;
    /**
     * Indicates how often the metric is taken or recorded
     * The frequency at which the metric is taken or recorded. Devices measure metrics at a wide range of frequencies; for example, an ECG might sample measurements in the millisecond range, while an NIBP might trigger only once an hour. Less often, the measurementFrequency may be based on a unit other than time, such as distance (e.g. for a measuring wheel). The update period may be different than the measurement frequency, if the device does not update the published observed value with the same frequency as it was measured.
     */
    measurementFrequency?: Quantity;
    /**
     * Describes the calibrations that have been performed or that are required to be performed
     * Describes the calibrations that have been performed or that are required to be performed.
     */
    calibration?: DeviceMetricCalibration[];
    /**
     * on | off | standby | entered-in-error
     * Indicates current operational state of the device. For example: On, Off, Standby, etc.
     */
    operationalStatus?: DeviceMetricOperationalStatus;
    /**
     * measurement | setting | calculation | unspecified
     * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
     */
    category: DeviceMetricCategory;
}
/**
 * Device details
 * Specific parameters for the ordered item.  For example, the prism value for lenses.
 */
export interface DeviceRequestParameter extends BackboneElement {
    /**
     * Device detail
     * A code or string that identifies the device detail being asserted.
     */
    code?: CodeableConcept;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueQuantity?: Quantity;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueRange?: Range;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
}
/**
 * Medical device request
 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
 */
export interface DeviceRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DeviceRequest';
    /**
     * External Request identifier
     * Identifiers assigned to this order by the orderer or by the receiver.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * What request fulfills
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * What request replaces
     * The request takes the place of the referenced completed or terminated request(s).
     */
    replaces?: Reference[];
    /**
     * Identifier of composite request
     * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
     */
    groupIdentifier?: Identifier;
    /**
     * True if the request is to stop or not to start using the device
     * If true, indicates that the provider is asking for the patient to either stop using or to not start using the specified device or category of devices. For example, the patient has undergone surgery and the provider is indicating that the patient should not wear contact lenses.
     * If do not perform is not specified, the request is a positive request e.g. "do perform". DeviceRequest.reasonCode includes the reason for marking the DeviceRequest as 'do not perform'.
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * Device requested
     * The details of the device to be used.
     */
    code: CodeableReference;
    /**
     * Quantity of devices to supply
     * The number of devices to be provided.
     */
    quantity?: integer;
    /**
     * Extension for quantity
     **/
    _quantity?: Element;
    /**
     * Device details
     * Specific parameters for the ordered item.  For example, the prism value for lenses.
     */
    parameter?: DeviceRequestParameter[];
    /**
     * Focus of request
     * The patient who will use the device.
     */
    subject: Reference;
    /**
     * Encounter motivating request
     * An encounter that provides additional context in which this request is made.
     */
    encounter?: Reference;
    /**
     * Desired time or schedule for use
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * Desired time or schedule for use
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrencePeriod?: Period;
    /**
     * Desired time or schedule for use
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceTiming?: Timing;
    /**
     * When recorded
     * When the request transitioned to being actionable.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Who/what submitted the device request
     * The individual or entity who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * Requested Filler
     * The desired individual or entity to provide the device to the subject of the request (e.g., patient, location).
     */
    performer?: CodeableReference;
    /**
     * Coded/Linked Reason for request
     * Reason or justification for the use of this device.
     */
    reason?: CodeableReference[];
    /**
     * PRN status of request
     * This status is to indicate whether the request is a PRN or may be given as needed.
     */
    asNeeded?: boolean;
    /**
     * Extension for asNeeded
     **/
    _asNeeded?: Element;
    /**
     * Device usage reason
     * The reason for using the device.
     */
    asNeededFor?: CodeableConcept;
    /**
     * Associated insurance coverage
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Additional clinical information
     * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
     */
    supportingInfo?: Reference[];
    /**
     * Notes or comments
     * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    note?: Annotation[];
    /**
     * Request provenance
     * Key events in the history of the request.
     * This might not include provenances for all versions of the request - only those deemed "relevant" or important.
This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a "relevant" change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
All Provenances should have some historical version of this Request as their subject.
     */
    relevantHistory?: Reference[];
    /**
     * draft | active | on-hold | revoked | completed | entered-in-error | unknown
     * The status of the request.
     * This element is labeled as a modifier because the status contains the codes revoked and entered-in-error that mark the request as not currently valid.
     */
    status?: DeviceRequestStatus;
    /**
     * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
     * Whether the request is a proposal, plan, an original order or a reflex order.
     */
    intent: DeviceRequestRequestIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the request should be addressed with respect to other requests.
     */
    priority?: DeviceRequestRequestPriority;
}
/**
 * How device is being used
 * This indicates how or if the device is being used.
 */
export interface DeviceUsageAdherence extends BackboneElement {
    /**
     * always | never | sometimes
     * Type of adherence.
     */
    code: CodeableConcept;
    /**
     * lost | stolen | prescribed | broken | burned | forgot
     * Reason for adherence type.
     */
    reason: CodeableConcept[];
}
/**
 * Record of use of a device
 * A record of a device being used by a patient where the record is the result of a report from the patient or a clinician.
 */
export interface DeviceUsage extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DeviceUsage';
    /**
     * External identifier for this record
     * An external identifier for this statement such as an IRI.
     */
    identifier?: Identifier[];
    /**
     * Fulfills plan, proposal or order
     * A plan, proposal or order that is fulfilled in whole or in part by this DeviceUsage.
     */
    basedOn?: Reference[];
    /**
     * The category of the statement - classifying how the statement is made
     * This attribute indicates a category for the statement - The device statement may be made in an inpatient or outpatient settting (inpatient | outpatient | community | patientspecified).
     */
    category?: CodeableConcept[];
    /**
     * Patient using device
     * The patient who used the device.
     */
    patient: Reference;
    /**
     * Supporting information
     * Allows linking the DeviceUsage to the underlying Request, or to other information that supports or is used to derive the DeviceUsage.
     * The most common use cases for deriving a DeviceUsage comes from creating it from a request or from an observation or a claim. it should be noted that the amount of information that is available varies from the type resource that you derive the DeviceUsage from.
     */
    derivedFrom?: Reference[];
    /**
     * The encounter or episode of care that establishes the context for this device use statement
     * The encounter or episode of care that establishes the context for this device use statement.
     */
    context?: Reference;
    /**
     * How often  the device was used
     * How often the device was used.
     */
    timingTiming?: Timing;
    /**
     * How often  the device was used
     * How often the device was used.
     */
    timingPeriod?: Period;
    /**
     * How often  the device was used
     * How often the device was used.
     */
    timingDateTime?: dateTime;
    /**
     * Extension for timingDateTime
     **/
    _timingDateTime?: Element;
    /**
     * When the statement was made (and recorded)
     * The time at which the statement was recorded by informationSource.
     */
    dateAsserted?: dateTime;
    /**
     * Extension for dateAsserted
     **/
    _dateAsserted?: Element;
    /**
     * The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement
     * The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement.
     */
    usageStatus?: CodeableConcept;
    /**
     * The reason for asserting the usage status - for example forgot, lost, stolen, broken
     * The reason for asserting the usage status - for example forgot, lost, stolen, broken.
     */
    usageReason?: CodeableConcept[];
    /**
     * How device is being used
     * This indicates how or if the device is being used.
     */
    adherence?: DeviceUsageAdherence;
    /**
     * Who made the statement
     * Who reported the device was being used by the patient.
     */
    informationSource?: Reference;
    /**
     * Code or Reference to device used
     * Code or Reference to device used.
     */
    device: CodeableReference;
    /**
     * Why device was used
     * Reason or justification for the use of the device. A coded concept, or another resource whose existence justifies this DeviceUsage.
     * When the status is not done, the reason code indicates why it was not done.
     */
    reason?: CodeableReference[];
    /**
     * Target body site
     * Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
     */
    bodySite?: CodeableReference;
    /**
     * Addition details (comments, instructions)
     * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
     */
    note?: Annotation[];
    /**
     * active | completed | not-done | entered-in-error +
     * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
     * DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).

This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
     */
    status: DeviceUsageStatus;
}
/**
 * Additional information supporting the diagnostic report
 * This backbone element contains supporting information that was used in the creation of the report not included in the results already included in the report.
 */
export interface DiagnosticReportSupportingInfo extends BackboneElement {
    /**
     * Supporting information role code
     * The code value for the role of the supporting information in the diagnostic report.
     */
    type: CodeableConcept;
    /**
     * Supporting information reference
     * The reference for the supporting information in the diagnostic report.
     */
    reference: Reference;
}
/**
 * Key images or data associated with this report
 * A list of key images or data associated with this report. The images or data are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
 */
export interface DiagnosticReportMedia extends BackboneElement {
    /**
     * Comment about the image or data (e.g. explanation)
     * A comment about the image or data. Typically, this is used to provide an explanation for why the image or data is included, or to draw the viewer's attention to important features.
     * The comment should be displayed with the image or data. It would be common for the report to include additional discussion of the image or data contents or in other sections such as the conclusion.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * Reference to the image or data source
     * Reference to the image or data source.
     */
    link: Reference;
}
/**
 * A Diagnostic report - a combination of request information, atomic results, images, interpretation, as well as formatted reports
 * The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.
 * This is intended to capture a single report and is not suitable for use in displaying summary information that covers multiple reports.  For example, this resource has not been designed for laboratory cumulative reporting formats nor detailed structured reports for sequencing.
 */
export interface DiagnosticReport extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DiagnosticReport';
    /**
     * Business identifier for report
     * Identifiers assigned to this report by the performer or other systems.
     * Usually assigned by the Information System of the diagnostic service provider (filler id).
     */
    identifier?: Identifier[];
    /**
     * What was requested
     * Details concerning a service requested.
     * Note: Usually there is one test request for each result, however in some circumstances multiple test requests may be represented using a single test result resource. Note that there are also cases where one request leads to multiple reports.
     */
    basedOn?: Reference[];
    /**
     * Service category
     * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
     * Multiple categories are allowed using various categorization schemes.   The level of granularity is defined by the category concepts in the value set. More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in DiagnosticReport.code.
     */
    category?: CodeableConcept[];
    /**
     * Name/Code for this diagnostic report
     * A code or name that describes this diagnostic report.
     */
    code: CodeableConcept;
    /**
     * The subject of the report - usually, but not always, the patient
     * The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
     */
    subject?: Reference;
    /**
     * Health care event when test ordered
     * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.
     * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter  but still be tied to the context of the encounter  (e.g. pre-admission laboratory tests).
     */
    encounter?: Reference;
    /**
     * Clinically relevant time/time-period for report
     * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
     */
    effectiveDateTime?: dateTime;
    /**
     * Extension for effectiveDateTime
     **/
    _effectiveDateTime?: Element;
    /**
     * Clinically relevant time/time-period for report
     * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
     */
    effectivePeriod?: Period;
    /**
     * DateTime this version was made
     * The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.
     * May be different from the update time of the resource itself, because that is the status of the record (potentially a secondary copy), not the actual release time of the report.
     */
    issued?: instant;
    /**
     * Extension for issued
     **/
    _issued?: Element;
    /**
     * Responsible Diagnostic Service
     * The diagnostic service that is responsible for issuing the report.
     * This is not necessarily the source of the atomic data items or the entity that interpreted the results. It is the entity that takes responsibility for the clinical report.
     */
    performer?: Reference[];
    /**
     * Primary result interpreter
     * The practitioner or organization that is responsible for the report's conclusions and interpretations.
     * Might not be the same entity that takes responsibility for the clinical report.
     */
    resultsInterpreter?: Reference[];
    /**
     * Specimens this report is based on
     * Details about the specimens on which this diagnostic report is based.
     * If the specimen is sufficiently specified with a code in the test result name, then this additional data may be redundant. If there are multiple specimens, these may be represented per observation or group.
     */
    specimen?: Reference[];
    /**
     * Observations
     * [Observations](observation.html)  that are part of this diagnostic report.
     * Observations can contain observations.
     */
    result?: Reference[];
    /**
     * Comments about the diagnostic report
     * Comments about the diagnostic report.
     * May include general statements about the diagnostic report, or statements about significant, unexpected or unreliable results values contained within the diagnostic report, or information about its source when relevant to its interpretation.
     */
    note?: Annotation[];
    /**
     * Reference to full details of an analysis associated with the diagnostic report
     * One or more links to full details of any study performed during the diagnostic investigation. An ImagingStudy might comprise a set of radiologic images obtained via a procedure that are analyzed as a group. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images. A GenomicStudy might comprise one or more analyses, each serving a specific purpose. These analyses may vary in method (e.g., karyotyping, CNV, or SNV detection), performer, software, devices used, or regions targeted.
     * For laboratory-type studies like GenomeStudy, type resources will be used for tracking additional metadata and workflow aspects of complex studies. ImagingStudy and the media element are somewhat overlapping - typically, the list of image references in the media element will also be found in one of the imaging study resources. However, each caters to different types of displays for different types of purposes. Neither, either, or both may be provided.
     */
    study?: Reference[];
    /**
     * Additional information supporting the diagnostic report
     * This backbone element contains supporting information that was used in the creation of the report not included in the results already included in the report.
     */
    supportingInfo?: DiagnosticReportSupportingInfo[];
    /**
     * Key images or data associated with this report
     * A list of key images or data associated with this report. The images or data are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
     */
    media?: DiagnosticReportMedia[];
    /**
     * Reference to a Composition resource for the DiagnosticReport structure
     * Reference to a Composition resource instance that provides structure for organizing the contents of the DiagnosticReport.
     * The Composition provides structure to the content of the DiagnosticReport (and only contains contents referenced in the DiagnosticReport) - e.g., to order the sections of an anatomic pathology structured report.
     */
    composition?: Reference;
    /**
     * Clinical conclusion (interpretation) of test results
     * Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
     */
    conclusion?: markdown;
    /**
     * Extension for conclusion
     **/
    _conclusion?: Element;
    /**
     * Codes for the clinical conclusion of test results
     * One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
     */
    conclusionCode?: CodeableConcept[];
    /**
     * Entire report as issued
     * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
     * "application/pdf" is recommended as the most reliable and interoperable in this context.
     */
    presentedForm?: Attachment[];
    /**
     * registered | partial | preliminary | modified | final | amended | corrected | appended | cancelled | entered-in-error | unknown
     * The status of the diagnostic report.
     */
    status: DiagnosticReportStatus;
}
/**
 * Attests to accuracy of the document
 * A participant who has authenticated the accuracy of the document.
 * Only list each attester once.
 */
export interface DocumentReferenceAttester extends BackboneElement {
    /**
     * personal | professional | legal | official
     * The type of attestation the authenticator offers.
     */
    mode: CodeableConcept;
    /**
     * When the document was attested
     * When the document was attested by the party.
     */
    time?: dateTime;
    /**
     * Extension for time
     **/
    _time?: Element;
    /**
     * Who attested the document
     * Who attested the document in the specified way.
     */
    party?: Reference;
}
/**
 * Relationships to other documents
 * Relationships that this document has with other document references that already exist.
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
    /**
     * The relationship type with another document
     * The type of relationship that this document has with anther document.
     * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
     */
    code: CodeableConcept;
    /**
     * Target of the relationship
     * The target document of this relationship.
     */
    target: Reference;
}
/**
 * Content profile rules for the document
 * An identifier of the document constraints, encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
 * Note that IHE often issues URNs for formatCode codes, not all documents can be identified by a URI.

For FHIR content, .profile should indicate the structureDefinition profile canonical URI(s) that the content complies with.
 */
export interface DocumentReferenceContentProfile extends BackboneElement {
    /**
     * Code|uri|canonical
     * Code|uri|canonical.
     */
    valueCoding?: Coding;
    /**
     * Code|uri|canonical
     * Code|uri|canonical.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Code|uri|canonical
     * Code|uri|canonical.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
}
/**
 * Document referenced
 * The document and format referenced.  If there are multiple content element repetitions, these must all represent the same document in different format, or attachment metadata.
 * content element shall not contain different versions of the same content. For version handling use multiple DocumentReference with .relatesTo.
 */
export interface DocumentReferenceContent extends BackboneElement {
    /**
     * Where to access the document
     * The document or URL of the document along with critical metadata to prove content has integrity.
     */
    attachment: Attachment;
    /**
     * Content profile rules for the document
     * An identifier of the document constraints, encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
     * Note that IHE often issues URNs for formatCode codes, not all documents can be identified by a URI.

For FHIR content, .profile should indicate the structureDefinition profile canonical URI(s) that the content complies with.
     */
    profile?: DocumentReferenceContentProfile[];
}
/**
 * A reference to a document
 * A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this "document" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.
 * Usually, this is used for documents other than those defined by FHIR.
 */
export interface DocumentReference extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'DocumentReference';
    /**
     * Business identifiers for the document
     * Other business identifiers associated with the document, including version independent identifiers.
     * The structure and format of this identifier would be consistent with the specification corresponding to the format of the document. (e.g. for a DICOM standard document, a 64-character numeric UID; for an HL7 CDA format, the CDA Document Id root and extension).
     */
    identifier?: Identifier[];
    /**
     * An explicitly assigned identifer of a variation of the content in the DocumentReference
     * An explicitly assigned identifer of a variation of the content in the DocumentReference.
     * While each resource, including the DocumentReference itself, has its own version identifier, this is a formal identifier for the logical version of the DocumentReference as a whole. It would remain constant if the resources were moved to a new server, and all got new individual resource versions, for example.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Procedure that caused this media to be created
     * A procedure that is fulfilled in whole or in part by the creation of this media.
     */
    basedOn?: Reference[];
    /**
     * Imaging modality used
     * Imaging modality used. This may include both acquisition and non-acquisition modalities.
     */
    modality?: CodeableConcept[];
    /**
     * Kind of document (LOINC if possible)
     * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
     * Key metadata element describing the document that describes he exact type of document. Helps humans to assess whether the document is of interest when viewing a list of documents.
     */
    type?: CodeableConcept;
    /**
     * Categorization of document
     * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
     * Key metadata element describing the the category or classification of the document. This is a broader perspective that groups similar documents based on how they would be used. This is a primary key used in searching.
     */
    category?: CodeableConcept[];
    /**
     * Who/what is the subject of the document
     * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
     */
    subject?: Reference;
    /**
     * Context of the document content
     * Describes the clinical encounter or type of care that the document content is associated with.
     */
    context?: Reference[];
    /**
     * Main clinical acts documented
     * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
     * An event can further specialize the act inherent in the type, such as  where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more event codes are included, they shall not conflict with the values inherent in the class or type elements as such a conflict would create an ambiguous situation.
     */
    event?: CodeableReference[];
    /**
     * Body part included
     * The anatomic structures included in the document.
     */
    bodySite?: CodeableReference[];
    /**
     * Kind of facility where patient was seen
     * The kind of facility where the patient was seen.
     */
    facilityType?: CodeableConcept;
    /**
     * Additional details about where the content was created (e.g. clinical specialty)
     * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
     * This element should be based on a coarse classification system for the class of specialty practice. Recommend the use of the classification system for Practice Setting, such as that described by the Subject Matter Domain in LOINC.
     */
    practiceSetting?: CodeableConcept;
    /**
     * Time of service that is being documented
     * The time period over which the service that is described by the document was provided.
     */
    period?: Period;
    /**
     * When this document reference was created
     * When the document reference was created.
     * Referencing/indexing time is used for tracking, organizing versions and searching.
     */
    date?: instant;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who and/or what authored the document
     * Identifies who is responsible for adding the information to the document.
     * Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
     */
    author?: Reference[];
    /**
     * Attests to accuracy of the document
     * A participant who has authenticated the accuracy of the document.
     * Only list each attester once.
     */
    attester?: DocumentReferenceAttester[];
    /**
     * Organization which maintains the document
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
     * Identifies the logical organization (software system, vendor, or department) to go to find the current version, where to report issues, etc. This is different from the physical location (URL, disk drive, or server) of the document, which is the technical location of the document, which host may be delegated to the management of some other organization.
     */
    custodian?: Reference;
    /**
     * Relationships to other documents
     * Relationships that this document has with other document references that already exist.
     * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
     */
    relatesTo?: DocumentReferenceRelatesTo[];
    /**
     * Human-readable description
     * Human-readable description of the source document.
     * What the document is about,  a terse summary of the document.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Document security-tags
     * A set of Security-Tag codes specifying the level of privacy/security of the Document found at DocumentReference.content.attachment.url. Note that DocumentReference.meta.security contains the security labels of the data elements in DocumentReference, while DocumentReference.securityLabel contains the security labels for the document the reference refers to. The distinction recognizes that the document may contain sensitive information, while the DocumentReference is metadata about the document and thus might not be as sensitive as the document. For example: a psychotherapy episode may contain highly sensitive information, while the metadata may simply indicate that some episode happened.
     * The confidentiality codes can carry multiple vocabulary items. HL7 has developed an understanding of security and privacy tags that might be desirable in a Document Sharing environment, called HL7 Healthcare Privacy and Security Classification System (HCS). The following specification is recommended but not mandated, as the vocabulary bindings are an administrative domain responsibility. The use of this method is up to the policy domain such as the XDS Affinity Domain or other Trust Domain where all parties including sender and recipients are trusted to appropriately tag and enforce.

In the HL7 Healthcare Privacy and Security Classification (HCS) there are code systems specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some values would come from a local vocabulary as they are related to workflow roles and special projects.
     */
    securityLabel?: CodeableConcept[];
    /**
     * Document referenced
     * The document and format referenced.  If there are multiple content element repetitions, these must all represent the same document in different format, or attachment metadata.
     * content element shall not contain different versions of the same content. For version handling use multiple DocumentReference with .relatesTo.
     */
    content: DocumentReferenceContent[];
    /**
     * current | superseded | entered-in-error
     * The status of this document reference.
     * This is the status of the DocumentReference object, which might be independent from the docStatus element.

This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
     */
    status: DocumentReferenceStatus;
    /**
     * registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
     * The status of the underlying document.
     * The document that is pointed to might be in various lifecycle states.
     */
    docStatus?: DocumentReferenceReferredDocumentStatus;
}
/**
 * A resource with narrative, extensions, and contained resources
 * A resource that includes narrative, extensions, and contained resources.
 */
export interface DomainResource extends Resource {
    /**
     * Text summary of the resource, for human interpretation
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     * Contained resources do not have a narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
     */
    text?: Narrative;
    /**
     * Contained, inline Resources
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     * This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags in their meta elements, but SHALL NOT have security labels.
     */
    contained?: Resource[];
    /**
     * Additional content defined by implementations
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
     */
    extension?: Extension[];
    /**
     * Extensions that cannot be ignored
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
     */
    modifierExtension?: Extension[];
}
/**
 * List of participants involved in the encounter
 * The list of people responsible for providing the service.
 * Any Patient or Group present in the participation.actor must also be the subject, though the subject may be absent from the participation.actor for cases where the patient (or group) is not present, such as during a case review conference.
 */
export interface EncounterParticipant extends BackboneElement {
    /**
     * Role of participant in encounter
     * Role of participant in encounter.
     * The participant type indicates how an individual actor participates in an encounter. It includes non-practitioner participants, and for practitioners this is to describe the action type in the context of this encounter (e.g. Admitting Dr, Attending Dr, Translator, Consulting Dr). This is different to the practitioner roles which are functional roles, derived from terms of employment, education, licensing, etc.
     */
    type?: CodeableConcept[];
    /**
     * Period of time during the encounter that the participant participated
     * The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
     */
    period?: Period;
    /**
     * The individual, device, or service participating in the encounter
     * Person involved in the encounter, the patient/group is also included here to indicate that the patient was actually participating in the encounter. Not including the patient here covers use cases such as a case meeting between practitioners about a patient - non contact times.
     * For planning purposes, Appointments may include a CareTeam participant to indicate that one specific person from the CareTeam will be assigned, but that assignment might not happen until the Encounter begins. Hence CareTeam is not included in Encounter.participant, as the specific individual should be assigned and represented as a Practitioner or other person resource.

Similarly, Location can be included in Appointment.participant to assist with planning.  However, the patient location is tracked on the Encounter in the Encounter.location property to allow for additional metadata and history to be recorded.

The role of the participant can be used to declare what the actor will be doing in the scope of this encounter participation.

If the individual is not specified during planning, then it is expected that the individual will be filled in at a later stage prior to the encounter commencing.
     */
    actor?: Reference;
}
/**
 * The list of medical reasons that are expected to be addressed during the episode of care
 * The list of medical reasons that are expected to be addressed during the episode of care.
 * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.

Examples:
 * pregnancy would use HealthcareService or a coding as the reason
 * patient home monitoring could use Condition as the reason
 */
export interface EncounterReason extends BackboneElement {
    /**
     * What the reason value should be used for/as
     * What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).
     */
    use?: CodeableConcept[];
    /**
     * Reason the encounter takes place (core or reference)
     * Reason the encounter takes place, expressed as a code or a reference to another resource. For admissions, this can be used for a coded admission diagnosis.
     */
    value?: CodeableReference[];
}
/**
 * The list of diagnosis relevant to this encounter
 * The list of diagnosis relevant to this encounter.
 * Also note that for the purpose of billing, the diagnoses are recorded in the account where they can be ranked appropriately for how the invoicing/claiming documentation needs to be prepared.
 */
export interface EncounterDiagnosis extends BackboneElement {
    /**
     * The diagnosis relevant to the encounter
     * The coded diagnosis or a reference to a Condition (with other resources referenced in the evidence.detail), the use property will indicate the purpose of this specific diagnosis.
     */
    condition?: CodeableReference[];
    /**
     * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …)
     * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
     */
    use?: CodeableConcept[];
}
/**
 * Details about the admission to a healthcare service
 * Details about the stay during which a healthcare service is provided.

This does not describe the event of admitting the patient, but rather any information that is relevant from the time of admittance until the time of discharge.
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.

The duration recorded in the period of this encounter covers the entire scope of this admission record.
 */
export interface EncounterAdmission extends BackboneElement {
    /**
     * Pre-admission identifier
     * Pre-admission identifier.
     */
    preAdmissionIdentifier?: Identifier;
    /**
     * The location/organization from which the patient came before admission
     * The location/organization from which the patient came before admission.
     */
    origin?: Reference;
    /**
     * From where patient was admitted (physician referral, transfer)
     * From where patient was admitted (physician referral, transfer).
     */
    admitSource?: CodeableConcept;
    /**
     * Indicates that the patient is being re-admitted
     * Indicates that this encounter is directly related to a prior admission, often because the conditions addressed in the prior admission were not fully addressed.
     */
    reAdmission?: CodeableConcept;
    /**
     * Location/organization to which the patient is discharged
     * Location/organization to which the patient is discharged.
     */
    destination?: Reference;
    /**
     * Category or kind of location after discharge
     * Category or kind of location after discharge.
     */
    dischargeDisposition?: CodeableConcept;
}
/**
 * List of locations where the patient has been
 * List of locations where  the patient has been during this encounter.
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export interface EncounterLocation extends BackboneElement {
    /**
     * Location the encounter takes place
     * The location where the encounter takes place.
     */
    location: Reference;
    /**
     * The physical type of the location (usually the level in the location hierarchy - bed, room, ward, virtual etc.)
     * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
     * This information is de-normalized from the Location resource to support the easier understanding of the encounter resource and processing in messaging or query.

There may be many levels in the hierachy, and this may only pic specific levels that are required for a specific usage scenario.
     */
    form?: CodeableConcept;
    /**
     * Time period during which the patient was present at the location
     * Time period during which the patient was present at the location.
     */
    period?: Period;
    /**
     * planned | active | reserved | completed
     * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
     * When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
     */
    status?: EncounterLocationStatus;
}
/**
 * An interaction during which services are provided to the patient
 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.
 */
export interface Encounter extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Encounter';
    /**
     * Identifier(s) by which this encounter is known
     * Identifier(s) by which this encounter is known.
     */
    identifier?: Identifier[];
    /**
     * Classification of patient encounter context - e.g. Inpatient, outpatient
     * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
     */
    class?: CodeableConcept[];
    /**
     * Indicates the urgency of the encounter
     * Indicates the urgency of the encounter.
     */
    priority?: CodeableConcept;
    /**
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care, ...)
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
     * Since there are many ways to further classify encounters, this element is 0..*.
     */
    type?: CodeableConcept[];
    /**
     * Specific type of service
     * Broad categorization of the service that is to be provided (e.g. cardiology).
     */
    serviceType?: CodeableReference[];
    /**
     * The patient or group related to this encounter
     * The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.
     * While the encounter is always about the patient, the patient might not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
     */
    subject?: Reference;
    /**
     * The current status of the subject in relation to the Encounter
     * The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
     * Different use-cases are likely to have different permitted transitions between states, such as an Emergency department could use `arrived` when the patient first presents, then `triaged` once has been assessed by a nurse, then `receiving-care` once treatment begins, however other sectors may use a different set of these values, or their own custom set in place of this example valueset provided.
     */
    subjectStatus?: CodeableConcept;
    /**
     * Episode(s) of care that this encounter should be recorded against
     * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
     */
    episodeOfCare?: Reference[];
    /**
     * The request that initiated this encounter
     * The request this encounter satisfies (e.g. incoming referral or procedure request).
     */
    basedOn?: Reference[];
    /**
     * The group(s) that are allocated to participate in this encounter
     * The group(s) of individuals, organizations that are allocated to participate in this encounter. The participants backbone will record the actuals of when these individuals participated during the encounter.
     */
    careTeam?: Reference[];
    /**
     * Another Encounter this encounter is part of
     * Another Encounter of which this encounter is a part of (administratively or in time).
     * This is also used for associating a child's encounter back to the mother's encounter.

Refer to the Notes section in the Patient resource for further details.
     */
    partOf?: Reference;
    /**
     * The organization (facility) responsible for this encounter
     * The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the colonoscopy example on the Encounter examples tab.
     */
    serviceProvider?: Reference;
    /**
     * List of participants involved in the encounter
     * The list of people responsible for providing the service.
     * Any Patient or Group present in the participation.actor must also be the subject, though the subject may be absent from the participation.actor for cases where the patient (or group) is not present, such as during a case review conference.
     */
    participant?: EncounterParticipant[];
    /**
     * The appointment that scheduled this encounter
     * The appointment that scheduled this encounter.
     */
    appointment?: Reference[];
    /**
     * Connection details of a virtual service (e.g. conference call)
     * Connection details of a virtual service (e.g. conference call).
     * There are two types of virtual meetings that often exist:

* a persistent, virtual meeting room that can only be used for a single purpose at a time,
* and a dynamic virtual meeting room that is generated on demand for a specific purpose.

Implementers may consider using Location.virtualService for persistent meeting rooms.

If each participant would have a different meeting link, an extension using the VirtualServiceContactDetail  can be applied to the Encounter.participant BackboneElement.
     */
    virtualService?: VirtualServiceDetail[];
    /**
     * The actual start and end time of the encounter
     * The actual start and end time of the encounter.
     * If not (yet) known, the end of the Period may be omitted.
     */
    actualPeriod?: Period;
    /**
     * The planned start date/time (or admission date) of the encounter
     * The planned start date/time (or admission date) of the encounter.
     */
    plannedStartDate?: dateTime;
    /**
     * Extension for plannedStartDate
     **/
    _plannedStartDate?: Element;
    /**
     * The planned end date/time (or discharge date) of the encounter
     * The planned end date/time (or discharge date) of the encounter.
     */
    plannedEndDate?: dateTime;
    /**
     * Extension for plannedEndDate
     **/
    _plannedEndDate?: Element;
    /**
     * Actual quantity of time the encounter lasted (less time absent)
     * Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.

When missing it is the time in between the start and end values.
     * If the precision on these values is low (e.g. to the day only) then this may be considered was an all day (or multi-day) encounter, unless the duration is included, where that amount of time occurred sometime during the interval.

May differ from the time in `Encounter.period` due to leave of absence(s).
     */
    length?: Duration;
    /**
     * The list of medical reasons that are expected to be addressed during the episode of care
     * The list of medical reasons that are expected to be addressed during the episode of care.
     * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.

Examples:
 * pregnancy would use HealthcareService or a coding as the reason
 * patient home monitoring could use Condition as the reason
     */
    reason?: EncounterReason[];
    /**
     * The list of diagnosis relevant to this encounter
     * The list of diagnosis relevant to this encounter.
     * Also note that for the purpose of billing, the diagnoses are recorded in the account where they can be ranked appropriately for how the invoicing/claiming documentation needs to be prepared.
     */
    diagnosis?: EncounterDiagnosis[];
    /**
     * The set of accounts that may be used for billing for this Encounter
     * The set of accounts that may be used for billing for this Encounter.
     * The billing system may choose to allocate billable items associated with the Encounter to different referenced Accounts based on internal business rules.
     */
    account?: Reference[];
    /**
     * Diet preferences reported by the patient
     * Diet preferences reported by the patient.
     * For example, a patient may request both a dairy-free and nut-free diet preference (not mutually exclusive).
     */
    dietPreference?: CodeableConcept[];
    /**
     * Wheelchair, translator, stretcher, etc
     * Any special requests that have been made for this encounter, such as the provision of specific equipment or other things.
     */
    specialArrangement?: CodeableConcept[];
    /**
     * Special courtesies (VIP, board member)
     * Special courtesies that may be provided to the patient during the encounter (VIP, board member, professional courtesy).
     * Although the specialCourtesy property can contain values like VIP, the purpose of this field is intended to be used for flagging additional `benefits` that might occur for the patient during the encounter.

It could include things like the patient is to have a private room, special room features, receive a friendly visit from hospital adminisitration, or should be briefed on treatment by senior staff during the stay.

It is not specifically intended to be used for securing the specific record - that is the purpose of the security meta tag, and where appropriate, both fields could be used.
     */
    specialCourtesy?: CodeableConcept[];
    /**
     * Details about the admission to a healthcare service
     * Details about the stay during which a healthcare service is provided.

This does not describe the event of admitting the patient, but rather any information that is relevant from the time of admittance until the time of discharge.
     * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.

The duration recorded in the period of this encounter covers the entire scope of this admission record.
     */
    admission?: EncounterAdmission;
    /**
     * List of locations where the patient has been
     * List of locations where  the patient has been during this encounter.
     * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
     */
    location?: EncounterLocation[];
    /**
     * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown
     * The current state of the encounter (not the state of the patient within the encounter - that is subjectState).
     * Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
     */
    status: EncounterStatus;
}
/**
 * Location of the patient at this point in the encounter
 * The location of the patient at this point in the encounter, the multiple cardinality permits de-normalizing the levels of the location hierarchy, such as site/ward/room/bed.
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export interface EncounterHistoryLocation extends BackboneElement {
    /**
     * Location the encounter takes place
     * The location where the encounter takes place.
     */
    location: Reference;
    /**
     * The physical type of the location (usually the level in the location hierarchy - bed, room, ward, virtual etc.)
     * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
     * This information is de-normalized from the Location resource to support the easier understanding of the encounter resource and processing in messaging or query.

There may be many levels in the hierachy, and this may only pic specific levels that are required for a specific usage scenario.
     */
    form?: CodeableConcept;
}
/**
 * A record of significant events/milestones key data throughout the history of an Encounter
 * A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing.
 */
export interface EncounterHistory extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EncounterHistory';
    /**
     * The Encounter associated with this set of historic values
     * The Encounter associated with this set of historic values.
     * This is also used for associating a child's encounter back to the mother's encounter.

Refer to the Notes section in the Patient resource for further details.
     */
    encounter?: Reference;
    /**
     * Identifier(s) by which this encounter is known
     * Identifier(s) by which this encounter is known.
     */
    identifier?: Identifier[];
    /**
     * Classification of patient encounter
     * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
     */
    class: CodeableConcept;
    /**
     * Specific type of encounter
     * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
     * Since there are many ways to further classify encounters, this element is 0..*.
     */
    type?: CodeableConcept[];
    /**
     * Specific type of service
     * Broad categorization of the service that is to be provided (e.g. cardiology).
     */
    serviceType?: CodeableReference[];
    /**
     * The patient or group related to this encounter
     * The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.
     * While the encounter is always about the patient, the patient might not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
     */
    subject?: Reference;
    /**
     * The current status of the subject in relation to the Encounter
     * The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
     */
    subjectStatus?: CodeableConcept;
    /**
     * The actual start and end time associated with this set of values associated with the encounter
     * The start and end time associated with this set of values associated with the encounter, may be different to the planned times for various reasons.
     */
    actualPeriod?: Period;
    /**
     * The planned start date/time (or admission date) of the encounter
     * The planned start date/time (or admission date) of the encounter.
     */
    plannedStartDate?: dateTime;
    /**
     * Extension for plannedStartDate
     **/
    _plannedStartDate?: Element;
    /**
     * The planned end date/time (or discharge date) of the encounter
     * The planned end date/time (or discharge date) of the encounter.
     */
    plannedEndDate?: dateTime;
    /**
     * Extension for plannedEndDate
     **/
    _plannedEndDate?: Element;
    /**
     * Actual quantity of time the encounter lasted (less time absent)
     * Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.

When missing it is the time in between the start and end values.
     * If the precision on these values is low (e.g. to the day only) then this may be considered was an all day (or multi-day) encounter, unless the duration is included, where that amount of time occurred sometime during the interval.

May differ from the time in `Encounter.period` due to leave of absence(s).
     */
    length?: Duration;
    /**
     * Location of the patient at this point in the encounter
     * The location of the patient at this point in the encounter, the multiple cardinality permits de-normalizing the levels of the location hierarchy, such as site/ward/room/bed.
     * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
     */
    location?: EncounterHistoryLocation[];
    /**
     * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown
     * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown.
     * Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
     */
    status: EncounterHistoryEncounterStatus;
}
/**
 * Set of payloads that are provided by this endpoint
 * The set of payloads that are provided/available at this endpoint.
 * Note that not all mimetypes or types will be listed under the one endpoint resource, there may be multiple instances that information for cases where other header data such as the endpoint address, active status/period etc. is different.
 */
export interface EndpointPayload extends BackboneElement {
    /**
     * The type of content that may be used at this endpoint (e.g. XDS Discharge summaries)
     * The payload type describes the acceptable content that can be communicated on the endpoint.
     * The mimeType describes the serialization format of the data, where the payload.type indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
     */
    type?: CodeableConcept[];
    /**
     * Mimetype to send. If not specified, the content could be anything (including no payload, if the connectionType defined this)
     * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
     * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
     */
    mimeType?: code[];
    /**
     * Extension for mimeType
     **/
    _mimeType?: Element[];
}
/**
 * The technical details of an endpoint that can be used for electronic services
 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information.
 */
export interface Endpoint extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Endpoint';
    /**
     * Identifies this endpoint across multiple systems
     * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * Protocol/Profile/Standard to be used with this endpoint connection
     * A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
     * For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example. If there are multiple payload types or mimetypes they are all applicable for all connection types, and all have the same status.
     */
    connectionType: CodeableConcept[];
    /**
     * A name that this endpoint can be identified by
     * A friendly name that this endpoint can be referred to with.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Additional details about the endpoint that could be displayed as further information to identify the description beyond its name
     * The description of the endpoint and what it is for (typically used as supplemental information in an endpoint directory describing its usage/purpose).
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The type of environment(s) exposed at this endpoint
     * The type of environment(s) exposed at this endpoint (dev, prod, test, etc.).
     */
    environmentType?: CodeableConcept[];
    /**
     * Organization that manages this endpoint (might not be the organization that exposes the endpoint)
     * The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).
     * This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an applicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
     */
    managingOrganization?: Reference;
    /**
     * Contact details for source (e.g. troubleshooting)
     * Contact details for a human to contact about the endpoint. The primary use of this for system administrator troubleshooting.
     */
    contact?: ContactPoint[];
    /**
     * Interval the endpoint is expected to be operational
     * The interval during which the endpoint is expected to be operational.
     * Temporary downtimes or other short-term changes in availability would not be represented in this property.
     */
    period?: Period;
    /**
     * Set of payloads that are provided by this endpoint
     * The set of payloads that are provided/available at this endpoint.
     * Note that not all mimetypes or types will be listed under the one endpoint resource, there may be multiple instances that information for cases where other header data such as the endpoint address, active status/period etc. is different.
     */
    payload?: EndpointPayload[];
    /**
     * The technical base address for connecting to this endpoint
     * The uri that describes the actual end-point to connect to.
     * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs)

This address will be to the service base, without any parameters, or sub-services or resources tacked on.

E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"

and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
     */
    address: url;
    /**
     * Extension for address
     **/
    _address?: Element;
    /**
     * Usage depends on the channel type
     * Additional headers / information to send as part of the notification.
     * Exactly what these mean depends on the channel type. The can convey additional information to the recipient and/or meet security requirements.
     */
    header?: string[];
    /**
     * Extension for header
     **/
    _header?: Element[];
    /**
     * active | suspended | error | off | entered-in-error | test
     * The endpoint status represents the general expected availability of an endpoint.
     * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid. Temporary downtimes or other unexpected short-term changes in availability would not be represented in this property.
     */
    status: EndpointStatus;
}
/**
 * Enroll in coverage
 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
 */
export interface EnrollmentRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EnrollmentRequest';
    /**
     * Business Identifier
     * The Response business identifier.
     */
    identifier?: Identifier[];
    /**
     * Creation date
     * The date when this resource was created.
     */
    created?: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Target
     * The Insurer who is target  of the request.
     */
    insurer?: Reference;
    /**
     * Responsible practitioner
     * The practitioner who is responsible for the services rendered to the patient.
     */
    provider?: Reference;
    /**
     * The subject to be enrolled
     * Patient Resource.
     */
    candidate?: Reference;
    /**
     * Insurance information
     * Reference to the program or plan identification, underwriter or payor.
     */
    coverage?: Reference;
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
     */
    status?: EnrollmentRequestStatus;
}
/**
 * EnrollmentResponse resource
 * This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
 */
export interface EnrollmentResponse extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EnrollmentResponse';
    /**
     * Business Identifier
     * The Response business identifier.
     */
    identifier?: Identifier[];
    /**
     * Claim reference
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * Disposition Message
     * A description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Extension for disposition
     **/
    _disposition?: Element;
    /**
     * Creation date
     * The date when the enclosed suite of services were performed or completed.
     */
    created?: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Insurer
     * The Insurer who produced this adjudicated response.
     */
    organization?: Reference;
    /**
     * Responsible practitioner
     * The practitioner who is responsible for the services rendered to the patient.
     */
    requestProvider?: Reference;
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
     */
    status?: EnrollmentResponseStatus;
    /**
     * queued | complete | error | partial
     * Processing status: error, complete.
     */
    outcome?: EnrollmentResponseEnrollmentOutcome;
}
/**
 * Past list of status codes (the current status may be included to cover the start date of the status)
 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
    /**
     * Duration the EpisodeOfCare was in the specified status
     * The period during this EpisodeOfCare that the specific status applied.
     */
    period: Period;
    /**
     * planned | waitlist | active | onhold | finished | cancelled | entered-in-error
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status: EpisodeOfCareStatus;
}
/**
 * The list of medical reasons that are expected to be addressed during the episode of care
 * The list of medical reasons that are expected to be addressed during the episode of care.
 * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.

Examples:
 * pregnancy would use HealthcareService or a coding as the reason
 * patient home monitoring could use Condition as the reason
 */
export interface EpisodeOfCareReason extends BackboneElement {
    /**
     * What the reason value should be used for/as
     * What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).
     */
    use?: CodeableConcept;
    /**
     * Medical reason to be addressed
     * The medical reason that is expected to be addressed during the episode of care, expressed as a text, code or a reference to another resource.
     */
    value?: CodeableReference[];
}
/**
 * The list of medical conditions that were addressed during the episode of care
 * The list of medical conditions that were addressed during the episode of care.
 * The diagnosis communicates what medical conditions were actually addressed during the episode of care.  If a diagnosis was provided as a reason, and was treated during the episode of care, it may be listed in both EpisodeOfCare.reason and EpisodeOfCare.diagnosis.

Diagnoses related to billing can be documented on the Account resources which supports ranking for the purpose of reimbursement.
 */
export interface EpisodeOfCareDiagnosis extends BackboneElement {
    /**
     * The medical condition that was addressed during the episode of care
     * The medical condition that was addressed during the episode of care, expressed as a text, code or a reference to another resource.
     */
    condition?: CodeableReference[];
    /**
     * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …)
     * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
     */
    use?: CodeableConcept;
}
/**
 * An association of a Patient with an Organization and  Healthcare Provider(s) for a period of time that the Organization assumes some level of responsibility
 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
 */
export interface EpisodeOfCare extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EpisodeOfCare';
    /**
     * Business Identifier(s) relevant for this EpisodeOfCare
     * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
     */
    identifier?: Identifier[];
    /**
     * Past list of status codes (the current status may be included to cover the start date of the status)
     * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
     */
    statusHistory?: EpisodeOfCareStatusHistory[];
    /**
     * Type/class  - e.g. specialist referral, disease management
     * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
     * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
     */
    type?: CodeableConcept[];
    /**
     * The list of medical reasons that are expected to be addressed during the episode of care
     * The list of medical reasons that are expected to be addressed during the episode of care.
     * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.

Examples:
 * pregnancy would use HealthcareService or a coding as the reason
 * patient home monitoring could use Condition as the reason
     */
    reason?: EpisodeOfCareReason[];
    /**
     * The list of medical conditions that were addressed during the episode of care
     * The list of medical conditions that were addressed during the episode of care.
     * The diagnosis communicates what medical conditions were actually addressed during the episode of care.  If a diagnosis was provided as a reason, and was treated during the episode of care, it may be listed in both EpisodeOfCare.reason and EpisodeOfCare.diagnosis.

Diagnoses related to billing can be documented on the Account resources which supports ranking for the purpose of reimbursement.
     */
    diagnosis?: EpisodeOfCareDiagnosis[];
    /**
     * The patient who is the focus of this episode of care
     * The patient who is the focus of this episode of care.
     */
    patient: Reference;
    /**
     * Organization that assumes responsibility for care coordination
     * The organization that has assumed the specific responsibilities for care coordination, care delivery, or other services for the specified duration.
     * If multiple organizations are involved in care delivery, the care teams from those organizations would be represented in EpisodeOfCare.team, while the primary organization managing the care would be listed in EpisodeOfCare.managingOrganization.   Other organizations may have their own EpisodeOfCare for tracking their activities.
     */
    managingOrganization?: Reference;
    /**
     * Interval during responsibility is assumed
     * The interval during which the managing organization assumes the defined responsibility.
     */
    period?: Period;
    /**
     * Originating Referral Request(s)
     * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
     */
    referralRequest?: Reference[];
    /**
     * Care manager/care coordinator for the patient
     * The practitioner that is the care manager/care coordinator for this patient.
     */
    careManager?: Reference;
    /**
     * Other practitioners facilitating this episode of care
     * The list of practitioners that may be facilitating this episode of care for specific purposes.
     */
    careTeam?: Reference[];
    /**
     * The set of accounts that may be used for billing for this EpisodeOfCare
     * The set of accounts that may be used for billing for this EpisodeOfCare.
     * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
     */
    account?: Reference[];
    /**
     * planned | waitlist | active | onhold | finished | cancelled | entered-in-error
     * planned | waitlist | active | onhold | finished | cancelled.
     * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
     */
    status: EpisodeOfCareStatus;
}
/**
 * A description of when an event can occur
 * The EventDefinition resource provides a reusable description of when a particular event can occur.
 */
export interface EventDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EventDefinition';
    /**
     * Canonical identifier for this event definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the event definition
     * A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this event definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the event definition
     * The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different event definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the event definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this event definition (computer friendly)
     * A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this event definition (human friendly)
     * A short, descriptive, user-friendly title for the event definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate title of the event definition
     * An explanatory or alternate title for the event definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of event definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Type of individual the event definition is focused on
     * A code or group definition that describes the intended subject of the event definition.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * Type of individual the event definition is focused on
     * A code or group definition that describes the intended subject of the event definition.
     */
    subjectReference?: Reference;
    /**
     * Date last changed
     * The date  (and optionally time) when the event definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the event definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the event definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the event definition is the organization or individual primarily responsible for the maintenance and upkeep of the event definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the event definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the event definition
     * A free text natural language description of the event definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the event definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the event definition is presumed to be the predominant language in the place the event definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for event definition (if applicable)
     * A legal or geographic region in which the event definition is intended to be used.
     * It may be possible for the event definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this event definition is defined
     * Explanation of why this event definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the event definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this event definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Describes the clinical usage of the event definition
     * A detailed description of how the event definition is used from a clinical perspective.
     */
    usage?: markdown;
    /**
     * Extension for usage
     **/
    _usage?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the event definition was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the event definition was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the event definition is expected to be used
     * The period during which the event definition content was or is planned to be in active use.
     * The effective period for an event definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a definition intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the content
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related resources such as additional documentation, justification, or bibliographic references.
     * Each related resource is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * "when" the event occurs (multiple = 'or')
     * The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.
     */
    trigger: TriggerDefinition[];
    /**
     * draft | active | retired | unknown
     * The status of this event definition. Enables tracking the life-cycle of the content.
     * Allows filtering of event definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: EventDefinitionPublicationStatus;
}
/**
 * Evidence variable such as population, exposure, or outcome
 * Evidence variable such as population, exposure, or outcome.
 */
export interface EvidenceVariableDefinition extends BackboneElement {
    /**
     * A text description or summary of the variable
     * A text description or summary of the variable.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Footnotes and/or explanatory notes
     * Footnotes and/or explanatory notes.
     */
    note?: Annotation[];
    /**
     * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder
     * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
     */
    variableRole: CodeableConcept;
    /**
     * Definition of the actual variable related to the statistic(s)
     * Definition of the actual variable related to the statistic(s).
     */
    observed?: Reference;
    /**
     * Definition of the intended variable related to the Evidence
     * Definition of the intended variable related to the Evidence.
     */
    intended?: Reference;
    /**
     * low | moderate | high | exact
     * Indication of quality of match between intended variable to actual variable.
     */
    directnessMatch?: CodeableConcept;
}
/**
 * Number of samples in the statistic
 * Number of samples in the statistic.
 */
export interface EvidenceStatisticSampleSize extends BackboneElement {
    /**
     * Textual description of sample size for statistic
     * Human-readable summary of population sample size.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Footnote or explanatory note about the sample size
     * Footnote or explanatory note about the sample size.
     */
    note?: Annotation[];
    /**
     * Number of contributing studies
     * Number of participants in the population.
     */
    numberOfStudies?: unsignedInt;
    /**
     * Extension for numberOfStudies
     **/
    _numberOfStudies?: Element;
    /**
     * Cumulative number of participants
     * A human-readable string to clarify or explain concepts about the sample size.
     */
    numberOfParticipants?: unsignedInt;
    /**
     * Extension for numberOfParticipants
     **/
    _numberOfParticipants?: Element;
    /**
     * Number of participants with known results for measured variables
     * Number of participants with known results for measured variables.
     */
    knownDataCount?: unsignedInt;
    /**
     * Extension for knownDataCount
     **/
    _knownDataCount?: Element;
}
/**
 * An attribute of the Statistic
 * A statistical attribute of the statistic such as a measure of heterogeneity.
 */
export interface EvidenceStatisticAttributeEstimate extends BackboneElement {
    /**
     * Textual description of the attribute estimate
     * Human-readable summary of the estimate.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Footnote or explanatory note about the estimate
     * Footnote or explanatory note about the estimate.
     */
    note?: Annotation[];
    /**
     * The type of attribute estimate, e.g., confidence interval or p value
     * The type of attribute estimate, e.g., confidence interval or p value.
     */
    type?: CodeableConcept;
    /**
     * The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure
     * The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.
     * Often the p value
     */
    quantity?: Quantity;
    /**
     * Level of confidence interval, e.g., 0.95 for 95% confidence interval
     * Use 95 for a 95% confidence interval.
     */
    level?: decimal;
    /**
     * Extension for level
     **/
    _level?: Element;
    /**
     * Lower and upper bound values of the attribute estimate
     * Lower bound of confidence interval.
     */
    range?: Range;
    /**
     * A nested attribute estimate; which is the attribute estimate of an attribute estimate
     * A nested attribute estimate; which is the attribute estimate of an attribute estimate.
     * A nested attribute estimate; which is the attribute estimate of an attribute estimate
     */
    attributeEstimate?: EvidenceStatisticAttributeEstimate[];
}
/**
 * A variable adjusted for in the adjusted analysis
 * A variable adjusted for in the adjusted analysis.
 */
export interface EvidenceStatisticModelCharacteristicVariable extends BackboneElement {
    /**
     * Description of the variable
     * Description of the variable.
     */
    variableDefinition: Reference;
    /**
     * Description for grouping of ordinal or polychotomous variables
     * Description for grouping of ordinal or polychotomous variables.
     */
    valueCategory?: CodeableConcept[];
    /**
     * Discrete value for grouping of ordinal or polychotomous variables
     * Discrete value for grouping of ordinal or polychotomous variables.
     */
    valueQuantity?: Quantity[];
    /**
     * Range of values for grouping of ordinal or polychotomous variables
     * Range of values for grouping of ordinal or polychotomous variables.
     */
    valueRange?: Range[];
    /**
     * continuous | dichotomous | ordinal | polychotomous
     * How the variable is classified for use in adjusted analysis.
     */
    handling?: EvidenceVariableHandling;
}
/**
 * An aspect of the statistical model
 * A component of the method to generate the statistic.
 */
export interface EvidenceStatisticModelCharacteristic extends BackboneElement {
    /**
     * Model specification
     * Description of a component of the method to generate the statistic.
     */
    code: CodeableConcept;
    /**
     * Numerical value to complete model specification
     * Further specification of the quantified value of the component of the method to generate the statistic.
     */
    value?: Quantity;
    /**
     * A variable adjusted for in the adjusted analysis
     * A variable adjusted for in the adjusted analysis.
     */
    variable?: EvidenceStatisticModelCharacteristicVariable[];
    /**
     * An attribute of the statistic used as a model characteristic
     * An attribute of the statistic used as a model characteristic.
     */
    attributeEstimate?: EvidenceStatisticAttributeEstimate[];
}
/**
 * Values and parameters for a single statistic
 * Values and parameters for a single statistic.
 */
export interface EvidenceStatistic extends BackboneElement {
    /**
     * Description of content
     * A description of the content value of the statistic.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Footnotes and/or explanatory notes
     * Footnotes and/or explanatory notes.
     */
    note?: Annotation[];
    /**
     * Type of statistic, e.g., relative risk
     * Type of statistic, e.g., relative risk.
     */
    statisticType?: CodeableConcept;
    /**
     * Associated category for categorical variable
     * When the measured variable is handled categorically, the category element is used to define which category the statistic is reporting.
     * Simple strings can be used for descriptive purposes. Exact matching to EvidenceVariable.category.name for the Evidence.variableDefinition[variableRole=measuredVariable].observed=Reference(EvidenceVariable) could facilitate validation within datasets.
     */
    category?: CodeableConcept;
    /**
     * Statistic value
     * Statistic value.
     */
    quantity?: Quantity;
    /**
     * The number of events associated with the statistic
     * The number of events associated with the statistic, where the unit of analysis is different from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants.
     * When the number of events is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberOfEvents to record the total number of events rather than the number of participants with events.
     */
    numberOfEvents?: unsignedInt;
    /**
     * Extension for numberOfEvents
     **/
    _numberOfEvents?: Element;
    /**
     * The number of participants affected
     * The number of participants affected where the unit of analysis is the same as sampleSize.knownDataCount and sampleSize.numberOfParticipants.
     * When the number affected is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is a Proportion, use Evidence.statistic.numberAffected and enter an integer as the value. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberAffected to record the number of participants with events rather than the total number of events.
     */
    numberAffected?: unsignedInt;
    /**
     * Extension for numberAffected
     **/
    _numberAffected?: Element;
    /**
     * Number of samples in the statistic
     * Number of samples in the statistic.
     */
    sampleSize?: EvidenceStatisticSampleSize;
    /**
     * An attribute of the Statistic
     * A statistical attribute of the statistic such as a measure of heterogeneity.
     */
    attributeEstimate?: EvidenceStatisticAttributeEstimate[];
    /**
     * An aspect of the statistical model
     * A component of the method to generate the statistic.
     */
    modelCharacteristic?: EvidenceStatisticModelCharacteristic[];
}
/**
 * Certainty or quality of the evidence
 * Assessment of certainty, confidence in the estimates, or quality of the evidence.
 */
export interface EvidenceCertainty extends BackboneElement {
    /**
     * Textual description of certainty
     * Textual description of certainty.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Footnotes and/or explanatory notes
     * Footnotes and/or explanatory notes.
     */
    note?: Annotation[];
    /**
     * Aspect of certainty being rated
     * Aspect of certainty being rated.
     */
    type?: CodeableConcept;
    /**
     * Assessment or judgement of the aspect
     * Assessment or judgement of the aspect.
     */
    rating?: CodeableConcept;
    /**
     * Individual or group who did the rating
     * Individual or group who did the rating.
     */
    rater?: string;
    /**
     * Extension for rater
     **/
    _rater?: Element;
    /**
     * A domain or subdomain of certainty
     * A domain or subdomain of certainty.
     */
    subcomponent?: EvidenceCertainty[];
}
/**
 * Single evidence bit
 * The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.
 */
export interface Evidence extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Evidence';
    /**
     * Canonical identifier for this evidence, represented as a globally unique URI
     * An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
     * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the summary
     * A formal identifier that is used to identify this summary when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of this summary
     * The identifier that is used to identify this version of the summary when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the summary author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this summary (machine friendly)
     * A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this summary (human friendly)
     * A short, descriptive, user-friendly title for the summary.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Citation for this evidence
     * Citation Resource or display of suggested citation for this evidence.
     */
    citeAsReference?: Reference;
    /**
     * Citation for this evidence
     * Citation Resource or display of suggested citation for this evidence.
     */
    citeAsMarkdown?: markdown;
    /**
     * Extension for citeAsMarkdown
     **/
    _citeAsMarkdown?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the summary was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the summary changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the summary. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * When the summary was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the summary was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the evidence.
     * Usually an organization but may be an individual. The publisher (or steward) of the evidence is the organization or individual primarily responsible for the maintenance and upkeep of the evidence. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Who authored the content
     * An individiual, organization, or device primarily involved in the creation and maintenance of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individiual, organization, or device primarily responsible for internal coherence of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individiual, organization, or device primarily responsible for review of some aspect of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individiual, organization, or device responsible for officially endorsing the content for use in some setting.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Why this Evidence is defined
     * Explanation of why this Evidence is needed and why it has been designed as it has.
     * This element does not describe the usage of the Evidence. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this Evidence.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the Evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Evidence.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Link or citation to artifact associated with the summary
     * Link or citation to artifact associated with the summary.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Description of the particular summary
     * A free text natural language description of the evidence from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence is presumed to be the predominant language in the place the evidence was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Declarative description of the Evidence
     * Declarative description of the Evidence.
     */
    assertion?: markdown;
    /**
     * Extension for assertion
     **/
    _assertion?: Element;
    /**
     * Footnotes and/or explanatory notes
     * Footnotes and/or explanatory notes.
     */
    note?: Annotation[];
    /**
     * Evidence variable such as population, exposure, or outcome
     * Evidence variable such as population, exposure, or outcome.
     */
    variableDefinition: EvidenceVariableDefinition[];
    /**
     * The method to combine studies
     * The method to combine studies.
     */
    synthesisType?: CodeableConcept;
    /**
     * The design of the study that produced this evidence
     * The design of the study that produced this evidence. The design is described with any number of study design characteristics.
     */
    studyDesign?: CodeableConcept[];
    /**
     * Values and parameters for a single statistic
     * Values and parameters for a single statistic.
     */
    statistic?: EvidenceStatistic[];
    /**
     * Certainty or quality of the evidence
     * Assessment of certainty, confidence in the estimates, or quality of the evidence.
     */
    certainty?: EvidenceCertainty[];
    /**
     * draft | active | retired | unknown
     * The status of this summary. Enables tracking the life-cycle of the content.
     * Allows filtering of summarys s that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: EvidencePublicationStatus;
}
/**
 * Characteristic
 * Characteristic.
 */
export interface EvidenceReportSubjectCharacteristic extends BackboneElement {
    /**
     * Characteristic code
     * Characteristic code.
     * Example 1 is a Citation. Example 2 is a type of outcome. Example 3 is a specific outcome.
     */
    code: CodeableConcept;
    /**
     * Characteristic value
     * Characteristic value.
     * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
     */
    valueReference?: Reference;
    /**
     * Characteristic value
     * Characteristic value.
     * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Characteristic value
     * Characteristic value.
     * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Characteristic value
     * Characteristic value.
     * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
     */
    valueQuantity?: Quantity;
    /**
     * Characteristic value
     * Characteristic value.
     * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
     */
    valueRange?: Range;
    /**
     * Is used to express not the characteristic
     * Is used to express not the characteristic.
     */
    exclude?: boolean;
    /**
     * Extension for exclude
     **/
    _exclude?: Element;
    /**
     * Timeframe for the characteristic
     * Timeframe for the characteristic.
     */
    period?: Period;
}
/**
 * Focus of the report
 * Specifies the subject or focus of the report. Answers "What is this report about?".
 * May be used as an expression for search queries and search results
 */
export interface EvidenceReportSubject extends BackboneElement {
    /**
     * Characteristic
     * Characteristic.
     */
    characteristic?: EvidenceReportSubjectCharacteristic[];
    /**
     * Footnotes and/or explanatory notes
     * Used for general notes and annotations not coded elsewhere.
     */
    note?: Annotation[];
}
/**
 * Target of the relationship
 * The target composition/document of this relationship.
 */
export interface EvidenceReportRelatesToTarget extends BackboneElement {
    /**
     * Target of the relationship URL
     * Target of the relationship URL.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Target of the relationship Identifier
     * Target of the relationship Identifier.
     */
    identifier?: Identifier;
    /**
     * Target of the relationship Display
     * Target of the relationship Display.
     */
    display?: markdown;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Target of the relationship Resource reference
     * Target of the relationship Resource reference.
     */
    resource?: Reference;
}
/**
 * Relationships to other compositions/documents
 * Relationships that this composition has with other compositions or documents that already exist.
 * A document is a version specific composition.
 */
export interface EvidenceReportRelatesTo extends BackboneElement {
    /**
     * Target of the relationship
     * The target composition/document of this relationship.
     */
    target: EvidenceReportRelatesToTarget;
    /**
     * replaces | amends | appends | transforms | replacedWith | amendedWith | appendedWith | transformedWith
     * The type of relationship that this composition has with anther composition or document.
     * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
     */
    code: EvidenceReportReportRelationshipType;
}
/**
 * Composition is broken into sections
 * The root of the sections that make up the composition.
 */
export interface EvidenceReportSection extends BackboneElement {
    /**
     * Label for section (e.g. for ToC)
     * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
     * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Classification of section (recommended)
     * A code identifying the kind of content contained within the section. This should be consistent with the section title.
     * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.

If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
     */
    focus?: CodeableConcept;
    /**
     * Classification of section by Resource
     * A definitional Resource identifying the kind of content contained within the section. This should be consistent with the section title.
     */
    focusReference?: Reference;
    /**
     * Who and/or what authored the section
     * Identifies who is responsible for the information in this section, not necessarily who typed it in.
     */
    author?: Reference[];
    /**
     * Text summary of the section, for human interpretation
     * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is peferred to contain sufficient detail to make it acceptable for a human to just read the narrative.
     * Document profiles may define what content should be represented in the narrative.
     */
    text?: Narrative;
    /**
     * Order of section entries
     * Specifies the order applied to the items in the section entries.
     * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
     */
    orderedBy?: CodeableConcept;
    /**
     * Extensible classifiers as content
     * Specifies any type of classification of the evidence report.
     */
    entryClassifier?: CodeableConcept[];
    /**
     * Reference to resources as content
     * A reference to the actual resource from which the narrative in the section is derived.
     * If there are no entries in the list, an emptyReason SHOULD be provided.
     */
    entryReference?: Reference[];
    /**
     * Quantity as content
     * Quantity as content.
     */
    entryQuantity?: Quantity[];
    /**
     * Why the section is empty
     * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
     * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
     */
    emptyReason?: CodeableConcept;
    /**
     * Nested Section
     * A nested sub-section within this section.
     * Nested sections are primarily used to help human readers navigate to particular portions of the document.
     */
    section?: EvidenceReportSection[];
    /**
     * working | snapshot | changes
     * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
     */
    mode?: EvidenceReportSectionMode;
}
/**
 * A EvidenceReport
 * The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.
 */
export interface EvidenceReport extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EvidenceReport';
    /**
     * Canonical identifier for this EvidenceReport, represented as a globally unique URI
     * An absolute URI that is used to identify this EvidenceReport when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence report instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Unique identifier for the evidence report
     * A formal identifier that is used to identify this EvidenceReport when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * This element will contain unique identifiers that support de-duplication of EvidenceReports. This identifier can be valid for only one EvidenceReport resource.
     */
    identifier?: Identifier[];
    /**
     * Identifiers for articles that may relate to more than one evidence report
     * A formal identifier that is used to identify things closely related to this EvidenceReport.
     * May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This identifier can be valid for multiple EvidenceReport resources.
     */
    relatedIdentifier?: Identifier[];
    /**
     * Citation for this report
     * Citation Resource or display of suggested citation for this report.
     * used for reports for which external citation is expected, such as use in support of scholarly publications.
     */
    citeAsReference?: Reference;
    /**
     * Citation for this report
     * Citation Resource or display of suggested citation for this report.
     * used for reports for which external citation is expected, such as use in support of scholarly publications.
     */
    citeAsMarkdown?: markdown;
    /**
     * Extension for citeAsMarkdown
     **/
    _citeAsMarkdown?: Element;
    /**
     * Kind of report
     * Specifies the kind of report, such as grouping of classifiers, search results, or human-compiled expression.
     */
    type?: CodeableConcept;
    /**
     * Used for footnotes and annotations
     * Used for footnotes and annotations.
     */
    note?: Annotation[];
    /**
     * Link, description or reference to artifact associated with the report
     * Link, description or reference to artifact associated with the report.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Focus of the report
     * Specifies the subject or focus of the report. Answers "What is this report about?".
     * May be used as an expression for search queries and search results
     */
    subject: EvidenceReportSubject;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the evidence report.
     * Usually an organization but may be an individual. The publisher (or steward) of the evidence report is the organization or individual primarily responsible for the maintenance and upkeep of the evidence report. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence report. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Who authored the content
     * An individiual, organization, or device primarily involved in the creation and maintenance of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individiual, organization, or device primarily responsible for internal coherence of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individiual, organization, or device primarily responsible for review of some aspect of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individiual, organization, or device responsible for officially endorsing the content for use in some setting.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Relationships to other compositions/documents
     * Relationships that this composition has with other compositions or documents that already exist.
     * A document is a version specific composition.
     */
    relatesTo?: EvidenceReportRelatesTo[];
    /**
     * Composition is broken into sections
     * The root of the sections that make up the composition.
     */
    section?: EvidenceReportSection[];
    /**
     * draft | active | retired | unknown
     * The status of this summary. Enables tracking the life-cycle of the content.
     * Allows filtering of summaries that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: EvidenceReportPublicationStatus;
}
/**
 * Defines the characteristic using type and value
 * Defines the characteristic using both a type and value[x] elements.
 */
export interface EvidenceVariableCharacteristicDefinitionByTypeAndValue extends BackboneElement {
    /**
     * Expresses the type of characteristic
     * Used to express the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * Method for how the characteristic value was determined
     * Method for how the characteristic value was determined.
     */
    method?: CodeableConcept[];
    /**
     * Device used for determining characteristic
     * Device used for determining characteristic.
     */
    device?: Reference;
    /**
     * Defines the characteristic when coupled with characteristic.type
     * Defines the characteristic when paired with characteristic.type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Defines the characteristic when coupled with characteristic.type
     * Defines the characteristic when paired with characteristic.type.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Defines the characteristic when coupled with characteristic.type
     * Defines the characteristic when paired with characteristic.type.
     */
    valueQuantity?: Quantity;
    /**
     * Defines the characteristic when coupled with characteristic.type
     * Defines the characteristic when paired with characteristic.type.
     */
    valueRange?: Range;
    /**
     * Defines the characteristic when coupled with characteristic.type
     * Defines the characteristic when paired with characteristic.type.
     */
    valueReference?: Reference;
    /**
     * Defines the characteristic when coupled with characteristic.type
     * Defines the characteristic when paired with characteristic.type.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Reference point for valueQuantity or valueRange
     * Defines the reference point for comparison when valueQuantity or valueRange is not compared to zero.
     */
    offset?: CodeableConcept;
}
/**
 * Used to specify how two or more characteristics are combined
 * Defines the characteristic as a combination of two or more characteristics.
 */
export interface EvidenceVariableCharacteristicDefinitionByCombination extends BackboneElement {
    /**
     * Provides the value of "n" when "at-least" or "at-most" codes are used
     * Provides the value of "n" when "at-least" or "at-most" codes are used.
     */
    threshold?: positiveInt;
    /**
     * Extension for threshold
     **/
    _threshold?: Element;
    /**
     * A defining factor of the characteristic
     * A defining factor of the characteristic.
     */
    characteristic: EvidenceVariableCharacteristic[];
    /**
     * all-of | any-of | at-least | at-most | statistical | net-effect | dataset
     * Used to specify if two or more characteristics are combined with OR or AND.
     */
    code: EvidenceVariableCharacteristicCombination;
}
/**
 * Timing in which the characteristic is determined
 * Timing in which the characteristic is determined.
 */
export interface EvidenceVariableCharacteristicTimeFromEvent extends BackboneElement {
    /**
     * Human readable description
     * Human readable description.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Used for footnotes or explanatory notes
     * A human-readable string to clarify or explain concepts about the timeFromEvent.
     */
    note?: Annotation[];
    /**
     * The event used as a base point (reference point) in time
     * The event used as a base point (reference point) in time.
     */
    eventCodeableConcept?: CodeableConcept;
    /**
     * The event used as a base point (reference point) in time
     * The event used as a base point (reference point) in time.
     */
    eventReference?: Reference;
    /**
     * The event used as a base point (reference point) in time
     * The event used as a base point (reference point) in time.
     */
    eventDateTime?: dateTime;
    /**
     * Extension for eventDateTime
     **/
    _eventDateTime?: Element;
    /**
     * The event used as a base point (reference point) in time
     * The event used as a base point (reference point) in time.
     */
    eventId?: id;
    /**
     * Extension for eventId
     **/
    _eventId?: Element;
    /**
     * Used to express the observation at a defined amount of time before or after the event
     * Used to express the observation at a defined amount of time before or after the event.
     */
    quantity?: Quantity;
    /**
     * Used to express the observation within a period before and/or after the event
     * Used to express the observation within a period before and/or after the event.
     */
    range?: Range;
}
/**
 * A defining factor of the EvidenceVariable
 * A defining factor of the EvidenceVariable. Multiple characteristics are applied with "and" semantics.
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
export interface EvidenceVariableCharacteristic extends BackboneElement {
    /**
     * Label for internal linking
     * Label used for when a characteristic refers to another characteristic.
     */
    linkId?: id;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Natural language description of the characteristic
     * A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Used for footnotes or explanatory notes
     * A human-readable string to clarify or explain concepts about the characteristic.
     */
    note?: Annotation[];
    /**
     * Whether the characteristic is an inclusion criterion or exclusion criterion
     * When true, this characteristic is an exclusion criterion. In other words, not matching this characteristic definition is equivalent to meeting this criterion.
     */
    exclude?: boolean;
    /**
     * Extension for exclude
     **/
    _exclude?: Element;
    /**
     * Defines the characteristic (without using type and value) by a Reference
     * Defines the characteristic using a Reference.
     */
    definitionReference?: Reference;
    /**
     * Defines the characteristic (without using type and value) by a Canonical
     * Defines the characteristic using Canonical.
     */
    definitionCanonical?: canonical;
    /**
     * Extension for definitionCanonical
     **/
    _definitionCanonical?: Element;
    /**
     * Defines the characteristic (without using type and value) by a CodeableConcept
     * Defines the characteristic using CodeableConcept.
     */
    definitionCodeableConcept?: CodeableConcept;
    /**
     * Defines the characteristic (without using type and value) by an expression
     * Defines the characteristic using Expression.
     * When another element provides a definition of the characteristic, the definitionExpression content SHALL match the definition (only adding technical concepts necessary for implementation) without changing the meaning.
     */
    definitionExpression?: Expression;
    /**
     * Defines the characteristic (without using type and value) by an id
     * Defines the characteristic using id.
     */
    definitionId?: id;
    /**
     * Extension for definitionId
     **/
    _definitionId?: Element;
    /**
     * Defines the characteristic using type and value
     * Defines the characteristic using both a type and value[x] elements.
     */
    definitionByTypeAndValue?: EvidenceVariableCharacteristicDefinitionByTypeAndValue;
    /**
     * Used to specify how two or more characteristics are combined
     * Defines the characteristic as a combination of two or more characteristics.
     */
    definitionByCombination?: EvidenceVariableCharacteristicDefinitionByCombination;
    /**
     * Number of occurrences meeting the characteristic
     * Number of occurrences meeting the characteristic.
     */
    instancesQuantity?: Quantity;
    /**
     * Number of occurrences meeting the characteristic
     * Number of occurrences meeting the characteristic.
     */
    instancesRange?: Range;
    /**
     * Length of time in which the characteristic is met
     * Length of time in which the characteristic is met.
     */
    durationQuantity?: Quantity;
    /**
     * Length of time in which the characteristic is met
     * Length of time in which the characteristic is met.
     */
    durationRange?: Range;
    /**
     * Timing in which the characteristic is determined
     * Timing in which the characteristic is determined.
     */
    timeFromEvent?: EvidenceVariableCharacteristicTimeFromEvent[];
}
/**
 * A grouping for ordinal or polychotomous variables
 * A grouping for ordinal or polychotomous variables.
 */
export interface EvidenceVariableCategory extends BackboneElement {
    /**
     * Description of the grouping
     * Description of the grouping.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Definition of the grouping
     * Definition of the grouping.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Definition of the grouping
     * Definition of the grouping.
     */
    valueQuantity?: Quantity;
    /**
     * Definition of the grouping
     * Definition of the grouping.
     */
    valueRange?: Range;
}
/**
 * A definition of an exposure, outcome, or other variable
 * The EvidenceVariable resource describes an element that knowledge (Evidence) is about.
 * The EvidenceVariable may be an exposure variable (intervention, condition, or state), a measured variable (outcome or observed parameter), or other variable (such as confounding factor).
 */
export interface EvidenceVariable extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'EvidenceVariable';
    /**
     * Canonical identifier for this evidence variable, represented as a URI (globally unique)
     * An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.
     * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the evidence variable
     * A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this evidence variable outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the evidence variable
     * The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     * There may be different evidence variable instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the evidence variable with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this evidence variable (computer friendly)
     * A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this evidence variable (human friendly)
     * A short, descriptive, user-friendly title for the evidence variable.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Title for use in informal contexts
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * Extension for shortTitle
     **/
    _shortTitle?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the evidence variable was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the evidence variable. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the evidence variable.
     * Usually an organization but may be an individual. The publisher (or steward) of the evidence variable is the organization or individual primarily responsible for the maintenance and upkeep of the evidence variable. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence variable. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the evidence variable
     * A free text natural language description of the evidence variable from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence variable as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence variable is presumed to be the predominant language in the place the evidence variable was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Used for footnotes or explanatory notes
     * A human-readable string to clarify or explain concepts about the resource.
     */
    note?: Annotation[];
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Why this EvidenceVariable is defined
     * Explanation of why this EvidenceVariable is needed and why it has been designed as it has.
     * This element does not describe the usage of the EvidenceVariable. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this EvidenceVariable.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the resource and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the resource.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the resource was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the resource was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the resource is expected to be used
     * The period during which the resource content was or is planned to be in active use.
     * The effective period for an EvidenceVariable determines when the content is applicable for usage and is independent of publication and review dates. For example, a variable intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * Who authored the content
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individual or organization primarily responsible for internal coherence of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
     * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Actual or conceptual
     * True if the actual variable measured, false if a conceptual representation of the intended variable.
     */
    actual?: boolean;
    /**
     * Extension for actual
     **/
    _actual?: Element;
    /**
     * A defining factor of the EvidenceVariable
     * A defining factor of the EvidenceVariable. Multiple characteristics are applied with "and" semantics.
     * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
     */
    characteristic?: EvidenceVariableCharacteristic[];
    /**
     * A grouping for ordinal or polychotomous variables
     * A grouping for ordinal or polychotomous variables.
     */
    category?: EvidenceVariableCategory[];
    /**
     * draft | active | retired | unknown
     * The status of this evidence variable. Enables tracking the life-cycle of the content.
     * Allows filtering of evidence variables that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: EvidenceVariablePublicationStatus;
    /**
     * continuous | dichotomous | ordinal | polychotomous
     * The method of handling in statistical analysis.
     */
    handling?: EvidenceVariableHandling;
}
/**
 * Individual involved in exchange
 * A system or person who shares or receives an instance within the scenario.
 */
export interface ExampleScenarioActor extends BackboneElement {
    /**
     * ID or acronym of the actor
     * A unique string within the scenario that is used to reference the actor.
     */
    key: string;
    /**
     * Extension for key
     **/
    _key?: Element;
    /**
     * Label for actor when rendering
     * The human-readable name for the actor used when rendering the scenario.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Details about actor
     * An explanation of who/what the actor is and its role in the scenario.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * person | system
     * The category of actor - person or system.
     */
    type: ExampleScenarioActorType;
}
/**
 * Snapshot of instance that changes
 * Represents the instance as it was at a specific time-point.
 * Not used if an instance doesn't change
 */
export interface ExampleScenarioInstanceVersion extends BackboneElement {
    /**
     * ID or acronym of the version
     * A unique string within the instance that is used to reference the version of the instance.
     */
    key: string;
    /**
     * Extension for key
     **/
    _key?: Element;
    /**
     * Label for instance version
     * A short descriptive label the version to be used in tables or diagrams.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Details about version
     * An explanation of what this specific version of the instance contains and represents.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Example instance version data
     * Points to an instance (typically an example) that shows the data that would flow at this point in the scenario.
     * If not conveying FHIR data or not using the same version of FHIR as this ExampleScenario instance, the reference must be to a Binary.
     */
    content?: Reference;
}
/**
 * Resources contained in the instance
 * References to other instances that can be found within this instance (e.g. the observations contained in a bundle).
 */
export interface ExampleScenarioInstanceContainedInstance extends BackboneElement {
    /**
     * Key of contained instance
     * A reference to the key of an instance found within this one.
     */
    instanceReference: string;
    /**
     * Extension for instanceReference
     **/
    _instanceReference?: Element;
    /**
     * Key of contained instance version
     * A reference to the key of a specific version of an instance in this instance.
     * Required if the referenced instance has versions
     */
    versionReference?: string;
    /**
     * Extension for versionReference
     **/
    _versionReference?: Element;
}
/**
 * Data used in the scenario
 * A single data collection that is shared as part of the scenario.
 */
export interface ExampleScenarioInstance extends BackboneElement {
    /**
     * ID or acronym of the instance
     * A unique string within the scenario that is used to reference the instance.
     */
    key: string;
    /**
     * Extension for key
     **/
    _key?: Element;
    /**
     * Data structure for example
     * A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.
     */
    structureType: Coding;
    /**
     * E.g. 4.0.1
     * Conveys the version of the data structure instantiated.  I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.
     */
    structureVersion?: string;
    /**
     * Extension for structureVersion
     **/
    _structureVersion?: Element;
    /**
     * Rules instance adheres to
     * Refers to a profile, template or other ruleset the instance adheres to.
     */
    structureProfileCanonical?: canonical;
    /**
     * Extension for structureProfileCanonical
     **/
    _structureProfileCanonical?: Element;
    /**
     * Rules instance adheres to
     * Refers to a profile, template or other ruleset the instance adheres to.
     */
    structureProfileUri?: uri;
    /**
     * Extension for structureProfileUri
     **/
    _structureProfileUri?: Element;
    /**
     * Label for instance
     * A short descriptive label the instance to be used in tables or diagrams.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Human-friendly description of the instance
     * An explanation of what the instance contains and what it's for.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Example instance data
     * Points to an instance (typically an example) that shows the data that would corespond to this instance.
     * If not conveying FHIR data or not using the same version of FHIR as this ExampleScenario instance, the reference must be to a Binary.
     */
    content?: Reference;
    /**
     * Snapshot of instance that changes
     * Represents the instance as it was at a specific time-point.
     * Not used if an instance doesn't change
     */
    version?: ExampleScenarioInstanceVersion[];
    /**
     * Resources contained in the instance
     * References to other instances that can be found within this instance (e.g. the observations contained in a bundle).
     */
    containedInstance?: ExampleScenarioInstanceContainedInstance[];
}
/**
 * Step is simple action
 * The step represents a single operation invoked on receiver by sender.
 */
export interface ExampleScenarioProcessStepOperation extends BackboneElement {
    /**
     * Kind of action
     * The standardized type of action (FHIR or otherwise).
     */
    type?: Coding;
    /**
     * Label for step
     * A short descriptive label the step to be used in tables or diagrams.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Who starts the operation
     * The system that invokes the action/transmits the data.
     * This must either be the 'key' of one of the actors defined in this scenario or the special keyword 'OTHER' if the initiator is not one of the actors defined for the scenario.  (Multiple references to 'OTHER' don't necessarily indicate the same actor.)
     */
    initiator?: string;
    /**
     * Extension for initiator
     **/
    _initiator?: Element;
    /**
     * Who receives the operation
     * The system on which the action is invoked/receives the data.
     * This must either be the 'key' of one of the actors defined in this scenario or the special keyword 'OTHER' if the receiver is not one of the actors defined for the scenario.  (Multiple references to 'OTHER' don't necessarily indicate the same actor.)  In some cases, receiver could be same as sender if representing a local operation
     */
    receiver?: string;
    /**
     * Extension for receiver
     **/
    _receiver?: Element;
    /**
     * Human-friendly description of the operation
     * An explanation of what the operation represents and what it does.
     * This should contain information not already present in the process step.  It's more of a description of what the operation in general does - if not already evident from the operation.type
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Initiator stays active?
     * If false, the initiator is deactivated right after the operation.
     * De-activation of an actor means they have no further role until such time as they are the recipient of an operation.
     */
    initiatorActive?: boolean;
    /**
     * Extension for initiatorActive
     **/
    _initiatorActive?: Element;
    /**
     * Receiver stays active?
     * If false, the receiver is deactivated right after the operation.
     * De-activation of an actor means they have no further role until such time as they are the recipient of an operation.
     */
    receiverActive?: boolean;
    /**
     * Extension for receiverActive
     **/
    _receiverActive?: Element;
    /**
     * Instance transmitted on invocation
     * A reference to the instance that is transmitted from requester to receiver as part of the invocation of the operation.
     */
    request?: ExampleScenarioInstanceContainedInstance;
    /**
     * Instance transmitted on invocation response
     * A reference to the instance that is transmitted from receiver to requester as part of the operation's synchronous response (if any).
     */
    response?: ExampleScenarioInstanceContainedInstance;
}
/**
 * Alternate non-typical step action
 * Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances.
 */
export interface ExampleScenarioProcessStepAlternative extends BackboneElement {
    /**
     * Label for alternative
     * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Human-readable description of option
     * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Alternative action(s)
     * Indicates the operation, sub-process or scenario that happens if the alternative option is selected.
     */
    step?: ExampleScenarioProcessStep[];
}
/**
 * Event within of the process
 * A significant action that occurs as part of the process.
 */
export interface ExampleScenarioProcessStep extends BackboneElement {
    /**
     * Sequential number of the step
     * The sequential number of the step, e.g. 1.2.5.
     * If step numbers are simultaneous, they will be the same.  Numbers don't have to be numeric.  E.g. '2c)' is a valid step number
     */
    number?: string;
    /**
     * Extension for number
     **/
    _number?: Element;
    /**
     * Step is nested process
     * Indicates that the step is a complex sub-process with its own steps.
     */
    process?: ExampleScenarioProcess;
    /**
     * Step is nested workflow
     * Indicates that the step is defined by a seaparate scenario instance.
     */
    workflow?: canonical;
    /**
     * Extension for workflow
     **/
    _workflow?: Element;
    /**
     * Step is simple action
     * The step represents a single operation invoked on receiver by sender.
     */
    operation?: ExampleScenarioProcessStepOperation;
    /**
     * Alternate non-typical step action
     * Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances.
     */
    alternative?: ExampleScenarioProcessStepAlternative[];
    /**
     * Pause in the flow?
     * If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).
     */
    pause?: boolean;
    /**
     * Extension for pause
     **/
    _pause?: Element;
}
/**
 * Major process within scenario
 * A group of operations that represents a significant step within a scenario.
 * Some scenarios might describe only one process.
 */
export interface ExampleScenarioProcess extends BackboneElement {
    /**
     * Label for procss
     * A short descriptive label the process to be used in tables or diagrams.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Human-friendly description of the process
     * An explanation of what the process represents and what it does.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Status before process starts
     * Description of the initial state of the actors, environment and data before the process starts.
     */
    preConditions?: markdown;
    /**
     * Extension for preConditions
     **/
    _preConditions?: Element;
    /**
     * Status after successful completion
     * Description of the final state of the actors, environment and data after the process has been successfully completed.
     * Alternate steps might not result in all post conditions holding
     */
    postConditions?: markdown;
    /**
     * Extension for postConditions
     **/
    _postConditions?: Element;
    /**
     * Event within of the process
     * A significant action that occurs as part of the process.
     */
    step?: ExampleScenarioProcessStep[];
}
/**
 * Example of workflow instance
 * Example of workflow instance.
 */
export interface ExampleScenario extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ExampleScenario';
    /**
     * Canonical identifier for this example scenario, represented as a URI (globally unique)
     * An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the example scenario
     * A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the example scenario
     * The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * To be removed?
     * Temporarily retained for tooling purposes.
     * Not needed as code will never be generated from one of these
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this example scenario (human friendly)
     * A short, descriptive, user-friendly title for the ExampleScenario.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of example scenarios that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the example scenario was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the example scenario.
     * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the ExampleScenario
     * A free text natural language description of the ExampleScenario from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse. It is not a rendering of the ExampleScenario as conveyed in the 'text' field of the resource itself.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for example scenario (if applicable)
     * A legal or geographic region in which the example scenario is intended to be used.
     * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * The purpose of the example, e.g. to illustrate a scenario
     * What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
     * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Individual involved in exchange
     * A system or person who shares or receives an instance within the scenario.
     */
    actor?: ExampleScenarioActor[];
    /**
     * Data used in the scenario
     * A single data collection that is shared as part of the scenario.
     */
    instance?: ExampleScenarioInstance[];
    /**
     * Major process within scenario
     * A group of operations that represents a significant step within a scenario.
     * Some scenarios might describe only one process.
     */
    process?: ExampleScenarioProcess[];
    /**
     * draft | active | retired | unknown
     * The status of this example scenario. Enables tracking the life-cycle of the content.
     * Allows filtering of example scenarios that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ExampleScenarioPublicationStatus;
}
/**
 * Prior or corollary claims
 * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
 * For example,  for the original treatment and follow-up exams.
 */
export interface ExplanationOfBenefitRelated extends BackboneElement {
    /**
     * Reference to the related claim
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * How the reference claim is related
     * A code to convey how the claims are related.
     * For example, prior claim or umbrella.
     */
    relationship?: CodeableConcept;
    /**
     * File or case reference
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     * For example, Property/Casualty insurer claim number or Workers Compensation case number.
     */
    reference?: Identifier;
}
/**
 * Event information
 * Information code for an event with a corresponding date or period.
 */
export interface ExplanationOfBenefitEvent extends BackboneElement {
    /**
     * Specific event
     * A coded event such as when a service is expected or a card printed.
     */
    type: CodeableConcept;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenDateTime?: dateTime;
    /**
     * Extension for whenDateTime
     **/
    _whenDateTime?: Element;
    /**
     * Occurance date or period
     * A date or period in the past or future indicating when the event occurred or is expectd to occur.
     */
    whenPeriod?: Period;
}
/**
 * Recipient of benefits payable
 * The party to be reimbursed for cost of the products and services according to the terms of the policy.
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export interface ExplanationOfBenefitPayee extends BackboneElement {
    /**
     * Category of recipient
     * Type of Party to be reimbursed: Subscriber, provider, other.
     */
    type?: CodeableConcept;
    /**
     * Recipient reference
     * Reference to the individual or organization to whom any payment will be made.
     * Not required if the payee is 'subscriber' or 'provider'.
     */
    party?: Reference;
}
/**
 * Care Team members
 * The members of the team who provided the products and services.
 */
export interface ExplanationOfBenefitCareTeam extends BackboneElement {
    /**
     * Order of care team
     * A number to uniquely identify care team entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Practitioner or organization
     * Member of the team who provided the product or service.
     */
    provider: Reference;
    /**
     * Indicator of the lead practitioner
     * The party who is billing and/or responsible for the claimed products or services.
     * Responsible might not be required when there is only a single provider listed.
     */
    responsible?: boolean;
    /**
     * Extension for responsible
     **/
    _responsible?: Element;
    /**
     * Function within the team
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     * Role might not be required when there is only a single provider listed.
     */
    role?: CodeableConcept;
    /**
     * Practitioner or provider specialization
     * The specialization of the practitioner or provider which is applicable for this service.
     */
    specialty?: CodeableConcept;
}
/**
 * Supporting information
 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export interface ExplanationOfBenefitSupportingInfo extends BackboneElement {
    /**
     * Information instance identifier
     * A number to uniquely identify supporting information entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Classification of the supplied information
     * The general class of the information supplied: information; exception; accident, employment; onset, etc.
     * This may contain a category for the local bill type codes.
     */
    category: CodeableConcept;
    /**
     * Type of information
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     * This may contain the local bill type codes such as the US UB-04 bill type code.
     */
    code?: CodeableConcept;
    /**
     * When it occurred
     * The date when or period to which this information refers.
     */
    timingDate?: date;
    /**
     * Extension for timingDate
     **/
    _timingDate?: Element;
    /**
     * When it occurred
     * The date when or period to which this information refers.
     */
    timingPeriod?: Period;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueQuantity?: Quantity;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueAttachment?: Attachment;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueReference?: Reference;
    /**
     * Data to be provided
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
     */
    valueIdentifier?: Identifier;
    /**
     * Explanation for the information
     * Provides the reason in the situation where a reason code is required in addition to the content.
     * For example: the reason for the additional stay, or why a tooth is  missing.
     */
    reason?: Coding;
}
/**
 * Pertinent diagnosis information
 * Information about diagnoses relevant to the claim items.
 */
export interface ExplanationOfBenefitDiagnosis extends BackboneElement {
    /**
     * Diagnosis instance identifier
     * A number to uniquely identify diagnosis entries.
     * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Nature of illness or problem
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * Nature of illness or problem
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
    /**
     * Timing or nature of the diagnosis
     * When the condition was observed or the relative ranking.
     * For example: admitting, primary, secondary, discharge.
     */
    type?: CodeableConcept[];
    /**
     * Present on admission
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    onAdmission?: CodeableConcept;
}
/**
 * Clinical procedures performed
 * Procedures performed on the patient relevant to the billing items with the claim.
 */
export interface ExplanationOfBenefitProcedure extends BackboneElement {
    /**
     * Procedure instance identifier
     * A number to uniquely identify procedure entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Category of Procedure
     * When the condition was observed or the relative ranking.
     */
    type?: CodeableConcept[];
    /**
     * When the procedure was performed
     * Date and optionally time the procedure was performed.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Specific clinical procedure
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureCodeableConcept?: CodeableConcept;
    /**
     * Specific clinical procedure
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureReference?: Reference;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
}
/**
 * Patient insurance information
 * Financial instruments for reimbursement for the health care products and services specified on the claim.
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface ExplanationOfBenefitInsurance extends BackboneElement {
    /**
     * Coverage to be used for adjudication
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
     */
    focal: boolean;
    /**
     * Extension for focal
     **/
    _focal?: Element;
    /**
     * Insurance information
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Prior authorization reference number
     * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
     * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
     */
    preAuthRef?: string[];
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element[];
}
/**
 * Details of the event
 * Details of a accident which resulted in injuries which required the products and services listed in the claim.
 */
export interface ExplanationOfBenefitAccident extends BackboneElement {
    /**
     * When the incident occurred
     * Date of an accident event  related to the products and services contained in the claim.
     * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
     */
    date?: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The nature of the accident
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    type?: CodeableConcept;
    /**
     * Where the event occurred
     * The physical location of the accident event.
     */
    locationAddress?: Address;
    /**
     * Where the event occurred
     * The physical location of the accident event.
     */
    locationReference?: Reference;
}
/**
 * Anatomical location
 * Physical location where the service is performed or applies.
 */
export interface ExplanationOfBenefitItemBodySite extends BackboneElement {
    /**
     * Location
     * Physical service site on the patient (limb, tooth, etc.).
     * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
     */
    site: CodeableReference[];
    /**
     * Sub-location
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
}
/**
 * Adjudication results
 * The high-level results of the adjudication if adjudication has been performed.
 */
export interface ExplanationOfBenefitItemReviewOutcome extends BackboneElement {
    /**
     * Result of the adjudication
     * The result of the claim, predetermination, or preauthorization adjudication.
     * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amount will be paid (partial).
     */
    decision?: CodeableConcept;
    /**
     * Reason for result of the adjudication
     * The reasons for the result of the claim, predetermination, or preauthorization adjudication.
     */
    reason?: CodeableConcept[];
    /**
     * Preauthorization reference
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     * This value is only present on preauthorization adjudications.
     */
    preAuthRef?: string;
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element;
    /**
     * Preauthorization reference effective period
     * The time frame during which this authorization is effective.
     */
    preAuthPeriod?: Period;
}
/**
 * Adjudication details
 * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
 */
export interface ExplanationOfBenefitItemAdjudication extends BackboneElement {
    /**
     * Type of adjudication information
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
     */
    category: CodeableConcept;
    /**
     * Explanation of adjudication outcome
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     * For example, may indicate that the funds for this benefit type have been exhausted.
     */
    reason?: CodeableConcept;
    /**
     * Monetary amount
     * Monetary amount associated with the category.
     * For example, amount submitted, eligible amount, co-payment, and benefit payable.
     */
    amount?: Money;
    /**
     * Non-monitary value
     * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
     * For example: eligible percentage or co-payment percentage.
     */
    quantity?: Quantity;
}
/**
 * Additional items
 * Third-tier of goods and services.
 */
export interface ExplanationOfBenefitItemDetailSubDetail extends BackboneElement {
    /**
     * Product or service provided
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the line item.detail.subDetail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Subdetail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ExplanationOfBenefitItemReviewOutcome;
    /**
     * Subdetail level adjudication details
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
}
/**
 * Additional items
 * Second-tier of goods and services.
 */
export interface ExplanationOfBenefitItemDetail extends BackboneElement {
    /**
     * Product or service provided
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Detail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ExplanationOfBenefitItemReviewOutcome;
    /**
     * Detail level adjudication details
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Additional items
     * Third-tier of goods and services.
     */
    subDetail?: ExplanationOfBenefitItemDetailSubDetail[];
}
/**
 * Product or service provided
 * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
 */
export interface ExplanationOfBenefitItem extends BackboneElement {
    /**
     * Item instance identifier
     * A number to uniquely identify item entries.
     */
    sequence: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Applicable care team members
     * Care team members related to this service or product.
     */
    careTeamSequence?: positiveInt[];
    /**
     * Extension for careTeamSequence
     **/
    _careTeamSequence?: Element[];
    /**
     * Applicable diagnoses
     * Diagnoses applicable for this service or product.
     */
    diagnosisSequence?: positiveInt[];
    /**
     * Extension for diagnosisSequence
     **/
    _diagnosisSequence?: Element[];
    /**
     * Applicable procedures
     * Procedures applicable for this service or product.
     */
    procedureSequence?: positiveInt[];
    /**
     * Extension for procedureSequence
     **/
    _procedureSequence?: Element[];
    /**
     * Applicable exception and supporting information
     * Exceptions, special conditions and supporting information applicable for this service or product.
     */
    informationSequence?: positiveInt[];
    /**
     * Extension for informationSequence
     **/
    _informationSequence?: Element[];
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Request or Referral for Service
     * Request or Referral for Goods or Service to be rendered.
     */
    request?: Reference[];
    /**
     * Product or service billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Unique device identifier
     * Unique Device Identifiers associated with this line item.
     */
    udi?: Reference[];
    /**
     * Anatomical location
     * Physical location where the service is performed or applies.
     */
    bodySite?: ExplanationOfBenefitItemBodySite[];
    /**
     * Encounters associated with the listed treatments
     * Healthcare encounters related to this claim.
     */
    encounter?: Reference[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ExplanationOfBenefitItemReviewOutcome;
    /**
     * Adjudication details
     * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Additional items
     * Second-tier of goods and services.
     */
    detail?: ExplanationOfBenefitItemDetail[];
}
/**
 * Anatomical location
 * Physical location where the service is performed or applies.
 */
export interface ExplanationOfBenefitAddItemBodySite extends BackboneElement {
    /**
     * Location
     * Physical service site on the patient (limb, tooth, etc.).
     * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
     */
    site: CodeableReference[];
    /**
     * Sub-location
     * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
     */
    subSite?: CodeableConcept[];
}
/**
 * Insurer added line items
 * The third-tier service adjudications for payor added services.
 */
export interface ExplanationOfBenefitAddItemDetailSubDetail extends BackboneElement {
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Additem subdetail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ExplanationOfBenefitItemReviewOutcome;
    /**
     * Added items adjudication
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
}
/**
 * Insurer added line items
 * The second-tier service adjudications for payor added services.
 */
export interface ExplanationOfBenefitAddItemDetail extends BackboneElement {
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Additem detail level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ExplanationOfBenefitItemReviewOutcome;
    /**
     * Added items adjudication
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Insurer added line items
     * The third-tier service adjudications for payor added services.
     */
    subDetail?: ExplanationOfBenefitAddItemDetailSubDetail[];
}
/**
 * Insurer added line items
 * The first-tier service adjudications for payor added product or service lines.
 */
export interface ExplanationOfBenefitAddItem extends BackboneElement {
    /**
     * Item sequence number
     * Claim items which this service line is intended to replace.
     */
    itemSequence?: positiveInt[];
    /**
     * Extension for itemSequence
     **/
    _itemSequence?: Element[];
    /**
     * Detail sequence number
     * The sequence number of the details within the claim item which this line is intended to replace.
     */
    detailSequence?: positiveInt[];
    /**
     * Extension for detailSequence
     **/
    _detailSequence?: Element[];
    /**
     * Subdetail sequence number
     * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
     */
    subDetailSequence?: positiveInt[];
    /**
     * Extension for subDetailSequence
     **/
    _subDetailSequence?: Element[];
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Authorized providers
     * The providers who are authorized for the services rendered to the patient.
     */
    provider?: Reference[];
    /**
     * Revenue or cost center code
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Billing, service, product, or drug code
     * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
     * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
     */
    productOrService?: CodeableConcept;
    /**
     * End of a range of codes
     * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
     */
    productOrServiceEnd?: CodeableConcept;
    /**
     * Request or Referral for Service
     * Request or Referral for Goods or Service to be rendered.
     */
    request?: Reference[];
    /**
     * Service/Product billing modifiers
     * Item typification or modifiers codes to convey additional context for the product or service.
     * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
     */
    modifier?: CodeableConcept[];
    /**
     * Program the product or service is provided under
     * Identifies the program under which this may be recovered.
     * For example: Neonatal program, child dental program or drug users recovery program.
     */
    programCode?: CodeableConcept[];
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Date or dates of service or product delivery
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Place of service or where product was supplied
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Count of products or services
     * The number of repetitions of a service or product.
     */
    quantity?: Quantity;
    /**
     * Fee, charge or cost per item
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * Price scaling factor
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
     */
    factor?: decimal;
    /**
     * Extension for factor
     **/
    _factor?: Element;
    /**
     * Total tax
     * The total of taxes applicable for this product or service.
     */
    tax?: Money;
    /**
     * Total item cost
     * The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.
     * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Anatomical location
     * Physical location where the service is performed or applies.
     */
    bodySite?: ExplanationOfBenefitAddItemBodySite[];
    /**
     * Applicable note numbers
     * The numbers associated with notes below which apply to the adjudication of this item.
     */
    noteNumber?: positiveInt[];
    /**
     * Extension for noteNumber
     **/
    _noteNumber?: Element[];
    /**
     * Additem level adjudication results
     * The high-level results of the adjudication if adjudication has been performed.
     */
    reviewOutcome?: ExplanationOfBenefitItemReviewOutcome;
    /**
     * Added items adjudication
     * The adjudication results.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Insurer added line items
     * The second-tier service adjudications for payor added services.
     */
    detail?: ExplanationOfBenefitAddItemDetail[];
}
/**
 * Adjudication totals
 * Categorized monetary totals for the adjudication.
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export interface ExplanationOfBenefitTotal extends BackboneElement {
    /**
     * Type of adjudication information
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
     */
    category: CodeableConcept;
    /**
     * Financial total for the category
     * Monetary total amount associated with the category.
     */
    amount: Money;
}
/**
 * Payment Details
 * Payment details for the adjudication of the claim.
 */
export interface ExplanationOfBenefitPayment extends BackboneElement {
    /**
     * Partial or complete payment
     * Whether this represents partial or complete payment of the benefits payable.
     */
    type?: CodeableConcept;
    /**
     * Payment adjustment for non-claim issues
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
     */
    adjustment?: Money;
    /**
     * Explanation for the variance
     * Reason for the payment adjustment.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * Expected date of payment
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    date?: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Payable amount after adjustment
     * Benefits payable less any payment adjustment.
     */
    amount?: Money;
    /**
     * Business identifier for the payment
     * Issuer's unique identifier for the payment instrument.
     * For example: EFT number or check number.
     */
    identifier?: Identifier;
}
/**
 * Note concerning adjudication
 * A note that describes or explains adjudication results in a human readable form.
 */
export interface ExplanationOfBenefitProcessNote extends BackboneElement {
    /**
     * Note instance identifier
     * A number to uniquely identify a note entry.
     */
    number?: positiveInt;
    /**
     * Extension for number
     **/
    _number?: Element;
    /**
     * Note purpose
     * The business purpose of the note text.
     */
    type?: CodeableConcept;
    /**
     * Note explanatory text
     * The explanation or description associated with the processing.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Language of the text
     * A code to define the language used in the text of the note.
     * Only required if the language is different from the resource language.
     */
    language?: CodeableConcept;
}
/**
 * Benefit Summary
 * Benefits Used to date.
 */
export interface ExplanationOfBenefitBenefitBalanceFinancial extends BackboneElement {
    /**
     * Benefit classification
     * Classification of benefit being provided.
     * For example: deductible, visits, benefit amount.
     */
    type: CodeableConcept;
    /**
     * Benefits allowed
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: unsignedInt;
    /**
     * Extension for allowedUnsignedInt
     **/
    _allowedUnsignedInt?: Element;
    /**
     * Benefits allowed
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * Extension for allowedString
     **/
    _allowedString?: Element;
    /**
     * Benefits allowed
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedMoney?: Money;
    /**
     * Benefits used
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: unsignedInt;
    /**
     * Extension for usedUnsignedInt
     **/
    _usedUnsignedInt?: Element;
    /**
     * Benefits used
     * The quantity of the benefit which have been consumed to date.
     */
    usedMoney?: Money;
}
/**
 * Balance by Benefit Category
 * Balance by Benefit Category.
 */
export interface ExplanationOfBenefitBenefitBalance extends BackboneElement {
    /**
     * Benefit classification
     * Code to identify the general type of benefits under which products and services are provided.
     * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
     */
    category: CodeableConcept;
    /**
     * Excluded from the plan
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    excluded?: boolean;
    /**
     * Extension for excluded
     **/
    _excluded?: Element;
    /**
     * Short name for the benefit
     * A short name or tag for the benefit.
     * For example: MED01, or DENT2.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Description of the benefit or services covered
     * A richer description of the benefit or services covered.
     * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * In or out of network
     * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
     */
    network?: CodeableConcept;
    /**
     * Individual or family
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * Annual or lifetime
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    /**
     * Benefit Summary
     * Benefits Used to date.
     */
    financial?: ExplanationOfBenefitBenefitBalanceFinancial[];
}
/**
 * Explanation of Benefit resource
 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
 */
export interface ExplanationOfBenefit extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ExplanationOfBenefit';
    /**
     * Business Identifier for the resource
     * A unique identifier assigned to this explanation of benefit.
     */
    identifier?: Identifier[];
    /**
     * Number for tracking
     * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
     */
    traceNumber?: Identifier[];
    /**
     * Category or discipline
     * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
     * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
     */
    type: CodeableConcept;
    /**
     * More granular claim type
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     * This may contain the local bill type codes such as the US UB-04 bill type code.
     */
    subType?: CodeableConcept;
    /**
     * The recipient of the products and services
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
     */
    patient: Reference;
    /**
     * Relevant time frame for the claim
     * The period for which charges are being submitted.
     * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
     */
    billablePeriod?: Period;
    /**
     * Response creation date
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Author of the claim
     * Individual who created the claim, predetermination or preauthorization.
     */
    enterer?: Reference;
    /**
     * Party responsible for reimbursement
     * The party responsible for authorization, adjudication and reimbursement.
     */
    insurer?: Reference;
    /**
     * Party responsible for the claim
     * The provider which is responsible for the claim, predetermination or preauthorization.
     * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
     */
    provider?: Reference;
    /**
     * Desired processing urgency
     * The provider-required urgency of processing the request. Typical values include: stat, normal deferred.
     * If a claim processor is unable to complete the processing as per the priority then they should generate an error and not process the request.
     */
    priority?: CodeableConcept;
    /**
     * For whom to reserve funds
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     * This field is only used for preauthorizations.
     */
    fundsReserveRequested?: CodeableConcept;
    /**
     * Funds reserved status
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
     */
    fundsReserve?: CodeableConcept;
    /**
     * Prior or corollary claims
     * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
     * For example,  for the original treatment and follow-up exams.
     */
    related?: ExplanationOfBenefitRelated[];
    /**
     * Prescription authorizing services or products
     * Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.
     */
    prescription?: Reference;
    /**
     * Original prescription if superceded by fulfiller
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
     */
    originalPrescription?: Reference;
    /**
     * Event information
     * Information code for an event with a corresponding date or period.
     */
    event?: ExplanationOfBenefitEvent[];
    /**
     * Recipient of benefits payable
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
     */
    payee?: ExplanationOfBenefitPayee;
    /**
     * Treatment Referral
     * The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.
     * The referral resource which lists the date, practitioner, reason and other supporting information.
     */
    referral?: Reference;
    /**
     * Encounters associated with the listed treatments
     * Healthcare encounters related to this claim.
     */
    encounter?: Reference[];
    /**
     * Servicing Facility
     * Facility where the services were provided.
     */
    facility?: Reference;
    /**
     * Claim reference
     * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
     */
    claim?: Reference;
    /**
     * Claim response reference
     * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
     */
    claimResponse?: Reference;
    /**
     * Result of the adjudication
     * The result of the claim, predetermination, or preauthorization adjudication.
     * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amoutn will be paid (partial).
     */
    decision?: CodeableConcept;
    /**
     * Disposition Message
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Extension for disposition
     **/
    _disposition?: Element;
    /**
     * Preauthorization reference
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     * This value is only present on preauthorization adjudications.
     */
    preAuthRef?: string[];
    /**
     * Extension for preAuthRef
     **/
    _preAuthRef?: Element[];
    /**
     * Preauthorization in-effect period
     * The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
     * This value is only present on preauthorization adjudications.
     */
    preAuthRefPeriod?: Period[];
    /**
     * Package billing code
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
     */
    diagnosisRelatedGroup?: CodeableConcept;
    /**
     * Care Team members
     * The members of the team who provided the products and services.
     */
    careTeam?: ExplanationOfBenefitCareTeam[];
    /**
     * Supporting information
     * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
     * Often there are multiple jurisdiction specific valuesets which are required.
     */
    supportingInfo?: ExplanationOfBenefitSupportingInfo[];
    /**
     * Pertinent diagnosis information
     * Information about diagnoses relevant to the claim items.
     */
    diagnosis?: ExplanationOfBenefitDiagnosis[];
    /**
     * Clinical procedures performed
     * Procedures performed on the patient relevant to the billing items with the claim.
     */
    procedure?: ExplanationOfBenefitProcedure[];
    /**
     * Precedence (primary, secondary, etc.)
     * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
     */
    precedence?: positiveInt;
    /**
     * Extension for precedence
     **/
    _precedence?: Element;
    /**
     * Patient insurance information
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
     */
    insurance?: ExplanationOfBenefitInsurance[];
    /**
     * Details of the event
     * Details of a accident which resulted in injuries which required the products and services listed in the claim.
     */
    accident?: ExplanationOfBenefitAccident;
    /**
     * Paid by the patient
     * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
     */
    patientPaid?: Money;
    /**
     * Product or service provided
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    item?: ExplanationOfBenefitItem[];
    /**
     * Insurer added line items
     * The first-tier service adjudications for payor added product or service lines.
     */
    addItem?: ExplanationOfBenefitAddItem[];
    /**
     * Header-level adjudication
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    adjudication?: ExplanationOfBenefitItemAdjudication[];
    /**
     * Adjudication totals
     * Categorized monetary totals for the adjudication.
     * Totals for amounts submitted, co-pays, benefits payable etc.
     */
    total?: ExplanationOfBenefitTotal[];
    /**
     * Payment Details
     * Payment details for the adjudication of the claim.
     */
    payment?: ExplanationOfBenefitPayment;
    /**
     * Printed form identifier
     * A code for the form to be used for printing the content.
     * May be needed to identify specific jurisdictional forms.
     */
    formCode?: CodeableConcept;
    /**
     * Printed reference or actual form
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     * Needed to permit insurers to include the actual form.
     */
    form?: Attachment;
    /**
     * Note concerning adjudication
     * A note that describes or explains adjudication results in a human readable form.
     */
    processNote?: ExplanationOfBenefitProcessNote[];
    /**
     * When the benefits are applicable
     * The term of the benefits documented in this response.
     * Not applicable when use=claim.
     */
    benefitPeriod?: Period;
    /**
     * Balance by Benefit Category
     * Balance by Benefit Category.
     */
    benefitBalance?: ExplanationOfBenefitBenefitBalance[];
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ExplanationOfBenefitStatus;
    /**
     * claim | preauthorization | predetermination
     * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
     */
    use: ExplanationOfBenefitUse;
    /**
     * queued | complete | error | partial
     * The outcome of the claim, predetermination, or preauthorization processing.
     * The resource may be used to indicate that the Claim/Preauthorization/Pre-determination has been received but processing has not begun (queued); that it has been processed and one or more errors have been detected (error); no errors were detected and some of the adjudication processing has been performed (partial); or all of the adjudication processing has completed without errors (complete).
     */
    outcome: ExplanationOfBenefitClaimOutcome;
}
/**
 * Who or what participated in the activities related to the family member history and how they were involved
 * Indicates who or what participated in the activities related to the family member history and how they were involved.
 */
export interface FamilyMemberHistoryParticipant extends BackboneElement {
    /**
     * Type of involvement
     * Distinguishes the type of involvement of the actor in the activities related to the family member history.
     */
    function?: CodeableConcept;
    /**
     * Who or what participated in the activities related to the family member history
     * Indicates who or what participated in the activities related to the family member history.
     */
    actor: Reference;
}
/**
 * Condition that the related person had
 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
    /**
     * Condition suffered by relation
     * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
     */
    code: CodeableConcept;
    /**
     * deceased | permanent disability | etc
     * Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
     */
    outcome?: CodeableConcept;
    /**
     * Whether the condition contributed to the cause of death
     * This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
     */
    contributedToDeath?: boolean;
    /**
     * Extension for contributedToDeath
     **/
    _contributedToDeath?: Element;
    /**
     * When condition first manifested
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetAge?: Age;
    /**
     * When condition first manifested
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetRange?: Range;
    /**
     * When condition first manifested
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetPeriod?: Period;
    /**
     * When condition first manifested
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetString?: string;
    /**
     * Extension for onsetString
     **/
    _onsetString?: Element;
    /**
     * Extra information about condition
     * An area where general notes can be placed about this specific condition.
     */
    note?: Annotation[];
}
/**
 * Procedures that the related person had
 * The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure.
 */
export interface FamilyMemberHistoryProcedure extends BackboneElement {
    /**
     * Procedures performed on the related person
     * The actual procedure specified. Could be a coded procedure or a less specific string depending on how much is known about the procedure and the capabilities of the creating system.
     */
    code: CodeableConcept;
    /**
     * What happened following the procedure
     * Indicates what happened following the procedure. If the procedure resulted in death, deceased date is captured on the relation.
     */
    outcome?: CodeableConcept;
    /**
     * Whether the procedure contributed to the cause of death
     * This procedure contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
     */
    contributedToDeath?: boolean;
    /**
     * Extension for contributedToDeath
     **/
    _contributedToDeath?: Element;
    /**
     * When the procedure was performed
     * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedAge?: Age;
    /**
     * When the procedure was performed
     * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedRange?: Range;
    /**
     * When the procedure was performed
     * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedPeriod?: Period;
    /**
     * When the procedure was performed
     * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedString?: string;
    /**
     * Extension for performedString
     **/
    _performedString?: Element;
    /**
     * When the procedure was performed
     * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedDateTime?: dateTime;
    /**
     * Extension for performedDateTime
     **/
    _performedDateTime?: Element;
    /**
     * Extra information about the procedure
     * An area where general notes can be placed about this specific procedure.
     */
    note?: Annotation[];
}
/**
 * Information about patient's relatives, relevant for patient
 * Significant health conditions for a person related to the patient relevant in the context of care for the patient.
 */
export interface FamilyMemberHistory extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'FamilyMemberHistory';
    /**
     * External Id(s) for this record
     * Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * subject-unknown | withheld | unable-to-obtain | deferred
     * Describes why the family member's history is not available.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * Patient history is about
     * The person who this history concerns.
     * This is not the family member.
     */
    patient: Reference;
    /**
     * When history was recorded or last updated
     * The date (and possibly time) when the family member history was recorded or last updated.
     * This should be captured even if the same as the date on the List aggregating the full family history.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who or what participated in the activities related to the family member history and how they were involved
     * Indicates who or what participated in the activities related to the family member history and how they were involved.
     */
    participant?: FamilyMemberHistoryParticipant[];
    /**
     * The family member described
     * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Relationship to the subject
     * The type of relationship this person has to the patient (father, mother, brother etc.).
     */
    relationship: CodeableConcept;
    /**
     * male | female | other | unknown
     * The birth sex of the family member.
     * This element should ideally reflect whether the individual is genetically male or female.  However, as reported information based on the knowledge of the patient or reporting friend/relative, there may be situations where the reported sex might not be totally accurate.  E.g. 'Aunt Sue' might be XY rather than XX.  Questions soliciting this information should be phrased to encourage capture of genetic sex where known.  However, systems performing analysis should also allow for the possibility of imprecision with this element.
     */
    sex?: CodeableConcept;
    /**
     * (approximate) date of birth
     * The actual or approximate date of birth of the relative.
     */
    bornPeriod?: Period;
    /**
     * (approximate) date of birth
     * The actual or approximate date of birth of the relative.
     */
    bornDate?: date;
    /**
     * Extension for bornDate
     **/
    _bornDate?: Element;
    /**
     * (approximate) date of birth
     * The actual or approximate date of birth of the relative.
     */
    bornString?: string;
    /**
     * Extension for bornString
     **/
    _bornString?: Element;
    /**
     * (approximate) age
     * The age of the relative at the time the family member history is recorded.
     * use estimatedAge to indicate whether the age is actual or not.
     */
    ageAge?: Age;
    /**
     * (approximate) age
     * The age of the relative at the time the family member history is recorded.
     * use estimatedAge to indicate whether the age is actual or not.
     */
    ageRange?: Range;
    /**
     * (approximate) age
     * The age of the relative at the time the family member history is recorded.
     * use estimatedAge to indicate whether the age is actual or not.
     */
    ageString?: string;
    /**
     * Extension for ageString
     **/
    _ageString?: Element;
    /**
     * Age is estimated?
     * If true, indicates that the age value specified is an estimated value.
     * This element is labeled as a modifier because the fact that age is estimated can/should change the results of any algorithm that calculates based on the specified age.
     */
    estimatedAge?: boolean;
    /**
     * Extension for estimatedAge
     **/
    _estimatedAge?: Element;
    /**
     * Dead? How old/when?
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedBoolean?: boolean;
    /**
     * Extension for deceasedBoolean
     **/
    _deceasedBoolean?: Element;
    /**
     * Dead? How old/when?
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedAge?: Age;
    /**
     * Dead? How old/when?
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedRange?: Range;
    /**
     * Dead? How old/when?
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedDate?: date;
    /**
     * Extension for deceasedDate
     **/
    _deceasedDate?: Element;
    /**
     * Dead? How old/when?
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedString?: string;
    /**
     * Extension for deceasedString
     **/
    _deceasedString?: Element;
    /**
     * Why was family member history performed?
     * Describes why the family member history occurred in coded or textual form, or Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
     * Textual reasons can be captured using reasonCode.text.
     */
    reason?: CodeableReference[];
    /**
     * General note about related person
     * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
     */
    note?: Annotation[];
    /**
     * Condition that the related person had
     * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
     */
    condition?: FamilyMemberHistoryCondition[];
    /**
     * Procedures that the related person had
     * The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure.
     */
    procedure?: FamilyMemberHistoryProcedure[];
    /**
     * partial | completed | entered-in-error | health-unknown
     * A code specifying the status of the record of the family history of a specific family member.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: FamilyMemberHistoryFamilyHistoryStatus;
}
/**
 * Key information to flag to healthcare providers
 * Prospective warnings of potential issues when providing care to the patient.
 */
export interface Flag extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Flag';
    /**
     * Business identifier
     * Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Clinical, administrative, etc
     * Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
     * The value set will often need to be adjusted based on local business rules and usage context.
     */
    category?: CodeableConcept[];
    /**
     * Coded or textual message to display to user
     * The coded value or textual component of the flag to display to the user.
     * If non-coded, use CodeableConcept.text.  This element should always be included in the narrative.
     */
    code: CodeableConcept;
    /**
     * Who/What is flag about?
     * The patient, related person, location, group, organization, or practitioner etc. this is about record this flag is associated with.
     */
    subject: Reference;
    /**
     * Time period when flag is active
     * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
     */
    period?: Period;
    /**
     * Alert relevant during encounter
     * This alert is only relevant during the encounter.
     * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
     */
    encounter?: Reference;
    /**
     * Flag creator
     * The person, organization or device that created the flag.
     */
    author?: Reference;
    /**
     * active | inactive | entered-in-error
     * Supports basic workflow.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: FlagStatus;
}
/**
 * Definition of a FormularyItem
 * This resource describes a product or service that is available through a program and includes the conditions and constraints of availability.  All of the information in this resource is specific to the inclusion of the item in the formulary and is not inherent to the item itself.
 */
export interface FormularyItem extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'FormularyItem';
    /**
     * Business identifier for this formulary item
     * Business identifier for this formulary item.
     */
    identifier?: Identifier[];
    /**
     * Codes that identify this formulary item
     * A code (or set of codes) that specify the product or service that is identified by this formulary item.
     */
    code?: CodeableConcept;
    /**
     * active | entered-in-error | inactive
     * The validity about the information of the formulary item and not of the underlying product or service itself.
     * This status is intended to identify if the formulary item in a local system is in active use within the formulary.  For example, a formulary might include a medicinal product and the status relates to its inclusion.  At some point in the future, if the status of the formulary item is changed to "inactive" that means that it is no longer valid in the formulary.  But the product itself might still be in active use and might be included in other formularies.
     */
    status?: FormularyItemStatus;
}
/**
 * Inputs for the analysis event
 * Inputs for the analysis event.
 */
export interface GenomicStudyAnalysisInput extends BackboneElement {
    /**
     * File containing input data
     * File containing input data.
     */
    file?: Reference;
    /**
     * Type of input data (e.g., BAM, CRAM, or FASTA)
     * Type of input data, e.g., BAM, CRAM, or FASTA.
     */
    type?: CodeableConcept;
    /**
     * The analysis event or other GenomicStudy that generated this input file
     * The analysis event or other GenomicStudy that generated this input file.
     */
    generatedByIdentifier?: Identifier;
    /**
     * The analysis event or other GenomicStudy that generated this input file
     * The analysis event or other GenomicStudy that generated this input file.
     */
    generatedByReference?: Reference;
}
/**
 * Outputs for the analysis event
 * Outputs for the analysis event.
 */
export interface GenomicStudyAnalysisOutput extends BackboneElement {
    /**
     * File containing output data
     * File containing output data.
     */
    file?: Reference;
    /**
     * Type of output data (e.g., VCF, MAF, or BAM)
     * Type of output data, e.g., VCF, MAF, or BAM.
     */
    type?: CodeableConcept;
}
/**
 * Performer for the analysis event
 * Performer for the analysis event.
 */
export interface GenomicStudyAnalysisPerformer extends BackboneElement {
    /**
     * The organization, healthcare professional, or others who participated in performing this analysis
     * The organization, healthcare professional, or others who participated in performing this analysis.
     */
    actor?: Reference;
    /**
     * Role of the actor for this analysis
     * Role of the actor for this analysis.
     */
    role?: CodeableConcept;
}
/**
 * Devices used for the analysis (e.g., instruments, software), with settings and parameters
 * Devices used for the analysis (e.g., instruments, software), with settings and parameters.
 */
export interface GenomicStudyAnalysisDevice extends BackboneElement {
    /**
     * Device used for the analysis
     * Device used for the analysis.
     */
    device?: Reference;
    /**
     * Specific function for the device used for the analysis
     * Specific function for the device used for the analysis.
     */
    function?: CodeableConcept;
}
/**
 * Genomic Analysis Event
 * The details about a specific analysis that was performed in this GenomicStudy.
 */
export interface GenomicStudyAnalysis extends BackboneElement {
    /**
     * Identifiers for the analysis event
     * Identifiers for the analysis event.
     */
    identifier?: Identifier[];
    /**
     * Type of the methods used in the analysis (e.g., FISH, Karyotyping, MSI)
     * Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).
     */
    methodType?: CodeableConcept[];
    /**
     * Type of the genomic changes studied in the analysis (e.g., DNA, RNA, or AA change)
     * Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.
     */
    changeType?: CodeableConcept[];
    /**
     * Genome build that is used in this analysis
     * The reference genome build that is used in this analysis.
     */
    genomeBuild?: CodeableConcept;
    /**
     * The defined protocol that describes the analysis
     * The defined protocol that describes the analysis.
     */
    instantiatesCanonical?: canonical;
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element;
    /**
     * The URL pointing to an externally maintained protocol that describes the analysis
     * The URL pointing to an externally maintained protocol that describes the analysis.
     */
    instantiatesUri?: uri;
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element;
    /**
     * Name of the analysis event (human friendly)
     * Name of the analysis event (human friendly).
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * What the genomic analysis is about, when it is not about the subject of record
     * The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.
     * If the focus of the analysis is not known, the value of this field SHALL use the data absent extension.
     */
    focus?: Reference[];
    /**
     * The specimen used in the analysis event
     * The specimen used in the analysis event.
     */
    specimen?: Reference[];
    /**
     * The date of the analysis event
     * The date of the analysis event.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Any notes capture with the analysis event
     * Any notes capture with the analysis event.
     */
    note?: Annotation[];
    /**
     * The protocol that was performed for the analysis event
     * The protocol that was performed for the analysis event.
     */
    protocolPerformed?: Reference;
    /**
     * The genomic regions to be studied in the analysis (BED file)
     * The genomic regions to be studied in the analysis (BED file).
     */
    regionsStudied?: Reference[];
    /**
     * Genomic regions actually called in the analysis event (BED file)
     * Genomic regions actually called in the analysis event (BED file).
     */
    regionsCalled?: Reference[];
    /**
     * Inputs for the analysis event
     * Inputs for the analysis event.
     */
    input?: GenomicStudyAnalysisInput[];
    /**
     * Outputs for the analysis event
     * Outputs for the analysis event.
     */
    output?: GenomicStudyAnalysisOutput[];
    /**
     * Performer for the analysis event
     * Performer for the analysis event.
     */
    performer?: GenomicStudyAnalysisPerformer[];
    /**
     * Devices used for the analysis (e.g., instruments, software), with settings and parameters
     * Devices used for the analysis (e.g., instruments, software), with settings and parameters.
     */
    device?: GenomicStudyAnalysisDevice[];
}
/**
 * Genomic Study
 * A GenomicStudy is a set of analyses performed to analyze and generate genomic data.
 */
export interface GenomicStudy extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'GenomicStudy';
    /**
     * Identifiers for this genomic study
     * Identifiers for this genomic study.
     */
    identifier?: Identifier[];
    /**
     * The type of the study (e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling)
     * The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.
     */
    type?: CodeableConcept[];
    /**
     * The primary subject of the genomic study
     * The primary subject of the genomic study.
     */
    subject: Reference;
    /**
     * The healthcare event with which this genomics study is associated
     * The healthcare event with which this genomics study is associated.
     */
    encounter?: Reference;
    /**
     * When the genomic study was started
     * When the genomic study was started.
     */
    startDate?: dateTime;
    /**
     * Extension for startDate
     **/
    _startDate?: Element;
    /**
     * Event resources that the genomic study is based on
     * Event resources that the genomic study is based on.
     */
    basedOn?: Reference[];
    /**
     * Healthcare professional who requested or referred the genomic study
     * Healthcare professional who requested or referred the genomic study.
     */
    referrer?: Reference;
    /**
     * Healthcare professionals who interpreted the genomic study
     * Healthcare professionals who interpreted the genomic study.
     */
    interpreter?: Reference[];
    /**
     * Why the genomic study was performed
     * Why the genomic study was performed.
     */
    reason?: CodeableReference[];
    /**
     * The defined protocol that describes the study
     * The defined protocol that describes the study.
     */
    instantiatesCanonical?: canonical;
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element;
    /**
     * The URL pointing to an externally maintained protocol that describes the study
     * The URL pointing to an externally maintained protocol that describes the study.
     */
    instantiatesUri?: uri;
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element;
    /**
     * Comments related to the genomic study
     * Comments related to the genomic study.
     */
    note?: Annotation[];
    /**
     * Description of the genomic study
     * Description of the genomic study.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Genomic Analysis Event
     * The details about a specific analysis that was performed in this GenomicStudy.
     */
    analysis?: GenomicStudyAnalysis[];
    /**
     * registered | available | cancelled | entered-in-error | unknown
     * The status of the genomic study.
     */
    status: GenomicStudyStatus;
}
/**
 * Target outcome for the goal
 * Indicates what should be done by when.
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export interface GoalTarget extends BackboneElement {
    /**
     * The parameter whose value is being tracked
     * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    measure?: CodeableConcept;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailQuantity?: Quantity;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailRange?: Range;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailString?: string;
    /**
     * Extension for detailString
     **/
    _detailString?: Element;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailBoolean?: boolean;
    /**
     * Extension for detailBoolean
     **/
    _detailBoolean?: Element;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailInteger?: integer;
    /**
     * Extension for detailInteger
     **/
    _detailInteger?: Element;
    /**
     * The target value to be achieved
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
     */
    detailRatio?: Ratio;
    /**
     * Reach goal on or before
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDate?: date;
    /**
     * Extension for dueDate
     **/
    _dueDate?: Element;
    /**
     * Reach goal on or before
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDuration?: Duration;
}
/**
 * Describes the intended objective(s) for a patient, group or organization
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
 */
export interface Goal extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Goal';
    /**
     * External Ids for this goal
     * Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * in-progress | improving | worsening | no-change | achieved | sustaining | not-achieved | no-progress | not-attainable
     * Describes the progression, or lack thereof, towards the goal against the target.
     */
    achievementStatus?: CodeableConcept;
    /**
     * E.g. Treatment, dietary, behavioral, etc
     * Indicates a category the goal falls within.
     */
    category?: CodeableConcept[];
    /**
     * After meeting the goal, ongoing activity is needed to sustain the goal objective
     * After meeting the goal, ongoing activity is needed to sustain the goal objective.
     * For example, getting a yellow fever vaccination for a planned trip is a goal that is designed to be completed (continuous = false).  A goal to sustain HbA1c levels would not be a one-time goal (continuous = true).
     */
    continuous?: boolean;
    /**
     * Extension for continuous
     **/
    _continuous?: Element;
    /**
     * high-priority | medium-priority | low-priority
     * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
     * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)

The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
     */
    priority?: CodeableConcept;
    /**
     * Code or text describing goal
     * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
     * If no code is available, use CodeableConcept.text.
     */
    description: CodeableConcept;
    /**
     * Who this goal is intended for
     * Identifies the patient, group or organization for whom the goal is being established.
     */
    subject: Reference;
    /**
     * When goal pursuit begins
     * The date or event after which the goal should begin being pursued.
     */
    startDate?: date;
    /**
     * Extension for startDate
     **/
    _startDate?: Element;
    /**
     * When goal pursuit begins
     * The date or event after which the goal should begin being pursued.
     */
    startCodeableConcept?: CodeableConcept;
    /**
     * Target outcome for the goal
     * Indicates what should be done by when.
     * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
     */
    target?: GoalTarget[];
    /**
     * When goal status took effect
     * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
     * To see the date for past statuses, query history.
     */
    statusDate?: date;
    /**
     * Extension for statusDate
     **/
    _statusDate?: Element;
    /**
     * Reason for current status
     * Captures the reason for the current status.
     * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
     */
    statusReason?: string;
    /**
     * Extension for statusReason
     **/
    _statusReason?: Element;
    /**
     * Who's responsible for creating Goal?
     * Indicates whose goal this is - patient goal, practitioner goal, etc.
     * This is the individual or team responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
     */
    source?: Reference;
    /**
     * Issues addressed by this goal
     * The identified conditions and other health record elements that are intended to be addressed by the goal.
     */
    addresses?: Reference[];
    /**
     * Comments about the goal
     * Any comments related to the goal.
     * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
     */
    note?: Annotation[];
    /**
     * What result was achieved regarding the goal?
     * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
     * Note that this should not duplicate the goal status; The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
     */
    outcome?: CodeableReference[];
    /**
     * proposed | planned | accepted | active | on-hold | completed | cancelled | entered-in-error | rejected
     * The state of the goal throughout its lifecycle.
     * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
     */
    lifecycleStatus: GoalLifecycleStatus;
}
/**
 * Potential target for the link
 * Potential target for the link.
 */
export interface GraphDefinitionNode extends BackboneElement {
    /**
     * Internal ID - target for link references
     * Internal ID of node - target for link references.
     */
    nodeId: id;
    /**
     * Extension for nodeId
     **/
    _nodeId?: Element;
    /**
     * Why this node is specified
     * Information about why this node is of interest in this graph definition.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Type of resource this link refers to
     * Type of resource this link refers to.
     */
    type: code;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Profile for the target resource
     * Profile for the target resource.
     */
    profile?: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
}
/**
 * Compartment Consistency Rules
 * Compartment Consistency Rules.
 */
export interface GraphDefinitionLinkCompartment extends BackboneElement {
    /**
     * Custom rule, as a FHIRPath expression
     * Custom rule, as a FHIRPath expression.
     */
    expression?: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * Documentation for FHIRPath expression
     * Documentation for FHIRPath expression.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * where | requires
     * Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
     * All conditional rules are evaluated; if they are true, then the rules are evaluated.
     */
    use: GraphDefinitionGraphCompartmentUse;
    /**
     * identical | matching | different | custom
     * identical | matching | different | no-rule | custom.
     */
    rule: GraphDefinitionGraphCompartmentRule;
    /**
     * Patient | Encounter | RelatedPerson | Practitioner | Device | EpisodeOfCare
     * Identifies the compartment.
     */
    code: GraphDefinitionCompartmentCode;
}
/**
 * Links this graph makes rules about
 * Links this graph makes rules about.
 */
export interface GraphDefinitionLink extends BackboneElement {
    /**
     * Why this link is specified
     * Information about why this link is of interest in this graph definition.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Minimum occurrences for this link
     * Minimum occurrences for this link.
     */
    min?: integer;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Maximum occurrences for this link
     * Maximum occurrences for this link.
     */
    max?: string;
    /**
     * Extension for max
     **/
    _max?: Element;
    /**
     * Source Node for this link
     * The source node for this link.
     */
    sourceId: id;
    /**
     * Extension for sourceId
     **/
    _sourceId?: Element;
    /**
     * Path in the resource that contains the link
     * A FHIRPath expression that identifies one of FHIR References to other resources.
     * The path expression cannot contain a resolve() function. If there is no path, the link is a reverse lookup, using target.params. If the path is "*" then this means all references in the resource.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * Which slice (if profiled)
     * Which slice (if profiled).
     */
    sliceName?: string;
    /**
     * Extension for sliceName
     **/
    _sliceName?: Element;
    /**
     * Target Node for this link
     * The target node for this link.
     */
    targetId: id;
    /**
     * Extension for targetId
     **/
    _targetId?: Element;
    /**
     * Criteria for reverse lookup
     * A set of parameters to look up.
     * At least one of the parameters must have the value {ref} which identifies the focus resource.
     */
    params?: string;
    /**
     * Extension for params
     **/
    _params?: Element;
    /**
     * Compartment Consistency Rules
     * Compartment Consistency Rules.
     */
    compartment?: GraphDefinitionLinkCompartment[];
}
/**
 * Definition of a graph of resources
 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
 */
export interface GraphDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'GraphDefinition';
    /**
     * Canonical identifier for this graph definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the GraphDefinition (business identifier)
     * A formal identifier that is used to identify this GraphDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the graph definition
     * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the graph definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this graph definition (computer friendly)
     * A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this graph definition (human friendly)
     * A short, descriptive, user-friendly title for the capability statement.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of graph definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the graph definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the graph definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the graph definition
     * A free text natural language description of the graph definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the graph definition is presumed to be the predominant language in the place the graph definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for graph definition (if applicable)
     * A legal or geographic region in which the graph definition is intended to be used.
     * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this graph definition is defined
     * Explanation of why this graph definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the graph definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the graph definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the graph definition.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Starting Node
     * The Node at which instances of this graph start. If there is no nominated start, the graph can start at any of the nodes.
     */
    start?: id;
    /**
     * Extension for start
     **/
    _start?: Element;
    /**
     * Potential target for the link
     * Potential target for the link.
     */
    node?: GraphDefinitionNode[];
    /**
     * Links this graph makes rules about
     * Links this graph makes rules about.
     */
    link?: GraphDefinitionLink[];
    /**
     * draft | active | retired | unknown
     * The status of this graph definition. Enables tracking the life-cycle of the content.
     * Allows filtering of graph definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: GraphDefinitionPublicationStatus;
}
/**
 * Include / Exclude group members by Trait
 * Identifies traits whose presence r absence is shared by members of the group.
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export interface GroupCharacteristic extends BackboneElement {
    /**
     * Kind of characteristic
     * A code that identifies the kind of trait being asserted.
     */
    code: CodeableConcept;
    /**
     * Value held by characteristic
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     * For Range, it means members of the group have a value that falls somewhere within the specified range.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value held by characteristic
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     * For Range, it means members of the group have a value that falls somewhere within the specified range.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value held by characteristic
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     * For Range, it means members of the group have a value that falls somewhere within the specified range.
     */
    valueQuantity?: Quantity;
    /**
     * Value held by characteristic
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     * For Range, it means members of the group have a value that falls somewhere within the specified range.
     */
    valueRange?: Range;
    /**
     * Value held by characteristic
     * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
     * For Range, it means members of the group have a value that falls somewhere within the specified range.
     */
    valueReference?: Reference;
    /**
     * Group includes or excludes
     * If true, indicates the characteristic is one that is NOT held by members of the group.
     * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
     */
    exclude: boolean;
    /**
     * Extension for exclude
     **/
    _exclude?: Element;
    /**
     * Period over which characteristic is tested
     * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
     */
    period?: Period;
}
/**
 * Who or what is in group
 * Identifies the resource instances that are members of the group.
 */
export interface GroupMember extends BackboneElement {
    /**
     * Reference to the group member
     * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
     */
    entity: Reference;
    /**
     * Period member belonged to the group
     * The period that the member was in the group, if known.
     */
    period?: Period;
    /**
     * If member is no longer in group
     * A flag to indicate that the member is no longer in the group, but previously may have been a member.
     */
    inactive?: boolean;
    /**
     * Extension for inactive
     **/
    _inactive?: Element;
}
/**
 * Group of multiple entities
 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
 * If both Group.characteristic and Group.member are present, then the members are the individuals who were found who met the characteristic.  It's possible that there might be other candidate members who meet the characteristic and aren't (yet) in the list.  All members SHALL have the listed characteristics.
 */
export interface Group extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Group';
    /**
     * Business Identifier for this Group
     * Business identifiers assigned to this participant by one of the applications involved.  These identifiers remain constant as the resource is updated and propagates from server to server.
     * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.
     */
    identifier?: Identifier[];
    /**
     * Whether this group's record is in active use
     * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * Kind of Group members
     * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
     * This would generally be omitted for Person resources.
     */
    code?: CodeableConcept;
    /**
     * Label for Group
     * A label assigned to the group for human identification and communication.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Natural language description of the group
     * Explanation of what the group represents and how it is intended to be used.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Number of members
     * A count of the number of resource instances that are part of the group.
     * Note that the quantity may be less than the number of members if some of the members are not active.
     */
    quantity?: unsignedInt;
    /**
     * Extension for quantity
     **/
    _quantity?: Element;
    /**
     * Entity that is the custodian of the Group's definition
     * Entity responsible for defining and maintaining Group characteristics and/or registered members.
     * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
     */
    managingEntity?: Reference;
    /**
     * Include / Exclude group members by Trait
     * Identifies traits whose presence r absence is shared by members of the group.
     * All the identified characteristics must be true for an entity to a member of the group.
     */
    characteristic?: GroupCharacteristic[];
    /**
     * Who or what is in group
     * Identifies the resource instances that are members of the group.
     */
    member?: GroupMember[];
    /**
     * person | animal | practitioner | device | careteam | healthcareservice | location | organization | relatedperson | specimen
     * Identifies the broad classification of the kind of resources the group includes.
     * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, PractitionerRole, Device, CareTeam, HealthcareService, Location, Organization, RelatedPerson, or Specimen for the other types.), or a Group of the resources of the appropriate type.
     */
    type: GroupType;
    /**
     * definitional | enumerated
     * Basis for membership in the Group:

* 'definitional': The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete.
* 'enumerated': The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member.
     */
    membership: GroupMembership;
}
/**
 * The formal response to a guidance request
 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
 */
export interface GuidanceResponse extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'GuidanceResponse';
    /**
     * The identifier of the request associated with this response, if any
     * The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
     */
    requestIdentifier?: Identifier;
    /**
     * Business identifier
     * Allows a service to provide  unique, business identifiers for the response.
     */
    identifier?: Identifier[];
    /**
     * What guidance was requested
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleUri?: uri;
    /**
     * Extension for moduleUri
     **/
    _moduleUri?: Element;
    /**
     * What guidance was requested
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCanonical?: canonical;
    /**
     * Extension for moduleCanonical
     **/
    _moduleCanonical?: Element;
    /**
     * What guidance was requested
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCodeableConcept?: CodeableConcept;
    /**
     * Patient the request was performed for
     * The patient for which the request was processed.
     */
    subject?: Reference;
    /**
     * Encounter during which the response was returned
     * The encounter during which this response was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official copmletion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference;
    /**
     * When the guidance response was processed
     * Indicates when the guidance response was processed.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * Device returning the guidance
     * Provides a reference to the device that performed the guidance.
     */
    performer?: Reference;
    /**
     * Why guidance is needed
     * Describes the reason for the guidance response in coded or textual form, or Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
     * Although this reference can be used to point to any resource, it is typically expected to refer to subject-specific data appropriate to the subject of the guidance. For example, patient-based decision support would be expected to reference patient-level data. In addition, implementations should provide as much detail as possible by using the [http://hl7.org/fhir/StructureDefinition/targetElement](http://hl7.org/fhir/extensions/StructureDefinition-targetElement.html) and [http://hl7.org/fhir/StructureDefinition/targetPath](http://hl7.org/fhir/extensions/StructureDefinition-targetPath.html) extensions to indicate the specific elements relevant to providing the reason for the guidance.
     */
    reason?: CodeableReference[];
    /**
     * Additional notes about the response
     * Provides a mechanism to communicate additional information about the response.
     */
    note?: Annotation[];
    /**
     * Messages resulting from the evaluation of the artifact or artifacts
     * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
     */
    evaluationMessage?: Reference;
    /**
     * The output parameters of the evaluation, if any
     * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
     */
    outputParameters?: Reference;
    /**
     * Proposed actions, if any
     * The actions, if any, produced by the evaluation of the artifact.
     */
    result?: Reference[];
    /**
     * Additional required data
     * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
     */
    dataRequirement?: DataRequirement[];
    /**
     * success | data-requested | data-required | in-progress | failure | entered-in-error
     * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: GuidanceResponseStatus;
}
/**
 * Specific eligibility requirements required to use the service
 * Does this service have specific eligibility requirements that need to be met in order to use the service?
 */
export interface HealthcareServiceEligibility extends BackboneElement {
    /**
     * Coded value for the eligibility
     * Coded value for the eligibility.
     */
    code?: CodeableConcept;
    /**
     * Describes the eligibility conditions for the service
     * Describes the eligibility conditions for the service.
     * The description of service eligibility should, in general, not exceed one or two paragraphs. It should be sufficient for a prospective consumer to determine if they are likely to be eligible or not. Where eligibility requirements and conditions are complex, it may simply be noted that an eligibility assessment is required. Where eligibility is determined by an outside source, such as an Act of Parliament, this should be noted, preferably with a reference to a commonly available copy of the source document such as a web page.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
}
/**
 * The details of a healthcare service available at a location
 * The details of a healthcare service available at a location.
 */
export interface HealthcareService extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'HealthcareService';
    /**
     * External identifiers for this item
     * External identifiers for this item.
     */
    identifier?: Identifier[];
    /**
     * Whether this HealthcareService record is in active use
     * This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.
     * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * Organization that provides this service
     * The organization that provides this healthcare service.
     * This property is recommended to be the same as the Location's managingOrganization, and if not provided should be interpreted as such. If the Location does not have a managing Organization, then this property should be populated.
     */
    providedBy?: Reference;
    /**
     * The service within which this service is offered
     * When the HealthcareService is representing a specific, schedulable service, the availableIn property can refer to a generic service.
     * For example, if there is a generic Radiology service that offers CT Scans, MRIs, etc.  You could have HealthcareService resources for the CT Scans and MRIs, which have an offeredIn reference to the Radiology HealthcareService.
     */
    offeredIn?: Reference[];
    /**
     * Broad category of service being performed or delivered
     * Identifies the broad category of service being performed or delivered.
     * Selecting a Service Category then determines the list of relevant service types that can be selected in the primary service type.
     */
    category?: CodeableConcept[];
    /**
     * Type of service that may be delivered or performed
     * The specific type of service that may be delivered or performed.
     */
    type?: CodeableConcept[];
    /**
     * Specialties handled by the HealthcareService
     * Collection of specialties handled by the Healthcare service. This is more of a medical term.
     */
    specialty?: CodeableConcept[];
    /**
     * Location(s) where service may be provided
     * The location(s) where this healthcare service may be provided.
     */
    location?: Reference[];
    /**
     * Description of service as presented to a consumer while searching
     * Further description of the service as it would be presented to a consumer while searching.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Additional description and/or any specific issues not covered elsewhere
     * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
     * Would expect that a user would not see this information on a search results, and it would only be available when viewing the complete details of the service.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * Extra details about the service that can't be placed in the other fields
     * Extra details about the service that can't be placed in the other fields.
     */
    extraDetails?: markdown;
    /**
     * Extension for extraDetails
     **/
    _extraDetails?: Element;
    /**
     * Facilitates quick identification of the service
     * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
     */
    photo?: Attachment;
    /**
     * Official contact details for the HealthcareService
     * The contact details of communication devices available relevant to the specific HealthcareService. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     * The address/telecom use code 'home' are not to be used. Note that these contacts are not the contact details of people who provide the service (that would be through PractitionerRole), these are official contacts for the HealthcareService itself for specific purposes. E.g. Mailing Addresses, Billing Addresses, Contact numbers for Booking or Billing Enquiries, general web address, web address for online bookings etc.

If this is empty (or the type of interest is empty), refer to the location's contacts.
     */
    contact?: ExtendedContactDetail[];
    /**
     * Location(s) service is intended for/available to
     * The location(s) that this service is available to (not where the service is provided).
     * The locations referenced by the coverage area can include both specific locations, including areas, and also conceptual domains too (mode = kind), such as a physical area (tri-state area) and some other attribute (covered by Example Care Organization). These types of Locations are often not managed by any specific organization. This could also include generic locations such as "in-home".
     */
    coverageArea?: Reference[];
    /**
     * Conditions under which service is available/offered
     * The code(s) that detail the conditions under which the healthcare service is available/offered.
     * The provision means being commissioned by, contractually obliged or financially sourced. Types of costings that may apply to this healthcare service, such if the service may be available for free, some discounts available, or fees apply.
     */
    serviceProvisionCode?: CodeableConcept[];
    /**
     * Specific eligibility requirements required to use the service
     * Does this service have specific eligibility requirements that need to be met in order to use the service?
     */
    eligibility?: HealthcareServiceEligibility[];
    /**
     * Programs that this service is applicable to
     * Programs that this service is applicable to.
     * Programs are often defined externally to an Organization, commonly by governments; e.g. Home and Community Care Programs, Homeless Program, ….
     */
    program?: CodeableConcept[];
    /**
     * Collection of characteristics (attributes)
     * Collection of characteristics (attributes).
     * These could be such things as is wheelchair accessible.
     */
    characteristic?: CodeableConcept[];
    /**
     * The language that this service is offered in
     * Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
     * When using this property it indicates that the service is available with this language, it is not derived from the practitioners, and not all are required to use this language, just that this language is available while scheduling.
     */
    communication?: CodeableConcept[];
    /**
     * Ways that the service accepts referrals
     * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
     */
    referralMethod?: CodeableConcept[];
    /**
     * If an appointment is required for access to this service
     * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
     */
    appointmentRequired?: boolean;
    /**
     * Extension for appointmentRequired
     **/
    _appointmentRequired?: Element;
    /**
     * Times the healthcare service is available (including exceptions)
     * A collection of times that the healthcare service is available.
     * More detailed availability information may be provided in associated Schedule/Slot resources.

Systems may choose to render availability differently than it is exchanged on the interface. For example, rather than "Mon, Tue, Wed, Thur, Fri from 9am-12am; Mon, Tue, Wed, Thur, Fri from 1pm-5pm" as would be implied by two availableTime repetitions, an application could render this information as "Mon-Fri 9-12am and 1-5pm".

The NotAvailableTime(s) included indicate the general days/periods where the service is not available (for things such as public holidays).
     */
    availability?: Availability[];
    /**
     * Technical endpoints providing access to electronic services operated for the healthcare service
     * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
     */
    endpoint?: Reference[];
}
/**
 * Selector of the instances (human or machine)
 * Selector of the instances – human or machine.
 */
export interface ImagingSelectionPerformer extends BackboneElement {
    /**
     * Type of performer
     * Distinguishes the type of involvement of the performer.
     */
    function?: CodeableConcept;
    /**
     * Author (human or machine)
     * Author – human or machine.
     */
    actor?: Reference;
}
/**
 * A specific 2D region in a DICOM image / frame
 * Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
       If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list.
 */
export interface ImagingSelectionInstanceImageRegion2D extends BackboneElement {
    /**
     * Specifies the coordinates that define the image region
     * The coordinates describing the image region. Encoded as a set of (column, row) pairs that denote positions in the selected image / frames specified with sub-pixel resolution.
       The origin at the TLHC of the TLHC pixel is 0.0\0.0, the BRHC of the TLHC pixel is 1.0\1.0, and the BRHC of the BRHC pixel is the number of columns\rows in the image / frames. The values must be within the range 0\0 to the number of columns\rows in the image / frames.
     * For a description of how 2D coordinates are encoded, see [DICOM PS3.3 C.18.6](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.6.html).
     */
    coordinate: decimal[];
    /**
     * Extension for coordinate
     **/
    _coordinate?: Element[];
    /**
     * point | polyline | interpolated | circle | ellipse
     * Specifies the type of image region.
     * See [DICOM PS3.3 C.10.5.1.2](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.10.5.html#sect_C.10.5.1.2).
     */
    regionType: ImagingSelection2DGraphicType;
}
/**
 * A specific 3D region in a DICOM frame of reference
 * Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates.
 */
export interface ImagingSelectionInstanceImageRegion3D extends BackboneElement {
    /**
     * Specifies the coordinates that define the image region
     * The coordinates describing the image region. Encoded as an ordered set of (x,y,z) triplets (in mm and may be negative) that define a region of interest in the patient-relative Reference Coordinate System defined by ImagingSelection.frameOfReferenceUid element.
     * For a description of how 3D coordinates are encoded, see [DICOM PS3.3 C.18.9](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html).
     */
    coordinate: decimal[];
    /**
     * Extension for coordinate
     **/
    _coordinate?: Element[];
    /**
     * point | multipoint | polyline | polygon | ellipse | ellipsoid
     * Specifies the type of image region.
     * See [DICOM PS3.3 C.18.9.1.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html#sect_C.18.9.1.2).
     */
    regionType: ImagingSelection3DGraphicType;
}
/**
 * The selected instances
 * Each imaging selection includes one or more selected DICOM SOP instances.
 */
export interface ImagingSelectionInstance extends BackboneElement {
    /**
     * DICOM SOP Instance UID
     * The SOP Instance UID for the selected DICOM instance.
     * See [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html).
     */
    uid: id;
    /**
     * Extension for uid
     **/
    _uid?: Element;
    /**
     * DICOM Instance Number
     * The Instance Number for the selected DICOM instance.
     * See [DICOM PS3.3 C.7.6.1](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.html#sect_C.7.6.1).
       Note: A multiframe instance has a single instance number with each frame identified by a frame number.
     */
    number?: unsignedInt;
    /**
     * Extension for number
     **/
    _number?: Element;
    /**
     * DICOM SOP Class UID
     * The SOP Class UID for the selected DICOM instance.
     * See [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html).
     */
    sopClass?: Coding;
    /**
     * The selected subset of the SOP Instance
     * Selected subset of the SOP Instance. The content and format of the subset item is determined by the SOP Class of the selected instance.
       May be one of:
       - A list of frame numbers selected from a multiframe SOP Instance.
       - A list of Content Item Observation UID values selected from a DICOM SR or other structured document SOP Instance.
       - A list of segment numbers selected from a segmentation SOP Instance.
       - A list of Region of Interest (ROI) numbers selected from a radiotherapy structure set SOP Instance.
     */
    subset?: string[];
    /**
     * Extension for subset
     **/
    _subset?: Element[];
    /**
     * A specific 2D region in a DICOM image / frame
     * Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
       If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list.
     */
    imageRegion2D?: ImagingSelectionInstanceImageRegion2D[];
    /**
     * A specific 3D region in a DICOM frame of reference
     * Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates.
     */
    imageRegion3D?: ImagingSelectionInstanceImageRegion3D[];
}
/**
 * A selection of DICOM SOP instances and/or frames
 * A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.
 */
export interface ImagingSelection extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ImagingSelection';
    /**
     * Business Identifier for Imaging Selection
     * A unique identifier assigned to this imaging selection.
     * This is a business identifier, not a resource identifier -- see discussion under [Business Identifiers](resource.html#identifiers).
     */
    identifier?: Identifier[];
    /**
     * Subject of the selected instances
     * The patient, or group of patients, location, device, organization, procedure or practitioner this imaging selection is about and into whose or what record the imaging selection is placed.
     */
    subject?: Reference;
    /**
     * Date / Time when this imaging selection was created
     * The date and time this imaging selection was created.
     */
    issued?: instant;
    /**
     * Extension for issued
     **/
    _issued?: Element;
    /**
     * Selector of the instances (human or machine)
     * Selector of the instances – human or machine.
     */
    performer?: ImagingSelectionPerformer[];
    /**
     * Associated request
     * A list of the diagnostic requests that resulted in this imaging selection being performed.
     */
    basedOn?: Reference[];
    /**
     * Classifies the imaging selection
     * Classifies the imaging selection.
     */
    category?: CodeableConcept[];
    /**
     * Imaging Selection purpose text or code
     * Reason for referencing the selected content.
     * *All* code-value and, if present, component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
     */
    code: CodeableConcept;
    /**
     * DICOM Study Instance UID
     * The Study Instance UID for the DICOM Study from which the images were selected.
     * See [DICOM PS3.3 C.7.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.2.html).
     */
    studyUid?: id;
    /**
     * Extension for studyUid
     **/
    _studyUid?: Element;
    /**
     * The imaging study from which the imaging selection is derived
     * The imaging study from which the imaging selection is made.
     */
    derivedFrom?: Reference[];
    /**
     * The network service providing retrieval for the images referenced in the imaging selection
     * The network service providing retrieval access to the selected images, frames, etc. See implementation notes for information about using DICOM endpoints.
     * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach.
     */
    endpoint?: Reference[];
    /**
     * DICOM Series Instance UID
     * The Series Instance UID for the DICOM Series from which the images were selected.
     * See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
     */
    seriesUid?: id;
    /**
     * Extension for seriesUid
     **/
    _seriesUid?: Element;
    /**
     * DICOM Series Number
     * The Series Number for the DICOM Series from which the images were selected.
     * See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
     */
    seriesNumber?: unsignedInt;
    /**
     * Extension for seriesNumber
     **/
    _seriesNumber?: Element;
    /**
     * The Frame of Reference UID for the selected images
     * The Frame of Reference UID identifying the coordinate system that conveys spatial and/or temporal information for the selected images or frames.
     * See [DICOM PS3.3 C.7.4.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html).
     */
    frameOfReferenceUid?: id;
    /**
     * Extension for frameOfReferenceUid
     **/
    _frameOfReferenceUid?: Element;
    /**
     * Body part examined
     * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings.
     */
    bodySite?: CodeableReference;
    /**
     * Related resource that is the focus for the imaging selection
     * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
     * An imaging selection may reference a DICOM resource that itself references other DICOM resources.
       e.g. a presentation state references a set of source images or frames.
     */
    focus?: Reference[];
    /**
     * The selected instances
     * Each imaging selection includes one or more selected DICOM SOP instances.
     */
    instance?: ImagingSelectionInstance[];
    /**
     * available | entered-in-error | unknown
     * The current state of the ImagingSelection resource. This is not the status of any ImagingStudy, ServiceRequest, or Task resources associated with the ImagingSelection.
     * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
     */
    status: ImagingSelectionStatus;
}
/**
 * Who performed the series
 * Indicates who or what performed the series and how they were involved.
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
export interface ImagingStudySeriesPerformer extends BackboneElement {
    /**
     * Type of performance
     * Distinguishes the type of involvement of the performer in the series.
     */
    function?: CodeableConcept;
    /**
     * Who performed the series
     * Indicates who or what performed the series.
     */
    actor: Reference;
}
/**
 * A single SOP instance from the series
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
    /**
     * DICOM SOP Instance UID
     * The DICOM SOP Instance UID for this image or other DICOM content.
     * See  [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html#sect_C.12.1).
     */
    uid: id;
    /**
     * Extension for uid
     **/
    _uid?: Element;
    /**
     * DICOM class type
     * DICOM instance  type.
     */
    sopClass: Coding;
    /**
     * The number of this instance in the series
     * The number of instance in the series.
     */
    number?: unsignedInt;
    /**
     * Extension for number
     **/
    _number?: Element;
    /**
     * Description of instance
     * The description of the instance.
     * Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
}
/**
 * Each study has one or more series of instances
 * Each study has one or more series of images or other content.
 */
export interface ImagingStudySeries extends BackboneElement {
    /**
     * DICOM Series Instance UID for the series
     * The DICOM Series Instance UID for the series.
     * See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
     */
    uid: id;
    /**
     * Extension for uid
     **/
    _uid?: Element;
    /**
     * Numeric identifier of this series
     * The numeric identifier of this series in the study.
     */
    number?: unsignedInt;
    /**
     * Extension for number
     **/
    _number?: Element;
    /**
     * The modality used for this series
     * The distinct modality for this series. This may include both acquisition and non-acquisition modalities.
     */
    modality: CodeableConcept;
    /**
     * A short human readable summary of the series
     * A description of the series.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Number of Series Related Instances
     * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    numberOfInstances?: unsignedInt;
    /**
     * Extension for numberOfInstances
     **/
    _numberOfInstances?: Element;
    /**
     * Series access endpoint
     * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
     * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
     */
    endpoint?: Reference[];
    /**
     * Body part examined
     * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
     */
    bodySite?: CodeableReference;
    /**
     * Body part laterality
     * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
     */
    laterality?: CodeableConcept;
    /**
     * Specimen imaged
     * The specimen imaged, e.g., for whole slide imaging of a biopsy.
     */
    specimen?: Reference[];
    /**
     * When the series started
     * The date and time the series was started.
     */
    started?: dateTime;
    /**
     * Extension for started
     **/
    _started?: Element;
    /**
     * Who performed the series
     * Indicates who or what performed the series and how they were involved.
     * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
     */
    performer?: ImagingStudySeriesPerformer[];
    /**
     * A single SOP instance from the series
     * A single SOP instance within the series, e.g. an image, or presentation state.
     */
    instance?: ImagingStudySeriesInstance[];
}
/**
 * A set of images produced in single study (one or more series of references images)
 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
 */
export interface ImagingStudy extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ImagingStudy';
    /**
     * Identifiers for the whole study
     * Identifiers for the ImagingStudy such as DICOM Study Instance UID.
     * See discussion under [Imaging Study Implementation Notes](imagingstudy.html#notes) for encoding of DICOM Study Instance UID.
     */
    identifier?: Identifier[];
    /**
     * All of the distinct values for series' modalities
     * A list of all the distinct values of series.modality. This may include both acquisition and non-acquisition modalities.
     */
    modality?: CodeableConcept[];
    /**
     * Who or what is the subject of the study
     * The subject, typically a patient, of the imaging study.
     * QA phantoms can be recorded with a Device; multiple subjects (such as mice) can be recorded with a Group.
     */
    subject: Reference;
    /**
     * Encounter with which this imaging study is associated
     * The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
     * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission test).
     */
    encounter?: Reference;
    /**
     * When the study was started
     * Date and time the study started.
     */
    started?: dateTime;
    /**
     * Extension for started
     **/
    _started?: Element;
    /**
     * Request fulfilled
     * A list of the diagnostic requests that resulted in this imaging study being performed.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event
     * A larger event of which this particular ImagingStudy is a component or step.  For example,  an ImagingStudy as part of a procedure.
     * To link an ImagingStudy to an Encounter use `encounter`.
     */
    partOf?: Reference[];
    /**
     * Referring physician
     * The requesting/referring physician.
     */
    referrer?: Reference;
    /**
     * Study access endpoint
     * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
     * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
     */
    endpoint?: Reference[];
    /**
     * Number of Study Related Series
     * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
     */
    numberOfSeries?: unsignedInt;
    /**
     * Extension for numberOfSeries
     **/
    _numberOfSeries?: Element;
    /**
     * Number of Study Related Instances
     * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    numberOfInstances?: unsignedInt;
    /**
     * Extension for numberOfInstances
     **/
    _numberOfInstances?: Element;
    /**
     * The performed procedure or code
     * This field corresponds to the DICOM Procedure Code Sequence (0008,1032). This is different from the FHIR Procedure resource that may include the ImagingStudy.
     */
    procedure?: CodeableReference[];
    /**
     * Where ImagingStudy occurred
     * The principal physical location where the ImagingStudy was performed.
     */
    location?: Reference;
    /**
     * Why the study was requested / performed
     * Description of clinical condition indicating why the ImagingStudy was requested, and/or Indicates another resource whose existence justifies this Study.
     */
    reason?: CodeableReference[];
    /**
     * User-defined comments
     * Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
     */
    note?: Annotation[];
    /**
     * Institution-generated description
     * The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Each study has one or more series of instances
     * Each study has one or more series of images or other content.
     */
    series?: ImagingStudySeries[];
    /**
     * registered | available | cancelled | entered-in-error | unknown
     * The current state of the ImagingStudy resource. This is not the status of any ServiceRequest or Task resources associated with the ImagingStudy.
     * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
     */
    status: ImagingStudyStatus;
}
/**
 * Who performed event
 * Indicates who performed the immunization event.
 */
export interface ImmunizationPerformer extends BackboneElement {
    /**
     * What type of performance was done
     * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
     */
    function?: CodeableConcept;
    /**
     * Individual or organization who was performing
     * The practitioner or organization who performed the action.
     * When the individual practitioner who performed the action is known, it is best to send.
     */
    actor: Reference;
}
/**
 * Patient eligibility for a specific vaccination program
 * Indicates a patient's eligibility for a funding program.
 */
export interface ImmunizationProgramEligibility extends BackboneElement {
    /**
     * The program that eligibility is declared for
     * Indicates which program the patient had their eligility evaluated for.
     */
    program: CodeableConcept;
    /**
     * The patient's eligibility status for the program
     * Indicates the patient's eligility status for for a specific payment program.
     */
    programStatus: CodeableConcept;
}
/**
 * Details of a reaction that follows immunization
 * Categorical data indicating that an adverse event is associated in time to an immunization.
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export interface ImmunizationReaction extends BackboneElement {
    /**
     * When reaction started
     * Date of reaction to the immunization.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Additional information on reaction
     * Details of the reaction.
     */
    manifestation?: CodeableReference;
    /**
     * Indicates self-reported reaction
     * Self-reported indicator.
     */
    reported?: boolean;
    /**
     * Extension for reported
     **/
    _reported?: Element;
}
/**
 * Protocol followed by the provider
 * The protocol (set of recommendations) being followed by the provider who administered the dose.
 */
export interface ImmunizationProtocolApplied extends BackboneElement {
    /**
     * Name of vaccine series
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    series?: string;
    /**
     * Extension for series
     **/
    _series?: Element;
    /**
     * Who is responsible for publishing the recommendations
     * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
     */
    authority?: Reference;
    /**
     * Vaccine preventatable disease being targeted
     * The vaccine preventable disease the dose is being administered against.
     */
    targetDisease?: CodeableConcept[];
    /**
     * Dose number within series
     * Nominal position in a series as intended by the practitioner administering the dose.
     * The use of an integer is preferred if known. Text should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
     */
    doseNumber: string;
    /**
     * Extension for doseNumber
     **/
    _doseNumber?: Element;
    /**
     * Recommended number of doses for immunity
     * The recommended number of doses to achieve immunity as intended by the practitioner administering the dose.
     * The use of an integer is preferred if known.
     */
    seriesDoses?: string;
    /**
     * Extension for seriesDoses
     **/
    _seriesDoses?: Element;
}
/**
 * Immunization event information
 * Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
 */
export interface Immunization extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Immunization';
    /**
     * Business identifier
     * A unique identifier assigned to this immunization record.
     */
    identifier?: Identifier[];
    /**
     * Authority that the immunization event is based on
     * A plan, order or recommendation fulfilled in whole or in part by this immunization.
     * Allows tracing of an authorization for the Immunization.
     */
    basedOn?: Reference[];
    /**
     * Reason for current status
     * Indicates the reason the immunization event was not performed.
     * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
     */
    statusReason?: CodeableConcept;
    /**
     * Vaccine administered
     * Vaccine that was administered or was to be administered.
     * The code for the administered vaccine may be reported at various levels of granularity from a very generic code for a general type of vaccine (e.g. the SNOMED or CVX code for the flu vaccine) to a very discrete code for a specific product including the form and packaging (e.g. an NDC code). Because vaccineCode uses the CodeableConcept data type, multiple codes at different levels of granularity may be reported for a single immunization event provided that all codes are appropriate for the same vaccine. For example, both NDC and CVX codes may be provided for a given immunization event by repeating the coding element within vaccineCode.
     */
    vaccineCode: CodeableConcept;
    /**
     * Product that was administered
     * An indication of which product was administered to the patient. This is typically a more detailed representation of the concept conveyed by the vaccineCode data element. If a Medication resource is referenced, it may be to a stand-alone resource or a contained resource within the Immunization resource.
     */
    administeredProduct?: CodeableReference;
    /**
     * Vaccine manufacturer
     * Name of vaccine manufacturer.
     */
    manufacturer?: CodeableReference;
    /**
     * Vaccine lot number
     * Lot number of the  vaccine product.
     */
    lotNumber?: string;
    /**
     * Extension for lotNumber
     **/
    _lotNumber?: Element;
    /**
     * Vaccine expiration date
     * Date vaccine batch expires.
     */
    expirationDate?: date;
    /**
     * Extension for expirationDate
     **/
    _expirationDate?: Element;
    /**
     * Who was immunized
     * The patient who either received or did not receive the immunization.
     */
    patient: Reference;
    /**
     * Encounter immunization was part of
     * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
     */
    encounter?: Reference;
    /**
     * Additional information in support of the immunization
     * Additional information that is relevant to the immunization (e.g. for a vaccine recipient who is pregnant, the gestational age of the fetus). The reason why a vaccine was given (e.g. occupation, underlying medical condition) should be conveyed in Immunization.reason, not as supporting information. The reason why a vaccine was not given (e.g. contraindication) should be conveyed in Immunization.statusReason, not as supporting information.
     */
    supportingInformation?: Reference[];
    /**
     * Vaccine administration date
     * Date vaccine administered or was to be administered.
     * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * Vaccine administration date
     * Date vaccine administered or was to be administered.
     * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
     */
    occurrenceString?: string;
    /**
     * Extension for occurrenceString
     **/
    _occurrenceString?: Element;
    /**
     * Indicates context the data was captured in
     * Indicates whether the data contained in the resource was captured by the individual/organization which was responsible for the administration of the vaccine rather than as 'secondary reported' data documented by a third party. A value of 'true' means this data originated with the individual/organization which was responsible for the administration of the vaccine.
     * Reflects the “reliability” of the content.
     */
    primarySource?: boolean;
    /**
     * Extension for primarySource
     **/
    _primarySource?: Element;
    /**
     * Indicates the source of a  reported record
     * Typically the source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
     * Typically will not be populated if primarySource = True, not required even if primarySource = False.
     */
    informationSource?: CodeableReference;
    /**
     * Where immunization occurred
     * The service delivery location where the vaccine administration occurred.
     */
    location?: Reference;
    /**
     * Body site vaccine  was administered
     * Body site where vaccine was administered.
     */
    site?: CodeableConcept;
    /**
     * How vaccine entered body
     * The path by which the vaccine product is taken into the body.
     */
    route?: CodeableConcept;
    /**
     * Amount of vaccine administered
     * The quantity of vaccine product that was administered.
     */
    doseQuantity?: Quantity;
    /**
     * Who performed event
     * Indicates who performed the immunization event.
     */
    performer?: ImmunizationPerformer[];
    /**
     * Additional immunization notes
     * Extra information about the immunization that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Why immunization occurred
     * Describes why the immunization occurred in coded or textual form, or Indicates another resource (Condition, Observation or DiagnosticReport) whose existence justifies this immunization.
     */
    reason?: CodeableReference[];
    /**
     * Dose potency
     * Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
     * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
     */
    isSubpotent?: boolean;
    /**
     * Extension for isSubpotent
     **/
    _isSubpotent?: Element;
    /**
     * Reason for being subpotent
     * Reason why a dose is considered to be subpotent.
     */
    subpotentReason?: CodeableConcept[];
    /**
     * Patient eligibility for a specific vaccination program
     * Indicates a patient's eligibility for a funding program.
     */
    programEligibility?: ImmunizationProgramEligibility[];
    /**
     * Funding source for the vaccine
     * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
     */
    fundingSource?: CodeableConcept;
    /**
     * Details of a reaction that follows immunization
     * Categorical data indicating that an adverse event is associated in time to an immunization.
     * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
     */
    reaction?: ImmunizationReaction[];
    /**
     * Protocol followed by the provider
     * The protocol (set of recommendations) being followed by the provider who administered the dose.
     */
    protocolApplied?: ImmunizationProtocolApplied[];
    /**
     * completed | entered-in-error | not-done
     * Indicates the current status of the immunization event.
     * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ImmunizationStatus;
}
/**
 * Immunization evaluation information
 * Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
 */
export interface ImmunizationEvaluation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ImmunizationEvaluation';
    /**
     * Business identifier
     * A unique identifier assigned to this immunization evaluation record.
     */
    identifier?: Identifier[];
    /**
     * Who this evaluation is for
     * The individual for whom the evaluation is being done.
     */
    patient: Reference;
    /**
     * Date evaluation was performed
     * The date the evaluation of the vaccine administration event was performed.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who is responsible for publishing the recommendations
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    authority?: Reference;
    /**
     * The vaccine preventable disease schedule being evaluated
     * The vaccine preventable disease the dose is being evaluated against.
     */
    targetDisease: CodeableConcept;
    /**
     * Immunization being evaluated
     * The vaccine administration event being evaluated.
     */
    immunizationEvent: Reference;
    /**
     * Status of the dose relative to published recommendations
     * Indicates if the dose is valid or not valid with respect to the published recommendations.
     */
    doseStatus: CodeableConcept;
    /**
     * Reason why the doese is considered valid, invalid or some other status
     * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
     */
    doseStatusReason?: CodeableConcept[];
    /**
     * Evaluation notes
     * Additional information about the evaluation.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Name of vaccine series
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    series?: string;
    /**
     * Extension for series
     **/
    _series?: Element;
    /**
     * Dose number within series
     * Nominal position in a series as determined by the outcome of the evaluation process.
     * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
     */
    doseNumber?: string;
    /**
     * Extension for doseNumber
     **/
    _doseNumber?: Element;
    /**
     * Recommended number of doses for immunity
     * The recommended number of doses to achieve immunity as determined by the outcome of the evaluation process.
     * The use of an integer is preferred if known.
     */
    seriesDoses?: string;
    /**
     * Extension for seriesDoses
     **/
    _seriesDoses?: Element;
    /**
     * completed | entered-in-error
     * Indicates the current status of the evaluation of the vaccination administration event.
     */
    status: ImmunizationEvaluationStatus;
}
/**
 * Dates governing proposed immunization
 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
    /**
     * Type of date
     * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
     */
    code: CodeableConcept;
    /**
     * Recommended date
     * The date whose meaning is specified by dateCriterion.code.
     */
    value: dateTime;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Vaccine administration recommendations
 * Vaccine administration recommendations.
 * A given instance of the .recommendation backbone element should correspond to a single recommended administration.
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
    /**
     * Vaccine  or vaccine group recommendation applies to
     * Vaccine(s) or vaccine group that pertain to the recommendation.
     */
    vaccineCode?: CodeableConcept[];
    /**
     * Disease to be immunized against
     * The targeted disease for the recommendation.
     * A given instance of the .recommendation backbone element should correspond to a single recommended administration but sometimes that administration (e.g. MMR) will encompass multiple diseases, thus the targetDisease element is allowed to repeat.
     */
    targetDisease?: CodeableConcept[];
    /**
     * Vaccine which is contraindicated to fulfill the recommendation
     * Vaccine(s) which should not be used to fulfill the recommendation.
     */
    contraindicatedVaccineCode?: CodeableConcept[];
    /**
     * Vaccine recommendation status
     * Indicates the patient status with respect to the path to immunity for the target disease.
     */
    forecastStatus: CodeableConcept;
    /**
     * Vaccine administration status reason
     * The reason for the assigned forecast status.
     */
    forecastReason?: CodeableConcept[];
    /**
     * Dates governing proposed immunization
     * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
     */
    dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[];
    /**
     * Protocol details
     * Contains the description about the protocol under which the vaccine was administered.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Name of vaccination series
     * One possible path to achieve presumed immunity against a disease - within the context of an authority.
     */
    series?: string;
    /**
     * Extension for series
     **/
    _series?: Element;
    /**
     * Recommended dose number within series
     * Nominal position of the recommended dose in a series as determined by the evaluation and forecasting process (e.g. dose 2 is the next recommended dose).
     * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
     */
    doseNumber?: string;
    /**
     * Extension for doseNumber
     **/
    _doseNumber?: Element;
    /**
     * Recommended number of doses for immunity
     * The recommended number of doses to achieve immunity as determined by the evaluation and forecasting process.
     * The use of an integer is preferred if known.
     */
    seriesDoses?: string;
    /**
     * Extension for seriesDoses
     **/
    _seriesDoses?: Element;
    /**
     * Past immunizations supporting recommendation
     * Immunization event history and/or evaluation that supports the status and recommendation.
     */
    supportingImmunization?: Reference[];
    /**
     * Patient observations supporting recommendation
     * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
     */
    supportingPatientInformation?: Reference[];
}
/**
 * Guidance or advice relating to an immunization
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
 */
export interface ImmunizationRecommendation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ImmunizationRecommendation';
    /**
     * Business identifier
     * A unique identifier assigned to this particular recommendation record.
     */
    identifier?: Identifier[];
    /**
     * Who this profile is for
     * The patient the recommendation(s) are for.
     */
    patient: Reference;
    /**
     * Date recommendation(s) created
     * The date the immunization recommendation(s) were created.
     */
    date: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who is responsible for protocol
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    authority?: Reference;
    /**
     * Vaccine administration recommendations
     * Vaccine administration recommendations.
     * A given instance of the .recommendation backbone element should correspond to a single recommended administration.
     */
    recommendation: ImmunizationRecommendationRecommendation[];
}
/**
 * Another Implementation guide this depends on
 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
 */
export interface ImplementationGuideDependsOn extends BackboneElement {
    /**
     * Identity of the IG that this depends on
     * A canonical reference to the Implementation guide for the dependency.
     * Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.
     */
    uri: canonical;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * NPM Package name for IG this depends on
     * The NPM package name for the Implementation Guide that this IG depends on.
     */
    packageId?: id;
    /**
     * Extension for packageId
     **/
    _packageId?: Element;
    /**
     * Version of the IG
     * The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
     * This follows the syntax of the NPM packaging version field - see [[reference]].
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Why dependency exists
     * A description explaining the nature of the dependency on the listed IG.
     * This doesn't need to enumerate every resource used, but should give some sense of why the dependency exists.  It will be used in the rendered list of dependencies
     */
    reason?: markdown;
    /**
     * Extension for reason
     **/
    _reason?: Element;
}
/**
 * Profiles that apply globally
 * A set of profiles that all resources covered by this implementation guide must conform to.
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export interface ImplementationGuideGlobal extends BackboneElement {
    /**
     * Type this profile applies to
     * The type of resource that all instances must conform to.
     * The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
     */
    type: code;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Profile that all resources must conform to
     * A reference to the profile that all instances must conform to.
     */
    profile: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
}
/**
 * Grouping used to present related resources in the IG
 * A logical group of resources. Logical groups can be used when building pages.
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export interface ImplementationGuideDefinitionGrouping extends BackboneElement {
    /**
     * Descriptive name for the package
     * The human-readable title to display for the package of resources when rendering the implementation guide.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Human readable text describing the package
     * Human readable text describing the package.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
}
/**
 * Resource in the implementation guide
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export interface ImplementationGuideDefinitionResource extends BackboneElement {
    /**
     * Location of the resource
     * Where this resource is found.
     * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
     */
    reference: Reference;
    /**
     * Versions this applies to (if different to IG)
     * Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
     * The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [http://hl7.org/fhir/StructureDefinition/structuredefinition-applicable-version](http://hl7.org/fhir/extensions/StructureDefinition-structuredefinition-applicable-version.html) extension.
     */
    fhirVersion?: code[];
    /**
     * Extension for fhirVersion
     **/
    _fhirVersion?: Element[];
    /**
     * Human readable name for the resource
     * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Reason why included in guide
     * A description of the reason that a resource has been included in the implementation guide.
     * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Is this an example
     * If true, indicates the resource is an example instance.
     */
    isExample?: boolean;
    /**
     * Extension for isExample
     **/
    _isExample?: Element;
    /**
     * Profile(s) this is an example of
     * If present, indicates profile(s) the instance is valid against.
     * Examples:

* StructureDefinition -> Any
* ValueSet -> expansion
* OperationDefinition -> Parameters
* Questionnaire -> QuestionnaireResponse.
     */
    profile?: canonical[];
    /**
     * Extension for profile
     **/
    _profile?: Element[];
    /**
     * Grouping this is part of
     * Reference to the id of the grouping this resource appears in.
     * This must correspond to a group.id element within this implementation guide.
     */
    groupingId?: id;
    /**
     * Extension for groupingId
     **/
    _groupingId?: Element;
}
/**
 * Page/Section in the Guide
 * A page / section in the implementation guide. The root page is the implementation guide home page.
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export interface ImplementationGuideDefinitionPage extends BackboneElement {
    /**
     * Source for page
     * Indicates the URL or the actual content to provide for the page.
     * If absent and the page isn't a generated page, this may be inferred from the page name by checking input locations.  String is used for XHTML content - sent as an escaped string.  FHIR tooling can't support 'direct' XHTML anywhere other than in narrative.
     */
    sourceUrl?: url;
    /**
     * Extension for sourceUrl
     **/
    _sourceUrl?: Element;
    /**
     * Source for page
     * Indicates the URL or the actual content to provide for the page.
     * If absent and the page isn't a generated page, this may be inferred from the page name by checking input locations.  String is used for XHTML content - sent as an escaped string.  FHIR tooling can't support 'direct' XHTML anywhere other than in narrative.
     */
    sourceString?: string;
    /**
     * Extension for sourceString
     **/
    _sourceString?: Element;
    /**
     * Source for page
     * Indicates the URL or the actual content to provide for the page.
     * If absent and the page isn't a generated page, this may be inferred from the page name by checking input locations.  String is used for XHTML content - sent as an escaped string.  FHIR tooling can't support 'direct' XHTML anywhere other than in narrative.
     */
    sourceMarkdown?: markdown;
    /**
     * Extension for sourceMarkdown
     **/
    _sourceMarkdown?: Element;
    /**
     * Name of the page when published
     * The url by which the page should be known when published.
     * This SHALL be a local reference, expressed with respect to the root of the IG output folder.  No suffix is required.  If no suffix is specified, .html will be appended.
     */
    name: url;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Short title shown for navigational assistance
     * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    title: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Nested Pages / Sections
     * Nested Pages/Sections under this page.
     * The implementation guide breadcrumbs may be generated from this structure.
     */
    page?: ImplementationGuideDefinitionPage[];
    /**
     * html | markdown | xml | generated
     * A code that indicates how the page is generated.
     */
    generation: ImplementationGuideGuidePageGeneration;
}
/**
 * Defines how IG is built by tools
 * A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides.
 * see [confluence](https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters) for the parameters defined by the HL7 IG publisher.
 */
export interface ImplementationGuideDefinitionParameter extends BackboneElement {
    /**
     * Code that identifies parameter
     * A tool-specific code that defines the parameter.
     */
    code: Coding;
    /**
     * Value for named type
     * Value for named type.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * A template for building resources
 * A template for building resources.
 */
export interface ImplementationGuideDefinitionTemplate extends BackboneElement {
    /**
     * Type of template specified
     * Type of template specified.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * The source location for the template
     * The source location for the template.
     */
    source: string;
    /**
     * Extension for source
     **/
    _source?: Element;
    /**
     * The scope in which the template applies
     * The scope in which the template applies.
     */
    scope?: string;
    /**
     * Extension for scope
     **/
    _scope?: Element;
}
/**
 * Information needed to build the IG
 * The information needed by an IG publisher tool to publish the whole implementation guide.
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export interface ImplementationGuideDefinition extends BackboneElement {
    /**
     * Grouping used to present related resources in the IG
     * A logical group of resources. Logical groups can be used when building pages.
     * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
     */
    grouping?: ImplementationGuideDefinitionGrouping[];
    /**
     * Resource in the implementation guide
     * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
     */
    resource?: ImplementationGuideDefinitionResource[];
    /**
     * Page/Section in the Guide
     * A page / section in the implementation guide. The root page is the implementation guide home page.
     * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
     */
    page?: ImplementationGuideDefinitionPage;
    /**
     * Defines how IG is built by tools
     * A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides.
     * see [confluence](https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters) for the parameters defined by the HL7 IG publisher.
     */
    parameter?: ImplementationGuideDefinitionParameter[];
    /**
     * A template for building resources
     * A template for building resources.
     */
    template?: ImplementationGuideDefinitionTemplate[];
}
/**
 * Resource in the implementation guide
 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
 */
export interface ImplementationGuideManifestResource extends BackboneElement {
    /**
     * Location of the resource
     * Where this resource is found.
     * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
     */
    reference: Reference;
    /**
     * Is this an example
     * If true, indicates the resource is an example instance.
     */
    isExample?: boolean;
    /**
     * Extension for isExample
     **/
    _isExample?: Element;
    /**
     * Profile(s) this is an example of
     * If present, indicates profile(s) the instance is valid against.
     * Examples:

* StructureDefinition -> Any
* ValueSet -> expansion
* OperationDefinition -> Parameters
* Questionnaire -> QuestionnaireResponse.
     */
    profile?: canonical[];
    /**
     * Extension for profile
     **/
    _profile?: Element[];
    /**
     * Relative path for page in IG
     * The relative path for primary page for this resource within the IG.
     * Appending 'rendering' + "/" + this should resolve to the resource page.
     */
    relativePath?: url;
    /**
     * Extension for relativePath
     **/
    _relativePath?: Element;
}
/**
 * HTML page within the parent IG
 * Information about a page within the IG.
 */
export interface ImplementationGuideManifestPage extends BackboneElement {
    /**
     * HTML page name
     * Relative path to the page.
     * Appending 'rendering' + "/" + this should resolve to the page.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Title of the page, for references
     * Label for the page intended for human display.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Anchor available on the page
     * The name of an anchor available on the page.
     * Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
     */
    anchor?: string[];
    /**
     * Extension for anchor
     **/
    _anchor?: Element[];
}
/**
 * Information about an assembled IG
 * Information about an assembled implementation guide, created by the publication tooling.
 */
export interface ImplementationGuideManifest extends BackboneElement {
    /**
     * Location of rendered implementation guide
     * A pointer to official web page, PDF or other rendering of the implementation guide.
     */
    rendering?: url;
    /**
     * Extension for rendering
     **/
    _rendering?: Element;
    /**
     * Resource in the implementation guide
     * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
     */
    resource: ImplementationGuideManifestResource[];
    /**
     * HTML page within the parent IG
     * Information about a page within the IG.
     */
    page?: ImplementationGuideManifestPage[];
    /**
     * Image within the IG
     * Indicates a relative path to an image that exists within the IG.
     */
    image?: string[];
    /**
     * Extension for image
     **/
    _image?: Element[];
    /**
     * Additional linkable file in IG
     * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
     */
    other?: string[];
    /**
     * Extension for other
     **/
    _other?: Element[];
}
/**
 * A set of rules about how FHIR is used
 * A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
 */
export interface ImplementationGuide extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ImplementationGuide';
    /**
     * Canonical identifier for this implementation guide, represented as a URI (globally unique)
     * An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the implementation guide (business identifier)
     * A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the implementation guide
     * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this implementation guide (computer friendly)
     * A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this implementation guide (human friendly)
     * A short, descriptive, user-friendly title for the implementation guide.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of implementation guides that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the implementation guide was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the implementation guide.
     * Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the implementation guide
     * A free text natural language description of the implementation guide from a consumer's perspective.
     * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for implementation guide (if applicable)
     * A legal or geographic region in which the implementation guide is intended to be used.
     * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this implementation guide is defined
     * Explanation of why this implementation guide is needed and why it has been designed as it has.
     * This element does not describe the usage of the implementation guide. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this implementation guide.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * NPM Package name for IG
     * The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
     * Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.
     */
    packageId: id;
    /**
     * Extension for packageId
     **/
    _packageId?: Element;
    /**
     * SPDX license code for this IG (or not-open-source)
     * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
     */
    license?: code;
    /**
     * Extension for license
     **/
    _license?: Element;
    /**
     * FHIR Version(s) this Implementation Guide targets
     * The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
     * Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc. are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
     */
    fhirVersion: code[];
    /**
     * Extension for fhirVersion
     **/
    _fhirVersion?: Element[];
    /**
     * Another Implementation guide this depends on
     * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
     */
    dependsOn?: ImplementationGuideDependsOn[];
    /**
     * Profiles that apply globally
     * A set of profiles that all resources covered by this implementation guide must conform to.
     * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
     */
    global?: ImplementationGuideGlobal[];
    /**
     * Information needed to build the IG
     * The information needed by an IG publisher tool to publish the whole implementation guide.
     * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
     */
    definition?: ImplementationGuideDefinition;
    /**
     * Information about an assembled IG
     * Information about an assembled implementation guide, created by the publication tooling.
     */
    manifest?: ImplementationGuideManifest;
    /**
     * draft | active | retired | unknown
     * The status of this implementation guide. Enables tracking the life-cycle of the content.
     * Allows filtering of implementation guides that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ImplementationGuidePublicationStatus;
}
/**
 * An organization that manufactures this ingredient
 * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
 */
export interface IngredientManufacturer extends BackboneElement {
    /**
     * An organization that manufactures this ingredient
     * An organization that manufactures this ingredient.
     */
    manufacturer: Reference;
    /**
     * allowed | possible | actual
     * The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
     */
    role?: IngredientManufacturerRole;
}
/**
 * Strength expressed in terms of a reference substance
 * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
 */
export interface IngredientSubstanceStrengthReferenceStrength extends BackboneElement {
    /**
     * Relevant reference substance
     * Relevant reference substance.
     */
    substance: CodeableReference;
    /**
     * Strength expressed in terms of a reference substance
     * Strength expressed in terms of a reference substance.
     */
    strengthRatio?: Ratio;
    /**
     * Strength expressed in terms of a reference substance
     * Strength expressed in terms of a reference substance.
     */
    strengthRatioRange?: RatioRange;
    /**
     * Strength expressed in terms of a reference substance
     * Strength expressed in terms of a reference substance.
     */
    strengthQuantity?: Quantity;
    /**
     * When strength is measured at a particular point or distance
     * For when strength is measured at a particular point or distance.
     */
    measurementPoint?: string;
    /**
     * Extension for measurementPoint
     **/
    _measurementPoint?: Element;
    /**
     * Where the strength range applies
     * The country or countries for which the strength range applies.
     */
    country?: CodeableConcept[];
}
/**
 * The quantity of substance, per presentation, or per volume or mass, and type of quantity
 * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
 */
export interface IngredientSubstanceStrength extends BackboneElement {
    /**
     * The quantity of substance in the unit of presentation
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
     */
    presentationRatio?: Ratio;
    /**
     * The quantity of substance in the unit of presentation
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
     */
    presentationRatioRange?: RatioRange;
    /**
     * The quantity of substance in the unit of presentation
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
     */
    presentationCodeableConcept?: CodeableConcept;
    /**
     * The quantity of substance in the unit of presentation
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
     */
    presentationQuantity?: Quantity;
    /**
     * Text of either the whole presentation strength or a part of it (rest being in Strength.presentation as a ratio)
     * A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
     */
    textPresentation?: string;
    /**
     * Extension for textPresentation
     **/
    _textPresentation?: Element;
    /**
     * The strength per unitary volume (or mass)
     * The strength per unitary volume (or mass).
     */
    concentrationRatio?: Ratio;
    /**
     * The strength per unitary volume (or mass)
     * The strength per unitary volume (or mass).
     */
    concentrationRatioRange?: RatioRange;
    /**
     * The strength per unitary volume (or mass)
     * The strength per unitary volume (or mass).
     */
    concentrationCodeableConcept?: CodeableConcept;
    /**
     * The strength per unitary volume (or mass)
     * The strength per unitary volume (or mass).
     */
    concentrationQuantity?: Quantity;
    /**
     * Text of either the whole concentration strength or a part of it (rest being in Strength.concentration as a ratio)
     * A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
     */
    textConcentration?: string;
    /**
     * Extension for textConcentration
     **/
    _textConcentration?: Element;
    /**
     * A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt)
     * A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt).
     */
    basis?: CodeableConcept;
    /**
     * When strength is measured at a particular point or distance
     * For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
     */
    measurementPoint?: string;
    /**
     * Extension for measurementPoint
     **/
    _measurementPoint?: Element;
    /**
     * Where the strength range applies
     * The country or countries for which the strength range applies.
     */
    country?: CodeableConcept[];
    /**
     * Strength expressed in terms of a reference substance
     * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
     */
    referenceStrength?: IngredientSubstanceStrengthReferenceStrength[];
}
/**
 * The substance that comprises this ingredient
 * The substance that comprises this ingredient.
 */
export interface IngredientSubstance extends BackboneElement {
    /**
     * A code or full resource that represents the ingredient substance
     * A code or full resource that represents the ingredient's substance.
     */
    code: CodeableReference;
    /**
     * The quantity of substance, per presentation, or per volume or mass, and type of quantity
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
     */
    strength?: IngredientSubstanceStrength[];
}
/**
 * An ingredient of a manufactured item or pharmaceutical product
 * An ingredient of a manufactured item or pharmaceutical product.
 */
export interface Ingredient extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Ingredient';
    /**
     * An identifier or code by which the ingredient can be referenced
     * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    identifier?: Identifier;
    /**
     * The product which this ingredient is a constituent part of
     * The product which this ingredient is a constituent part of.
     */
    for?: Reference[];
    /**
     * Purpose of the ingredient within the product, e.g. active, inactive
     * A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
     */
    role: CodeableConcept;
    /**
     * Precise action within the drug product, e.g. antioxidant, alkalizing agent
     * A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.
     */
    function?: CodeableConcept[];
    /**
     * A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink
     * A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink.
     */
    group?: CodeableConcept;
    /**
     * If the ingredient is a known or suspected allergen
     * If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
     */
    allergenicIndicator?: boolean;
    /**
     * Extension for allergenicIndicator
     **/
    _allergenicIndicator?: Element;
    /**
     * A place for providing any notes that are relevant to the component, e.g. removed during process, adjusted for loss on drying
     * A place for providing any notes that are relevant to the component, e.g. removed during process, adjusted for loss on drying.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * An organization that manufactures this ingredient
     * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
     */
    manufacturer?: IngredientManufacturer[];
    /**
     * The substance that comprises this ingredient
     * The substance that comprises this ingredient.
     */
    substance: IngredientSubstance;
    /**
     * draft | active | retired | unknown
     * The status of this ingredient. Enables tracking the life-cycle of the content.
     * Allows filtering of ingredient that are appropriate for use versus not.
     */
    status: IngredientPublicationStatus;
}
/**
 * Benefit limits
 * The specific limits on the benefit.
 */
export interface InsurancePlanCoverageBenefitLimit extends BackboneElement {
    /**
     * Maximum value allowed
     * The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.
     * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
     */
    value?: Quantity;
    /**
     * Benefit limit details
     * The specific limit on the benefit.
     * Use `CodeableConcept.text` element if the data is free (uncoded) text.
     */
    code?: CodeableConcept;
}
/**
 * List of benefits
 * Specific benefits under this type of coverage.
 */
export interface InsurancePlanCoverageBenefit extends BackboneElement {
    /**
     * Type of benefit
     * Type of benefit (primary care; speciality care; inpatient; outpatient).
     */
    type: CodeableConcept;
    /**
     * Referral requirements
     * The referral requirements to have access/coverage for this benefit.
     */
    requirement?: string;
    /**
     * Extension for requirement
     **/
    _requirement?: Element;
    /**
     * Benefit limits
     * The specific limits on the benefit.
     */
    limit?: InsurancePlanCoverageBenefitLimit[];
}
/**
 * Coverage details
 * Details about the coverage offered by the insurance product.
 */
export interface InsurancePlanCoverage extends BackboneElement {
    /**
     * Type of coverage
     * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
     */
    type: CodeableConcept;
    /**
     * What networks provide coverage
     * Reference to the network that providing the type of coverage.
     * Networks are represented as a hierarchy of organization resources.
     */
    network?: Reference[];
    /**
     * List of benefits
     * Specific benefits under this type of coverage.
     */
    benefit: InsurancePlanCoverageBenefit[];
}
/**
 * Overall costs
 * Overall costs associated with the plan.
 */
export interface InsurancePlanPlanGeneralCost extends BackboneElement {
    /**
     * Type of cost
     * Type of cost.
     */
    type?: CodeableConcept;
    /**
     * Number of enrollees
     * Number of participants enrolled in the plan.
     */
    groupSize?: positiveInt;
    /**
     * Extension for groupSize
     **/
    _groupSize?: Element;
    /**
     * Cost value
     * Value of the cost.
     */
    cost?: Money;
    /**
     * Additional cost information
     * Additional information about the general costs associated with this plan.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
}
/**
 * List of the costs
 * List of the costs associated with a specific benefit.
 */
export interface InsurancePlanPlanSpecificCostBenefitCost extends BackboneElement {
    /**
     * Type of cost
     * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
     */
    type: CodeableConcept;
    /**
     * in-network | out-of-network | other
     * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
     */
    applicability?: CodeableConcept;
    /**
     * Additional information about the cost
     * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
     */
    qualifiers?: CodeableConcept[];
    /**
     * The actual cost value
     * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
     */
    value?: Quantity;
}
/**
 * Benefits list
 * List of the specific benefits under this category of benefit.
 */
export interface InsurancePlanPlanSpecificCostBenefit extends BackboneElement {
    /**
     * Type of specific benefit
     * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
     */
    type: CodeableConcept;
    /**
     * List of the costs
     * List of the costs associated with a specific benefit.
     */
    cost?: InsurancePlanPlanSpecificCostBenefitCost[];
}
/**
 * Specific costs
 * Costs associated with the coverage provided by the product.
 */
export interface InsurancePlanPlanSpecificCost extends BackboneElement {
    /**
     * General category of benefit
     * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
     */
    category: CodeableConcept;
    /**
     * Benefits list
     * List of the specific benefits under this category of benefit.
     */
    benefit?: InsurancePlanPlanSpecificCostBenefit[];
}
/**
 * Plan details
 * Details about an insurance plan.
 */
export interface InsurancePlanPlan extends BackboneElement {
    /**
     * Business Identifier for Product
     * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Type of plan
     * Type of plan. For example, "Platinum" or "High Deductable".
     */
    type?: CodeableConcept;
    /**
     * Where product applies
     * The geographic region in which a health insurance plan's benefits apply.
     */
    coverageArea?: Reference[];
    /**
     * What networks provide coverage
     * Reference to the network that providing the type of coverage.
     * Networks are represented as a hierarchy of organization resources.
     */
    network?: Reference[];
    /**
     * Overall costs
     * Overall costs associated with the plan.
     */
    generalCost?: InsurancePlanPlanGeneralCost[];
    /**
     * Specific costs
     * Costs associated with the coverage provided by the product.
     */
    specificCost?: InsurancePlanPlanSpecificCost[];
}
/**
 * Details of a Health Insurance product/plan provided by an organization
 * Details of a Health Insurance product/plan provided by an organization.
 */
export interface InsurancePlan extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'InsurancePlan';
    /**
     * Business Identifier for Product
     * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier[];
    /**
     * Kind of product
     * The kind of health insurance product.
     */
    type?: CodeableConcept[];
    /**
     * Official name
     * Official name of the health insurance product as designated by the owner.
     * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Alternate names
     * A list of alternate names that the product is known as, or was known as in the past.
     * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
     */
    alias?: string[];
    /**
     * Extension for alias
     **/
    _alias?: Element[];
    /**
     * When the product is available
     * The period of time that the health insurance product is available.
     */
    period?: Period;
    /**
     * Product issuer
     * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
     */
    ownedBy?: Reference;
    /**
     * Product administrator
     * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
     */
    administeredBy?: Reference;
    /**
     * Where product applies
     * The geographic region in which a health insurance product's benefits apply.
     */
    coverageArea?: Reference[];
    /**
     * Official contact details relevant to the health insurance plan/product
     * The contact details of communication devices available relevant to the specific Insurance Plan/Product. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     * The address/telecom use code 'home' are not to be used.
     */
    contact?: ExtendedContactDetail[];
    /**
     * Technical endpoint
     * The technical endpoints providing access to services operated for the health insurance product.
     */
    endpoint?: Reference[];
    /**
     * What networks are Included
     * Reference to the network included in the health insurance product.
     * Networks are represented as a hierarchy of organization resources.
     */
    network?: Reference[];
    /**
     * Coverage details
     * Details about the coverage offered by the insurance product.
     */
    coverage?: InsurancePlanCoverage[];
    /**
     * Plan details
     * Details about an insurance plan.
     */
    plan?: InsurancePlanPlan[];
    /**
     * draft | active | retired | unknown
     * The current state of the health insurance product.
     */
    status?: InsurancePlanPublicationStatus;
}
/**
 * The item name(s) - the brand name, or common name, functional name, generic name or others
 * The item name(s) - the brand name, or common name, functional name, generic name.
 */
export interface InventoryItemName extends BackboneElement {
    /**
     * The type of name e.g. 'brand-name', 'functional-name', 'common-name'
     * The type of name e.g. 'brand-name', 'functional-name', 'common-name'.
     */
    nameType: Coding;
    /**
     * The language used to express the item name
     * The language that the item name is expressed in.
     */
    language: code;
    /**
     * Extension for language
     **/
    _language?: Element;
    /**
     * The name or designation of the item
     * The name or designation that the item is given.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
}
/**
 * Organization(s) responsible for the product
 * Organization(s) responsible for the product.
 */
export interface InventoryItemResponsibleOrganization extends BackboneElement {
    /**
     * The role of the organization e.g. manufacturer, distributor, or other
     * The role of the organization e.g. manufacturer, distributor, etc.
     */
    role: CodeableConcept;
    /**
     * An organization that is associated with the item
     * An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc.
     */
    organization: Reference;
}
/**
 * Descriptive characteristics of the item
 * The descriptive characteristics of the inventory item.
 */
export interface InventoryItemDescription extends BackboneElement {
    /**
     * The language that is used in the item description
     * The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language.
     */
    language?: code;
    /**
     * Extension for language
     **/
    _language?: Element;
    /**
     * Textual description of the item
     * Textual description of the item.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
}
/**
 * Association with other items or products
 * Association with other items or products.
 */
export interface InventoryItemAssociation extends BackboneElement {
    /**
     * The type of association between the device and the other item
     * This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with.
     */
    associationType: CodeableConcept;
    /**
     * The related item or product
     * The related item or product.
     */
    relatedItem: Reference;
    /**
     * The quantity of the product in this product
     * The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product.
     */
    quantity: Ratio;
}
/**
 * Characteristic of the item
 * The descriptive or identifying characteristics of the item.
 */
export interface InventoryItemCharacteristic extends BackboneElement {
    /**
     * The characteristic that is being defined
     * The type of characteristic that is being defined.
     */
    characteristicType: CodeableConcept;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueRange?: Range;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueRatio?: Ratio;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueAnnotation?: Annotation;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueAddress?: Address;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueDuration?: Duration;
    /**
     * The value of the attribute
     * The value of the attribute.
     * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
     */
    valueCodeableConcept?: CodeableConcept;
}
/**
 * Instances or occurrences of the product
 * Instances or occurrences of the product.
 */
export interface InventoryItemInstance extends BackboneElement {
    /**
     * The identifier for the physical instance, typically a serial number
     * The identifier for the physical instance, typically a serial number.
     */
    identifier?: Identifier[];
    /**
     * The lot or batch number of the item
     * The lot or batch number of the item.
     */
    lotNumber?: string;
    /**
     * Extension for lotNumber
     **/
    _lotNumber?: Element;
    /**
     * The expiry date or date and time for the product
     * The expiry date or date and time for the product.
     */
    expiry?: dateTime;
    /**
     * Extension for expiry
     **/
    _expiry?: Element;
    /**
     * The subject that the item is associated with
     * The subject that the item is associated with.
     */
    subject?: Reference;
    /**
     * The location that the item is associated with
     * The location that the item is associated with.
     */
    location?: Reference;
}
/**
 * A functional description of an inventory item used in inventory and supply-related workflows
 * A functional description of an inventory item used in inventory and supply-related workflows.
 */
export interface InventoryItem extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'InventoryItem';
    /**
     * Business identifier for the inventory item
     * Business identifier for the inventory item.
     */
    identifier?: Identifier[];
    /**
     * Category or class of the item
     * Category or class of the item.
     */
    category?: CodeableConcept[];
    /**
     * Code designating the specific type of item
     * Code designating the specific type of item.
     */
    code?: CodeableConcept[];
    /**
     * The item name(s) - the brand name, or common name, functional name, generic name or others
     * The item name(s) - the brand name, or common name, functional name, generic name.
     */
    name?: InventoryItemName[];
    /**
     * Organization(s) responsible for the product
     * Organization(s) responsible for the product.
     */
    responsibleOrganization?: InventoryItemResponsibleOrganization[];
    /**
     * Descriptive characteristics of the item
     * The descriptive characteristics of the inventory item.
     */
    description?: InventoryItemDescription;
    /**
     * The usage status like recalled, in use, discarded
     * The usage status e.g. recalled, in use, discarded... This can be used to indicate that the items have been taken out of inventory, or are in use, etc.
     */
    inventoryStatus?: CodeableConcept[];
    /**
     * The base unit of measure - the unit in which the product is used or counted
     * The base unit of measure - the unit in which the product is used or counted.
     */
    baseUnit?: CodeableConcept;
    /**
     * Net content or amount present in the item
     * Net content or amount present in the item.
     */
    netContent?: Quantity;
    /**
     * Association with other items or products
     * Association with other items or products.
     */
    association?: InventoryItemAssociation[];
    /**
     * Characteristic of the item
     * The descriptive or identifying characteristics of the item.
     */
    characteristic?: InventoryItemCharacteristic[];
    /**
     * Instances or occurrences of the product
     * Instances or occurrences of the product.
     */
    instance?: InventoryItemInstance;
    /**
     * Link to a product resource used in clinical workflows
     * Link to a product resource used in clinical workflows.
     */
    productReference?: Reference;
    /**
     * active | inactive | entered-in-error | unknown
     * Status of the item entry.
     */
    status: InventoryItemStatus;
}
/**
 * The item or items in this listing
 * The item or items in this listing.
 */
export interface InventoryReportInventoryListingItem extends BackboneElement {
    /**
     * The inventory category or classification of the items being reported
     * The inventory category or classification of the items being reported. This is meant not for defining the product, but for inventory categories e.g. 'pending recount' or 'damaged'.
     */
    category?: CodeableConcept;
    /**
     * The quantity of the item or items being reported
     * The quantity of the item or items being reported.
     */
    quantity: Quantity;
    /**
     * The code or reference to the item type
     * The code or reference to the item type.
     */
    item: CodeableReference;
}
/**
 * An inventory listing section (grouped by any of the attributes)
 * An inventory listing section (grouped by any of the attributes).
 */
export interface InventoryReportInventoryListing extends BackboneElement {
    /**
     * Location of the inventory items
     * Location of the inventory items.
     */
    location?: Reference;
    /**
     * The status of the items that are being reported
     * The status of the items.
     */
    itemStatus?: CodeableConcept;
    /**
     * The date and time when the items were counted
     * The date and time when the items were counted.
     */
    countingDateTime?: dateTime;
    /**
     * Extension for countingDateTime
     **/
    _countingDateTime?: Element;
    /**
     * The item or items in this listing
     * The item or items in this listing.
     */
    item?: InventoryReportInventoryListingItem[];
}
/**
 * A report of inventory or stock items
 * A report of inventory or stock items.
 */
export interface InventoryReport extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'InventoryReport';
    /**
     * Business identifier for the report
     * Business identifier for the InventoryReport.
     */
    identifier?: Identifier[];
    /**
     * addition | subtraction
     * What type of operation is being performed - addition or subtraction.
     */
    operationType?: CodeableConcept;
    /**
     * The reason for this count - regular count, ad-hoc count, new arrivals, etc
     * The reason for this count - regular count, ad-hoc count, new arrivals, etc.
     */
    operationTypeReason?: CodeableConcept;
    /**
     * When the report has been submitted
     * When the report has been submitted.
     */
    reportedDateTime: dateTime;
    /**
     * Extension for reportedDateTime
     **/
    _reportedDateTime?: Element;
    /**
     * Who submits the report
     * Who submits the report.
     */
    reporter?: Reference;
    /**
     * The period the report refers to
     * The period the report refers to.
     */
    reportingPeriod?: Period;
    /**
     * An inventory listing section (grouped by any of the attributes)
     * An inventory listing section (grouped by any of the attributes).
     */
    inventoryListing?: InventoryReportInventoryListing[];
    /**
     * A note associated with the InventoryReport
     * A note associated with the InventoryReport.
     */
    note?: Annotation[];
    /**
     * draft | requested | active | entered-in-error
     * The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active.
     */
    status: InventoryReportStatus;
    /**
     * snapshot | difference
     * Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change).
     */
    countType: InventoryReportInventoryCountType;
}
/**
 * Participant in creation of this Invoice
 * Indicates who or what performed or participated in the charged service.
 */
export interface InvoiceParticipant extends BackboneElement {
    /**
     * Type of involvement in creation of this Invoice
     * Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
     */
    role?: CodeableConcept;
    /**
     * Individual who was involved
     * The device, practitioner, etc. who performed or participated in the service.
     */
    actor: Reference;
}
/**
 * Line items of this Invoice
 * Each line item represents one charge for goods and services rendered. Details such.ofType(date), code and amount are found in the referenced ChargeItem resource.
 */
export interface InvoiceLineItem extends BackboneElement {
    /**
     * Sequence number of line item
     * Sequence in which the items appear on the invoice.
     */
    sequence?: positiveInt;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Service data or period
     * Date/time(s) range when this service was delivered or completed.
     */
    servicedDate?: date;
    /**
     * Extension for servicedDate
     **/
    _servicedDate?: Element;
    /**
     * Service data or period
     * Date/time(s) range when this service was delivered or completed.
     */
    servicedPeriod?: Period;
    /**
     * Reference to ChargeItem containing details of this line item or an inline billing code
     * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
     */
    chargeItemReference?: Reference;
    /**
     * Reference to ChargeItem containing details of this line item or an inline billing code
     * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
     */
    chargeItemCodeableConcept?: CodeableConcept;
    /**
     * Components of total line item price
     * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
     */
    priceComponent?: MonetaryComponent[];
}
/**
 * Invoice containing ChargeItems from an Account
 * Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
 */
export interface Invoice extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Invoice';
    /**
     * Business Identifier for item
     * Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
     */
    identifier?: Identifier[];
    /**
     * Reason for cancellation of this Invoice
     * In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
     * Derived Profiles may choose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
     */
    cancelledReason?: string;
    /**
     * Extension for cancelledReason
     **/
    _cancelledReason?: Element;
    /**
     * Type of Invoice
     * Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
     */
    type?: CodeableConcept;
    /**
     * Recipient(s) of goods and services
     * The individual or set of individuals receiving the goods and services billed in this invoice.
     */
    subject?: Reference;
    /**
     * Recipient of this invoice
     * The individual or Organization responsible for balancing of this invoice.
     */
    recipient?: Reference;
    /**
     * DEPRICATED
     * Depricared by the element below.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * When posted
     * Date/time(s) of when this Invoice was posted.
     * The list of types may be constrained as appropriate for the type of charge item.
     */
    creation?: dateTime;
    /**
     * Extension for creation
     **/
    _creation?: Element;
    /**
     * Billing date or period
     * Date/time(s) range of services included in this invoice.
     */
    periodDate?: date;
    /**
     * Extension for periodDate
     **/
    _periodDate?: Element;
    /**
     * Billing date or period
     * Date/time(s) range of services included in this invoice.
     */
    periodPeriod?: Period;
    /**
     * Participant in creation of this Invoice
     * Indicates who or what performed or participated in the charged service.
     */
    participant?: InvoiceParticipant[];
    /**
     * Issuing Organization of Invoice
     * The organizationissuing the Invoice.
     * Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
     */
    issuer?: Reference;
    /**
     * Account that is being balanced
     * Account which is supposed to be balanced with this Invoice.
     * Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the potprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
     */
    account?: Reference;
    /**
     * Line items of this Invoice
     * Each line item represents one charge for goods and services rendered. Details such.ofType(date), code and amount are found in the referenced ChargeItem resource.
     */
    lineItem?: InvoiceLineItem[];
    /**
     * Components of Invoice total
     * The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
     */
    totalPriceComponent?: MonetaryComponent[];
    /**
     * Net total of this Invoice
     * Invoice total , taxes excluded.
     * There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
     */
    totalNet?: Money;
    /**
     * Gross total of this Invoice
     * Invoice total, tax included.
     * There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
     */
    totalGross?: Money;
    /**
     * Payment details
     * Payment details such as banking details, period of payment, deductibles, methods of payment.
     * Derived Profiles may chose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
     */
    paymentTerms?: markdown;
    /**
     * Extension for paymentTerms
     **/
    _paymentTerms?: Element;
    /**
     * Comments made about the invoice
     * Comments made about the invoice by the issuer, subject, or other participants.
     */
    note?: Annotation[];
    /**
     * draft | issued | balanced | cancelled | entered-in-error
     * The current state of the Invoice.
     */
    status: InvoiceStatus;
}
/**
 * Represents a library of quality improvement components
 * The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.
 */
export interface Library extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Library';
    /**
     * Canonical identifier for this library, represented as a URI (globally unique)
     * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the library
     * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this library outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the library
     * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     * There may be different library instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the library with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this library (computer friendly)
     * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this library (human friendly)
     * A short, descriptive, user-friendly title for the library.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate title of the library
     * An explanatory or alternate title for the library giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of librarys that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * logic-library | model-definition | asset-collection | module-definition
     * Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
     */
    type: CodeableConcept;
    /**
     * Type of individual the library content is focused on
     * A code or group definition that describes the intended subject of the contents of the library.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * Type of individual the library content is focused on
     * A code or group definition that describes the intended subject of the contents of the library.
     */
    subjectReference?: Reference;
    /**
     * Date last changed
     * The date  (and optionally time) when the library was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the library. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the library.
     * Usually an organization but may be an individual. The publisher (or steward) of the library is the organization or individual primarily responsible for the maintenance and upkeep of the library. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the library. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the library
     * A free text natural language description of the library from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the library as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the library is presumed to be the predominant language in the place the library was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for library (if applicable)
     * A legal or geographic region in which the library is intended to be used.
     * It may be possible for the library to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this library is defined
     * Explanation of why this library is needed and why it has been designed as it has.
     * This element does not describe the usage of the library. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this library.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Describes the clinical usage of the library
     * A detailed description of how the library is used from a clinical perspective.
     */
    usage?: markdown;
    /**
     * Extension for usage
     **/
    _usage?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the library was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the library was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the library is expected to be used
     * The period during which the library content was or is planned to be in active use.
     * The effective period for a library determines when the content is applicable for usage and is independent of publication and review dates. For example, a library intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the content
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Parameters defined by the library
     * The parameter element defines parameters used by the library.
     */
    parameter?: ParameterDefinition[];
    /**
     * What data is referenced by this library
     * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
     */
    dataRequirement?: DataRequirement[];
    /**
     * Contents of the library, either embedded or referenced
     * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
     */
    content?: Attachment[];
    /**
     * draft | active | retired | unknown
     * The status of this library. Enables tracking the life-cycle of the content.
     * Allows filtering of libraries that are appropriate for use vs. not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: LibraryPublicationStatus;
}
/**
 * Item to be linked
 * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
 */
export interface LinkageItem extends BackboneElement {
    /**
     * Resource being linked
     * The resource instance being linked as part of the group.
     */
    resource: Reference;
    /**
     * source | alternate | historical
     * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
     */
    type: LinkageType;
}
/**
 * Links records for 'same' item
 * Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
 */
export interface Linkage extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Linkage';
    /**
     * Whether this linkage assertion is active or not
     * Indicates whether the asserted set of linkages are considered to be "in effect".
     * If false, any asserted linkages should not be considered current/relevant/applicable.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * Who is responsible for linkages
     * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
     */
    author?: Reference;
    /**
     * Item to be linked
     * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
     */
    item: LinkageItem[];
}
/**
 * Entries in the list
 * Entries in this list.
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export interface ListEntry extends BackboneElement {
    /**
     * Status/Workflow information about this item
     * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
     * The flag can only be understood in the context of the List.code. If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true
     */
    flag?: CodeableConcept;
    /**
     * If this item is actually marked as deleted
     * True if this item is marked as deleted in the list.
     * If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. A deleted entry should be displayed in narrative as deleted.  This element is labeled as a modifier because it indicates that an item is (to be) no longer in the list.
     */
    deleted?: boolean;
    /**
     * Extension for deleted
     **/
    _deleted?: Element;
    /**
     * When item added to list
     * When this item was added to the list.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Actual entry
     * A reference to the actual resource from which data was derived.
     */
    item: Reference;
}
/**
 * A list is a curated collection of resources
 * A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc.
 */
export interface List extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'List';
    /**
     * Business identifier
     * Identifier for the List assigned for business purposes outside the context of FHIR.
     */
    identifier?: Identifier[];
    /**
     * Descriptive name for the list
     * A label for the list assigned by the author.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * What the purpose of this list is
     * This code defines the purpose of the list - why it was created.
     * If there is no code, the purpose of the list is implied where it is used, such as in a document section using Document.section.code.
     */
    code?: CodeableConcept;
    /**
     * If all resources have the same subject(s)
     * The common subject(s) (or patient(s)) of the resources that are in the list if there is one (or a set of subjects).
     * Some purely arbitrary lists do not have a common subject, so this is optional. Lists having multiple subjects may raise challenges for systems that base access control or other security considerations on linkages to 'subject'. E.g. if a List is associated with multiple Patient subjects, then it would be nominally part of multiple patient compartments, which might drive access rights.
     */
    subject?: Reference[];
    /**
     * Context in which list created
     * The encounter that is the context in which this list was created.
     */
    encounter?: Reference;
    /**
     * When the list was prepared
     * Date list was last reviewed/revised and determined to be 'current'.
     * The actual important date is the date of currency of the resources that were summarized, but it is usually assumed that these are current when the preparation occurs.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who and/or what defined the list contents (aka Author)
     * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
     * The primary source is the entity that made the decisions what items are in the list. This may be software or user.
     */
    source?: Reference;
    /**
     * What order the list has
     * What order applies to the items in the list.
     * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
     */
    orderedBy?: CodeableConcept;
    /**
     * Comments about the list
     * Comments that apply to the overall list.
     */
    note?: Annotation[];
    /**
     * Entries in the list
     * Entries in this list.
     * If there are no entries in the list, an emptyReason SHOULD be provided.
     */
    entry?: ListEntry[];
    /**
     * Why list is empty
     * If the list is empty, why the list is empty.
     * The various reasons for an empty list make a significant interpretation to its interpretation. Note that this code is for use when the entire list has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
     */
    emptyReason?: CodeableConcept;
    /**
     * current | retired | entered-in-error
     * Indicates the current state of this list.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ListStatus;
    /**
     * working | snapshot | changes
     * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
     */
    mode: ListMode;
}
/**
 * The absolute geographic location
 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
 * To define a boundary shape for this location use the standard extension `[http://hl7.org/fhir/StructureDefinition/location-boundary-geojson](http://hl7.org/fhir/extensions/StructureDefinition-location-boundary-geojson.html)`, and search using the `contains` special search parameter.
 */
export interface LocationPosition extends BackboneElement {
    /**
     * Longitude with WGS84 datum
     * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes on Location main page).
     */
    longitude: decimal;
    /**
     * Extension for longitude
     **/
    _longitude?: Element;
    /**
     * Latitude with WGS84 datum
     * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes on Location main page).
     */
    latitude: decimal;
    /**
     * Extension for latitude
     **/
    _latitude?: Element;
    /**
     * Altitude with WGS84 datum
     * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes on Location main page).
     */
    altitude?: decimal;
    /**
     * Extension for altitude
     **/
    _altitude?: Element;
}
/**
 * Details and position information for a place
 * Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated.
 */
export interface Location extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Location';
    /**
     * Unique code or number identifying the location to its users
     * Unique code or number identifying the location to its users.
     */
    identifier?: Identifier[];
    /**
     * The operational status of the location (typically only for a bed/room)
     * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
     */
    operationalStatus?: Coding;
    /**
     * Name of the location as used by humans
     * Name of the location as used by humans. Does not need to be unique.
     * If the name of a location changes, consider putting the old name in the alias column so that it can still be located through searches.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * A list of alternate names that the location is known as, or was known as, in the past
     * A list of alternate names that the location is known as, or was known as, in the past.
     * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
     */
    alias?: string[];
    /**
     * Extension for alias
     **/
    _alias?: Element[];
    /**
     * Additional details about the location that could be displayed as further information to identify the location beyond its name
     * Description of the Location, which helps in finding or referencing the place.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Type of function performed
     * Indicates the type of function performed at the location.
     */
    type?: CodeableConcept[];
    /**
     * Official contact details for the location
     * The contact details of communication devices available at the location. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     * The address/telecom use code 'home' are not to be used. Note that these contacts are not the contact details of people who provide the service (that would be through PractitionerRole), these are official contacts for the Healthcare itself for specific purposes. E.g. Mailing Addresses, Billing Addresses, Contact numbers for Booking or Billing Enquiries, general web address, web address for online bookings etc.

If this is empty (or the type of interest is empty), refer to the organization's contacts.
     */
    contact?: ExtendedContactDetail[];
    /**
     * Physical location
     * Physical location.
     * Additional addresses should be recorded using another instance of the Location resource, or via the Organization.
     */
    address?: Address;
    /**
     * Physical form of the location
     * Physical form of the location, e.g. building, room, vehicle, road, virtual.
     */
    form?: CodeableConcept;
    /**
     * The absolute geographic location
     * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
     * To define a boundary shape for this location use the standard extension `[http://hl7.org/fhir/StructureDefinition/location-boundary-geojson](http://hl7.org/fhir/extensions/StructureDefinition-location-boundary-geojson.html)`, and search using the `contains` special search parameter.
     */
    position?: LocationPosition;
    /**
     * Organization responsible for provisioning and upkeep
     * The organization responsible for the provisioning and upkeep of the location.
     * This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
     */
    managingOrganization?: Reference;
    /**
     * Another Location this one is physically a part of
     * Another Location of which this Location is physically a part of.
     */
    partOf?: Reference;
    /**
     * Collection of characteristics (attributes)
     * Collection of characteristics (attributes).
     * These could be such things as is wheelchair accessible.
     */
    characteristic?: CodeableConcept[];
    /**
     * What days/times during a week is this location usually open (including exceptions)
     * What days/times during a week is this location usually open, and any exceptions where the location is not available.
     * This type of information is commonly found published in directories and on websites informing customers when the facility is available.

Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.

Systems may choose to render availability differently than it is exchanged on the interface. For example, rather than "Mon, Tue, Wed, Thur, Fri from 9am-12am; Mon, Tue, Wed, Thur, Fri from 1pm-5pm" as would be implied by two availableTime repetitions, an application could render this information as "Mon-Fri 9-12am and 1-5pm".

The availableStartTime is the opening time, and the availableEndTime is the closing time.
     */
    hoursOfOperation?: Availability[];
    /**
     * Connection details of a virtual service (e.g. conference call)
     * Connection details of a virtual service (e.g. shared conference call facility with dedicated number/details).
     * There are two types of virtual meetings that often exist:

* a persistent, virtual meeting room that can only be used for a single purpose at a time,
 * and a dynamic virtual meeting room that is generated on demand for a specific purpose.

 Implementers may consider using Appointment.virtualService for virtual meeting rooms that are generated on-demand.
     */
    virtualService?: VirtualServiceDetail[];
    /**
     * Technical endpoints providing access to services operated for the location
     * Technical endpoints providing access to services operated for the location.
     */
    endpoint?: Reference[];
    /**
     * active | suspended | inactive
     * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
     */
    status?: LocationStatus;
    /**
     * instance | kind
     * Indicates whether a resource instance represents a specific location or a class of locations.
     * This is labeled as a modifier because whether or not the location is a class of locations changes how it can be used and understood.
     */
    mode?: LocationMode;
}
/**
 * General characteristics of this item
 * General characteristics of this item.
 */
export interface ManufacturedItemDefinitionProperty extends BackboneElement {
    /**
     * A code expressing the type of characteristic
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueReference?: Reference;
}
/**
 * A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient)
 * A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient).
 */
export interface ManufacturedItemDefinitionComponentConstituent extends BackboneElement {
    /**
     * The measurable amount of the substance, expressable in different ways (e.g. by mass or volume)
     * The measurable amount of the substance, expressable in different ways (e.g. by mass or volume).
     */
    amount?: Quantity[];
    /**
     * The physical location of the constituent/ingredient within the component
     * The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc.
     */
    location?: CodeableConcept[];
    /**
     * The function of this constituent within the component e.g. binder
     * The function of this constituent within the component e.g. binder.
     */
    function?: CodeableConcept[];
    /**
     * The ingredient that is the constituent of the given component
     * The ingredient that is the constituent of the given component.
     */
    hasIngredient?: CodeableReference[];
}
/**
 * Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup
 * Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup.
 */
export interface ManufacturedItemDefinitionComponent extends BackboneElement {
    /**
     * Defining type of the component e.g. shell, layer, ink
     * Defining type of the component e.g. shell, layer, ink.
     */
    type: CodeableConcept;
    /**
     * The function of this component within the item e.g. delivers active ingredient, masks taste
     * The function of this component within the item e.g. delivers active ingredient, masks taste.
     */
    function?: CodeableConcept[];
    /**
     * The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume)
     * The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume).
     */
    amount?: Quantity[];
    /**
     * A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient)
     * A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient).
     */
    constituent?: ManufacturedItemDefinitionComponentConstituent[];
    /**
     * General characteristics of this component
     * General characteristics of this component.
     */
    property?: ManufacturedItemDefinitionProperty[];
    /**
     * A component that this component contains or is made from
     * A component that this component contains or is made from.
     */
    component?: ManufacturedItemDefinitionComponent[];
}
/**
 * The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product
 * The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.
 */
export interface ManufacturedItemDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ManufacturedItemDefinition';
    /**
     * Unique identifier
     * Unique identifier.
     */
    identifier?: Identifier[];
    /**
     * A descriptive name applied to this item
     * A descriptive name applied to this item.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Dose form as manufactured (before any necessary transformation)
     * Dose form as manufactured and before any transformation into the pharmaceutical product.
     */
    manufacturedDoseForm: CodeableConcept;
    /**
     * The “real-world” units in which the quantity of the item is described
     * The “real-world” units in which the quantity of the manufactured item is described.
     */
    unitOfPresentation?: CodeableConcept;
    /**
     * Manufacturer of the item, one of several possible
     * Manufacturer of the item, one of several possible.
     */
    manufacturer?: Reference[];
    /**
     * Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated
     * Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
     */
    marketingStatus?: MarketingStatus[];
    /**
     * The ingredients of this manufactured item. Only needed if these are not specified by incoming references from the Ingredient resource
     * The ingredients of this manufactured item. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource.
     */
    ingredient?: CodeableConcept[];
    /**
     * General characteristics of this item
     * General characteristics of this item.
     */
    property?: ManufacturedItemDefinitionProperty[];
    /**
     * Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup
     * Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup.
     */
    component?: ManufacturedItemDefinitionComponent[];
    /**
     * draft | active | retired | unknown
     * The status of this item. Enables tracking the life-cycle of the content.
     * Allows filtering of manufactured items that are appropriate for use versus not.
     */
    status: ManufacturedItemDefinitionPublicationStatus;
}
/**
 * Defined terms used in the measure documentation
 * Provides a description of an individual term used within the measure.
 */
export interface MeasureTerm extends BackboneElement {
    /**
     * What term?
     * A codeable representation of the defined term.
     */
    code?: CodeableConcept;
    /**
     * Meaning of the term
     * Provides a definition for the term as used within the measure.
     */
    definition?: markdown;
    /**
     * Extension for definition
     **/
    _definition?: Element;
}
/**
 * Population criteria
 * A population criteria for the measure.
 */
export interface MeasureGroupPopulation extends BackboneElement {
    /**
     * Unique id for population in measure
     * An identifier that is unique within the Measure allowing linkage to the equivalent population in a MeasureReport resource.
     * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.

LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation
     * The type of population criteria.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this population criteria
     * The human readable description of this population criteria.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The criteria that defines this population
     * An expression that specifies the criteria for the population, typically the name of an expression in a library.
     * In the case of a continuous-variable or ratio measure, this may be the name of a function that calculates the value of the individual observation for each patient or event in the population. For these types of measures, individual observations are reported as observation resources included in the evaluatedResources bundle for each patient. See the MeasureReport resource or the Quality Reporting topic for more information.
     */
    criteria?: Expression;
    /**
     * A group resource that defines this population
     * A Group resource that defines this population as a set of characteristics.
     * Note that this approach can only be used for measures where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group resource SHALL be a definitional (as opposed to an actual) group.
     */
    groupDefinition?: Reference;
    /**
     * Which population
     * The id of a population element in this measure that provides the input for this population criteria. In most cases, the scoring structure of the measure implies specific relationships (e.g. the Numerator uses the Denominator as the source in a proportion scoring). In some cases, however, multiple possible choices exist and must be resolved explicitly. For example in a ratio measure with multiple initial populations, the denominator must specify which population should be used as the starting point.
     */
    inputPopulationId?: string;
    /**
     * Extension for inputPopulationId
     **/
    _inputPopulationId?: Element;
    /**
     * Aggregation method for a measure score (e.g. sum, average, median, minimum, maximum, count)
     * Specifies which method should be used to aggregate measure observation values. For most scoring types, this is implied by scoring (e.g. a proportion measure counts members of the populations). For continuous variables, however, this information must be specified to ensure correct calculation.
     */
    aggregateMethod?: CodeableConcept;
}
/**
 * Stratifier criteria component for the measure
 * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 * Stratifiers are defined either as a single criteria, or as a set of component criteria.
 */
export interface MeasureGroupStratifierComponent extends BackboneElement {
    /**
     * Unique id for stratifier component in measure
     * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
     * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.

LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Meaning of the stratifier component
     * Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this stratifier component
     * The human readable description of this stratifier criteria component.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Component of how the measure should be stratified
     * An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    criteria?: Expression;
    /**
     * A group resource that defines this population
     * A Group resource that defines this population as a set of characteristics.
     * Note that this approach can only be used for measures where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group SHALL be a definitional (as opposed to an actual) group.
     */
    groupDefinition?: Reference;
}
/**
 * Stratifier criteria for the measure
 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
 */
export interface MeasureGroupStratifier extends BackboneElement {
    /**
     * Unique id for stratifier in measure
     * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
     * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.

LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Meaning of the stratifier
     * Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this stratifier
     * The human readable description of this stratifier criteria.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * How the measure should be stratified
     * An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    criteria?: Expression;
    /**
     * A group resource that defines this population
     * A Group resource that defines this population as a set of characteristics.
     * Note that this approach can only be used for measures where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group SHALL be a definitional (as opposed to an actual) group.
     */
    groupDefinition?: Reference;
    /**
     * Stratifier criteria component for the measure
     * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     * Stratifiers are defined either as a single criteria, or as a set of component criteria.
     */
    component?: MeasureGroupStratifierComponent[];
}
/**
 * Population criteria group
 * A group of population criteria for the measure.
 */
export interface MeasureGroup extends BackboneElement {
    /**
     * Unique id for group in measure
     * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
     * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.

LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Meaning of the group
     * Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * Summary description
     * The human readable description of this population group.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * process | outcome | structure | patient-reported-outcome | composite
     * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
     * When specified at the group level, defines the measure type for this specific group. If not specified, the measureType of the group is determined by the root type element
     */
    type?: CodeableConcept[];
    /**
     * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
     */
    subjectReference?: Reference;
    /**
     * Population basis
     * The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.
     * When specified at the group level, defines the population basis for this specific group. If not specified, the basis for the group is determined by the root basis element
     */
    basis?: code;
    /**
     * Extension for basis
     **/
    _basis?: Element;
    /**
     * proportion | ratio | continuous-variable | cohort
     * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
     * When specified at the group level, defines the scoring for this specific group. If not specified, scoring for this group is determined by the root scoring element
     */
    scoring?: CodeableConcept;
    /**
     * What units?
     * Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.
     * When specified at the group level, this defines the scoringUnit for this specific group. If not specified, the scoringUnit for this group is determined by the root scoringUnit element. As with the root element, when this element is specified, implementations are expected to report measure scores in the specified units. Note that this may involve unit conversion if the expected units are different than the units of the resulting score calculation. In this case, unit conversions SHALL be performed according to the unit conversion semantics specified by UCUM.
     */
    scoringUnit?: CodeableConcept;
    /**
     * How is rate aggregation performed for this measure
     * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
     * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
     */
    rateAggregation?: markdown;
    /**
     * Extension for rateAggregation
     **/
    _rateAggregation?: Element;
    /**
     * increase | decrease
     * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
     * When specified at the group level, this element defines the improvementNotation for this specific group. If not specified, improvementNotation for this group is determined by the root improvementNotation element
     */
    improvementNotation?: CodeableConcept;
    /**
     * Logic used by the measure group
     * A reference to a Library resource containing the formal logic used by the measure group.
     */
    library?: canonical[];
    /**
     * Extension for library
     **/
    _library?: Element[];
    /**
     * Population criteria
     * A population criteria for the measure.
     */
    population?: MeasureGroupPopulation[];
    /**
     * Stratifier criteria for the measure
     * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
     */
    stratifier?: MeasureGroupStratifier[];
}
/**
 * What other data should be reported with the measure
 * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
 * Note that supplemental data are reported as resources for each patient and referenced in the supplementalData element of the MeasureReport. If the supplementalData expression results in a value other than a resource, it is reported using an Observation resource, typically contained in the resulting MeasureReport. See the MeasureReport resource and the Quality Reporting topic for more information.
 */
export interface MeasureSupplementalData extends BackboneElement {
    /**
     * Unique id for supplementalData in measure
     * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
     * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.

LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Meaning of the supplemental data
     * Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * supplemental-data | risk-adjustment-factor
     * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
     */
    usage?: CodeableConcept[];
    /**
     * The human readable description of this supplemental data
     * The human readable description of this supplemental data.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Expression describing additional data to be reported
     * The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.
     */
    criteria: Expression;
}
/**
 * A quality measure definition
 * The Measure resource provides the definition of a quality measure.
 */
export interface Measure extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Measure';
    /**
     * Canonical identifier for this measure, represented as a URI (globally unique)
     * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the measure
     * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this measure outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the measure
     * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     * There may be different measure instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the measure with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this measure (computer friendly)
     * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this measure (human friendly)
     * A short, descriptive, user-friendly title for the measure.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate title of the measure
     * An explanatory or alternate title for the measure giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of measures that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
     */
    subjectReference?: Reference;
    /**
     * Population basis
     * The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.
     * For a subject-based measure, the population basis is simply boolean; all the criteria are expressed as true/false conditions that determine membership of an individual case in the population. For non-subject-based measures, the population basis can be any resource type, and the criteria are queries that return the subject's contribution to the population as a list of that resource type. For example, for a procedure-based measure, the population criteria would return lists of procedures that should be included in each population.
     */
    basis?: code;
    /**
     * Extension for basis
     **/
    _basis?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the measure was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the measure. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the measure.
     * Usually an organization but may be an individual. The publisher (or steward) of the measure is the organization or individual primarily responsible for the maintenance and upkeep of the measure. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the measure. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the measure
     * A free text natural language description of the measure from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the measure as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the measure is presumed to be the predominant language in the place the measure was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for measure (if applicable)
     * A legal or geographic region in which the measure is intended to be used.
     * It may be possible for the measure to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this measure is defined
     * Explanation of why this measure is needed and why it has been designed as it has.
     * This element does not describe the usage of the measure. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this measure.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Describes the clinical usage of the measure
     * A detailed description, from a clinical perspective, of how the measure is used.
     * This metadata element was typically referred to as Guidance in HQMF
     */
    usage?: markdown;
    /**
     * Extension for usage
     **/
    _usage?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the measure was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the measure was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the measure is expected to be used
     * The period during which the measure content was or is planned to be in active use.
     * The effective period for a measure determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * The category of the measure, such as Education, Treatment, Assessment, etc
     * Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the content
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Logic used by the measure
     * A reference to a Library resource containing the formal logic used by the measure.
     */
    library?: canonical[];
    /**
     * Extension for library
     **/
    _library?: Element[];
    /**
     * Disclaimer for use of the measure or its referenced content
     * Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
     */
    disclaimer?: markdown;
    /**
     * Extension for disclaimer
     **/
    _disclaimer?: Element;
    /**
     * proportion | ratio | continuous-variable | cohort
     * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
     */
    scoring?: CodeableConcept;
    /**
     * What units?
     * Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.
     * When this element is specified, implementations are expected to report measure scores in the specified units. Note that this may involve unit conversion if the expected units are different than the units of the resulting score calculation. In this case, unit conversions SHALL be performed according to the unit conversion semantics specified by UCUM.
     */
    scoringUnit?: CodeableConcept;
    /**
     * opportunity | all-or-nothing | linear | weighted
     * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
     */
    compositeScoring?: CodeableConcept;
    /**
     * process | outcome | structure | patient-reported-outcome | composite
     * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
     */
    type?: CodeableConcept[];
    /**
     * How risk adjustment is applied for this measure
     * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
     * Describes the method of adjusting for clinical severity and conditions present at the start of care that can influence patient outcomes for making valid comparisons of outcome measures across providers. Indicates whether a measure is subject to the statistical process for reducing, removing, or clarifying the influences of confounding factors to allow for more useful comparisons.
     */
    riskAdjustment?: markdown;
    /**
     * Extension for riskAdjustment
     **/
    _riskAdjustment?: Element;
    /**
     * How is rate aggregation performed for this measure
     * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
     * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
     */
    rateAggregation?: markdown;
    /**
     * Extension for rateAggregation
     **/
    _rateAggregation?: Element;
    /**
     * Detailed description of why the measure exists
     * Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
     */
    rationale?: markdown;
    /**
     * Extension for rationale
     **/
    _rationale?: Element;
    /**
     * Summary of clinical guidelines
     * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
     */
    clinicalRecommendationStatement?: markdown;
    /**
     * Extension for clinicalRecommendationStatement
     **/
    _clinicalRecommendationStatement?: Element;
    /**
     * increase | decrease
     * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
     */
    improvementNotation?: CodeableConcept;
    /**
     * Defined terms used in the measure documentation
     * Provides a description of an individual term used within the measure.
     */
    term?: MeasureTerm[];
    /**
     * Additional guidance for implementers (deprecated)
     * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
     * NOTE: This element is deprecated in favor of the usage element
     */
    guidance?: markdown;
    /**
     * Extension for guidance
     **/
    _guidance?: Element;
    /**
     * Population criteria group
     * A group of population criteria for the measure.
     */
    group?: MeasureGroup[];
    /**
     * What other data should be reported with the measure
     * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
     * Note that supplemental data are reported as resources for each patient and referenced in the supplementalData element of the MeasureReport. If the supplementalData expression results in a value other than a resource, it is reported using an Observation resource, typically contained in the resulting MeasureReport. See the MeasureReport resource and the Quality Reporting topic for more information.
     */
    supplementalData?: MeasureSupplementalData[];
    /**
     * draft | active | retired | unknown
     * The status of this measure. Enables tracking the life-cycle of the content.
     * Allows filtering of measures that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: MeasurePublicationStatus;
}
/**
 * The populations in the group
 * The populations that make up the population group, one for each type of population appropriate for the measure.
 */
export interface MeasureReportGroupPopulation extends BackboneElement {
    /**
     * Pointer to specific population from Measure
     * The population from the Measure that corresponds to this population in the MeasureReport resource.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation
     * The type of the population.
     */
    code?: CodeableConcept;
    /**
     * Size of the population
     * The number of members of the population.
     */
    count?: integer;
    /**
     * Extension for count
     **/
    _count?: Element;
    /**
     * For subject-list reports, the subject results in this population
     * This element refers to a List of individual level MeasureReport resources, one for each subject in this population.
     */
    subjectResults?: Reference;
    /**
     * For subject-list reports, a subject result in this population
     * A reference to an individual level MeasureReport resource for a member of the population.
     * This element SHALL NOT be used in with subjectResults, either systems provide results as a List of MeasureReport, or as references to individual MeasureReports. Note that using this element introduces a constraint on the size of the subject-list MeasureReport; implementations would be free to return a TOO-COSTLY response if a request is made for a subject-list report with too many subjects.
     */
    subjectReport?: Reference[];
    /**
     * What individual(s) in the population
     * Optional Group identifying the individuals that make up the population.
     * Note that this element can only be used for summary and subject-list reports where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group resource SHALL be an actual (as opposed to a definitional) group.
     */
    subjects?: Reference;
}
/**
 * Stratifier component values
 * A stratifier component value.
 */
export interface MeasureReportGroupStratifierStratumComponent extends BackboneElement {
    /**
     * Pointer to specific stratifier component from Measure
     * The stratifier component from the Measure that corresponds to this stratifier component in the MeasureReport resource.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * What stratifier component of the group
     * The code for the stratum component value.
     */
    code: CodeableConcept;
    /**
     * The stratum component value, e.g. male
     * The stratum component value.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The stratum component value, e.g. male
     * The stratum component value.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * The stratum component value, e.g. male
     * The stratum component value.
     */
    valueQuantity?: Quantity;
    /**
     * The stratum component value, e.g. male
     * The stratum component value.
     */
    valueRange?: Range;
    /**
     * The stratum component value, e.g. male
     * The stratum component value.
     */
    valueReference?: Reference;
}
/**
 * Population results in this stratum
 * The populations that make up the stratum, one for each type of population appropriate to the measure.
 */
export interface MeasureReportGroupStratifierStratumPopulation extends BackboneElement {
    /**
     * Pointer to specific population from Measure
     * The population from the Measure that corresponds to this population in the MeasureReport resource.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation
     * The type of the population.
     */
    code?: CodeableConcept;
    /**
     * Size of the population
     * The number of members of the population in this stratum.
     */
    count?: integer;
    /**
     * Extension for count
     **/
    _count?: Element;
    /**
     * For subject-list reports, the subject results in this population
     * This element refers to a List of individual level MeasureReport resources, one for each subject in this population in this stratum.
     */
    subjectResults?: Reference;
    /**
     * For subject-list reports, a subject result in this population
     * A reference to an individual level MeasureReport resource for a member of the population.
     * This element SHALL NOT be used in with subjectResults, either systems provide results as a List of MeasureReport, or as references to individual MeasureReports. Note that using this element introduces a constraint on the size of the subject-list MeasureReport; implementations would be free to return a TOO-COSTLY response if a request is made for a subject-list report with too many subjects.
     */
    subjectReport?: Reference[];
    /**
     * What individual(s) in the population
     * Optional Group identifying the individuals that make up the population.
     * Note that this element can only be used for summary and subject-list reports where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group SHALL be an actual (as opposed to a definitional) group.
     */
    subjects?: Reference;
}
/**
 * Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components
 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
 */
export interface MeasureReportGroupStratifierStratum extends BackboneElement {
    /**
     * The stratum value, e.g. male
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The stratum value, e.g. male
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * The stratum value, e.g. male
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    valueQuantity?: Quantity;
    /**
     * The stratum value, e.g. male
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    valueRange?: Range;
    /**
     * The stratum value, e.g. male
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    valueReference?: Reference;
    /**
     * Stratifier component values
     * A stratifier component value.
     */
    component?: MeasureReportGroupStratifierStratumComponent[];
    /**
     * Population results in this stratum
     * The populations that make up the stratum, one for each type of population appropriate to the measure.
     */
    population?: MeasureReportGroupStratifierStratumPopulation[];
    /**
     * What score this stratum achieved
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScoreQuantity?: Quantity;
    /**
     * What score this stratum achieved
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScoreDateTime?: dateTime;
    /**
     * Extension for measureScoreDateTime
     **/
    _measureScoreDateTime?: Element;
    /**
     * What score this stratum achieved
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScoreCodeableConcept?: CodeableConcept;
    /**
     * What score this stratum achieved
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScorePeriod?: Period;
    /**
     * What score this stratum achieved
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScoreRange?: Range;
    /**
     * What score this stratum achieved
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScoreDuration?: Duration;
}
/**
 * Stratification results
 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
 */
export interface MeasureReportGroupStratifier extends BackboneElement {
    /**
     * Pointer to specific stratifier from Measure
     * The stratifier from the Measure that corresponds to this stratifier in the MeasureReport resource.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * What stratifier of the group
     * The meaning of this stratifier, as defined in the measure definition.
     */
    code?: CodeableConcept;
    /**
     * Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components
     * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
     */
    stratum?: MeasureReportGroupStratifierStratum[];
}
/**
 * Measure results for each group
 * The results of the calculation, one for each population group in the measure.
 */
export interface MeasureReportGroup extends BackboneElement {
    /**
     * Pointer to specific group from Measure
     * The group from the Measure that corresponds to this group in the MeasureReport resource.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Meaning of the group
     * The meaning of the population group as defined in the measure definition.
     */
    code?: CodeableConcept;
    /**
     * What individual(s) the report is for
     * Optional subject identifying the individual or individuals the report is for.
     */
    subject?: Reference;
    /**
     * The populations in the group
     * The populations that make up the population group, one for each type of population appropriate for the measure.
     */
    population?: MeasureReportGroupPopulation[];
    /**
     * What score this group achieved
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScoreQuantity?: Quantity;
    /**
     * What score this group achieved
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScoreDateTime?: dateTime;
    /**
     * Extension for measureScoreDateTime
     **/
    _measureScoreDateTime?: Element;
    /**
     * What score this group achieved
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScoreCodeableConcept?: CodeableConcept;
    /**
     * What score this group achieved
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScorePeriod?: Period;
    /**
     * What score this group achieved
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScoreRange?: Range;
    /**
     * What score this group achieved
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScoreDuration?: Duration;
    /**
     * Stratification results
     * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
     */
    stratifier?: MeasureReportGroupStratifier[];
}
/**
 * Results of a measure evaluation
 * The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
 */
export interface MeasureReport extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MeasureReport';
    /**
     * Additional identifier for the MeasureReport
     * A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
     */
    identifier?: Identifier[];
    /**
     * What measure was calculated
     * A reference to the Measure that was calculated to produce this report.
     */
    measure?: canonical;
    /**
     * Extension for measure
     **/
    _measure?: Element;
    /**
     * What individual(s) the report is for
     * Optional subject identifying the individual or individuals the report is for.
     */
    subject?: Reference;
    /**
     * When the measure was calculated
     * The date this measure was calculated.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Who is reporting the data
     * The individual or organization that is reporting the data.
     */
    reporter?: Reference;
    /**
     * What vendor prepared the data
     * A reference to the vendor who queried the data, calculated results and/or generated the report. The ‘reporting vendor’ is intended to represent the submitting entity when it is not the same as the reporting entity. This extension is used when the Receiver is interested in getting vendor information in the report.
     */
    reportingVendor?: Reference;
    /**
     * Where the reported data is from
     * A reference to the location for which the data is being reported.
     */
    location?: Reference;
    /**
     * What period the report covers
     * The reporting period for which the report was calculated.
     */
    period: Period;
    /**
     * What parameters were provided to the report
     * A reference to a Parameters resource (typically represented using a contained resource) that represents any input parameters that were provided to the operation that generated the report.
     * Whenever an operation returns a MeasureReport, the IN parameters from that operation can be returned to the caller of the operation using MeasureReport.inputParameters. Operations include but are not limited to $evaluate-measure, $care-gaps, $data-requirements, and $collect-data. The inputParameters can also be used in a MeasureReport used to define a test case (i.e., not as a result of an operation).
     */
    inputParameters?: Reference;
    /**
     * What scoring method (e.g. proportion, ratio, continuous-variable)
     * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. It is expected to be the same as the scoring element on the referenced Measure.
     */
    scoring?: CodeableConcept;
    /**
     * increase | decrease
     * Whether improvement in the measure is noted by an increase or decrease in the measure score.
     * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score. Note also that a MeasureReport instance includes the improvementNotation as defined by the Measure being reported. It is duplicated in the MeasureReport because it is a critical aspect of interpreting the measure score but it is not intended to reflect whether the measure report is an increase or decrease. It helps interpret if the measure score is an increase or decrease, I.e., moving in the direction of the desired outcome.
     */
    improvementNotation?: CodeableConcept;
    /**
     * Measure results for each group
     * The results of the calculation, one for each population group in the measure.
     */
    group?: MeasureReportGroup[];
    /**
     * Additional information collected for the report
     * A reference to a Resource that represents additional information collected for the report. If the value of the supplemental data is not a Resource (i.e. evaluating the supplementalData expression for this case in the measure results in a value that is not a FHIR Resource), it is reported as a reference to a contained Observation resource.
     * For individual measure reports, the supplementalData elements represent the direct result of evaluating the supplementalData expression for the subject of the report. For summary reports, supplementalData is reported as references to contained Observation resources that represent the number of times each value appeared as a supplementalData result for members of the population.
     */
    supplementalData?: Reference[];
    /**
     * What data was used to calculate the measure score
     * Evaluated resources are used to capture what data was involved in the calculation of a measure. This usage is only allowed for individual reports to ensure that the size of the MeasureReport resource is bounded.
     * Evaluated resources are only reported for individual reports.
     */
    evaluatedResource?: Reference[];
    /**
     * complete | pending | error
     * The MeasureReport status. No data will be available until the MeasureReport status is complete.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: MeasureReportStatus;
    /**
     * individual | subject-list | summary | data-exchange
     * The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.
     * Data-exchange reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
     */
    type: MeasureReportType;
    /**
     * incremental | snapshot
     * Indicates whether the data submitted in a data-exchange report represents a snapshot or incremental update. A snapshot update replaces all previously submitted data for the receiver, whereas an incremental update represents only updated and/or changed data and should be applied as a differential update to the existing submitted data for the receiver.
     * This element only applies to Data-collection reports used to communicate the data-of-interest for a measure
     */
    dataUpdateType?: MeasureReportSubmitDataUpdateType;
}
/**
 * Active or inactive ingredient
 * Identifies a particular constituent of interest in the product.
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export interface MedicationIngredient extends BackboneElement {
    /**
     * The ingredient (substance or medication) that the ingredient.strength relates to
     * The ingredient (substance or medication) that the ingredient.strength relates to.  This is represented as a concept from a code system or described in another resource (Substance or Medication).
     */
    item: CodeableReference;
    /**
     * Active ingredient indicator
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    isActive?: boolean;
    /**
     * Extension for isActive
     **/
    _isActive?: Element;
    /**
     * Quantity of ingredient present
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
     */
    strengthRatio?: Ratio;
    /**
     * Quantity of ingredient present
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
     */
    strengthCodeableConcept?: CodeableConcept;
    /**
     * Quantity of ingredient present
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
     */
    strengthQuantity?: Quantity;
}
/**
 * Details about packaged medications
 * Information that only applies to packages (not products).
 */
export interface MedicationBatch extends BackboneElement {
    /**
     * Identifier assigned to batch
     * The assigned lot number of a batch of the specified product.
     */
    lotNumber?: string;
    /**
     * Extension for lotNumber
     **/
    _lotNumber?: Element;
    /**
     * When batch will expire
     * When this specific batch of product will expire.
     */
    expirationDate?: dateTime;
    /**
     * Extension for expirationDate
     **/
    _expirationDate?: Element;
}
/**
 * Definition of a Medication
 * This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
 */
export interface Medication extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Medication';
    /**
     * Business identifier for this medication
     * Business identifier for this medication.
     * The serial number could be included as an identifier.
     */
    identifier?: Identifier[];
    /**
     * Codes that identify this medication
     * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
     */
    code?: CodeableConcept;
    /**
     * Organization that has authorization to market medication
     * The company or other legal entity that has authorization, from the appropriate drug regulatory authority,  to market a medicine in one or more jurisdictions.  Typically abbreviated MAH.Note:  The MAH may manufacture the product and may also contract the manufacturing of the product to one or more companies (organizations).
     */
    marketingAuthorizationHolder?: Reference;
    /**
     * powder | tablets | capsule +
     * Describes the form of the item.  Powder; tablets; capsule.
     * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
     */
    doseForm?: CodeableConcept;
    /**
     * When the specified product code does not infer a package size, this is the specific amount of drug in the product
     * When the specified product code does not infer a package size, this is the specific amount of drug in the product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    totalVolume?: Quantity;
    /**
     * Active or inactive ingredient
     * Identifies a particular constituent of interest in the product.
     * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
     */
    ingredient?: MedicationIngredient[];
    /**
     * Details about packaged medications
     * Information that only applies to packages (not products).
     */
    batch?: MedicationBatch;
    /**
     * Knowledge about this medication
     * A reference to a knowledge resource that provides more information about this medication.
     */
    definition?: Reference;
    /**
     * active | inactive | entered-in-error
     * A code to indicate if the medication is in active use.
     * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
     */
    status?: MedicationStatus;
}
/**
 * Who or what performed the medication administration and what type of performance they did
 * The performer of the medication treatment.  For devices this is the device that performed the administration of the medication.  An IV Pump would be an example of a device that is performing the administration. Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
 */
export interface MedicationAdministrationPerformer extends BackboneElement {
    /**
     * Type of performance
     * Distinguishes the type of involvement of the performer in the medication administration.
     */
    function?: CodeableConcept;
    /**
     * Who or what performed the medication administration
     * Indicates who or what performed the medication administration.
     */
    actor: CodeableReference;
}
/**
 * Details of how medication was taken
 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
 */
export interface MedicationAdministrationDosage extends BackboneElement {
    /**
     * Free text dosage instructions e.g. SIG
     * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.

The dosage instructions should reflect the dosage of the medication that was administered.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Body site administered to
     * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
     * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
     */
    site?: CodeableConcept;
    /**
     * Path of substance into body
     * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
     */
    route?: CodeableConcept;
    /**
     * How drug was administered
     * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
     * One of the reasons this attribute is not used often, is that the method is often pre-coordinated with the route and/or form of administration.  This means the codes used in route or form may pre-coordinate the method in the route code or the form code.  The implementation decision about what coding system to use for route or form code will determine how frequently the method code will be populated e.g. if route or form code pre-coordinate method code, then this attribute will not be populated often; if there is no pre-coordination then method code may  be used frequently.
     */
    method?: CodeableConcept;
    /**
     * Amount of medication per dose
     * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
     * If the administration is not instantaneous (rate is present), this can be specified to convey the total amount administered over period of time of a single administration.
     */
    dose?: Quantity;
    /**
     * Dose quantity per unit of time
     * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
     * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
     */
    rateRatio?: Ratio;
    /**
     * Dose quantity per unit of time
     * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
     * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
     */
    rateQuantity?: Quantity;
}
/**
 * Administration of medication to a patient
 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
 */
export interface MedicationAdministration extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MedicationAdministration';
    /**
     * External identifier
     * Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * Plan this is fulfilled by this administration
     * A plan that is fulfilled in whole or in part by this MedicationAdministration.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event
     * A larger event of which this particular event is a component or step.
     * MedicationDispense will be used to indicate waste.
     */
    partOf?: Reference[];
    /**
     * Reason administration not performed
     * A code indicating why the administration was not performed.
     */
    statusReason?: CodeableConcept[];
    /**
     * Type of medication administration
     * The type of medication administration (for example, drug classification like ATC, where meds would be administered, legal category of the medication).
     */
    category?: CodeableConcept[];
    /**
     * What was administered
     * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
     */
    medication: CodeableReference;
    /**
     * Who received medication
     * The person or animal or group receiving the medication.
     */
    subject: Reference;
    /**
     * Encounter administered as part of
     * The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
     */
    encounter?: Reference;
    /**
     * Additional information to support administration
     * Additional information (for example, patient height and weight) that supports the administration of the medication.  This attribute can be used to provide documentation of specific characteristics of the patient present at the time of administration.  For example, if the dose says "give "x" if the heartrate exceeds "y"", then the heart rate can be included using this attribute.
     */
    supportingInformation?: Reference[];
    /**
     * Specific date/time or interval of time during which the administration took place (or did not take place)
     * A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    occurenceDateTime?: dateTime;
    /**
     * Extension for occurenceDateTime
     **/
    _occurenceDateTime?: Element;
    /**
     * Specific date/time or interval of time during which the administration took place (or did not take place)
     * A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    occurencePeriod?: Period;
    /**
     * Specific date/time or interval of time during which the administration took place (or did not take place)
     * A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    occurenceTiming?: Timing;
    /**
     * When the MedicationAdministration was first captured in the subject's record
     * The date the occurrence of the  MedicationAdministration was first captured in the record - potentially significantly after the occurrence of the event.
     */
    recorded?: dateTime;
    /**
     * Extension for recorded
     **/
    _recorded?: Element;
    /**
     * Full dose was not administered
     * An indication that the full dose was not administered.
     */
    isSubPotent?: boolean;
    /**
     * Extension for isSubPotent
     **/
    _isSubPotent?: Element;
    /**
     * Reason full dose was not administered
     * The reason or reasons why the full dose was not administered.
     */
    subPotentReason?: CodeableConcept[];
    /**
     * Who or what performed the medication administration and what type of performance they did
     * The performer of the medication treatment.  For devices this is the device that performed the administration of the medication.  An IV Pump would be an example of a device that is performing the administration. Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
     */
    performer?: MedicationAdministrationPerformer[];
    /**
     * Concept, condition or observation that supports why the medication was administered
     * A code, Condition or observation that supports why the medication was administered.
     */
    reason?: CodeableReference[];
    /**
     * Request administration performed against
     * The original request, instruction or authority to perform the administration.
     * This is a reference to the MedicationRequest  where the intent is either order or instance-order.  It should not reference MedicationRequests where the intent is any other value.
     */
    request?: Reference;
    /**
     * Device used to administer
     * The device that is to be used for the administration of the medication (for example, PCA Pump).
     */
    device?: CodeableReference[];
    /**
     * Information about the administration
     * Extra information about the medication administration that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Details of how medication was taken
     * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
     */
    dosage?: MedicationAdministrationDosage;
    /**
     * A list of events of interest in the lifecycle
     * A summary of the events of interest that have occurred, such as when the administration was verified.
     * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.
     */
    eventHistory?: Reference[];
    /**
     * in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown
     * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: MedicationAdministrationStatus;
}
/**
 * Who performed event
 * Indicates who or what performed the event.
 */
export interface MedicationDispensePerformer extends BackboneElement {
    /**
     * Who performed the dispense and what they did
     * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
     */
    function?: CodeableConcept;
    /**
     * Individual who was performing
     * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
     */
    actor: Reference;
}
/**
 * Whether a substitution was performed on the dispense
 * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
    /**
     * Whether a substitution was or was not performed on the dispense
     * True if the dispenser dispensed a different drug or product from what was prescribed.
     */
    wasSubstituted: boolean;
    /**
     * Extension for wasSubstituted
     **/
    _wasSubstituted?: Element;
    /**
     * Code signifying whether a different drug was dispensed from what was prescribed
     * A code signifying whether a different drug was dispensed from what was prescribed.
     */
    type?: CodeableConcept;
    /**
     * Why was substitution made
     * Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
     */
    reason?: CodeableConcept[];
    /**
     * Who is responsible for the substitution
     * The person or organization that has primary responsibility for the substitution.
     */
    responsibleParty?: Reference;
}
/**
 * Dispensing a medication to a named patient
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export interface MedicationDispense extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MedicationDispense';
    /**
     * External identifier
     * Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * Plan that is fulfilled by this dispense
     * A plan that is fulfilled in whole or in part by this MedicationDispense.
     */
    basedOn?: Reference[];
    /**
     * Event that dispense is part of
     * The procedure or medication administration that triggered the dispense.
     * While both a procedure and a medication administration may have triggered the dispense, but it is not expected that multiple procedures and/or multiple medication administrations would be triggers.
     */
    partOf?: Reference[];
    /**
     * Why a dispense was not performed
     * Indicates the reason why a dispense was not performed.
     */
    notPerformedReason?: CodeableReference;
    /**
     * When the status changed
     * The date (and maybe time) when the status of the dispense record changed.
     */
    statusChanged?: dateTime;
    /**
     * Extension for statusChanged
     **/
    _statusChanged?: Element;
    /**
     * Type of medication dispense
     * Indicates the type of medication dispense (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
     * The category can be used to include where the medication is expected to be consumed or other types of dispenses.  Invariants can be used to bind to different value sets when profiling to bind.
     */
    category?: CodeableConcept[];
    /**
     * What medication was supplied
     * Identifies the medication supplied. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
     */
    medication: CodeableReference;
    /**
     * Who the dispense is for
     * A link to a resource representing the person or the group to whom the medication will be given.
     * SubstanceAdministration->subject->Patient.
     */
    subject: Reference;
    /**
     * Encounter associated with event
     * The encounter that establishes the context for this event.
     */
    encounter?: Reference;
    /**
     * Information that supports the dispensing of the medication
     * Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented.
     */
    supportingInformation?: Reference[];
    /**
     * Who performed event
     * Indicates who or what performed the event.
     */
    performer?: MedicationDispensePerformer[];
    /**
     * Where the dispense occurred
     * The principal physical location where the dispense was performed.
     */
    location?: Reference;
    /**
     * Medication order that authorizes the dispense
     * Indicates the medication order that is being dispensed against.
     * Maps to basedOn in Event logical model.
     */
    authorizingPrescription?: Reference[];
    /**
     * Trial fill, partial fill, emergency fill, etc
     * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    type?: CodeableConcept;
    /**
     * Amount dispensed
     * The amount of medication that has been dispensed. Includes unit of measure.
     */
    quantity?: Quantity;
    /**
     * Amount of medication expressed as a timing amount
     * The amount of medication expressed as a timing amount.
     */
    daysSupply?: Quantity;
    /**
     * When the recording of the dispense started
     * The date (and maybe time) when the dispense activity started if whenPrepared or whenHandedOver is not populated.
     */
    recorded?: dateTime;
    /**
     * Extension for recorded
     **/
    _recorded?: Element;
    /**
     * When product was packaged and reviewed
     * The time when the dispensed product was packaged and reviewed.
     */
    whenPrepared?: dateTime;
    /**
     * Extension for whenPrepared
     **/
    _whenPrepared?: Element;
    /**
     * When product was given out
     * The time the dispensed product was provided to the patient or their representative.
     */
    whenHandedOver?: dateTime;
    /**
     * Extension for whenHandedOver
     **/
    _whenHandedOver?: Element;
    /**
     * Where the medication was/will be sent
     * Identification of the facility/location where the medication was/will be shipped to, as part of the dispense event.
     */
    destination?: Reference;
    /**
     * Who collected the medication or where the medication was delivered
     * Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
     */
    receiver?: Reference[];
    /**
     * Information about the dispense
     * Extra information about the dispense that could not be conveyed in the other attributes.
     */
    note?: Annotation[];
    /**
     * Full representation of the dosage instructions
     * The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
     * The content of the renderedDosageInstructions must not be different than the dose represented in the dosageInstruction content.
     */
    renderedDosageInstruction?: markdown;
    /**
     * Extension for renderedDosageInstruction
     **/
    _renderedDosageInstruction?: Element;
    /**
     * How the medication is to be used by the patient or administered by the caregiver
     * Indicates how the medication is to be used by the patient.
     * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
     */
    dosageInstruction?: Dosage[];
    /**
     * Whether a substitution was performed on the dispense
     * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
     */
    substitution?: MedicationDispenseSubstitution;
    /**
     * A list of relevant lifecycle events
     * A summary of the events of interest that have occurred, such as when the dispense was verified.
     * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
     */
    eventHistory?: Reference[];
    /**
     * preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown
     * A code specifying the state of the set of dispense events.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: MedicationDispenseStatus;
}
/**
 * Associated or related medication information
 * Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor.
 */
export interface MedicationKnowledgeRelatedMedicationKnowledge extends BackboneElement {
    /**
     * Category of medicationKnowledge
     * The category of the associated medication knowledge reference.
     */
    type: CodeableConcept;
    /**
     * Associated documentation about the associated medication knowledge
     * Associated documentation about the associated medication knowledge.
     */
    reference: Reference[];
}
/**
 * Associated documentation about the medication
 * Associated documentation about the medication.
 */
export interface MedicationKnowledgeMonograph extends BackboneElement {
    /**
     * The category of medication document
     * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
     */
    type?: CodeableConcept;
    /**
     * Associated documentation about the medication
     * Associated documentation about the medication.
     */
    source?: Reference;
}
/**
 * The pricing of the medication
 * The price of the medication.
 */
export interface MedicationKnowledgeCost extends BackboneElement {
    /**
     * The date range for which the cost is effective
     * The date range for which the cost information of the medication is effective.
     */
    effectiveDate?: Period[];
    /**
     * The category of the cost information
     * The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
     */
    type: CodeableConcept;
    /**
     * The source or owner for the price information
     * The source or owner that assigns the price to the medication.
     */
    source?: string;
    /**
     * Extension for source
     **/
    _source?: Element;
    /**
     * The price or category of the cost of the medication
     * The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication.
     */
    costMoney?: Money;
    /**
     * The price or category of the cost of the medication
     * The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication.
     */
    costCodeableConcept?: CodeableConcept;
}
/**
 * Program under which a medication is reviewed
 * The program under which the medication is reviewed.
 */
export interface MedicationKnowledgeMonitoringProgram extends BackboneElement {
    /**
     * Type of program under which the medication is monitored
     * Type of program under which the medication is monitored.
     */
    type?: CodeableConcept;
    /**
     * Name of the reviewing program
     * Name of the reviewing program.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
}
/**
 * Dosage for the medication for the specific guidelines
 * Dosage for the medication for the specific guidelines.
 */
export interface MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage extends BackboneElement {
    /**
     * Category of dosage for a medication
     * The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.).
     */
    type: CodeableConcept;
    /**
     * Dosage for the medication for the specific guidelines
     * Dosage for the medication for the specific guidelines.
     */
    dosage: Dosage[];
}
/**
 * Characteristics of the patient that are relevant to the administration guidelines
 * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
 */
export interface MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic extends BackboneElement {
    /**
     * Categorization of specific characteristic that is relevant to the administration guideline
     * The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
     */
    type: CodeableConcept;
    /**
     * The specific characteristic
     * The specific characteristic (e.g. height, weight, gender, etc.).
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The specific characteristic
     * The specific characteristic (e.g. height, weight, gender, etc.).
     */
    valueQuantity?: Quantity;
    /**
     * The specific characteristic
     * The specific characteristic (e.g. height, weight, gender, etc.).
     */
    valueRange?: Range;
}
/**
 * Guidelines for dosage of the medication
 * The guidelines for the dosage of the medication for the indication.
 */
export interface MedicationKnowledgeIndicationGuidelineDosingGuideline extends BackboneElement {
    /**
     * Intention of the treatment
     * The overall intention of the treatment, for example, prophylactic, supporative, curative, etc.
     */
    treatmentIntent?: CodeableConcept;
    /**
     * Dosage for the medication for the specific guidelines
     * Dosage for the medication for the specific guidelines.
     */
    dosage?: MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage[];
    /**
     * Type of treatment the guideline applies to
     * The type of the treatment that the guideline applies to, for example, long term therapy, first line treatment, etc.
     */
    administrationTreatment?: CodeableConcept;
    /**
     * Characteristics of the patient that are relevant to the administration guidelines
     * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
     */
    patientCharacteristic?: MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic[];
}
/**
 * Guidelines or protocols for administration of the medication for an indication
 * Guidelines or protocols that are applicable for the administration of the medication based on indication.
 */
export interface MedicationKnowledgeIndicationGuideline extends BackboneElement {
    /**
     * Indication for use that applies to the specific administration guideline
     * Indication or reason for use of the medication that applies to the specific administration guideline.
     */
    indication?: CodeableReference[];
    /**
     * Guidelines for dosage of the medication
     * The guidelines for the dosage of the medication for the indication.
     */
    dosingGuideline?: MedicationKnowledgeIndicationGuidelineDosingGuideline[];
}
/**
 * Categorization of the medication within a formulary or classification system
 * Categorization of the medication within a formulary or classification system.
 */
export interface MedicationKnowledgeMedicineClassification extends BackboneElement {
    /**
     * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification)
     * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
     */
    type: CodeableConcept;
    /**
     * The source of the classification
     * Either a textual source of the classification or a reference to an online source.
     */
    sourceString?: string;
    /**
     * Extension for sourceString
     **/
    _sourceString?: Element;
    /**
     * The source of the classification
     * Either a textual source of the classification or a reference to an online source.
     */
    sourceUri?: uri;
    /**
     * Extension for sourceUri
     **/
    _sourceUri?: Element;
    /**
     * Specific category assigned to the medication
     * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
     */
    classification?: CodeableConcept[];
}
/**
 * Details about packaged medications
 * Information that only applies to packages (not products).
 */
export interface MedicationKnowledgePackaging extends BackboneElement {
    /**
     * Cost of the packaged medication
     * The cost of the packaged medication.
     */
    cost?: MedicationKnowledgeCost[];
    /**
     * The packaged medication that is being priced
     * A reference to a PackagedProductDefinition that provides the details of the product that is in the packaging and is being priced.
     */
    packagedProduct?: Reference;
}
/**
 * Setting or value of environment for adequate storage
 * Describes a setting/value on the environment for the adequate storage of the medication and other substances.  Environment settings may involve temperature, humidity, or exposure to light.
 */
export interface MedicationKnowledgeStorageGuidelineEnvironmentalSetting extends BackboneElement {
    /**
     * Categorization of the setting
     * Identifies the category or type of setting (e.g., type of location, temperature, humidity).
     */
    type: CodeableConcept;
    /**
     * Value of the setting
     * Value associated to the setting. E.g., 40° – 50°F for temperature.
     */
    valueQuantity?: Quantity;
    /**
     * Value of the setting
     * Value associated to the setting. E.g., 40° – 50°F for temperature.
     */
    valueRange?: Range;
    /**
     * Value of the setting
     * Value associated to the setting. E.g., 40° – 50°F for temperature.
     */
    valueCodeableConcept?: CodeableConcept;
}
/**
 * How the medication should be stored
 * Information on how the medication should be stored, for example, refrigeration temperatures and length of stability at a given temperature.
 */
export interface MedicationKnowledgeStorageGuideline extends BackboneElement {
    /**
     * Reference to additional information
     * Reference to additional information about the storage guidelines.
     */
    reference?: uri;
    /**
     * Extension for reference
     **/
    _reference?: Element;
    /**
     * Additional storage notes
     * Additional notes about the storage.
     */
    note?: Annotation[];
    /**
     * Duration remains stable
     * Duration that the medication remains stable if the environmentalSetting is respected.
     */
    stabilityDuration?: Duration;
    /**
     * Setting or value of environment for adequate storage
     * Describes a setting/value on the environment for the adequate storage of the medication and other substances.  Environment settings may involve temperature, humidity, or exposure to light.
     */
    environmentalSetting?: MedicationKnowledgeStorageGuidelineEnvironmentalSetting[];
}
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
 */
export interface MedicationKnowledgeRegulatorySubstitution extends BackboneElement {
    /**
     * Specifies the type of substitution allowed
     * Specifies the type of substitution allowed.
     */
    type: CodeableConcept;
    /**
     * Specifies if regulation allows for changes in the medication when dispensing
     * Specifies if regulation allows for changes in the medication when dispensing.
     */
    allowed: boolean;
    /**
     * Extension for allowed
     **/
    _allowed?: Element;
}
/**
 * The maximum number of units of the medication that can be dispensed in a period
 * The maximum number of units of the medication that can be dispensed in a period.
 */
export interface MedicationKnowledgeRegulatoryMaxDispense extends BackboneElement {
    /**
     * The maximum number of units of the medication that can be dispensed
     * The maximum number of units of the medication that can be dispensed.
     */
    quantity: Quantity;
    /**
     * The period that applies to the maximum number of units
     * The period that applies to the maximum number of units.
     */
    period?: Duration;
}
/**
 * Regulatory information about a medication
 * Regulatory information about a medication.
 */
export interface MedicationKnowledgeRegulatory extends BackboneElement {
    /**
     * Specifies the authority of the regulation
     * The authority that is specifying the regulations.
     */
    regulatoryAuthority: Reference;
    /**
     * Specifies if changes are allowed when dispensing a medication from a regulatory perspective
     * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
     */
    substitution?: MedicationKnowledgeRegulatorySubstitution[];
    /**
     * Specifies the schedule of a medication in jurisdiction
     * Specifies the schedule of a medication in jurisdiction.
     */
    schedule?: CodeableConcept[];
    /**
     * The maximum number of units of the medication that can be dispensed in a period
     * The maximum number of units of the medication that can be dispensed in a period.
     */
    maxDispense?: MedicationKnowledgeRegulatoryMaxDispense;
}
/**
 * Active or inactive ingredient
 * Identifies a particular constituent of interest in the product.
 */
export interface MedicationKnowledgeDefinitionalIngredient extends BackboneElement {
    /**
     * Substances contained in the medication
     * A reference to the resource that provides information about the ingredient.
     */
    item: CodeableReference;
    /**
     * A code that defines the type of ingredient, active, base, etc
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    type?: CodeableConcept;
    /**
     * Quantity of ingredient present
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
     */
    strengthRatio?: Ratio;
    /**
     * Quantity of ingredient present
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
     */
    strengthCodeableConcept?: CodeableConcept;
    /**
     * Quantity of ingredient present
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
     */
    strengthQuantity?: Quantity;
}
/**
 * Specifies descriptive properties of the medicine
 * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
 */
export interface MedicationKnowledgeDefinitionalDrugCharacteristic extends BackboneElement {
    /**
     * Code specifying the type of characteristic of medication
     * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
     */
    type?: CodeableConcept;
    /**
     * Description of the characteristic
     * Description of the characteristic.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Description of the characteristic
     * Description of the characteristic.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Description of the characteristic
     * Description of the characteristic.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueQuantity?: Quantity;
    /**
     * Description of the characteristic
     * Description of the characteristic.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Description of the characteristic
     * Description of the characteristic.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueAttachment?: Attachment;
}
/**
 * Minimal definition information about the medication
 * Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described.
 */
export interface MedicationKnowledgeDefinitional extends BackboneElement {
    /**
     * Definitional resources that provide more information about this medication
     * Associated definitions for this medication.
     */
    definition?: Reference[];
    /**
     * powder | tablets | capsule +
     * Describes the form of the item.  Powder; tablets; capsule.
     * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
     */
    doseForm?: CodeableConcept;
    /**
     * The intended or approved route of administration
     * The intended or approved route of administration.
     */
    intendedRoute?: CodeableConcept[];
    /**
     * Active or inactive ingredient
     * Identifies a particular constituent of interest in the product.
     */
    ingredient?: MedicationKnowledgeDefinitionalIngredient[];
    /**
     * Specifies descriptive properties of the medicine
     * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
     */
    drugCharacteristic?: MedicationKnowledgeDefinitionalDrugCharacteristic[];
}
/**
 * Definition of Medication Knowledge
 * Information about a medication that is used to support knowledge.
 */
export interface MedicationKnowledge extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MedicationKnowledge';
    /**
     * Business identifier for this medication
     * Business identifier for this medication.
     * This is a business identifier, not a resource identifier (see discussion).
     */
    identifier?: Identifier[];
    /**
     * Code that identifies this medication
     * A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
     */
    code?: CodeableConcept;
    /**
     * Creator or owner of the knowledge or information about the medication
     * The creator or owner of the knowledge or information about the medication.
     */
    author?: Reference;
    /**
     * Codes that identify the different jurisdictions for which the information of this resource was created
     * Lists the jurisdictions that this medication knowledge was written for.
     * The codes could have varying granularity from a country or group of countries down to a specific district.
     */
    intendedJurisdiction?: CodeableConcept[];
    /**
     * A name associated with the medication being described
     * All of the names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
     */
    name?: string[];
    /**
     * Extension for name
     **/
    _name?: Element[];
    /**
     * Associated or related medication information
     * Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor.
     */
    relatedMedicationKnowledge?: MedicationKnowledgeRelatedMedicationKnowledge[];
    /**
     * The set of medication resources that are associated with this medication
     * Links to associated medications that could be prescribed, dispensed or administered.
     */
    associatedMedication?: Reference[];
    /**
     * Category of the medication or product
     * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
     */
    productType?: CodeableConcept[];
    /**
     * Associated documentation about the medication
     * Associated documentation about the medication.
     */
    monograph?: MedicationKnowledgeMonograph[];
    /**
     * The instructions for preparing the medication
     * The instructions for preparing the medication.
     */
    preparationInstruction?: markdown;
    /**
     * Extension for preparationInstruction
     **/
    _preparationInstruction?: Element;
    /**
     * The pricing of the medication
     * The price of the medication.
     */
    cost?: MedicationKnowledgeCost[];
    /**
     * Program under which a medication is reviewed
     * The program under which the medication is reviewed.
     */
    monitoringProgram?: MedicationKnowledgeMonitoringProgram[];
    /**
     * Guidelines or protocols for administration of the medication for an indication
     * Guidelines or protocols that are applicable for the administration of the medication based on indication.
     */
    indicationGuideline?: MedicationKnowledgeIndicationGuideline[];
    /**
     * Categorization of the medication within a formulary or classification system
     * Categorization of the medication within a formulary or classification system.
     */
    medicineClassification?: MedicationKnowledgeMedicineClassification[];
    /**
     * Details about packaged medications
     * Information that only applies to packages (not products).
     */
    packaging?: MedicationKnowledgePackaging[];
    /**
     * Potential clinical issue with or between medication(s)
     * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
     */
    clinicalUseIssue?: Reference[];
    /**
     * How the medication should be stored
     * Information on how the medication should be stored, for example, refrigeration temperatures and length of stability at a given temperature.
     */
    storageGuideline?: MedicationKnowledgeStorageGuideline[];
    /**
     * Regulatory information about a medication
     * Regulatory information about a medication.
     */
    regulatory?: MedicationKnowledgeRegulatory[];
    /**
     * Minimal definition information about the medication
     * Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described.
     */
    definitional?: MedicationKnowledgeDefinitional;
    /**
     * active | entered-in-error | inactive
     * A code to indicate if the medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system. The status refers to the validity about the information of the medication and not to its medicinal properties.
     * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
     */
    status?: MedicationKnowledgeStatus;
}
/**
 * First fill details
 * Indicates the quantity or duration for the first dispense of the medication.
 * If populating this element, either the quantity or the duration must be included.
 */
export interface MedicationRequestDispenseRequestInitialFill extends BackboneElement {
    /**
     * First fill quantity
     * The amount or quantity to provide as part of the first dispense.
     */
    quantity?: Quantity;
    /**
     * First fill duration
     * The length of time that the first dispense is expected to last.
     */
    duration?: Duration;
}
/**
 * Medication supply authorization
 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
 */
export interface MedicationRequestDispenseRequest extends BackboneElement {
    /**
     * First fill details
     * Indicates the quantity or duration for the first dispense of the medication.
     * If populating this element, either the quantity or the duration must be included.
     */
    initialFill?: MedicationRequestDispenseRequestInitialFill;
    /**
     * Minimum period of time between dispenses
     * The minimum period of time that must occur between dispenses of the medication.
     */
    dispenseInterval?: Duration;
    /**
     * Time period supply is authorized for
     * This indicates the validity period of a prescription (stale dating the Prescription).
     * It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
     */
    validityPeriod?: Period;
    /**
     * Number of refills authorized
     * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
     * If displaying "number of authorized fills", add 1 to this number.
     */
    numberOfRepeatsAllowed?: unsignedInt;
    /**
     * Extension for numberOfRepeatsAllowed
     **/
    _numberOfRepeatsAllowed?: Element;
    /**
     * Amount of medication to supply per dispense
     * The amount that is to be dispensed for one fill.
     */
    quantity?: Quantity;
    /**
     * Number of days supply per dispense
     * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
     * In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage). When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
     */
    expectedSupplyDuration?: Duration;
    /**
     * Intended performer of dispense
     * Indicates the intended performing Organization that will dispense the medication as specified by the prescriber.
     */
    dispenser?: Reference;
    /**
     * Additional information for the dispenser
     * Provides additional information to the dispenser, for example, counselling to be provided to the patient.
     */
    dispenserInstruction?: Annotation[];
    /**
     * Type of adherence packaging to use for the dispense
     * Provides information about the type of adherence packaging to be supplied for the medication dispense.
     */
    doseAdministrationAid?: CodeableConcept;
}
/**
 * Any restrictions on medication substitution
 * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
 */
export interface MedicationRequestSubstitution extends BackboneElement {
    /**
     * Whether substitution is allowed or not
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     * This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
     */
    allowedBoolean?: boolean;
    /**
     * Extension for allowedBoolean
     **/
    _allowedBoolean?: Element;
    /**
     * Whether substitution is allowed or not
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     * This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
     */
    allowedCodeableConcept?: CodeableConcept;
    /**
     * Why should (not) substitution be made
     * Indicates the reason for the substitution, or why substitution must or must not be performed.
     */
    reason?: CodeableConcept;
}
/**
 * Ordering of medication for patient or group
 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
 */
export interface MedicationRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MedicationRequest';
    /**
     * External ids for this request
     * Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * A plan or request that is fulfilled in whole or in part by this medication request
     * A plan or request that is fulfilled in whole or in part by this medication request.
     */
    basedOn?: Reference[];
    /**
     * Reference to an order/prescription that is being replaced by this MedicationRequest
     * Reference to an order/prescription that is being replaced by this MedicationRequest.
     */
    priorPrescription?: Reference;
    /**
     * Composite request this is part of
     * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
     */
    groupIdentifier?: Identifier;
    /**
     * Reason for current status
     * Captures the reason for the current state of the MedicationRequest.
     * This is generally only used for "exception" statuses such as "suspended" or "cancelled". The reason why the MedicationRequest was created at all is captured in reasonCode, not here.
     */
    statusReason?: CodeableConcept;
    /**
     * When the status was changed
     * The date (and perhaps time) when the status was changed.
     */
    statusChanged?: dateTime;
    /**
     * Extension for statusChanged
     **/
    _statusChanged?: Element;
    /**
     * Grouping or category of medication request
     * An arbitrary categorization or grouping of the medication request.  It could be used for indicating where meds are intended to be administered, eg. in an inpatient setting or in a patient's home, or a legal category of the medication.
     * The category can be used to include where the medication is expected to be consumed or other types of requests.  The examplar value set represents where the meds are intended to be administered and is just one example of request categorization.
     */
    category?: CodeableConcept[];
    /**
     * True if patient is to stop taking or not to start taking the medication
     * If true, indicates that the provider is asking for the patient to either stop taking or to not start taking the specified medication. For example, the patient is taking an existing medication and the provider is changing their medication. They want to create two seperate requests: one to stop using the current medication and another to start the new medication.
     * If do not perform is not specified, the request is a positive request e.g. "do perform".
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * Medication to be taken
     * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
     * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the Medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource.
     */
    medication: CodeableReference;
    /**
     * Individual or group for whom the medication has been requested
     * The individual or group for whom the medication has been requested.
     * The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
     */
    subject: Reference;
    /**
     * The person or organization who provided the information about this request, if the source is someone other than the requestor
     * The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person.
     */
    informationSource?: Reference[];
    /**
     * Encounter created as part of encounter/admission/stay
     * The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter."    If there is a need to link to episodes of care they will be handled with an extension.
     */
    encounter?: Reference;
    /**
     * Information to support fulfilling of the medication
     * Information to support fulfilling (i.e. dispensing or administering) of the medication, for example, patient height and weight, a MedicationStatement for the patient).
     * This attribute can be used to reference a MedicationStatement about the patients' medication use.
     */
    supportingInformation?: Reference[];
    /**
     * When request was initially authored
     * The date (and perhaps time) when the prescription was initially written or authored on.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Who/What requested the Request
     * The individual, organization, or device that initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * Reported rather than primary record
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
     * If not populated, then assume that this is the original record and not reported
     */
    reported?: boolean;
    /**
     * Extension for reported
     **/
    _reported?: Element;
    /**
     * Desired kind of performer of the medication administration
     * Indicates the type of performer of the administration of the medication.
     * If specified without indicating a performer, this indicates that the performer must be of the specified type. If specified with a performer then it indicates the requirements of the performer if the designated performer is not available.
     */
    performerType?: CodeableConcept;
    /**
     * Intended performer of administration
     * The specified desired performer of the medication treatment (e.g. the performer of the medication administration).  For devices, this is the device that is intended to perform the administration of the medication.  An IV Pump would be an example of a device that is performing the administration.  Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
     */
    performer?: Reference[];
    /**
     * Intended type of device for the administration
     * The intended type of device that is to be used for the administration of the medication (for example, PCA Pump).
     */
    device?: CodeableReference[];
    /**
     * Person who entered the request
     * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
     */
    recorder?: Reference;
    /**
     * Reason or indication for ordering or not ordering the medication
     * The reason or the indication for ordering or not ordering the medication.
     * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
     */
    reason?: CodeableReference[];
    /**
     * Overall pattern of medication administration
     * The description of the overall pattern of the administration of the medication to the patient.
     * This attribute should not be confused with the protocol of the medication.
     */
    courseOfTherapyType?: CodeableConcept;
    /**
     * Associated insurance coverage
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Information about the prescription
     * Extra information about the prescription that could not be conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Full representation of the dosage instructions
     * The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
     */
    renderedDosageInstruction?: markdown;
    /**
     * Extension for renderedDosageInstruction
     **/
    _renderedDosageInstruction?: Element;
    /**
     * Period over which the medication is to be taken
     * The period over which the medication is to be taken.  Where there are multiple dosageInstruction lines (for example, tapering doses), this is the earliest date and the latest end date of the dosageInstructions.
     */
    effectiveDosePeriod?: Period;
    /**
     * Specific instructions for how the medication should be taken
     * Specific instructions for how the medication is to be used by the patient.
     * There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed. In general, each prescribed drug will be a separate Medication Request.

When drug orders are grouped together at the time of order entry,  but each of the drugs can be manipulated independently e.g. changing the status of one order to "completed" or "cancelled", changing another order status to "on-hold", the method to "group" all of the medication requests together is to use  MedicationRequest.groupIdentifier element.  All of the orders grouped together in this manner will have the same groupIdentifier, and separately, each order in the group may have a unique identifier.

There are cases that require grouping of Medication orders together when it is necessary to specify optionality e.g. order two drugs at one time, but stating either of these drugs may be used to treat the patient.  The use of a RequestOrchestration should be used as a parent for the Medication orders that require this type of grouping. An example when it may be necessary to group medication orders together is when you specify timing relationships e.g. order drug "xyz" with dose 123, then taper the same drug to a different dose after some interval of time
precedence:
e.g. give drug "abc" followed by drug "def"
e.g. give drug 30 minutes before some procedure was performed
more generically this supports - hierarchical groups of actions, where each specific action references the action to be performed (in terms of a Request resource), and each group describes additional behavior, relationships, and applicable conditions between the actions in the overall group.
Note that one should NOT use the List or Composition resource to accomplish the above requirements.  You may use List or Composition for other business requirements, but not to address the specific requirements of grouping medication orders.
     */
    dosageInstruction?: Dosage[];
    /**
     * Medication supply authorization
     * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
     */
    dispenseRequest?: MedicationRequestDispenseRequest;
    /**
     * Any restrictions on medication substitution
     * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
     */
    substitution?: MedicationRequestSubstitution;
    /**
     * A list of events of interest in the lifecycle
     * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
     * This might not include provenances for all versions of the request – only those deemed "relevant" or important. This SHALL NOT include the provenance associated with this current version of the resource. (If that provenance is deemed to be a "relevant" change, it will need to be added as part of a later update. Until then, it can be queried directly as the provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
     */
    eventHistory?: Reference[];
    /**
     * active | on-hold | ended | stopped | completed | cancelled | entered-in-error | draft | unknown
     * A code specifying the current state of the order.  Generally, this will be active or completed state.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.

Clinical decision support systems should take the status into account when determining which medications to include in their algorithms.
     */
    status: MedicationRequestStatus;
    /**
     * proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
     * Whether the request is a proposal, plan, or an original order.
     * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.

An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.

This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
     */
    intent: MedicationRequestIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the Medication Request should be addressed with respect to other requests.
     */
    priority?: MedicationRequestPriority;
}
/**
 * Indicates whether the medication is or is not being consumed or administered
 * Indicates whether the medication is or is not being consumed or administered.
 * This element can be used to indicate whether a patient is following a course of treatment as instructed/prescribed or whether they are taking medications of their own volition.  It can also be used to indicate that a patient is not taking a medication, either because they were told not to or because they decided on their own.
 */
export interface MedicationStatementAdherence extends BackboneElement {
    /**
     * Type of adherence
     * Type of the adherence for the medication.
     */
    code: CodeableConcept;
    /**
     * Details of the reason for the current use of the medication
     * Captures the reason for the current use or adherence of a medication.
     * This is generally only used for "exception" statuses such as "entered-in-error". The reason for performing the event at all is captured in reasonCode, not here.
     */
    reason?: CodeableConcept;
}
/**
 * Record of medication being taken by a patient
 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains.

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement.
 */
export interface MedicationStatement extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MedicationStatement';
    /**
     * External identifier
     * Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * Part of referenced event
     * A larger event of which this particular MedicationStatement is a component or step.
     */
    partOf?: Reference[];
    /**
     * Type of medication statement
     * Type of medication statement (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
     */
    category?: CodeableConcept[];
    /**
     * What medication was taken
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
     */
    medication: CodeableReference;
    /**
     * Who is/was taking  the medication
     * The person, animal or group who is/was taking the medication.
     */
    subject: Reference;
    /**
     * Encounter associated with MedicationStatement
     * The encounter that establishes the context for this MedicationStatement.
     */
    encounter?: Reference;
    /**
     * The date/time or interval when the medication is/was/will be taken
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking).
     * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
     */
    effectiveDateTime?: dateTime;
    /**
     * Extension for effectiveDateTime
     **/
    _effectiveDateTime?: Element;
    /**
     * The date/time or interval when the medication is/was/will be taken
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking).
     * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
     */
    effectivePeriod?: Period;
    /**
     * The date/time or interval when the medication is/was/will be taken
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking).
     * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
     */
    effectiveTiming?: Timing;
    /**
     * When the usage was asserted?
     * The date when the Medication Statement was asserted by the information source.
     */
    dateAsserted?: dateTime;
    /**
     * Extension for dateAsserted
     **/
    _dateAsserted?: Element;
    /**
     * Person or organization that provided the information about the taking of this medication
     * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.
     */
    informationSource?: Reference[];
    /**
     * Link to information used to derive the MedicationStatement
     * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
     * Likely references would be to MedicationRequest, MedicationDispense, Claim, Observation or QuestionnaireAnswers.  The most common use cases for deriving a MedicationStatement comes from creating a MedicationStatement from a MedicationRequest or from a lab observation or a claim.  it should be noted that the amount of information that is available varies from the type resource that you derive the MedicationStatement from.
     */
    derivedFrom?: Reference[];
    /**
     * Reason for why the medication is being/was taken
     * A concept, Condition or observation that supports why the medication is being/was taken.
     * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonForUseReference.
     */
    reason?: CodeableReference[];
    /**
     * Further information about the usage
     * Provides extra information about the Medication Statement that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * Link to information relevant to the usage of a medication
     * Link to information that is relevant to a medication statement, for example, illicit drug use, gestational age, etc.
     */
    relatedClinicalInformation?: Reference[];
    /**
     * Full representation of the dosage instructions
     * The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
     */
    renderedDosageInstruction?: markdown;
    /**
     * Extension for renderedDosageInstruction
     **/
    _renderedDosageInstruction?: Element;
    /**
     * Details of how medication is/was taken or should be taken
     * Indicates how the medication is/was or should be taken by the patient.
     * The dates included in the dosage on a Medication Statement reflect the dates for a given dose.  For example, "from November 1, 2016 to November 3, 2016, take one tablet daily and from November 4, 2016 to November 7, 2016, take two tablets daily."  It is expected that this specificity may only be populated where the patient brings in their labeled container or where the Medication Statement is derived from a MedicationRequest.
     */
    dosage?: Dosage[];
    /**
     * Indicates whether the medication is or is not being consumed or administered
     * Indicates whether the medication is or is not being consumed or administered.
     * This element can be used to indicate whether a patient is following a course of treatment as instructed/prescribed or whether they are taking medications of their own volition.  It can also be used to indicate that a patient is not taking a medication, either because they were told not to or because they decided on their own.
     */
    adherence?: MedicationStatementAdherence;
    /**
     * recorded | entered-in-error | draft
     * A code representing the status of recording the medication statement.
     * This status concerns just the recording of the medication statement.  MedicationStatement.adherence should be used for indicating a patient's adherence to the information in this resource.  Note, the statuses are different than in previous releases for MedicationStatement or MedicationStatement.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: MedicationStatementStatus;
}
/**
 * A product specific contact, person (in a role), or an organization
 * A product specific contact, person (in a role), or an organization.
 */
export interface MedicinalProductDefinitionContact extends BackboneElement {
    /**
     * Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information
     * Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information.
     */
    type?: CodeableConcept;
    /**
     * A product specific contact, person (in a role), or an organization
     * A product specific contact, person (in a role), or an organization.
     */
    contact: Reference;
}
/**
 * Coding words or phrases of the name
 * Coding words or phrases of the name.
 */
export interface MedicinalProductDefinitionNamePart extends BackboneElement {
    /**
     * A fragment of a product name
     * A fragment of a product name.
     */
    part: string;
    /**
     * Extension for part
     **/
    _part?: Element;
    /**
     * Identifying type for this part of the name (e.g. strength part)
     * Identifying type for this part of the name (e.g. strength part).
     */
    type: CodeableConcept;
}
/**
 * Country and jurisdiction where the name applies
 * Country and jurisdiction where the name applies, and associated language.
 */
export interface MedicinalProductDefinitionNameUsage extends BackboneElement {
    /**
     * Country code for where this name applies
     * Country code for where this name applies.
     */
    country: CodeableConcept;
    /**
     * Jurisdiction code for where this name applies
     * Jurisdiction code for where this name applies. A jurisdiction may be a sub- or supra-national entity (e.g. a state or a geographic region).
     */
    jurisdiction?: CodeableConcept;
    /**
     * Language code for this name
     * Language code for this name.
     */
    language: CodeableConcept;
}
/**
 * The product's name, including full name and possibly coded parts
 * The product's name, including full name and possibly coded parts.
 */
export interface MedicinalProductDefinitionName extends BackboneElement {
    /**
     * The full product name
     * The full product name.
     */
    productName: string;
    /**
     * Extension for productName
     **/
    _productName?: Element;
    /**
     * Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary
     * Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
     */
    type?: CodeableConcept;
    /**
     * Coding words or phrases of the name
     * Coding words or phrases of the name.
     */
    part?: MedicinalProductDefinitionNamePart[];
    /**
     * Country and jurisdiction where the name applies
     * Country and jurisdiction where the name applies, and associated language.
     */
    usage?: MedicinalProductDefinitionNameUsage[];
}
/**
 * Reference to another product, e.g. for linking authorised to investigational product
 * Reference to another product, e.g. for linking authorised to investigational product, or a virtual product.
 */
export interface MedicinalProductDefinitionCrossReference extends BackboneElement {
    /**
     * Reference to another product, e.g. for linking authorised to investigational product
     * Reference to another product, e.g. for linking authorised to investigational product.
     */
    product: CodeableReference;
    /**
     * The type of relationship, for instance branded to generic or virtual to actual product
     * The type of relationship, for instance branded to generic, virtual to actual product, product to development product (investigational), parallel import version.
     */
    type?: CodeableConcept;
}
/**
 * A manufacturing or administrative process for the medicinal product
 * A manufacturing or administrative process or step associated with (or performed on) the medicinal product.
 */
export interface MedicinalProductDefinitionOperation extends BackboneElement {
    /**
     * The type of manufacturing operation e.g. manufacturing itself, re-packaging
     * The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here.
     */
    type?: CodeableReference;
    /**
     * Date range of applicability
     * Date range of applicability.
     */
    effectiveDate?: Period;
    /**
     * The organization responsible for the particular process, e.g. the manufacturer or importer
     * The organization or establishment responsible for (or associated with) the particular process or step, examples include the manufacturer, importer, agent.
     */
    organization?: Reference[];
    /**
     * Specifies whether this process is considered proprietary or confidential
     * Specifies whether this particular business or manufacturing process is considered proprietary or confidential.
     */
    confidentialityIndicator?: CodeableConcept;
}
/**
 * Key product features such as "sugar free", "modified release"
 * Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import".
 */
export interface MedicinalProductDefinitionCharacteristic extends BackboneElement {
    /**
     * A code expressing the type of characteristic
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.text.
     * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
     */
    valueAttachment?: Attachment;
}
/**
 * Detailed definition of a medicinal product
 * A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).
 */
export interface MedicinalProductDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MedicinalProductDefinition';
    /**
     * Business identifier for this product. Could be an MPID
     * Business identifier for this product. Could be an MPID. When in development or being regulated, products are typically referenced by official identifiers, assigned by a manufacturer or regulator, and unique to a product (which, when compared to a product instance being prescribed, is actually a product type). See also MedicinalProductDefinition.code.
     */
    identifier?: Identifier[];
    /**
     * Regulatory type, e.g. Investigational or Authorized
     * Regulatory type, e.g. Investigational or Authorized.
     */
    type?: CodeableConcept;
    /**
     * If this medicine applies to human or veterinary uses
     * If this medicine applies to human or veterinary uses.
     */
    domain?: CodeableConcept;
    /**
     * A business identifier relating to a specific version of the product
     * A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * The status within the lifecycle of this product record
     * The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status.
     */
    status?: CodeableConcept;
    /**
     * The date at which the given status became applicable
     * The date at which the given status became applicable.
     */
    statusDate?: dateTime;
    /**
     * Extension for statusDate
     **/
    _statusDate?: Element;
    /**
     * General description of this product
     * General description of this product.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The dose form for a single part product, or combined form of a multiple part product
     * The dose form for a single part product, or combined form of a multiple part product. This is one concept that describes all the components. It does not represent the form with components physically mixed, if that might be necessary, for which see (AdministrableProductDefinition.administrableDoseForm).
     */
    combinedPharmaceuticalDoseForm?: CodeableConcept;
    /**
     * The path by which the product is taken into or makes contact with the body
     * The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. See also AdministrableProductDefinition resource. MedicinalProductDefinition.route is the same concept as AdministrableProductDefinition.routeOfAdministration.code, and they cannot be used together.
     */
    route?: CodeableConcept[];
    /**
     * Description of indication(s) for this product, used when structured indications are not required
     * Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate.
     */
    indication?: markdown;
    /**
     * Extension for indication
     **/
    _indication?: Element;
    /**
     * The legal status of supply of the medicinal product as classified by the regulator
     * The legal status of supply of the medicinal product as classified by the regulator.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons
     * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, such as heightened reporting requirements.
     */
    additionalMonitoringIndicator?: CodeableConcept;
    /**
     * Whether the Medicinal Product is subject to special measures for regulatory reasons
     * Whether the Medicinal Product is subject to special measures for regulatory reasons, such as a requirement to conduct post-authorization studies.
     */
    specialMeasures?: CodeableConcept[];
    /**
     * If authorised for use in children
     * If authorised for use in children, or infants, neonates etc.
     */
    pediatricUseIndicator?: CodeableConcept;
    /**
     * Allows the product to be classified by various systems
     * Allows the product to be classified by various systems, commonly WHO ATC.
     */
    classification?: CodeableConcept[];
    /**
     * Marketing status of the medicinal product, in contrast to marketing authorization
     * Marketing status of the medicinal product, in contrast to marketing authorization. This refers to the product being actually 'on the market' as opposed to being allowed to be on the market (which is an authorization).
     */
    marketingStatus?: MarketingStatus[];
    /**
     * Package type for the product
     * Package type for the product. See also the PackagedProductDefinition resource.
     */
    packagedMedicinalProduct?: CodeableConcept[];
    /**
     * Types of medicinal manufactured items and/or devices that this product consists of, such as tablets, capsule, or syringes
     * Types of medicinal manufactured items and/or devices that this product consists of, such as tablets, capsule, or syringes. Used as a direct link when the item's packaging is not being recorded (see also PackagedProductDefinition.package.containedItem.item).
     */
    comprisedOf?: Reference[];
    /**
     * The ingredients of this medicinal product - when not detailed in other resources
     * The ingredients of this medicinal product - when not detailed in other resources. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource, or indirectly via incoming AdministrableProductDefinition, PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those levels of detail are not used, the ingredients may be specified directly here as codes.
     */
    ingredient?: CodeableConcept[];
    /**
     * Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product
     * Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product. This includes process-related impurities and contaminants, product-related impurities including degradation products.
     */
    impurity?: CodeableReference[];
    /**
     * Additional documentation about the medicinal product
     * Additional information or supporting documentation about the medicinal product.
     */
    attachedDocument?: Reference[];
    /**
     * A master file for the medicinal product (e.g. Pharmacovigilance System Master File)
     * A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug master files (DMFs) are documents submitted to regulatory agencies to provide confidential detailed information about facilities, processes or articles used in the manufacturing, processing, packaging and storing of drug products.
     */
    masterFile?: Reference[];
    /**
     * A product specific contact, person (in a role), or an organization
     * A product specific contact, person (in a role), or an organization.
     */
    contact?: MedicinalProductDefinitionContact[];
    /**
     * Clinical trials or studies that this product is involved in
     * Clinical trials or studies that this product is involved in.
     */
    clinicalTrial?: Reference[];
    /**
     * A code that this product is known by, within some formal terminology
     * A code that this product is known by, usually within some formal terminology, perhaps assigned by a third party (i.e. not the manufacturer or regulator). Products (types of medications) tend to be known by identifiers during development and within regulatory process. However when they are prescribed they tend to be identified by codes. The same product may be have multiple codes, applied to it by multiple organizations.
     */
    code?: Coding[];
    /**
     * The product's name, including full name and possibly coded parts
     * The product's name, including full name and possibly coded parts.
     */
    name: MedicinalProductDefinitionName[];
    /**
     * Reference to another product, e.g. for linking authorised to investigational product
     * Reference to another product, e.g. for linking authorised to investigational product, or a virtual product.
     */
    crossReference?: MedicinalProductDefinitionCrossReference[];
    /**
     * A manufacturing or administrative process for the medicinal product
     * A manufacturing or administrative process or step associated with (or performed on) the medicinal product.
     */
    operation?: MedicinalProductDefinitionOperation[];
    /**
     * Key product features such as "sugar free", "modified release"
     * Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import".
     */
    characteristic?: MedicinalProductDefinitionCharacteristic[];
}
/**
 * Resource(s) that are the subject of the event
 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
 */
export interface MessageDefinitionFocus extends BackboneElement {
    /**
     * Type of resource
     * The kind of resource that must be the focus for this message.
     * Multiple focuses addressing different resources may occasionally occur.  E.g. to link or unlink a resource from a particular account or encounter, etc.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Profile that must be adhered to by focus
     * A profile that reflects constraints for the focal resource (and potentially for related resources).
     * This should be present for most message definitions.  However, if the message focus is only a single resource and there is no need to include referenced resources or otherwise enforce the presence of particular elements, it can be omitted.
     */
    profile?: canonical;
    /**
     * Extension for profile
     **/
    _profile?: Element;
    /**
     * Minimum number of focuses of this type
     * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    min: unsignedInt;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Maximum number of focuses of this type
     * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    max?: string;
    /**
     * Extension for max
     **/
    _max?: Element;
}
/**
 * Responses to this message
 * Indicates what types of messages may be sent as an application-level response to this message.
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
export interface MessageDefinitionAllowedResponse extends BackboneElement {
    /**
     * Reference to allowed message definition response
     * A reference to the message definition that must be adhered to by this supported response.
     */
    message: canonical;
    /**
     * Extension for message
     **/
    _message?: Element;
    /**
     * When should this response be used
     * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
     */
    situation?: markdown;
    /**
     * Extension for situation
     **/
    _situation?: Element;
}
/**
 * A resource that defines a type of message that can be exchanged between systems
 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
 * This would be a MIF-level artifact.
 */
export interface MessageDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MessageDefinition';
    /**
     * The cannonical URL for a given MessageDefinition
     * The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business Identifier for a given MessageDefinition
     * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this message definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the message definition
     * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different message definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the message definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this message definition (computer friendly)
     * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this message definition (human friendly)
     * A short, descriptive, user-friendly title for the message definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Takes the place of
     * A MessageDefinition that is superseded by this definition.
     */
    replaces?: canonical[];
    /**
     * Extension for replaces
     **/
    _replaces?: Element[];
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of message definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the message definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the message definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the message definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the message definition is the organization or individual primarily responsible for the maintenance and upkeep of the message definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the message definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the message definition
     * A free text natural language description of the message definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the message definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the message definition is presumed to be the predominant language in the place the message definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for message definition (if applicable)
     * A legal or geographic region in which the message definition is intended to be used.
     * It may be possible for the message definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this message definition is defined
     * Explanation of why this message definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the message definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this message definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Definition this one is based on
     * The MessageDefinition that is the basis for the contents of this resource.
     */
    base?: canonical;
    /**
     * Extension for base
     **/
    _base?: Element;
    /**
     * Protocol/workflow this is part of
     * Identifies a protocol or workflow that this MessageDefinition represents a step in.
     * It should be possible to use MessageDefinition to describe a message to be used by certain steps in a particular protocol as part of a PlanDefinition or ActivityDefinition.
     */
    parent?: canonical[];
    /**
     * Extension for parent
     **/
    _parent?: Element[];
    /**
     * Event code  or link to the EventDefinition
     * Event code or link to the EventDefinition.
     */
    eventCoding?: Coding;
    /**
     * Event code  or link to the EventDefinition
     * Event code or link to the EventDefinition.
     */
    eventUri?: uri;
    /**
     * Extension for eventUri
     **/
    _eventUri?: Element;
    /**
     * Resource(s) that are the subject of the event
     * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
     */
    focus?: MessageDefinitionFocus[];
    /**
     * Responses to this message
     * Indicates what types of messages may be sent as an application-level response to this message.
     * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
     */
    allowedResponse?: MessageDefinitionAllowedResponse[];
    /**
     * Canonical reference to a GraphDefinition
     * Graph is Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a GraphDefinition that it controls what additional resources are to be added to the Bundle when building the message. The GraphDefinition can also specify profiles that apply to the various resources.
     */
    graph?: canonical;
    /**
     * Extension for graph
     **/
    _graph?: Element;
    /**
     * draft | active | retired | unknown
     * The status of this message definition. Enables tracking the life-cycle of the content.
     * Allows filtering of message definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: MessageDefinitionPublicationStatus;
    /**
     * consequence | currency | notification
     * The impact of the content of the message.
     */
    category?: MessageDefinitionMessageSignificanceCategory;
    /**
     * always | on-error | never | on-success
     * Declare at a message definition level whether a response is required or only upon error or success, or never.
     * This enables the capability currently available through MSH-16 (Application Level acknowledgement) in HL7 Version 2 to declare at a message instance level whether a response is required or only upon error or success, or never.
     */
    responseRequired?: MessageDefinitionmessageheader_response_request;
}
/**
 * Message destination application(s)
 * The destination application which the message is intended for.
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export interface MessageHeaderDestination extends BackboneElement {
    /**
     * Actual destination address or Endpoint resource
     * Indicates where the message should be routed.
     * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
     */
    endpointUrl?: url;
    /**
     * Extension for endpointUrl
     **/
    _endpointUrl?: Element;
    /**
     * Actual destination address or Endpoint resource
     * Indicates where the message should be routed.
     * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
     */
    endpointReference?: Reference;
    /**
     * Name of system
     * Human-readable name for the target system.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Particular delivery destination within the destination
     * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
     */
    target?: Reference;
    /**
     * Intended "real-world" recipient for the data
     * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
     */
    receiver?: Reference;
}
/**
 * Message source application
 * The source application from which this message originated.
 */
export interface MessageHeaderSource extends BackboneElement {
    /**
     * Actual source address or Endpoint resource
     * Identifies the routing target to send acknowledgements to.
     * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
     */
    endpointUrl?: url;
    /**
     * Extension for endpointUrl
     **/
    _endpointUrl?: Element;
    /**
     * Actual source address or Endpoint resource
     * Identifies the routing target to send acknowledgements to.
     * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
     */
    endpointReference?: Reference;
    /**
     * Name of system
     * Human-readable name for the source system.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name of software running the system
     * May include configuration or other information useful in debugging.
     */
    software?: string;
    /**
     * Extension for software
     **/
    _software?: Element;
    /**
     * Version of software running
     * Can convey versions of multiple systems in situations where a message passes through multiple hands.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Human contact for problems
     * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
     */
    contact?: ContactPoint;
}
/**
 * If this is a reply to prior message
 * Information about the message that this message is a response to.  Only present if this message is a response.
 */
export interface MessageHeaderResponse extends BackboneElement {
    /**
     * Bundle.identifier of original message
     * The Bundle.identifier of the message to which this message is a response.
     */
    identifier: Identifier;
    /**
     * Specific list of hints/warnings/errors
     * Full details of any issues found in the message.
     * This SHALL be contained in the bundle. If any of the issues are errors, the response code SHALL be an error.
     */
    details?: Reference;
    /**
     * ok | transient-error | fatal-error
     * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
     * This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
     */
    code: MessageHeaderResponseType;
}
/**
 * A resource that describes a message that is exchanged between systems
 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
 */
export interface MessageHeader extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MessageHeader';
    /**
     * Event code or link to EventDefinition
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a canonical uri to the EventDefinition.
     * The time of the event will be found in the focus resource. The time of the message will be found in [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
     */
    eventCoding?: Coding;
    /**
     * Event code or link to EventDefinition
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a canonical uri to the EventDefinition.
     * The time of the event will be found in the focus resource. The time of the message will be found in [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
     */
    eventCanonical?: canonical;
    /**
     * Extension for eventCanonical
     **/
    _eventCanonical?: Element;
    /**
     * Message destination application(s)
     * The destination application which the message is intended for.
     * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
     */
    destination?: MessageHeaderDestination[];
    /**
     * Real world sender of the message
     * Identifies the sending system to allow the use of a trust relationship.
     * Use case is for where a (trusted) sending system is responsible for multiple organizations, and therefore cannot differentiate based on source endpoint / authentication alone. Proposing to remove and rely on Task to convey this information.
     */
    sender?: Reference;
    /**
     * The source of the decision
     * The logical author of the message - the personor device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
     * Usually only for the request but can be used in a response.Proposing to remove and rely on Task to convey this information.
     */
    author?: Reference;
    /**
     * Message source application
     * The source application from which this message originated.
     */
    source: MessageHeaderSource;
    /**
     * Final responsibility for event
     * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
     * Usually only for the request but can be used in a response.Proposing to remove and rely on Task to convey this information.
     */
    responsible?: Reference;
    /**
     * Cause of event
     * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
     */
    reason?: CodeableConcept;
    /**
     * If this is a reply to prior message
     * Information about the message that this message is a response to.  Only present if this message is a response.
     */
    response?: MessageHeaderResponse;
    /**
     * The actual content of the message
     * The actual data of the message - a reference to the root/focus class of the event. This is allowed to be a Parameters resource.
     * The data is defined where the transaction type is defined. The transaction data is always included in the bundle that is the full message.  Only the root resource is specified.  The resources it references should be contained in the bundle but are not also listed here.  Multiple repetitions are allowed to cater for merges and other situations with multiple focal targets.
     */
    focus?: Reference[];
    /**
     * Link to the definition for this message
     * Permanent link to the MessageDefinition for this message.
     */
    definition?: canonical;
    /**
     * Extension for definition
     **/
    _definition?: Element;
}
/**
 * Common Interface declaration for definitional resources
 * Common Interface declaration for conformance and knowledge artifact resources.
 */
export interface MetadataResource extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MetadataResource';
    /**
     * When the {{title}} was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the {{title}} was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the {{title}} is expected to be used
     * The period during which the {{title}} content was or is planned to be in active use.
     * The effective period for a {{title}}  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching.
     * This element provides topical categorization and keywords for the {{title}}, as opposed to the more structured context-of-use information provided in the useContext element.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the {{title}}
     * An individiual or organization primarily involved in the creation and maintenance of the {{title}}.
     */
    author?: ContactDetail[];
    /**
     * Who edited the {{title}}
     * An individual or organization primarily responsible for internal coherence of the {{title}}.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the {{title}}
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the {{title}}
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
}
/**
 * A sequence used as starting sequence
 * A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed.
 */
export interface MolecularSequenceRelativeStartingSequence extends BackboneElement {
    /**
     * The genome assembly used for starting sequence, e.g. GRCh38
     * The genome assembly used for starting sequence, e.g. GRCh38.
     */
    genomeAssembly?: CodeableConcept;
    /**
     * Chromosome Identifier
     * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
     */
    chromosome?: CodeableConcept;
    /**
     * The reference sequence that represents the starting sequence
     * The reference sequence that represents the starting sequence.
     * A starting sequence may be represented in one of three ways:
  1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
  1.  a simple string of IUPAC codes
  1.  a reference to another MolecularSequence resource.
     */
    sequenceCodeableConcept?: CodeableConcept;
    /**
     * The reference sequence that represents the starting sequence
     * The reference sequence that represents the starting sequence.
     * A starting sequence may be represented in one of three ways:
  1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
  1.  a simple string of IUPAC codes
  1.  a reference to another MolecularSequence resource.
     */
    sequenceString?: string;
    /**
     * Extension for sequenceString
     **/
    _sequenceString?: Element;
    /**
     * The reference sequence that represents the starting sequence
     * The reference sequence that represents the starting sequence.
     * A starting sequence may be represented in one of three ways:
  1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
  1.  a simple string of IUPAC codes
  1.  a reference to another MolecularSequence resource.
     */
    sequenceReference?: Reference;
    /**
     * Start position of the window on the starting sequence
     * Start position of the window on the starting sequence. This value should honor the rules of the coordinateSystem.
     */
    windowStart?: integer;
    /**
     * Extension for windowStart
     **/
    _windowStart?: Element;
    /**
     * End position of the window on the starting sequence
     * End position of the window on the starting sequence. This value should honor the rules of the  coordinateSystem.
     */
    windowEnd?: integer;
    /**
     * Extension for windowEnd
     **/
    _windowEnd?: Element;
    /**
     * sense | antisense
     * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
     */
    orientation?: MolecularSequenceorientationType;
    /**
     * watson | crick
     * An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
     */
    strand?: MolecularSequencestrandType;
}
/**
 * Changes in sequence from the starting sequence
 * Changes in sequence from the starting sequence.
 */
export interface MolecularSequenceRelativeEdit extends BackboneElement {
    /**
     * Start position of the edit on the starting sequence
     * Start position of the edit on the starting sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
     */
    start?: integer;
    /**
     * Extension for start
     **/
    _start?: Element;
    /**
     * End position of the edit on the starting sequence
     * End position of the edit on the starting sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
     */
    end?: integer;
    /**
     * Extension for end
     **/
    _end?: Element;
    /**
     * Allele that was observed
     * Allele that was observed. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    replacementSequence?: string;
    /**
     * Extension for replacementSequence
     **/
    _replacementSequence?: Element;
    /**
     * Allele in the starting sequence
     * Allele in the starting sequence. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the starting sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    replacedSequence?: string;
    /**
     * Extension for replacedSequence
     **/
    _replacedSequence?: Element;
}
/**
 * A sequence defined relative to another sequence
 * A sequence defined relative to another sequence.
 */
export interface MolecularSequenceRelative extends BackboneElement {
    /**
     * Ways of identifying nucleotides or amino acids within a sequence
     * These are different ways of identifying nucleotides or amino acids within a sequence. Different databases and file types may use different systems. For detail definitions, see https://loinc.org/92822-6/ for more detail.
     */
    coordinateSystem: CodeableConcept;
    /**
     * Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together
     * Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together.
     */
    ordinalPosition?: integer;
    /**
     * Extension for ordinalPosition
     **/
    _ordinalPosition?: Element;
    /**
     * Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together
     * Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together.
     */
    sequenceRange?: Range;
    /**
     * A sequence used as starting sequence
     * A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed.
     */
    startingSequence?: MolecularSequenceRelativeStartingSequence;
    /**
     * Changes in sequence from the starting sequence
     * Changes in sequence from the starting sequence.
     */
    edit?: MolecularSequenceRelativeEdit[];
}
/**
 * Representation of a molecular sequence
 * Representation of a molecular sequence.
 */
export interface MolecularSequence extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'MolecularSequence';
    /**
     * Unique ID for this particular sequence
     * A unique identifier for this particular sequence instance.
     */
    identifier?: Identifier[];
    /**
     * Subject this sequence is associated too
     * Indicates the subject this sequence is associated too.
     */
    subject?: Reference;
    /**
     * What the molecular sequence is about, when it is not about the subject of record
     * The actual focus of a molecular sequence when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the subject would be the child (proband) and the focus would be the parent.
     */
    focus?: Reference[];
    /**
     * Specimen used for sequencing
     * Specimen used for sequencing.
     */
    specimen?: Reference;
    /**
     * The method for sequencing
     * The method for sequencing, for example, chip information.
     */
    device?: Reference;
    /**
     * Who should be responsible for test result
     * The organization or lab that should be responsible for this result.
     */
    performer?: Reference;
    /**
     * Sequence that was observed
     * Sequence that was observed.
     */
    literal?: string;
    /**
     * Extension for literal
     **/
    _literal?: Element;
    /**
     * Embedded file or a link (URL) which contains content to represent the sequence
     * Sequence that was observed as file content. Can be an actual file contents, or referenced by a URL to an external system.
     */
    formatted?: Attachment[];
    /**
     * A sequence defined relative to another sequence
     * A sequence defined relative to another sequence.
     */
    relative?: MolecularSequenceRelative[];
    /**
     * aa | dna | rna
     * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
     */
    type?: MolecularSequencesequenceType;
}
/**
 * Unique identifiers used for system
 * Indicates how the system may be identified when referenced in electronic exchange.
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export interface NamingSystemUniqueId extends BackboneElement {
    /**
     * The unique identifier
     * The string that should be sent over the wire to identify the code system or identifier system.
     * If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * Is this the id that should be used for this type
     * Indicates whether this identifier is the "preferred" identifier of this type.
     */
    preferred?: boolean;
    /**
     * Extension for preferred
     **/
    _preferred?: Element;
    /**
     * Notes about identifier usage
     * Notes about the past or intended usage of this identifier.
     * e.g. "must be used in Germany" or "was initially published in error with this value".
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * When is identifier valid?
     * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
     * Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).

The nuance of identifier deprecation is not represented with a separate element. When a determination is made that an identifier should not be used, the validity period end date is updated with the date the identifier is deemed to be deprecated. The identifier should no longer be used once the period end date is reached.
     */
    period?: Period;
    /**
     * Whether the identifier is authoritative
     * Indicates whether this identifier ie endorsed by the official owner of the associated naming system.
     */
    authoritative?: boolean;
    /**
     * Extension for authoritative
     **/
    _authoritative?: Element;
    /**
     * oid | uuid | uri | iri-stem | v2csmnemonic | other
     * Identifies the unique identifier scheme used for this particular identifier.
     * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc. Preferred identifiers for the same identifier type SHOULD NOT overlap by period.
     */
    type: NamingSystemIdentifierType;
}
/**
 * System of unique identification
 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
 */
export interface NamingSystem extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'NamingSystem';
    /**
     * Canonical identifier for this naming system, represented as a URI (globally unique)
     * An absolute URI that is used to identify this naming system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this naming system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the naming system is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the naming system (business identifier)
     * A formal identifier that is used to identify this naming system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this naming system outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the naming system
     * The identifier that is used to identify this version of the naming system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the naming system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different naming system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the naming system with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which NamingSystem is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which NamingSystem is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this naming system (computer friendly)
     * A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.The"symbolic name" for an OID would be captured as an extension.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Title for this naming system (human friendly)
     * A short, descriptive, user-friendly title for the naming system.
     * This title does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this naming system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of naming systems that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the naming system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the naming system.
     * Usually an organization but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Who maintains system namespace?
     * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
     * This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
     */
    responsible?: string;
    /**
     * Extension for responsible
     **/
    _responsible?: Element;
    /**
     * e.g. driver,  provider,  patient, bank etc
     * Categorizes a naming system for easier search by grouping related naming systems.
     * This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
     */
    type?: CodeableConcept;
    /**
     * Natural language description of the naming system
     * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the naming system is presumed to be the predominant language in the place the naming system was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for naming system (if applicable)
     * A legal or geographic region in which the naming system is intended to be used.
     * It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this naming system is defined
     * Explanation of why this naming system is needed and why it has been designed as it has.
     * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the naming system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the naming system.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the NamingSystem was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the NamingSystem was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the NamingSystem is expected to be used
     * The period during which the NamingSystem content was or is planned to be in active use.
     * The effective period for a NamingSystem determines when the content is applicable for usage and is independent of publication and review dates. For example, a NamingSystem intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptions related to the content of the NamingSystem. Topics provide a high-level categorization as well as keywords for the NamingSystem that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the CodeSystem
     * An individiual or organization primarily involved in the creation and maintenance of the NamingSystem.
     */
    author?: ContactDetail[];
    /**
     * Who edited the NamingSystem
     * An individual or organization primarily responsible for internal coherence of the NamingSystem.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the NamingSystem
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the NamingSystem.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the NamingSystem
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the NamingSystem for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * How/where is it used
     * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
     */
    usage?: string;
    /**
     * Extension for usage
     **/
    _usage?: Element;
    /**
     * Unique identifiers used for system
     * Indicates how the system may be identified when referenced in electronic exchange.
     * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
     */
    uniqueId: NamingSystemUniqueId[];
    /**
     * draft | active | retired | unknown
     * The status of this naming system. Enables tracking the life-cycle of the content.
     * Allows filtering of naming systems that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: NamingSystemPublicationStatus;
    /**
     * codesystem | identifier | root
     * Indicates the purpose for the naming system - what kinds of things does it make unique?
     */
    kind: NamingSystemType;
}
/**
 * What food or fluid product or item was consumed
 * What food or fluid product or item was consumed.
 */
export interface NutritionIntakeConsumedItem extends BackboneElement {
    /**
     * The type of food or fluid product
     * Indicates what a category of item that was consumed: e.g., food, fluid, enteral, etc.
     */
    type: CodeableConcept;
    /**
     * Code that identifies the food or fluid product that was consumed
     * Identifies the food or fluid product that was consumed. This is potentially a link to a resource representing the details of the food product (TBD) or a simple attribute carrying a code that identifies the food from a known list of foods.
     * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of a new nutritionProduct resource is recommended.
     */
    nutritionProduct: CodeableReference;
    /**
     * Scheduled frequency of consumption
     * Scheduled frequency of consumption.
     */
    schedule?: Timing;
    /**
     * Quantity of the specified food
     * Quantity of the specified food.
     */
    amount?: Quantity;
    /**
     * Rate at which enteral feeding was administered
     * Rate at which enteral feeding was administered.
     */
    rate?: Quantity;
    /**
     * Flag to indicate if the food or fluid item was refused or otherwise not consumed
     * Indicator when a patient is in a setting where it is helpful to know if food was not consumed, such as it was refused, held (as in tube feedings), or otherwise not provided. If a consumption is being recorded from an app, such as MyFitnessPal, this indicator will likely not be used.
     */
    notConsumed?: boolean;
    /**
     * Extension for notConsumed
     **/
    _notConsumed?: Element;
    /**
     * Reason food or fluid was not consumed
     * Document the reason the food or fluid was not consumed, such as refused, held, etc.
     */
    notConsumedReason?: CodeableConcept;
}
/**
 * Total nutrient for the whole meal, product, serving
 * Total nutrient amounts for the whole meal, product, serving, etc.
 * Individual item nutrients are not currently included in the resource and will likely end up as a reference in nutritionProduct to represent the individual items.
 */
export interface NutritionIntakeIngredientLabel extends BackboneElement {
    /**
     * Total nutrient consumed
     * Total nutrient consumed. This could be a macronutrient (protein, fat, carbohydrate), or a vitamin and mineral.
     */
    nutrient: CodeableReference;
    /**
     * Total amount of nutrient consumed
     * Total amount of nutrient consumed.
     */
    amount: Quantity;
}
/**
 * Who was performed in the intake
 * Who performed the intake and how they were involved.
 */
export interface NutritionIntakePerformer extends BackboneElement {
    /**
     * Type of performer
     * Type of performer.
     */
    function?: CodeableConcept;
    /**
     * Who performed the intake
     * Who performed the intake.
     */
    actor: Reference;
}
/**
 * Record of food or fluid being taken by a patient
 * A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.
 */
export interface NutritionIntake extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'NutritionIntake';
    /**
     * External identifier
     * Identifiers associated with this Nutrition Intake that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * Instantiates FHIR protocol or definition.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * Instantiates external protocol or definition.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * Fulfils plan, proposal or order
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event
     * A larger event of which this particular event is a component or step.
     */
    partOf?: Reference[];
    /**
     * Reason for current status
     * Captures the reason for the current state of the NutritionIntake.
     * This is generally only used for "exception" statuses such as "not-taken", "on-hold", "cancelled" or "entered-in-error". The reason for performing the event at all is captured in reasonCode, not here.
     */
    statusReason?: CodeableConcept[];
    /**
     * Code representing an overall type of nutrition intake
     * Overall type of nutrition intake.
     */
    code?: CodeableConcept;
    /**
     * Who is/was consuming the food or fluid
     * The person, animal or group who is/was consuming the food or fluid.
     */
    subject: Reference;
    /**
     * Encounter associated with NutritionIntake
     * The encounter that establishes the context for this NutritionIntake.
     */
    encounter?: Reference;
    /**
     * The date/time or interval when the food or fluid is/was consumed
     * The interval of time during which it is being asserted that the patient is/was consuming the food or fluid.
     * This attribute reflects the period over which the patient consumed the food fluid and is expected to be populated on the majority of NutritionIntake. If the food or fluid is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * The date/time or interval when the food or fluid is/was consumed
     * The interval of time during which it is being asserted that the patient is/was consuming the food or fluid.
     * This attribute reflects the period over which the patient consumed the food fluid and is expected to be populated on the majority of NutritionIntake. If the food or fluid is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
     */
    occurrencePeriod?: Period;
    /**
     * When the intake was recorded
     * The date when the Nutrition Intake was asserted by the information source.
     */
    recorded?: dateTime;
    /**
     * Extension for recorded
     **/
    _recorded?: Element;
    /**
     * Person or organization that provided the information about the consumption of this food or fluid
     * The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources.
     */
    reportedBoolean?: boolean;
    /**
     * Extension for reportedBoolean
     **/
    _reportedBoolean?: Element;
    /**
     * Person or organization that provided the information about the consumption of this food or fluid
     * The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources.
     */
    reportedReference?: Reference;
    /**
     * What food or fluid product or item was consumed
     * What food or fluid product or item was consumed.
     */
    consumedItem: NutritionIntakeConsumedItem[];
    /**
     * Total nutrient for the whole meal, product, serving
     * Total nutrient amounts for the whole meal, product, serving, etc.
     * Individual item nutrients are not currently included in the resource and will likely end up as a reference in nutritionProduct to represent the individual items.
     */
    ingredientLabel?: NutritionIntakeIngredientLabel[];
    /**
     * Who was performed in the intake
     * Who performed the intake and how they were involved.
     */
    performer?: NutritionIntakePerformer[];
    /**
     * Where the intake occurred
     * Where the intake occurred.
     */
    location?: Reference;
    /**
     * Additional supporting information
     * Allows linking the NutritionIntake to the underlying NutritionOrder, or to other information, such as AllergyIntolerance, that supports or is used to derive the NutritionIntake.
     * Likely references would be to AllergyIntolerance,  Observation or QuestionnaireAnswers.
     */
    derivedFrom?: Reference[];
    /**
     * Reason for why the food or fluid is /was consumed
     * A reason, Condition or observation for why the food or fluid is /was consumed.
     */
    reason?: CodeableReference[];
    /**
     * Further information about the consumption
     * Provides extra information about the Nutrition Intake that is not conveyed by the other attributes.
     */
    note?: Annotation[];
    /**
     * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
     * A code representing the patient or other source's judgment about the state of the intake that this assertion is about.  Generally, this will be active or completed.
     * NutritionIntake is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for NutritionIntake.status contains codes that assert the status of the consumption of the food or fluid by the patient (for example, stopped or on hold) as well as codes that assert the status of the Nutrition Intake itself (for example, entered in error).

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: NutritionIntakeStatus;
}
/**
 * Scheduling information for oral diets
 * Schedule information for an oral diet.
 */
export interface NutritionOrderOralDietSchedule extends BackboneElement {
    /**
     * Scheduled frequency of diet
     * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
     */
    timing?: Timing[];
    /**
     * Take 'as needed'
     * Indicates whether the product is only taken when needed within a specific dosing schedule.
     */
    asNeeded?: boolean;
    /**
     * Extension for asNeeded
     **/
    _asNeeded?: Element;
    /**
     * Take 'as needed' for x
     * Indicates whether the product is only taken based on a precondition for taking the product.
     */
    asNeededFor?: CodeableConcept;
}
/**
 * Required  nutrient modifications
 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
    /**
     * Type of nutrient that is being modified
     * The nutrient that is being modified such as carbohydrate or sodium.
     */
    modifier?: CodeableConcept;
    /**
     * Quantity of the specified nutrient
     * The quantity of the specified nutrient to include in diet.
     */
    amount?: Quantity;
}
/**
 * Required  texture modifications
 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
    /**
     * Code to indicate how to alter the texture of the foods, e.g. pureed
     * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
     * Coupled with the foodType (Meat).
     */
    modifier?: CodeableConcept;
    /**
     * Concepts that are used to identify an entity that is ingested for nutritional purposes
     * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
     * Coupled with the `texture.modifier`; could be (All Foods).
     */
    foodType?: CodeableConcept;
}
/**
 * Oral diet components
 * Diet given orally in contrast to enteral (tube) feeding.
 */
export interface NutritionOrderOralDiet extends BackboneElement {
    /**
     * Type of oral diet or diet restrictions that describe what can be consumed orally
     * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
     */
    type?: CodeableConcept[];
    /**
     * Scheduling information for oral diets
     * Schedule information for an oral diet.
     */
    schedule?: NutritionOrderOralDietSchedule;
    /**
     * Required  nutrient modifications
     * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
     */
    nutrient?: NutritionOrderOralDietNutrient[];
    /**
     * Required  texture modifications
     * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
     */
    texture?: NutritionOrderOralDietTexture[];
    /**
     * The required consistency of fluids and liquids provided to the patient
     * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
     */
    fluidConsistencyType?: CodeableConcept[];
    /**
     * Instructions or additional information about the oral diet
     * Free text or additional instructions or information pertaining to the oral diet.
     * Free text dosage instructions can be used for cases where the instructions are too complex to code.
     */
    instruction?: string;
    /**
     * Extension for instruction
     **/
    _instruction?: Element;
}
/**
 * Scheduling information for supplements
 * Schedule information for a supplement.
 */
export interface NutritionOrderSupplementSchedule extends BackboneElement {
    /**
     * Scheduled frequency of diet
     * The time period and frequency at which the supplement should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
     */
    timing?: Timing[];
    /**
     * Take 'as needed'
     * Indicates whether the supplement is only taken when needed within a specific dosing schedule.
     */
    asNeeded?: boolean;
    /**
     * Extension for asNeeded
     **/
    _asNeeded?: Element;
    /**
     * Take 'as needed' for x
     * Indicates whether the supplement is only taken based on a precondition for taking the supplement.
     */
    asNeededFor?: CodeableConcept;
}
/**
 * Supplement components
 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
 */
export interface NutritionOrderSupplement extends BackboneElement {
    /**
     * Type of supplement product requested
     * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
     */
    type?: CodeableReference;
    /**
     * Product or brand name of the nutritional supplement
     * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
     */
    productName?: string;
    /**
     * Extension for productName
     **/
    _productName?: Element;
    /**
     * Scheduling information for supplements
     * Schedule information for a supplement.
     */
    schedule?: NutritionOrderSupplementSchedule;
    /**
     * Amount of the nutritional supplement
     * The amount of the nutritional supplement to be given.
     */
    quantity?: Quantity;
    /**
     * Instructions or additional information about the oral supplement
     * Free text or additional instructions or information pertaining to the oral supplement.
     * Free text dosage instructions can be used for cases where the instructions are too complex to code.
     */
    instruction?: string;
    /**
     * Extension for instruction
     **/
    _instruction?: Element;
}
/**
 * Components to add to the feeding
 * Indicates modular components to be provided in addition or mixed with the base formula.
 */
export interface NutritionOrderEnteralFormulaAdditive extends BackboneElement {
    /**
     * Type of modular component to add to the feeding
     * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
     */
    type?: CodeableReference;
    /**
     * Product or brand name of the modular additive
     * The product or brand name of the type of modular component to be added to the formula.
     */
    productName?: string;
    /**
     * Extension for productName
     **/
    _productName?: Element;
    /**
     * Amount of additive to be given or mixed in
     * The amount of additive to be given in addition or to be mixed in with the base formula.
     */
    quantity?: Quantity;
}
/**
 * Scheduling information for enteral formula products
 * Schedule information for an enteral formula.
 */
export interface NutritionOrderEnteralFormulaAdministrationSchedule extends BackboneElement {
    /**
     * Scheduled frequency of enteral formula
     * The time period and frequency at which the enteral formula should be given.  The enteral formula should be given for the combination of all schedules if more than one schedule is present.
     */
    timing?: Timing[];
    /**
     * Take 'as needed'
     * Indicates whether the enteral formula is only taken when needed within a specific dosing schedule.
     */
    asNeeded?: boolean;
    /**
     * Extension for asNeeded
     **/
    _asNeeded?: Element;
    /**
     * Take 'as needed' for x
     * Indicates whether the enteral formula is only taken based on a precondition for taking the enteral formula.
     */
    asNeededFor?: CodeableConcept;
}
/**
 * Formula feeding instruction as structured data
 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
    /**
     * Scheduling information for enteral formula products
     * Schedule information for an enteral formula.
     */
    schedule?: NutritionOrderEnteralFormulaAdministrationSchedule;
    /**
     * The volume of formula to provide
     * The volume of formula to provide to the patient per the specified administration schedule.
     */
    quantity?: Quantity;
    /**
     * Speed with which the formula is provided per period of time
     * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
     * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
     */
    rateQuantity?: Quantity;
    /**
     * Speed with which the formula is provided per period of time
     * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
     * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
     */
    rateRatio?: Ratio;
}
/**
 * Enteral formula components
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
    /**
     * Type of enteral or infant formula
     * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
     */
    baseFormulaType?: CodeableReference;
    /**
     * Product or brand name of the enteral or infant formula
     * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
     */
    baseFormulaProductName?: string;
    /**
     * Extension for baseFormulaProductName
     **/
    _baseFormulaProductName?: Element;
    /**
     * Intended type of device for the administration
     * The intended type of device that is to be used for the administration of the enteral formula.
     */
    deliveryDevice?: CodeableReference[];
    /**
     * Components to add to the feeding
     * Indicates modular components to be provided in addition or mixed with the base formula.
     */
    additive?: NutritionOrderEnteralFormulaAdditive[];
    /**
     * Amount of energy per specified volume that is required
     * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
     */
    caloricDensity?: Quantity;
    /**
     * How the formula should enter the patient's gastrointestinal tract
     * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
     */
    routeOfAdministration?: CodeableConcept;
    /**
     * Formula feeding instruction as structured data
     * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
     * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
     */
    administration?: NutritionOrderEnteralFormulaAdministration[];
    /**
     * Upper limit on formula volume per unit of time
     * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
     */
    maxVolumeToDeliver?: Quantity;
    /**
     * Formula feeding instructions expressed as text
     * Free text formula administration, feeding instructions or additional instructions or information.
     * Free text dosage instructions can be used for cases where the instructions are too complex to code.
     */
    administrationInstruction?: markdown;
    /**
     * Extension for administrationInstruction
     **/
    _administrationInstruction?: Element;
}
/**
 * Diet, formula or nutritional supplement request
 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
 * Referenced by an Order Request (workflow).
 */
export interface NutritionOrder extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'NutritionOrder';
    /**
     * Identifiers assigned to this order
     * Identifiers assigned to this order by the order sender or by the order receiver.
     * The Identifier.type element can be to indicate filler vs. placer if needed.  This is explained in further detail [here](servicerequest.html#notes).
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * Instantiates protocol or definition
     * The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
     */
    instantiates?: uri[];
    /**
     * Extension for instantiates
     **/
    _instantiates?: Element[];
    /**
     * What this order fulfills
     * A plan or request that is fulfilled in whole or in part by this nutrition order.
     */
    basedOn?: Reference[];
    /**
     * Composite Request ID
     * A shared identifier common to all nutrition orders that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
     */
    groupIdentifier?: Identifier;
    /**
     * Who requires the diet, formula or nutritional supplement
     * The person or set of individuals who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
     */
    subject: Reference;
    /**
     * The encounter associated with this nutrition order
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    encounter?: Reference;
    /**
     * Information to support fulfilling of the nutrition order
     * Information to support fulfilling (i.e. dispensing or administering) of the nutrition,        for example, patient height and weight).
     */
    supportingInformation?: Reference[];
    /**
     * Date and time the nutrition order was requested
     * The date and time that this nutrition order was requested.
     */
    dateTime: dateTime;
    /**
     * Extension for dateTime
     **/
    _dateTime?: Element;
    /**
     * Who ordered the diet, formula or nutritional supplement
     * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
     */
    orderer?: Reference;
    /**
     * Who is desired to perform the administration of what is being ordered
     * The specified desired performer of the nutrition order.
     */
    performer?: CodeableReference[];
    /**
     * List of the patient's food and nutrition-related allergies and intolerances
     * A link to a record of allergies or intolerances  which should be included in the nutrition order.
     * Information on a patient's food allergies and intolerances to inform healthcare personnel about the type of foods that the patient shouldn't receive or consume.
     */
    allergyIntolerance?: Reference[];
    /**
     * Order-specific modifier about the type of food that should be given
     * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     * Information on a patient's food preferences that inform healthcare personnel about the food that the patient should receive or consume.
     */
    foodPreferenceModifier?: CodeableConcept[];
    /**
     * Order-specific modifier about the type of food that should not be given
     * This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
     * Information on a patient's food allergies, intolerances and preferences to inform healthcare personnel about the type  of foods that the patient shouldn't receive or consume.
     */
    excludeFoodModifier?: CodeableConcept[];
    /**
     * Capture when a food item is brought in by the patient and/or family
     * This modifier is used to convey whether a food item is allowed to be brought in by the patient and/or family.  If set to true, indicates that the receiving system does not need to supply the food item.
     */
    outsideFoodAllowed?: boolean;
    /**
     * Extension for outsideFoodAllowed
     **/
    _outsideFoodAllowed?: Element;
    /**
     * Oral diet components
     * Diet given orally in contrast to enteral (tube) feeding.
     */
    oralDiet?: NutritionOrderOralDiet;
    /**
     * Supplement components
     * Oral nutritional products given in order to add further nutritional value to the patient's diet.
     */
    supplement?: NutritionOrderSupplement[];
    /**
     * Enteral formula components
     * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
     */
    enteralFormula?: NutritionOrderEnteralFormula;
    /**
     * Comments
     * Comments made about the {{title}} by the requester, performer, subject or other participants.
     * This element SHALL NOT be used to supply free text instructions for the diet which are represented in the `.oralDiet.instruction`, `supplement.instruction`, or `enteralFormula.administrationInstruction` elements.
     */
    note?: Annotation[];
    /**
     * draft | active | on-hold | revoked | completed | entered-in-error | unknown
     * The workflow status of the nutrition order/request.
     * Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: NutritionOrderStatus;
    /**
     * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
     * Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.
     * When resources map to this element, they are free to define as many codes as necessary to cover their space and will map to "proposal, plan or order".  Can have multiple codes that map to one of these.  E.g. "original order", "encoded order", "reflex order" would all map to "order".  Expectation is that the set of codes is mutually exclusive or a strict all-encompassing hierarchy.
     */
    intent: NutritionOrderNutritiionOrderIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the Nutrition Order should be addressed with respect to other        requests.
     */
    priority?: NutritionOrderPriority;
}
/**
 * The product's nutritional information expressed by the nutrients
 * The product's nutritional information expressed by the nutrients.
 * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
 */
export interface NutritionProductNutrient extends BackboneElement {
    /**
     * The (relevant) nutrients in the product
     * The (relevant) nutrients in the product.
     */
    item?: CodeableReference;
    /**
     * The amount of nutrient expressed in one or more units: X per pack / per serving / per dose
     * The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
     */
    amount?: Ratio[];
}
/**
 * Ingredients contained in this product
 * Ingredients contained in this product.
 */
export interface NutritionProductIngredient extends BackboneElement {
    /**
     * The ingredient contained in the product
     * The ingredient contained in the product.
     */
    item: CodeableReference;
    /**
     * The amount of ingredient that is in the product
     * The amount of ingredient that is in the product.
     */
    amount?: Ratio[];
}
/**
 * Specifies descriptive properties of the nutrition product
 * Specifies descriptive properties of the nutrition product.
 */
export interface NutritionProductCharacteristic extends BackboneElement {
    /**
     * Code specifying the type of characteristic
     * A code specifying which characteristic of the product is being described (for example, colour, shape).
     */
    type: CodeableConcept;
    /**
     * The value of the characteristic
     * The actual characteristic value corresponding to the type.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the characteristic
     * The actual characteristic value corresponding to the type.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * The value of the characteristic
     * The actual characteristic value corresponding to the type.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the characteristic
     * The actual characteristic value corresponding to the type.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * The value of the characteristic
     * The actual characteristic value corresponding to the type.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueAttachment?: Attachment;
    /**
     * The value of the characteristic
     * The actual characteristic value corresponding to the type.
     * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
}
/**
 * One or several physical instances or occurrences of the nutrition product
 * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
 */
export interface NutritionProductInstance extends BackboneElement {
    /**
     * The amount of items or instances
     * The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
     */
    quantity?: Quantity;
    /**
     * The identifier for the physical instance, typically a serial number or manufacturer number
     * The identifier for the physical instance, typically a serial number or manufacturer number.
     */
    identifier?: Identifier[];
    /**
     * The name for the specific product
     * The name for the specific product.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * The identification of the batch or lot of the product
     * The identification of the batch or lot of the product.
     */
    lotNumber?: string;
    /**
     * Extension for lotNumber
     **/
    _lotNumber?: Element;
    /**
     * The expiry date or date and time for the product
     * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
     */
    expiry?: dateTime;
    /**
     * Extension for expiry
     **/
    _expiry?: Element;
    /**
     * The date until which the product is expected to be good for consumption
     * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
     */
    useBy?: dateTime;
    /**
     * Extension for useBy
     **/
    _useBy?: Element;
    /**
     * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled
     * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
     * Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
     */
    biologicalSourceEvent?: Identifier;
}
/**
 * A product used for nutritional purposes (i.e. food or supplement)
 * A food or supplement that is consumed by patients.
 */
export interface NutritionProduct extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'NutritionProduct';
    /**
     * A code that can identify the detailed nutrients and ingredients in a specific food product
     * The code assigned to the product, for example a USDA NDB number, a USDA FDC ID number, or a Langual code.
     */
    code?: CodeableConcept;
    /**
     * Broad product groups or categories used to classify the product, such as Legume and Legume Products, Beverages, or Beef Products
     * Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
     */
    category?: CodeableConcept[];
    /**
     * Manufacturer, representative or officially responsible for the product
     * The organisation (manufacturer, representative or legal authorization holder) that is responsible for the device.
     */
    manufacturer?: Reference[];
    /**
     * The product's nutritional information expressed by the nutrients
     * The product's nutritional information expressed by the nutrients.
     * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    nutrient?: NutritionProductNutrient[];
    /**
     * Ingredients contained in this product
     * Ingredients contained in this product.
     */
    ingredient?: NutritionProductIngredient[];
    /**
     * Known or suspected allergens that are a part of this product
     * Allergens that are known or suspected to be a part of this nutrition product.
     */
    knownAllergen?: CodeableReference[];
    /**
     * Specifies descriptive properties of the nutrition product
     * Specifies descriptive properties of the nutrition product.
     */
    characteristic?: NutritionProductCharacteristic[];
    /**
     * One or several physical instances or occurrences of the nutrition product
     * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
     */
    instance?: NutritionProductInstance[];
    /**
     * Comments made about the product
     * Comments made about the product.
     */
    note?: Annotation[];
    /**
     * active | inactive | entered-in-error
     * The current state of the product.
     * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
     */
    status: NutritionProductStatus;
}
/**
 * Triggering observation(s)
 * Identifies the observation(s) that triggered the performance of this observation.
 */
export interface ObservationTriggeredBy extends BackboneElement {
    /**
     * Triggering observation
     * Reference to the triggering observation.
     */
    observation: Reference;
    /**
     * Reason that the observation was triggered
     * Provides the reason why this observation was performed as a result of the observation(s) referenced.
     */
    reason?: string;
    /**
     * Extension for reason
     **/
    _reason?: Element;
    /**
     * reflex | repeat | re-run
     * The type of trigger.
Reflex | Repeat | Re-run.
     */
    type: ObservationTriggeredByType;
}
/**
 * Provides guide for interpretation
 * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
export interface ObservationReferenceRange extends BackboneElement {
    /**
     * Low Range, if relevant
     * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
     */
    low?: Quantity;
    /**
     * High Range, if relevant
     * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
     */
    high?: Quantity;
    /**
     * Normal value, if relevant
     * The value of the normal value of the reference range.
     */
    normalValue?: CodeableConcept;
    /**
     * Reference range qualifier
     * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
     * This SHOULD be populated if there is more than one range.  If this element is not present then the normal range is assumed.
     */
    type?: CodeableConcept;
    /**
     * Reference range population
     * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
     * This SHOULD be populated if there is more than one range.  If this element is not present then the normal population is assumed.
     */
    appliesTo?: CodeableConcept[];
    /**
     * Applicable age range, if relevant
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    age?: Range;
    /**
     * Text based reference range in an observation
     * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
     */
    text?: markdown;
    /**
     * Extension for text
     **/
    _text?: Element;
}
/**
 * Component results
 * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
export interface ObservationComponent extends BackboneElement {
    /**
     * Type of component observation (code / type)
     * Describes what was observed. Sometimes this is called the observation "code".
     * *All* code-value and  component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
     */
    code: CodeableConcept;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueQuantity?: Quantity;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueRange?: Range;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueRatio?: Ratio;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueSampledData?: SampledData;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valuePeriod?: Period;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueAttachment?: Attachment;
    /**
     * Actual component result
     * The information determined as a result of making the observation, if the information has a simple value.
     * Used when observation has a set of component observations:
-  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived).
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueReference?: Reference;
    /**
     * Why the component result is missing
     * Provides a reason why the expected value in the element Observation.component.value[x] is missing.
     * "Null" or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "test not done".

The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed.  Because of these options, use-case agreements are required to interpret general observations for exceptional values.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * High, low, normal, etc
     * A categorical assessment of an observation value.  For example, high, low, normal.
     * Historically used for laboratory results (known as 'abnormal flag' ),  its use extends to other use cases where coded interpretations  are relevant.  Often reported as one or more simple compact codes this element is often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result.
     */
    interpretation?: CodeableConcept[];
    /**
     * Provides guide for interpretation of component result
     * Guidance on how to interpret the value by comparison to a normal or recommended range.
     * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
     */
    referenceRange?: ObservationReferenceRange[];
}
/**
 * Measurements and simple assertions
 * Measurements and simple assertions made about a patient, device or other subject.
 * Used for simple observations such as device measurements, laboratory atomic results, vital signs, height, weight, smoking status, comments, etc.  Other resources are used to provide context for observations such as laboratory reports, etc.
 */
export interface Observation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Observation';
    /**
     * Business Identifier for observation
     * A unique identifier assigned to this observation.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR ObservationDefinition
     * The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance.
     * ObservationDefinition can be referenced by its canonical url using instantiatesCanonical, or by a name or an identifier using the appropriate sub-elements of instantiatesReference.
     */
    instantiatesCanonical?: canonical;
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element;
    /**
     * Instantiates FHIR ObservationDefinition
     * The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance.
     * ObservationDefinition can be referenced by its canonical url using instantiatesCanonical, or by a name or an identifier using the appropriate sub-elements of instantiatesReference.
     */
    instantiatesReference?: Reference;
    /**
     * Fulfills plan, proposal or order
     * A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
     */
    basedOn?: Reference[];
    /**
     * Triggering observation(s)
     * Identifies the observation(s) that triggered the performance of this observation.
     */
    triggeredBy?: ObservationTriggeredBy[];
    /**
     * Part of referenced event
     * A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
     * To link an Observation to an Encounter use `encounter`.  See the  [Notes](observation.html#obsgrouping) below for guidance on referencing another Observation.
     */
    partOf?: Reference[];
    /**
     * Classification of  type of observation
     * A code that classifies the general type of observation being made.
     * In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
     */
    category?: CodeableConcept[];
    /**
     * Type of observation (code / type)
     * Describes what was observed. Sometimes this is called the observation "name".
     * *All* code-value and, if present, component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
     */
    code: CodeableConcept;
    /**
     * Who and/or what the observation is about
     * The patient, or group of patients, location, device, organization, procedure or practitioner this observation is about and into whose or what record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
     * One would expect this element to be a cardinality of 1..1. The only circumstance in which the subject can be missing is when the observation is made by a device that does not know the patient. In this case, the observation SHALL be matched to a patient through some context/channel matching technique, and at this point, the observation should be updated. The subject of an Observation may in some cases be a procedure.  This supports the regulatory inspection use case where observations are captured during inspections of a procedure that is being performed (independent of any particular patient or whether patient related at all).
     */
    subject?: Reference;
    /**
     * What the observation is about, when it is not about the subject of record
     * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
     * Typically, an observation is made about the subject - a patient, or group of patients, location, or device - and the distinction between the subject and what is directly measured for an observation is specified in the observation code itself ( e.g., "Blood Glucose") and does not need to be represented separately using this element.  Use `specimen` if a reference to a specimen is required.  If a code is required instead of a resource use either  `bodysite` for bodysites or the standard extension [http://hl7.org/fhir/StructureDefinition/observation-focusCode](http://hl7.org/fhir/extensions/StructureDefinition-observation-focusCode.html).
     */
    focus?: Reference[];
    /**
     * Healthcare event during which this observation is made
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
     * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission laboratory tests).
     */
    encounter?: Reference;
    /**
     * Clinically relevant time/time-period for observation
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
     */
    effectiveDateTime?: dateTime;
    /**
     * Extension for effectiveDateTime
     **/
    _effectiveDateTime?: Element;
    /**
     * Clinically relevant time/time-period for observation
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
     */
    effectivePeriod?: Period;
    /**
     * Clinically relevant time/time-period for observation
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
     */
    effectiveTiming?: Timing;
    /**
     * Clinically relevant time/time-period for observation
     * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
     */
    effectiveInstant?: instant;
    /**
     * Extension for effectiveInstant
     **/
    _effectiveInstant?: Element;
    /**
     * Date/Time this version was made available
     * The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
     * For Observations that don't require review and verification, it may be the same as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For Observations that do require review and verification for certain updates, it might not be the same as the `lastUpdated` time of the resource itself due to a non-clinically significant update that doesn't require the new version to be reviewed and verified again.
     */
    issued?: instant;
    /**
     * Extension for issued
     **/
    _issued?: Element;
    /**
     * Who is responsible for the observation
     * Who was responsible for asserting the observed value as "true".
     */
    performer?: Reference[];
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueQuantity?: Quantity;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueRange?: Range;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueRatio?: Ratio;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueSampledData?: SampledData;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valuePeriod?: Period;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueAttachment?: Attachment;
    /**
     * Actual result
     * The information determined as a result of making the observation, if the information has a simple value.
     * - An observation may have:
  1.  a single value here
  1.  both a value and a set of related or component values
  1.  only a set of related or component values.
-  If a value is present, the datatype for this element should be determined by the `code`.
-  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
-  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
- The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
- For additional guidance, see the [Notes section](observation.html#notes) below.
     */
    valueReference?: Reference;
    /**
     * Why the result is missing
     * Provides a reason why the expected value in the element Observation.value[x] is missing.
     * Null or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "specimen unsatisfactory".

The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed. Note that an observation may only be reported if there are values to report. For example differential cell counts values may be reported only when > 0.  Because of these options, use-case agreements are required to interpret general observations for null or exceptional values.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * High, low, normal, etc
     * A categorical assessment of an observation value.  For example, high, low, normal.
     * Historically used for laboratory results (known as 'abnormal flag' ),  its use extends to other use cases where coded interpretations  are relevant.  Often reported as one or more simple compact codes this element is often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result.
     */
    interpretation?: CodeableConcept[];
    /**
     * Comments about the observation
     * Comments about the observation or the results.
     * May include general statements about the observation, or statements about significant, unexpected or unreliable results values, or information about its source when relevant to its interpretation.
     */
    note?: Annotation[];
    /**
     * Observed body part
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     * Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.
     */
    bodySite?: CodeableConcept;
    /**
     * Observed body structure
     * Indicates the body structure on the subject's body where the observation was made (i.e. the target site).
     * Only used if not implicit in code found in Observation.code or bodySite is used. In many systems, this may be represented as a related observation instead of an inline component.
     */
    bodyStructure?: Reference;
    /**
     * How it was done
     * Indicates the mechanism used to perform the observation.
     * Only used if not implicit in code for Observation.code.
     */
    method?: CodeableConcept;
    /**
     * Specimen used for this observation
     * The specimen that was used when this observation was made.
     * Should only be used if not implicit in code found in `Observation.code`.  Observations are not made on specimens themselves; they are made on a subject, but in many cases by the means of a specimen. Note that although specimens are often involved, they are not always tracked and reported explicitly. Also note that observation resources may be used in contexts that track the specimen explicitly (e.g. Diagnostic Report).
     */
    specimen?: Reference;
    /**
     * A reference to the device that generates the measurements or the device settings for the device
     * A reference to the device that generates the measurements or the device settings for the device.
     * Note that this is not meant to represent a device involved in the transmission of the result, e.g., a gateway.  Such devices may be documented using the Provenance resource where relevant.
     */
    device?: Reference;
    /**
     * Provides guide for interpretation
     * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
     * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
     */
    referenceRange?: ObservationReferenceRange[];
    /**
     * Related resource that belongs to the Observation group
     * This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     * When using this element, an observation will typically have either a value or a set of related resources, although both may be present in some cases.  For a discussion on the ways Observations can assembled in groups together, see [Notes](observation.html#obsgrouping) below.  Note that a system may calculate results from [QuestionnaireResponse](questionnaireresponse.html)  into a final score and represent the score as an Observation.
     */
    hasMember?: Reference[];
    /**
     * Related resource from which the observation is made
     * The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
     * All the reference choices that are listed in this element can represent clinical observations and other measurements that may be the source for a derived value.  The most common reference will be another Observation.  For a discussion on the ways Observations can assembled in groups together, see [Notes](observation.html#obsgrouping) below.
     */
    derivedFrom?: Reference[];
    /**
     * Component results
     * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
     * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
     */
    component?: ObservationComponent[];
    /**
     * registered | preliminary | final | amended +
     * The status of the result value.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ObservationStatus;
}
/**
 * Set of qualified values for observation results
 * A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.
 */
export interface ObservationDefinitionQualifiedValue extends BackboneElement {
    /**
     * Context qualifier for the set of qualified values
     * A concept defining the context for this set of qualified values.
     */
    context?: CodeableConcept;
    /**
     * Targetted population for the set of qualified values
     * The target population this  set of qualified values applies to.
     * If this element is not present then the global population is assumed.
     */
    appliesTo?: CodeableConcept[];
    /**
     * Applicable age range for the set of qualified values
     * The age range this  set of qualified values applies to.
     * Some analytes vary greatly over age.
     */
    age?: Range;
    /**
     * Applicable gestational age range for the set of qualified values
     * The gestational age this  set of qualified values applies to.
     */
    gestationalAge?: Range;
    /**
     * Condition associated with the set of qualified values
     * Text based condition for which the the set of qualified values is valid.
     */
    condition?: string;
    /**
     * Extension for condition
     **/
    _condition?: Element;
    /**
     * The range for continuous or ordinal observations
     * The range of values defined for continuous or ordinal observations that match the criteria of this set of qualified values.
     */
    range?: Range;
    /**
     * Value set of valid coded values as part of this set of qualified values
     * The set of valid coded results for qualitative observations  that match the criteria of this set of qualified values.
     */
    validCodedValueSet?: canonical;
    /**
     * Extension for validCodedValueSet
     **/
    _validCodedValueSet?: Element;
    /**
     * Value set of normal coded values as part of this set of qualified values
     * The set of normal coded results for qualitative observations  that match the criteria of this set of qualified values.
     */
    normalCodedValueSet?: canonical;
    /**
     * Extension for normalCodedValueSet
     **/
    _normalCodedValueSet?: Element;
    /**
     * Value set of abnormal coded values as part of this set of qualified values
     * The set of abnormal coded results for qualitative observations  that match the criteria of this set of qualified values.
     */
    abnormalCodedValueSet?: canonical;
    /**
     * Extension for abnormalCodedValueSet
     **/
    _abnormalCodedValueSet?: Element;
    /**
     * Value set of critical coded values as part of this set of qualified values
     * The set of critical coded results for qualitative observations  that match the criteria of this set of qualified values.
     */
    criticalCodedValueSet?: canonical;
    /**
     * Extension for criticalCodedValueSet
     **/
    _criticalCodedValueSet?: Element;
    /**
     * male | female | other | unknown
     * The gender this  set of qualified values applies to.
     */
    gender?: ObservationDefinitionAdministrativeGender;
    /**
     * reference | critical | absolute
     * The category of range of values for continuous or ordinal observations that match the criteria of this set of qualified values.
     */
    rangeCategory?: ObservationDefinitionObservationRangeCategory;
}
/**
 * Component results
 * Some observations have multiple component observations, expressed as separate code value pairs.
 */
export interface ObservationDefinitionComponent extends BackboneElement {
    /**
     * Type of observation
     * Describes what will be observed.
     */
    code: CodeableConcept;
    /**
     * Unit for quantitative results
     * Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.
     */
    permittedUnit?: Coding[];
    /**
     * Set of qualified values for observation results
     * A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.
     */
    qualifiedValue?: ObservationDefinitionQualifiedValue[];
    /**
     * Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
     * The data types allowed for the value element of the instance of this component observations.
     */
    permittedDataType?: ObservationDefinitionObservationDataType[];
}
/**
 * Definition of an observation
 * Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
 * An instance of this resource informs the consumer of a health-related service (such as a lab diagnostic test or panel) about how the observations used or produced by this service will look like.
 */
export interface ObservationDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ObservationDefinition';
    /**
     * Logical canonical URL to reference this ObservationDefinition (globally unique)
     * An absolute URL that is used to identify this ObservationDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this ObservationDefinition is (or will be) published. The URL SHOULD include the major version of the ObservationDefinition. For more information see Technical and Business Versions.
     * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business identifier of the ObservationDefinition
     * Business identifiers assigned to this ObservationDefinition. by the performer and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
     * This is a business identifier, not a resource identifier. It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.
     */
    identifier?: Identifier;
    /**
     * Business version of the ObservationDefinition
     * The identifier that is used to identify this version of the ObservationDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the ObservationDefinition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
     * There may be multiple different instances of an observationDefinition that have the same identifier but different versions.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this ObservationDefinition (computer friendly)
     * A natural language name identifying the ObservationDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this ObservationDefinition (human friendly)
     * A short, descriptive, user-friendly title for the ObservationDefinition.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * If for testing purposes, not real usage
     * A flag to indicate that this ObservationDefinition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
     * Allows filtering of ObservationDefinition that are appropriate for use vs. not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date (and optionally time) when the ObservationDefinition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ObservationDefinition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the ObservationDefinition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The name of the individual or organization that published the ObservationDefinition
     * Helps establish the "authority/credibility" of the ObservationDefinition. May also allow for contact.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the ObservationDefinition
     * A free text natural language description of the ObservationDefinition from the consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Content intends to support these contexts
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate ObservationDefinition instances.
     * When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for this ObservationDefinition (if applicable)
     * A jurisdiction in which the ObservationDefinition is intended to be used.
     * It may be possible for the ObservationDefinition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this ObservationDefinition is defined
     * Explains why this ObservationDefinition is needed and why it has been designed as it has.
     * This element does not describe the usage of the ObservationDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this ObservationDefinition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * Copyright statement relating to the ObservationDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the ObservationDefinition.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When ObservationDefinition was approved by publisher
     * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The date may be more recent than the approval date because of minor changes / editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * Date on which the asset content was last reviewed by the publisher
     * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
     * If specified, this is usually after the approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * The effective date range for the ObservationDefinition
     * The period during which the ObservationDefinition content was or is planned to be effective.
     * The effective period for an ObservationDefinition determines when the content is applicable for usage and is independent of publication and review dates. For example, an observation definition intended to be used for the year 2021 might be published in 2020.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * Based on FHIR definition of another observation
     * The canonical URL pointing to another FHIR-defined ObservationDefinition that is adhered to in whole or in part by this definition.
     */
    derivedFromCanonical?: canonical[];
    /**
     * Extension for derivedFromCanonical
     **/
    _derivedFromCanonical?: Element[];
    /**
     * Based on external definition
     * The URL pointing to an externally-defined observation definition, guideline or other definition that is adhered to in whole or in part by this definition.
     */
    derivedFromUri?: uri[];
    /**
     * Extension for derivedFromUri
     **/
    _derivedFromUri?: Element[];
    /**
     * Type of subject for the defined observation
     * A code that describes the intended kind of subject of Observation instances conforming to this ObservationDefinition.
     * Examples: person, animal, device, air, surface ….
     */
    subject?: CodeableConcept[];
    /**
     * Desired kind of performer for such kind of observation
     * The type of individual/organization/device that is expected to act upon instances of this definition.
     */
    performerType?: CodeableConcept;
    /**
     * General type of observation
     * A code that classifies the general type of observation.
     * This element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used for one instance of ObservationDefinition. The level of granularity is defined by the category concepts in the value set.
     */
    category?: CodeableConcept[];
    /**
     * Type of observation
     * Describes what will be observed. Sometimes this is called the observation "name".
     */
    code: CodeableConcept;
    /**
     * Multiple results allowed for conforming observations
     * Multiple results allowed for observations conforming to this ObservationDefinition.
     * An example of observation allowing multiple results is "bacteria identified by culture". Conversely, the measurement of a potassium level allows a single result.
     */
    multipleResultsAllowed?: boolean;
    /**
     * Extension for multipleResultsAllowed
     **/
    _multipleResultsAllowed?: Element;
    /**
     * Body part to be observed
     * The site on the subject's body where the  observation is to be made.
     * Only used if the defined observation is to be made directly on a body part and if this body part is not implied by code found in ObservationDefinition.code. Not used for in vitro diagnostic observations.
Example: 14975008 |Forearm structure|.
     */
    bodySite?: CodeableConcept;
    /**
     * Method used to produce the observation
     * The method or technique used to perform the observation.
     * Only used if not implicit in observation code
Example: 702659008 |Automated count technique|.
     */
    method?: CodeableConcept;
    /**
     * Kind of specimen used by this type of observation
     * The kind of specimen that this type of observation is produced on.
     * Only used for in vitro observations. When multiple occurrences of specimen are present, they are to be combined with a logical AND: all specified specimens  are needed for the observation.
     */
    specimen?: Reference[];
    /**
     * Measurement device or model of device
     * The measurement model of device or actual device used to produce observations of this type.
     * When multiple occurrences of device are present, they are to be combined with a logical OR: at least one of the specified devices is used to produce the observation.
     */
    device?: Reference[];
    /**
     * The preferred name to be used when reporting the observation results
     * The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
     */
    preferredReportName?: string;
    /**
     * Extension for preferredReportName
     **/
    _preferredReportName?: Element;
    /**
     * Unit for quantitative results
     * Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.
     */
    permittedUnit?: Coding[];
    /**
     * Set of qualified values for observation results
     * A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.
     */
    qualifiedValue?: ObservationDefinitionQualifiedValue[];
    /**
     * Definitions of related resources belonging to this kind of observation group
     * This ObservationDefinition defines a group  observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
     */
    hasMember?: Reference[];
    /**
     * Component results
     * Some observations have multiple component observations, expressed as separate code value pairs.
     */
    component?: ObservationDefinitionComponent[];
    /**
     * draft | active | retired | unknown
     * The current state of the ObservationDefinition.
     * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ObservationDefinitionPublicationStatus;
    /**
     * Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
     * The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
     */
    permittedDataType?: ObservationDefinitionObservationDataType[];
}
/**
 * ValueSet details if this is coded
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
export interface OperationDefinitionParameterBinding extends BackboneElement {
    /**
     * Source of value set
     * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
     * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
     */
    valueSet: canonical;
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element;
    /**
     * required | extensible | preferred | example
     * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
     * For further discussion, see [Using Terminologies](terminologies.html).
     */
    strength: OperationDefinitionBindingStrength;
}
/**
 * References to this parameter
 * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
 * Resolution applies if the referenced parameter exists.
 */
export interface OperationDefinitionParameterReferencedFrom extends BackboneElement {
    /**
     * Referencing parameter
     * The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
     */
    source: string;
    /**
     * Extension for source
     **/
    _source?: Element;
    /**
     * Element id of reference
     * The id of the element in the referencing resource that is expected to resolve to this resource.
     */
    sourceId?: string;
    /**
     * Extension for sourceId
     **/
    _sourceId?: Element;
}
/**
 * Parameters for the operation/query
 * The parameters for the operation/query.
 * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
 */
export interface OperationDefinitionParameter extends BackboneElement {
    /**
     * Name in Parameters.parameter.name or in URL
     * The name of used to identify the parameter.
     * This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.
     */
    name: code;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Minimum Cardinality
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    min: integer;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Maximum Cardinality (a number or *)
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    max: string;
    /**
     * Extension for max
     **/
    _max?: Element;
    /**
     * Description of meaning/use
     * Describes the meaning or use of this parameter.
     */
    documentation?: markdown;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * What type this parameter has
     * The type for this parameter.
     * if there is no stated parameter, then the parameter is a multi-part parameter type and must have at least one part defined.
     */
    type?: code;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Allowed sub-type this parameter can have (if type is abstract)
     * Support for polymorphic types. If the parameter type is abstract, this element lists allowed sub-types for the parameter.
     * In previous versions of FHIR, there was an extension for this: http://hl7.org/fhir/StructureDefinition/operationdefinition-allowed-type
     */
    allowedType?: code[];
    /**
     * Extension for allowedType
     **/
    _allowedType?: Element[];
    /**
     * If type is Reference | canonical, allowed targets. If type is 'Resource', then this constrains the allowed resource types
     * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
     * Often, these profiles are the base definitions from the spec (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
     */
    targetProfile?: canonical[];
    /**
     * Extension for targetProfile
     **/
    _targetProfile?: Element[];
    /**
     * ValueSet details if this is coded
     * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
     */
    binding?: OperationDefinitionParameterBinding;
    /**
     * References to this parameter
     * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
     * Resolution applies if the referenced parameter exists.
     */
    referencedFrom?: OperationDefinitionParameterReferencedFrom[];
    /**
     * Parts of a nested Parameter
     * The parts of a nested Parameter.
     * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
     */
    part?: OperationDefinitionParameter[];
    /**
     * in | out
     * Whether this is an input or an output parameter.
     * If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
     */
    use: OperationDefinitionOperationParameterUse;
    /**
     * instance | type | system
     * If present, indicates that the parameter applies when the operation is being invoked at the specified level.
     */
    scope?: OperationDefinitionOperationParameterScope[];
    /**
     * number | date | string | token | reference | composite | quantity | uri | special
     * How the parameter is understood if/when it used as search parameter. This is only used if the parameter is a string.
     * Parameters that are search parameter usually - but not always - are also defined for use with general searches, and function in the operation to filter the set of resources in scope for the operation just like the do when searching. The searchType describes how the server processes the value. For an example, see the [Evaluate Measure Operation](measure-operation-evaluate-measure.html)
     */
    searchType?: OperationDefinitionSearchParamType;
}
/**
 * Define overloaded variants for when  generating code
 * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export interface OperationDefinitionOverload extends BackboneElement {
    /**
     * Name of parameter to include in overload
     * Name of parameter to include in overload.
     */
    parameterName?: string[];
    /**
     * Extension for parameterName
     **/
    _parameterName?: Element[];
    /**
     * Comments to go on overload
     * Comments to go on overload.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
}
/**
 * Definition of an operation or a named query
 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
 */
export interface OperationDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'OperationDefinition';
    /**
     * Canonical identifier for this operation definition, represented as an absolute URI (globally unique)
     * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the implementation guide (business identifier)
     * A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the operation definition
     * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different operation definitions that have the same url but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the operation definition with the format. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this operation definition (computer friendly)
     * A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type no-whitespace name to ensure that it is machine-processing friendly.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this operation definition (human friendly)
     * A short, descriptive, user-friendly title for the operation definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
     * Allows filtering of operation definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the operation definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the operation definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the operation definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the operation definition is the organization or individual primarily responsible for the maintenance and upkeep of the operation definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the operation definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the operation definition
     * A free text natural language description of the operation definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the operation definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the operation definition is presumed to be the predominant language in the place the operation definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition.
     * When multiple useContexts are specified, there is no expectation that all or even any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for operation definition (if applicable)
     * A legal or geographic region in which the operation definition is intended to be used.
     * It may be possible for the operation definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this operation definition is defined
     * Explanation of why this operation definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the operation definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this operation definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the operation definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the operation definition.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Whether content is changed by the operation
     * Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.
     * What http methods can be used for the operation depends on the .affectsState value and whether the input parameters are primitive or complex:

1. Servers SHALL support POST method for all operations.

2. Servers SHALL support the GET method when the operation has affectsState = false and all required parameters for the operation are primitive.
     */
    affectsState?: boolean;
    /**
     * Extension for affectsState
     **/
    _affectsState?: Element;
    /**
     * Recommended name for operation in search url
     * The label that is recommended to be used in the URL for this operation. In some cases, servers may need to use a different CapabilityStatement operation.name to differentiate between multiple SearchParameters that happen to have the same code.
     * For maximum compatibility, use only lowercase ASCII characters. Note that HL7 will never define multiple operations with the same code. See [Naming Rules & Guidelines](https://confluence.hl7.org/display/FHIR/Guide+to+Designing+Resources#GuidetoDesigningResources-NamingRules&Guidelines) for the internal HL7 rules around codes, which are useful additional advice for all implementers
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Additional information about use
     * Additional information about how to use this operation or named query.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * Marks this as a profile of the base
     * Indicates that this operation definition is a constraining profile on the base.
     * A constrained profile can make optional parameters required or not used, introduce new parameters (required or optional), and clarify documentation.
     */
    base?: canonical;
    /**
     * Extension for base
     **/
    _base?: Element;
    /**
     * Types this operation applies to
     * The types on which this operation can be executed.
     * If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.
     */
    resource?: code[];
    /**
     * Extension for resource
     **/
    _resource?: Element[];
    /**
     * Invoke at the system level?
     * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
     */
    system: boolean;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * Invoke at the type level?
     * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
     */
    type: boolean;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Invoke on an instance?
     * Indicates whether this operation can be invoked on a particular instance of one of the given types.
     */
    instance: boolean;
    /**
     * Extension for instance
     **/
    _instance?: Element;
    /**
     * Validation information for in parameters
     * Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.
     * If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
     */
    inputProfile?: canonical;
    /**
     * Extension for inputProfile
     **/
    _inputProfile?: Element;
    /**
     * Validation information for out parameters
     * Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.
     * If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
     */
    outputProfile?: canonical;
    /**
     * Extension for outputProfile
     **/
    _outputProfile?: Element;
    /**
     * Parameters for the operation/query
     * The parameters for the operation/query.
     * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
     */
    parameter?: OperationDefinitionParameter[];
    /**
     * Define overloaded variants for when  generating code
     * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
     * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
     */
    overload?: OperationDefinitionOverload[];
    /**
     * draft | active | retired | unknown
     * The current state of this operation definition.
     * A nominal state-transition diagram can be found in the] documentation

Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
     */
    status: OperationDefinitionPublicationStatus;
    /**
     * operation | query
     * Whether this is an operation or a named query.
     * Named queries are invoked differently, and have different capabilities.
     */
    kind: OperationDefinitionOperationKind;
}
/**
 * A single issue associated with the action
 * An error, warning, or information message that results from a system action.
 */
export interface OperationOutcomeIssue extends BackboneElement {
    /**
     * Error or warning code
     * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
     * Code values should align with the severity.  For example, a code of ```forbidden``` generally wouldn't make sense with a severity of ```information``` or ```warning```.  Similarly, a code of ```informational``` would generally not make sense with a severity of ```fatal``` or ```error```.  However, there are no strict rules about what severities must be used with which codes.  For example, ```code-invalid``` might be a ```warning``` or ```error```, depending on the context
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Additional details about the error
     * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
     * A human readable description of the error issue SHOULD be placed in details.text.
     */
    details?: CodeableConcept;
    /**
     * Additional diagnostic information about the issue
     * Additional diagnostic information about the issue.
     * This may be a description of how a value is erroneous, a stack dump to help trace the issue or other troubleshooting information.
     */
    diagnostics?: string;
    /**
     * Extension for diagnostics
     **/
    _diagnostics?: Element;
    /**
     * Deprecated: Path of element(s) related to issue
     * This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse.

For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
     * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  This element is deprecated, and is being replaced by expression.
     */
    location?: string[];
    /**
     * Extension for location
     **/
    _location?: Element[];
    /**
     * FHIRPath of element(s) related to issue
     * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
     * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
     */
    expression?: string[];
    /**
     * Extension for expression
     **/
    _expression?: Element[];
    /**
     * fatal | error | warning | information | success
     * Indicates whether the issue indicates a variation from successful processing.
     */
    severity: OperationOutcomeIssueSeverity;
}
/**
 * Information about the success/failure of an action
 * A collection of error, warning, or information messages that result from a system action.
 * Can result from the failure of a REST call or be part of the response message returned from a request message.
 */
export interface OperationOutcome extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'OperationOutcome';
    /**
     * A single issue associated with the action
     * An error, warning, or information message that results from a system action.
     */
    issue: OperationOutcomeIssue[];
}
/**
 * Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care
 * The official certifications, accreditations, training, designations and licenses that authorize and/or otherwise endorse the provision of care by the organization.

For example, an approval to provide a type of services issued by a certifying body (such as the US Joint Commission) to an organization.
 */
export interface OrganizationQualification extends BackboneElement {
    /**
     * An identifier for this qualification for the organization
     * An identifier allocated to this qualification for this organization.
     */
    identifier?: Identifier[];
    /**
     * Coded representation of the qualification
     * Coded representation of the qualification.
     */
    code: CodeableConcept;
    /**
     * Period during which the qualification is valid
     * Period during which the qualification is valid.
     */
    period?: Period;
    /**
     * Organization that regulates and issues the qualification
     * Organization that regulates and issues the qualification.
     */
    issuer?: Reference;
}
/**
 * A grouping of people or organizations with a common purpose
 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
 */
export interface Organization extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Organization';
    /**
     * Identifies this organization  across multiple systems
     * Identifier for the organization that is used to identify the organization across multiple disparate systems.
     */
    identifier?: Identifier[];
    /**
     * Whether the organization's record is still in active use
     * Whether the organization's record is still in active use.
     * This active flag is not intended to be used to mark an organization as temporarily closed or under construction. Instead the Location(s) within the Organization should have the suspended status. If further details of the reason for the suspension are required, then an extension on this element should be used.

This element is labeled as a modifier because it may be used to mark that the resource was created in error.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * Kind of organization
     * The kind(s) of organization that this is.
     * Organizations can be corporations, wards, sections, clinical teams, government departments, etc. Note that code is generally a classifier of the type of organization; in many applications, codes are used to identity a particular organization (say, ward) as opposed to another of the same type - these are identifiers, not codes

When considering if multiple types are appropriate, you should evaluate if child organizations would be a more appropriate use of the concept, as different types likely are in different sub-areas of the organization. This is most likely to be used where type values have orthogonal values, such as a religious, academic and medical center.

We expect that some jurisdictions will profile this optionality to be a single cardinality.
     */
    type?: CodeableConcept[];
    /**
     * Name used for the organization
     * A name associated with the organization.
     * If the name of an organization changes, consider putting the old name in the alias column so that it can still be located through searches.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * A list of alternate names that the organization is known as, or was known as in the past
     * A list of alternate names that the organization is known as, or was known as in the past.
     * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the organization.
     */
    alias?: string[];
    /**
     * Extension for alias
     **/
    _alias?: Element[];
    /**
     * Additional details about the Organization that could be displayed as further information to identify the Organization beyond its name
     * Description of the organization, which helps provide additional general context on the organization to ensure that the correct organization is selected.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Official contact details for the Organization
     * The contact details of communication devices available relevant to the specific Organization. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     * The address/telecom use code 'home' are not to be used. Note that these contacts are not the contact details of people who provide the service (that would be through PractitionerRole), these are official contacts for the Organization itself for specific purposes. E.g. Mailing Addresses, Billing Addresses, Contact numbers for Booking or Billing Enquiries, general web address, web address for online bookings etc.
     */
    contact?: ExtendedContactDetail[];
    /**
     * The organization of which this organization forms a part
     * The organization of which this organization forms a part.
     */
    partOf?: Reference;
    /**
     * Technical endpoints providing access to services operated for the organization
     * Technical endpoints providing access to services operated for the organization.
     */
    endpoint?: Reference[];
    /**
     * Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care
     * The official certifications, accreditations, training, designations and licenses that authorize and/or otherwise endorse the provision of care by the organization.

For example, an approval to provide a type of services issued by a certifying body (such as the US Joint Commission) to an organization.
     */
    qualification?: OrganizationQualification[];
}
/**
 * Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship
 * Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship.
 */
export interface OrganizationAffiliation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'OrganizationAffiliation';
    /**
     * Business identifiers that are specific to this role
     * Business identifiers that are specific to this role.
     */
    identifier?: Identifier[];
    /**
     * Whether this organization affiliation record is in active use
     * Whether this organization affiliation record is in active use.
     * If this value is false, you may refer to the period to see when the role was in active use. If there is no period specified, no inference can be made about when it was active.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * The period during which the participatingOrganization is affiliated with the primary organization
     * The period during which the participatingOrganization is affiliated with the primary organization.
     */
    period?: Period;
    /**
     * Organization where the role is available
     * Organization where the role is available (primary organization/has members).
     * For example, a Spotless Cleaning Services (participatingOrganization) is a supplier (code) to General Hospital (organization).   Similarly, General Hospital (participatingOrganization) is a member (code) of Eastern HIE (organization).  If there are two organizations that do not have a directional relationship, there would normally be a third organization that represents the joint partnership, and the two organizations would have a relationship to that joint Organization via two OrganizationAffiliations.
     */
    organization?: Reference;
    /**
     * Organization that provides/performs the role (e.g. providing services or is a member of)
     * The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
     * See comments for OrganizationAffiliation.organization above.
     */
    participatingOrganization?: Reference;
    /**
     * The network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined)
     * The network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
     * e.g. Commonly used for Health Insurance provider networks.
     */
    network?: Reference[];
    /**
     * Definition of the role the participatingOrganization plays
     * Definition of the role the participatingOrganization plays in the association.
     */
    code?: CodeableConcept[];
    /**
     * Specific specialty of the participatingOrganization in the context of the role
     * Specific specialty of the participatingOrganization in the context of the role.
     */
    specialty?: CodeableConcept[];
    /**
     * The location(s) at which the role occurs
     * The location(s) at which the role occurs.
     */
    location?: Reference[];
    /**
     * Healthcare services provided through the role
     * Healthcare services provided through the role.
     */
    healthcareService?: Reference[];
    /**
     * Official contact details at the participatingOrganization relevant to this Affiliation
     * The contact details of communication devices available at the participatingOrganization relevant to this Affiliation.
     */
    contact?: ExtendedContactDetail[];
    /**
     * Technical endpoints providing access to services operated for this role
     * Technical endpoints providing access to services operated for this role.
     */
    endpoint?: Reference[];
}
/**
 * The legal status of supply of the packaged item as classified by the regulator
 * The legal status of supply of the packaged item as classified by the regulator.
 */
export interface PackagedProductDefinitionLegalStatusOfSupply extends BackboneElement {
    /**
     * The actual status of supply. In what situation this package type may be supplied for use
     * The actual status of supply. Conveys in what situation this package type may be supplied for use.
     */
    code?: CodeableConcept;
    /**
     * The place where the legal status of supply applies
     * The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.
     */
    jurisdiction?: CodeableConcept;
}
/**
 * General characteristics of this item
 * General characteristics of this item.
 */
export interface PackagedProductDefinitionPackagingProperty extends BackboneElement {
    /**
     * A code expressing the type of characteristic
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * A value for the characteristic
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
}
/**
 * The item(s) within the packaging
 * The item(s) within the packaging.
 */
export interface PackagedProductDefinitionPackagingContainedItem extends BackboneElement {
    /**
     * The actual item(s) of medication, as manufactured, or a device, or other medically related item (food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package
     * The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).
     */
    item: CodeableReference;
    /**
     * The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition)
     * The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).
     */
    amount?: Quantity;
}
/**
 * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap
 * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
 */
export interface PackagedProductDefinitionPackaging extends BackboneElement {
    /**
     * An identifier that is specific to this particular part of the packaging. Including possibly a Data Carrier Identifier
     * A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).
     */
    identifier?: Identifier[];
    /**
     * The physical type of the container of the items
     * The physical type of the container of the items.
     */
    type?: CodeableConcept;
    /**
     * Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial)
     * Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.
     */
    componentPart?: boolean;
    /**
     * Extension for componentPart
     **/
    _componentPart?: Element;
    /**
     * The quantity of this level of packaging in the package that contains it (with the outermost level being 1)
     * The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.
     */
    quantity?: integer;
    /**
     * Extension for quantity
     **/
    _quantity?: Element;
    /**
     * Material type of the package item
     * Material type of the package item.
     */
    material?: CodeableConcept[];
    /**
     * A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material
     * A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).
     */
    alternateMaterial?: CodeableConcept[];
    /**
     * Shelf Life and storage information
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * Manufacturer of this packaging item (multiple means these are all potential manufacturers)
     * Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.
     */
    manufacturer?: Reference[];
    /**
     * General characteristics of this item
     * General characteristics of this item.
     */
    property?: PackagedProductDefinitionPackagingProperty[];
    /**
     * The item(s) within the packaging
     * The item(s) within the packaging.
     */
    containedItem?: PackagedProductDefinitionPackagingContainedItem[];
    /**
     * Allows containers (and parts of containers) within containers, still as a part of single packaged product
     * Allows containers (and parts of containers) within containers, still as a part of a single packaged product. See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition).
     */
    packaging?: PackagedProductDefinitionPackaging[];
}
/**
 * A medically related item or items, in a container or package
 * A medically related item or items, in a container or package.
 */
export interface PackagedProductDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'PackagedProductDefinition';
    /**
     * A unique identifier for this package as whole - not for the content of the package
     * A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.
     */
    identifier?: Identifier[];
    /**
     * A name for this package. Typically as listed in a drug formulary, catalogue, inventory etc
     * A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * A high level category e.g. medicinal product, raw material, shipping container etc
     * A high level category e.g. medicinal product, raw material, shipping/transport container, etc.
     */
    type?: CodeableConcept;
    /**
     * The product that this is a pack for
     * The product this package model relates to, not the contents of the package (for which see package.containedItem).
     */
    packageFor?: Reference[];
    /**
     * The status within the lifecycle of this item. High level - not intended to duplicate details elsewhere e.g. legal status, or authorization/marketing status
     * The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.
     */
    status?: CodeableConcept;
    /**
     * The date at which the given status became applicable
     * The date at which the given status became applicable.
     */
    statusDate?: dateTime;
    /**
     * Extension for statusDate
     **/
    _statusDate?: Element;
    /**
     * A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. See also packaging.containedItem.amount (especially the long definition)
     * A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.
     */
    containedItemQuantity?: Quantity[];
    /**
     * Textual description. Note that this is not the name of the package or product
     * Textual description. Note that this is not the name of the package or product.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The legal status of supply of the packaged item as classified by the regulator
     * The legal status of supply of the packaged item as classified by the regulator.
     */
    legalStatusOfSupply?: PackagedProductDefinitionLegalStatusOfSupply[];
    /**
     * Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated
     * Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
     */
    marketingStatus?: MarketingStatus[];
    /**
     * Identifies if the drug product is supplied with another item such as a diluent or adjuvant
     * Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.
     */
    copackagedIndicator?: boolean;
    /**
     * Extension for copackagedIndicator
     **/
    _copackagedIndicator?: Element;
    /**
     * Manufacturer of this package type (multiple means these are all possible manufacturers)
     * Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.
     */
    manufacturer?: Reference[];
    /**
     * Additional information or supporting documentation about the packaged product
     * Additional information or supporting documentation about the packaged product.
     */
    attachedDocument?: Reference[];
    /**
     * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap
     * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
     */
    packaging?: PackagedProductDefinitionPackaging;
    /**
     * Allows the key features to be recorded, such as "hospital pack", "nurse prescribable"
     * Allows the key features to be recorded, such as "hospital pack", "nurse prescribable", "calendar pack".
     */
    characteristic?: PackagedProductDefinitionPackagingProperty[];
}
/**
 * Operation Parameter
 * A parameter passed to or received from the operation.
 */
export interface ParametersParameter extends BackboneElement {
    /**
     * Name from the definition
     * The name of the parameter (reference to the operation definition).
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueAddress?: Address;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueAge?: Age;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueAnnotation?: Annotation;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueAttachment?: Attachment;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueCoding?: Coding;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueCount?: Count;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDistance?: Distance;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDuration?: Duration;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueHumanName?: HumanName;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueIdentifier?: Identifier;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueMoney?: Money;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valuePeriod?: Period;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueQuantity?: Quantity;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueRange?: Range;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueRatio?: Ratio;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueRatioRange?: RatioRange;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueReference?: Reference;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueSampledData?: SampledData;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueSignature?: Signature;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueTiming?: Timing;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueExpression?: Expression;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueUsageContext?: UsageContext;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueAvailability?: Availability;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueDosage?: Dosage;
    /**
     * If parameter is a data type
     * Conveys the content if the parameter is a data type.
     */
    valueMeta?: Meta;
    /**
     * If parameter is a whole resource
     * Conveys the content if the parameter is a whole resource.
     * When resolving references in resources, the operation definition may specify how references may be resolved between parameters. If a reference cannot be resolved between the parameters, the application should fall back to its general resource resolution methods.
     */
    resource?: Resource;
    /**
     * Named part of a multi-part parameter
     * A named part of a multi-part parameter.
     */
    part?: ParametersParameter[];
}
/**
 * Operation Request or Response
 * This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources.
 * The parameters that may be used are defined by the OperationDefinition resource.
 */
export interface Parameters extends Resource {
    /**
     * Operation Parameter
     * A parameter passed to or received from the operation.
     */
    parameter?: ParametersParameter[];
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 * A contact party (e.g. guardian, partner, friend) for the patient.
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export interface PatientContact extends BackboneElement {
    /**
     * The kind of relationship
     * The nature of the relationship between the patient and the contact person.
     */
    relationship?: CodeableConcept[];
    /**
     * A name associated with the contact person
     * A name associated with the contact person.
     */
    name?: HumanName;
    /**
     * A contact detail for the person
     * A contact detail for the person, e.g. a telephone number or an email address.
     * Contact may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
     */
    telecom?: ContactPoint[];
    /**
     * Address for the contact person
     * Address for the contact person.
     */
    address?: Address;
    /**
     * Organization that is associated with the contact
     * Organization on behalf of which the contact is acting or for which the contact is working.
     */
    organization?: Reference;
    /**
     * The period during which this contact person or organization is valid to be contacted relating to this patient
     * The period during which this contact person or organization is valid to be contacted relating to this patient.
     */
    period?: Period;
    /**
     * male | female | other | unknown
     * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
     */
    gender?: PatientAdministrativeGender;
}
/**
 * A language which may be used to communicate with the patient about his or her health
 * A language which may be used to communicate with the patient about his or her health.
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export interface PatientCommunication extends BackboneElement {
    /**
     * The language which can be used to communicate with the patient about his or her health
     * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
     * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
     */
    language: CodeableConcept;
    /**
     * Language preference indicator
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     * This language is specifically identified for communicating healthcare information.
     */
    preferred?: boolean;
    /**
     * Extension for preferred
     **/
    _preferred?: Element;
}
/**
 * Link to a Patient or RelatedPerson resource that concerns the same actual individual
 * Link to a Patient or RelatedPerson resource that concerns the same actual individual.
 * There is no assumption that linked patient records have mutual links.
 */
export interface PatientLink extends BackboneElement {
    /**
     * The other patient or related person resource that the link refers to
     * Link to a Patient or RelatedPerson resource that concerns the same actual individual.
     * Referencing a RelatedPerson here removes the need to use a Person record to associate a Patient and RelatedPerson as the same individual.
     */
    other: Reference;
    /**
     * replaced-by | replaces | refer | seealso
     * The type of link between this patient resource and another patient resource.
     */
    type: PatientLinkType;
}
/**
 * Information about an individual or animal receiving health care services
 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
 */
export interface Patient extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Patient';
    /**
     * An identifier for this patient
     * An identifier for this patient.
     */
    identifier?: Identifier[];
    /**
     * Whether this patient's record is in active use
     * Whether this patient record is in active use.
Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.

It is often used to filter patient lists to exclude inactive patients

Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
     * If a record is inactive, and linked to an active record, then future patient/record updates should occur on the other patient.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * A name associated with the patient
     * A name associated with the individual.
     * A patient may have multiple names with different uses or applicable periods. For animals, the name is a "HumanName" in the sense that is assigned and used by humans and has the same patterns. Animal names may be communicated as given names, and optionally may include a family name.
     */
    name?: HumanName[];
    /**
     * A contact detail for the individual
     * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
     * A Patient may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification. The address might not go directly to the individual, but may reach another party that is able to proxy for the patient (i.e. home phone, or pet owner's phone).
     */
    telecom?: ContactPoint[];
    /**
     * The date of birth for the individual
     * The date of birth for the individual.
     * Partial dates are allowed if the specific date of birth is unknown. There is a standard extension "patient-birthTime" available that should be used where Time is required (such as in maternity/infant care systems).
     */
    birthDate?: date;
    /**
     * Extension for birthDate
     **/
    _birthDate?: Element;
    /**
     * Indicates if the individual is deceased or not
     * Indicates if the individual is deceased or not.
     * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
     */
    deceasedBoolean?: boolean;
    /**
     * Extension for deceasedBoolean
     **/
    _deceasedBoolean?: Element;
    /**
     * Indicates if the individual is deceased or not
     * Indicates if the individual is deceased or not.
     * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
     */
    deceasedDateTime?: dateTime;
    /**
     * Extension for deceasedDateTime
     **/
    _deceasedDateTime?: Element;
    /**
     * An address for the individual
     * An address for the individual.
     * Patient may have multiple addresses with different uses or applicable periods.
     */
    address?: Address[];
    /**
     * Marital (civil) status of a patient
     * This field contains a patient's most recent marital (civil) status.
     */
    maritalStatus?: CodeableConcept;
    /**
     * Whether patient is part of a multiple birth
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     * Where the valueInteger is provided, the number is the birth number in the sequence. E.g. The middle birth in triplets would be valueInteger=2 and the third born would have valueInteger=3 If a boolean value was provided for this triplets example, then all 3 patient records would have valueBoolean=true (the ordering is not indicated).
     */
    multipleBirthBoolean?: boolean;
    /**
     * Extension for multipleBirthBoolean
     **/
    _multipleBirthBoolean?: Element;
    /**
     * Whether patient is part of a multiple birth
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     * Where the valueInteger is provided, the number is the birth number in the sequence. E.g. The middle birth in triplets would be valueInteger=2 and the third born would have valueInteger=3 If a boolean value was provided for this triplets example, then all 3 patient records would have valueBoolean=true (the ordering is not indicated).
     */
    multipleBirthInteger?: integer;
    /**
     * Extension for multipleBirthInteger
     **/
    _multipleBirthInteger?: Element;
    /**
     * Image of the patient
     * Image of the patient.
     * Guidelines:
* Use id photos, not clinical photos.
* Limit dimensions to thumbnail.
* Keep byte count low to ease resource updates.
     */
    photo?: Attachment[];
    /**
     * A contact party (e.g. guardian, partner, friend) for the patient
     * A contact party (e.g. guardian, partner, friend) for the patient.
     * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
     */
    contact?: PatientContact[];
    /**
     * A language which may be used to communicate with the patient about his or her health
     * A language which may be used to communicate with the patient about his or her health.
     * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
     */
    communication?: PatientCommunication[];
    /**
     * Patient's nominated primary care provider
     * Patient's nominated care provider.
     * This may be the primary care provider (in a GP context), or it may be a patient nominated care manager in a community/disability setting, or even organization that will provide people to perform the care provider roles.  It is not to be used to record Care Teams, these should be in a CareTeam resource that may be linked to the CarePlan or EpisodeOfCare resources.
Multiple GPs may be recorded against the patient for various reasons, such as a student that has his home GP listed along with the GP at university during the school semesters, or a "fly-in/fly-out" worker that has the onsite GP also included with his home GP to remain aware of medical issues.

Jurisdictions may decide that they can profile this down to 1 if desired, or 1 per type.
     */
    generalPractitioner?: Reference[];
    /**
     * Organization that is the custodian of the patient record
     * Organization that is the custodian of the patient record.
     * There is only one managing organization for a specific patient record. Other organizations will have their own Patient record, and may use the Link property to join the records together (or a Person resource which can include confidence ratings for the association).
     */
    managingOrganization?: Reference;
    /**
     * Link to a Patient or RelatedPerson resource that concerns the same actual individual
     * Link to a Patient or RelatedPerson resource that concerns the same actual individual.
     * There is no assumption that linked patient records have mutual links.
     */
    link?: PatientLink[];
    /**
     * male | female | other | unknown
     * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
     * The gender might not match the biological sex as determined by genetics or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than male and female, though the vast majority of systems and contexts only support male and female.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific sex or gender aspect of interest (anatomical, chromosomal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosomal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overridable error, not a "hard" error.  See the Patient Gender and Sex section for additional information about communicating patient gender and sex.
     */
    gender?: PatientAdministrativeGender;
}
/**
 * PaymentNotice request
 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
 */
export interface PaymentNotice extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'PaymentNotice';
    /**
     * Business Identifier for the payment notice
     * A unique identifier assigned to this payment notice.
     */
    identifier?: Identifier[];
    /**
     * Request reference
     * Reference of resource for which payment is being made.
     */
    request?: Reference;
    /**
     * Response reference
     * Reference of response to resource for which payment is being made.
     */
    response?: Reference;
    /**
     * Creation date
     * The date when this resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Responsible practitioner
     * The party who reports the payment notice.
     */
    reporter?: Reference;
    /**
     * Payment reference
     * A reference to the payment which is the subject of this notice.
     */
    payment?: Reference;
    /**
     * Payment or clearing date
     * The date when the above payment action occurred.
     */
    paymentDate?: date;
    /**
     * Extension for paymentDate
     **/
    _paymentDate?: Element;
    /**
     * Party being paid
     * The party who will receive or has received payment that is the subject of this notification.
     */
    payee?: Reference;
    /**
     * Party being notified
     * The party who is notified of the payment status.
     */
    recipient: Reference;
    /**
     * Monetary amount of the payment
     * The amount sent to the payee.
     */
    amount: Money;
    /**
     * Issued or cleared Status of the payment
     * A code indicating whether payment has been sent or cleared.
     * Typically paid: payment sent, cleared: payment received.
     */
    paymentStatus?: CodeableConcept;
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: PaymentNoticeStatus;
}
/**
 * Settlement particulars
 * Distribution of the payment amount for a previously acknowledged payable.
 */
export interface PaymentReconciliationAllocation extends BackboneElement {
    /**
     * Business identifier of the payment detail
     * Unique identifier for the current payment item for the referenced payable.
     */
    identifier?: Identifier;
    /**
     * Business identifier of the prior payment detail
     * Unique identifier for the prior payment item for the referenced payable.
     */
    predecessor?: Identifier;
    /**
     * Subject of the payment
     * Specific resource to which the payment/adjustment/advance applies.
     */
    target?: Reference;
    /**
     * Sub-element of the subject
     *  Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred.
     */
    targetItemString?: string;
    /**
     * Extension for targetItemString
     **/
    _targetItemString?: Element;
    /**
     * Sub-element of the subject
     *  Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred.
     */
    targetItemIdentifier?: Identifier;
    /**
     * Sub-element of the subject
     *  Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred.
     */
    targetItemPositiveInt?: positiveInt;
    /**
     * Extension for targetItemPositiveInt
     **/
    _targetItemPositiveInt?: Element;
    /**
     * Applied-to encounter
     * The Encounter to which this payment applies, may be completed by the receiver, used for search.
     */
    encounter?: Reference;
    /**
     * Applied-to account
     * The Account to which this payment applies, may be completed by the receiver, used for search.
     */
    account?: Reference;
    /**
     * Category of payment
     * Code to indicate the nature of the payment.
     * For example: payment, adjustment, funds advance, etc.
     */
    type?: CodeableConcept;
    /**
     * Submitter of the request
     * The party which submitted the claim or financial transaction.
     */
    submitter?: Reference;
    /**
     * Response committing to a payment
     * A resource, such as a ClaimResponse, which contains a commitment to payment.
     */
    response?: Reference;
    /**
     * Date of commitment to pay
     * The date from the response resource containing a commitment to pay.
     */
    date?: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Contact for the response
     * A reference to the individual who is responsible for inquiries regarding the response and its payment.
     */
    responsible?: Reference;
    /**
     * Recipient of the payment
     * The party which is receiving the payment.
     */
    payee?: Reference;
    /**
     * Amount allocated to this payable
     * The monetary amount allocated from the total payment to the payable.
     */
    amount?: Money;
}
/**
 * Note concerning processing
 * A note that describes or explains the processing in a human readable form.
 */
export interface PaymentReconciliationProcessNote extends BackboneElement {
    /**
     * Note explanatory text
     * The explanation or description associated with the processing.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * display | print | printoper
     * The business purpose of the note text.
     */
    type?: PaymentReconciliationNoteType;
}
/**
 * PaymentReconciliation resource
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export interface PaymentReconciliation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'PaymentReconciliation';
    /**
     * Business Identifier for a payment reconciliation
     * A unique identifier assigned to this payment reconciliation.
     */
    identifier?: Identifier[];
    /**
     * Category of payment
     * Code to indicate the nature of the payment such as payment, adjustment.
     */
    type: CodeableConcept;
    /**
     * Workflow originating payment
     * The workflow or activity which gave rise to or during which the payment ocurred such as a kiosk, deposit on account, periodic payment etc.
     */
    kind?: CodeableConcept;
    /**
     * Period covered
     * The period of time for which payments have been gathered into this bulk payment for settlement.
     */
    period?: Period;
    /**
     * Creation date
     * The date when the resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Who entered the payment
     * Payment enterer if not the actual payment issuer.
     */
    enterer?: Reference;
    /**
     * Nature of the source
     * The type of the source such as patient or insurance.
     */
    issuerType?: CodeableConcept;
    /**
     * Party generating payment
     * The party who generated the payment.
     * This party is also responsible for the reconciliation.
     */
    paymentIssuer?: Reference;
    /**
     * Reference to requesting resource
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * Responsible practitioner
     * The practitioner who is responsible for the services rendered to the patient.
     */
    requestor?: Reference;
    /**
     * Disposition message
     * A human readable description of the status of the request for the reconciliation.
     */
    disposition?: string;
    /**
     * Extension for disposition
     **/
    _disposition?: Element;
    /**
     * When payment issued
     * The date of payment as indicated on the financial instrument.
     */
    date: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Where payment collected
     * The location of the site or device for electronic transfers or physical location for cash payments.
     */
    location?: Reference;
    /**
     * Payment instrument
     * The means of payment such as check, card cash, or electronic funds transfer.
     */
    method?: CodeableConcept;
    /**
     * Type of card
     * The card brand such as debit, Visa, Amex etc. used if a card is the method of payment.
     */
    cardBrand?: string;
    /**
     * Extension for cardBrand
     **/
    _cardBrand?: Element;
    /**
     * Digits for verification
     * A portion of the account number, often the last 4 digits, used for verification not charging purposes.
     */
    accountNumber?: string;
    /**
     * Extension for accountNumber
     **/
    _accountNumber?: Element;
    /**
     * Expiration year-month
     * The year and month (YYYY-MM) when the instrument, typically card, expires.
     */
    expirationDate?: date;
    /**
     * Extension for expirationDate
     **/
    _expirationDate?: Element;
    /**
     * Processor name
     * The name of the card processor, etf processor, bank for checks.
     */
    processor?: string;
    /**
     * Extension for processor
     **/
    _processor?: Element;
    /**
     * Check number or payment reference
     * The check number, eft reference, car processor reference.
     */
    referenceNumber?: string;
    /**
     * Extension for referenceNumber
     **/
    _referenceNumber?: Element;
    /**
     * Authorization number
     * An alphanumeric issued by the processor to confirm the successful issuance of payment.
     */
    authorization?: string;
    /**
     * Extension for authorization
     **/
    _authorization?: Element;
    /**
     * Amount offered by the issuer
     * The amount offered by the issuer, typically applies to cash when the issuer provides an amount in bank note denominations equal to or excess of the amount actually being paid.
     */
    tenderedAmount?: Money;
    /**
     * Amount returned by the receiver
     * The amount returned by the receiver which is excess to the amount payable, often referred to as 'change'.
     */
    returnedAmount?: Money;
    /**
     * Total amount of Payment
     * Total payment amount as indicated on the financial instrument.
     */
    amount: Money;
    /**
     * Business identifier for the payment
     * Issuer's unique identifier for the payment instrument.
     * For example: EFT number or check number.
     */
    paymentIdentifier?: Identifier;
    /**
     * Settlement particulars
     * Distribution of the payment amount for a previously acknowledged payable.
     */
    allocation?: PaymentReconciliationAllocation[];
    /**
     * Printed form identifier
     * A code for the form to be used for printing the content.
     * May be needed to identify specific jurisdictional forms.
     */
    formCode?: CodeableConcept;
    /**
     * Note concerning processing
     * A note that describes or explains the processing in a human readable form.
     */
    processNote?: PaymentReconciliationProcessNote[];
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: PaymentReconciliationStatus;
    /**
     * queued | complete | error | partial
     * The outcome of a request for a reconciliation.
     * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
     */
    outcome?: PaymentReconciliationPaymentOutcome;
}
/**
 * The asserted justification for using the data
 * The asserted justification for using the data.
 */
export interface PermissionJustification extends BackboneElement {
    /**
     * The regulatory grounds upon which this Permission builds
     * This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR.
     */
    basis?: CodeableConcept[];
    /**
     * Justifing rational
     * Justifing rational.
     * While any resource may be used, DocumentReference, Consent, PlanDefinition, and Contract would be most frequent
     */
    evidence?: Reference[];
}
/**
 * Explicit FHIR Resource references
 * Explicit FHIR Resource references.
 */
export interface PermissionRuleDataResource extends BackboneElement {
    /**
     * The actual data reference
     * A reference to a specific resource that defines which resources are covered by this consent.
     */
    reference: Reference;
    /**
     * instance | related | dependents | authoredby
     * How the resource reference is interpreted when testing consent restrictions.
     */
    meaning: PermissionConsentDataMeaning;
}
/**
 * The selection criteria to identify data that is within scope of this provision
 * A description or definition of which activities are allowed to be done on the data.
 */
export interface PermissionRuleData extends BackboneElement {
    /**
     * Explicit FHIR Resource references
     * Explicit FHIR Resource references.
     */
    resource?: PermissionRuleDataResource[];
    /**
     * Security tag code on .meta.security
     * The data in scope are those with the given codes present in that data .meta.security element.
     * Note the ConfidentialityCode vocabulary indicates the highest value, thus a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
     */
    security?: Coding[];
    /**
     * Timeframe encompasing data create/update
     * Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
     * This has a different sense to the .validity.
     */
    period?: Period[];
    /**
     * Expression identifying the data
     * Used when other data selection elements are insufficient.
     */
    expression?: Expression;
}
/**
 * A description or definition of which activities are allowed to be done on the data
 * A description or definition of which activities are allowed to be done on the data.
 */
export interface PermissionRuleActivity extends BackboneElement {
    /**
     * Authorized actor(s)
     * The actor(s) authorized for the defined activity.
     */
    actor?: Reference[];
    /**
     * Actions controlled by this rule
     * Actions controlled by this Rule.
     * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
     */
    action?: CodeableConcept[];
    /**
     * The purpose for which the permission is given
     * The purpose for which the permission is given.
     */
    purpose?: CodeableConcept[];
}
/**
 * Constraints to the Permission
 * A set of rules.
 */
export interface PermissionRule extends BackboneElement {
    /**
     * The selection criteria to identify data that is within scope of this provision
     * A description or definition of which activities are allowed to be done on the data.
     */
    data?: PermissionRuleData[];
    /**
     * A description or definition of which activities are allowed to be done on the data
     * A description or definition of which activities are allowed to be done on the data.
     */
    activity?: PermissionRuleActivity[];
    /**
     * What limits apply to the use of the data
     * What limits apply to the use of the data.
     */
    limit?: CodeableConcept[];
    /**
     * deny | permit
     * deny | permit.
     */
    type?: PermissionProvisionType;
}
/**
 * Access Rules
 * Permission resource holds access rules for a given data and context.
 */
export interface Permission extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Permission';
    /**
     * The person or entity that asserts the permission
     * The person or entity that asserts the permission.
     */
    asserter?: Reference;
    /**
     * The date that permission was asserted
     * The date that permission was asserted.
     */
    date?: dateTime[];
    /**
     * Extension for date
     **/
    _date?: Element[];
    /**
     * The period in which the permission is active
     * The period in which the permission is active.
     */
    validity?: Period;
    /**
     * The asserted justification for using the data
     * The asserted justification for using the data.
     */
    justification?: PermissionJustification;
    /**
     * Constraints to the Permission
     * A set of rules.
     */
    rule?: PermissionRule[];
    /**
     * active | entered-in-error | draft | rejected
     * Status.
     */
    status: PermissionStatus;
    /**
     * deny-overrides | permit-overrides | ordered-deny-overrides | ordered-permit-overrides | deny-unless-permit | permit-unless-deny
     * Defines a procedure for arriving at an access decision given the set of rules.
     * see [XACML Combining Rules](http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cos01-en.html#_Toc325047267)
     */
    combining: PermissionCombining;
}
/**
 * A language which may be used to communicate with the person about his or her health
 * A language which may be used to communicate with the person about his or her health.
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Person.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.

Note that this property should not be used to update any linked/logically linked practitioner resources as it serves as a language that can be used to communicate with patients - however it may be used to inform the value on practitioner, along with their role at the organization (with the practitioner's permission)
 */
export interface PersonCommunication extends BackboneElement {
    /**
     * The language which can be used to communicate with the person about his or her health
     * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
     * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
     */
    language: CodeableConcept;
    /**
     * Language preference indicator
     * Indicates whether or not the person prefers this language (over other languages he masters up a certain level).
     * This language is specifically identified for communicating healthcare information.
     */
    preferred?: boolean;
    /**
     * Extension for preferred
     **/
    _preferred?: Element;
}
/**
 * Link to a resource that concerns the same actual person
 * Link to a resource that concerns the same actual person.
 */
export interface PersonLink extends BackboneElement {
    /**
     * The resource to which this actual person is associated
     * The resource to which this actual person is associated.
     */
    target: Reference;
    /**
     * level1 | level2 | level3 | level4
     * Level of assurance that this link is associated with the target resource.
     */
    assurance?: PersonIdentityAssuranceLevel;
}
/**
 * A generic person record
 * Demographics and administrative information about a person independent of a specific health-related context.
 * The Person resource does justice to person registries that keep track of persons regardless of their role. The Person resource is also a primary resource to point to for people acting in a particular role such as SubjectofCare, Practitioner, and Agent. Very few attributes are specific to any role and so Person is kept lean. Most attributes are expected to be tied to the role the Person plays rather than the Person himself. Examples of that are Guardian (SubjectofCare), ContactParty (SubjectOfCare, Practitioner), and multipleBirthInd (SubjectofCare).
 */
export interface Person extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Person';
    /**
     * A human identifier for this person
     * Identifier for a person within a particular scope.
     */
    identifier?: Identifier[];
    /**
     * This person's record is in active use
     * Whether this person's record is in active use.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * A name associated with the person
     * A name associated with the person.
     * Person may have multiple names with different uses or applicable periods.
     */
    name?: HumanName[];
    /**
     * A contact detail for the person
     * A contact detail for the person, e.g. a telephone number or an email address.
     * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification.
     */
    telecom?: ContactPoint[];
    /**
     * The date on which the person was born
     * The birth date for the person.
     * At least an estimated year should be provided as a guess if the real DOB is unknown.
     */
    birthDate?: date;
    /**
     * Extension for birthDate
     **/
    _birthDate?: Element;
    /**
     * Indicates if the individual is deceased or not
     * Indicates if the individual is deceased or not.
     * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
     */
    deceasedBoolean?: boolean;
    /**
     * Extension for deceasedBoolean
     **/
    _deceasedBoolean?: Element;
    /**
     * Indicates if the individual is deceased or not
     * Indicates if the individual is deceased or not.
     * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
     */
    deceasedDateTime?: dateTime;
    /**
     * Extension for deceasedDateTime
     **/
    _deceasedDateTime?: Element;
    /**
     * One or more addresses for the person
     * One or more addresses for the person.
     * Person may have multiple addresses with different uses or applicable periods.
     */
    address?: Address[];
    /**
     * Marital (civil) status of a person
     * This field contains a person's most recent marital (civil) status.
     * Many countries maintain a register of births, deaths and marriages, and this would simplify that interaction
     */
    maritalStatus?: CodeableConcept;
    /**
     * Image of the person
     * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
     */
    photo?: Attachment[];
    /**
     * A language which may be used to communicate with the person about his or her health
     * A language which may be used to communicate with the person about his or her health.
     * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Person.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.

Note that this property should not be used to update any linked/logically linked practitioner resources as it serves as a language that can be used to communicate with patients - however it may be used to inform the value on practitioner, along with their role at the organization (with the practitioner's permission)
     */
    communication?: PersonCommunication[];
    /**
     * The organization that is the custodian of the person record
     * The organization that is the custodian of the person record.
     */
    managingOrganization?: Reference;
    /**
     * Link to a resource that concerns the same actual person
     * Link to a resource that concerns the same actual person.
     */
    link?: PersonLink[];
    /**
     * male | female | other | unknown
     * Administrative Gender.
     * The gender might not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though a clear majority of systems and contexts only support M and F.
     */
    gender?: PersonAdministrativeGender;
}
/**
 * Target outcome for the goal
 * Indicates what should be done and within what timeframe.
 */
export interface PlanDefinitionGoalTarget extends BackboneElement {
    /**
     * The parameter whose value is to be tracked
     * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    measure?: CodeableConcept;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailQuantity?: Quantity;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailRange?: Range;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailString?: string;
    /**
     * Extension for detailString
     **/
    _detailString?: Element;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailBoolean?: boolean;
    /**
     * Extension for detailBoolean
     **/
    _detailBoolean?: Element;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailInteger?: integer;
    /**
     * Extension for detailInteger
     **/
    _detailInteger?: Element;
    /**
     * The target value to be achieved
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
     */
    detailRatio?: Ratio;
    /**
     * Reach goal within
     * Indicates the timeframe after the start of the goal in which the goal should be met.
     */
    due?: Duration;
}
/**
 * What the plan is trying to accomplish
 * A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
 */
export interface PlanDefinitionGoal extends BackboneElement {
    /**
     * E.g. Treatment, dietary, behavioral
     * Indicates a category the goal falls within.
     */
    category?: CodeableConcept;
    /**
     * Code or text describing the goal
     * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
     * If no code is available, use CodeableConcept.text.
     */
    description: CodeableConcept;
    /**
     * high-priority | medium-priority | low-priority
     * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
     */
    priority?: CodeableConcept;
    /**
     * When goal pursuit begins
     * The event after which the goal should begin being pursued.
     */
    start?: CodeableConcept;
    /**
     * What does the goal address
     * Identifies problems, conditions, issues, or concerns the goal is intended to address.
     */
    addresses?: CodeableConcept[];
    /**
     * Supporting documentation for the goal
     * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * Target outcome for the goal
     * Indicates what should be done and within what timeframe.
     */
    target?: PlanDefinitionGoalTarget[];
}
/**
 * Who or what can be this actor
 * The characteristics of the candidates that could serve as the actor.
 */
export interface PlanDefinitionActorOption extends BackboneElement {
    /**
     * Who or what can participate
     * The type of participant in the action.
     */
    typeCanonical?: canonical;
    /**
     * Extension for typeCanonical
     **/
    _typeCanonical?: Element;
    /**
     * Who or what can participate
     * The type of participant in the action.
     * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
     */
    typeReference?: Reference;
    /**
     * E.g. Nurse, Surgeon, Parent
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
    /**
     * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
     * The type of participant in the action.
     */
    type?: PlanDefinitionActivityParticipantType;
}
/**
 * Actors within the plan
 * Actors represent the individuals or groups involved in the execution of the defined set of activities.
 */
export interface PlanDefinitionActor extends BackboneElement {
    /**
     * User-visible title
     * A descriptive label for the actor.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Describes the actor
     * A description of how the actor fits into the overall actions of the plan definition.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Who or what can be this actor
     * The characteristics of the candidates that could serve as the actor.
     */
    option: PlanDefinitionActorOption[];
}
/**
 * Whether or not the action is applicable
 * An expression that describes applicability criteria or start/stop conditions for the action.
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
export interface PlanDefinitionActionCondition extends BackboneElement {
    /**
     * Boolean-valued expression
     * An expression that returns true or false, indicating whether the condition is satisfied.
     * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
     */
    expression?: Expression;
    /**
     * applicability | start | stop
     * The kind of condition.
     * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
     */
    kind: PlanDefinitionActionConditionKind;
}
/**
 * Input data requirements
 * Defines input data requirements for the action.
 */
export interface PlanDefinitionActionInput extends BackboneElement {
    /**
     * User-visible title
     * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * What data is provided
     * Defines the data that is to be provided as input to the action.
     */
    requirement?: DataRequirement;
    /**
     * What data is provided
     * Points to an existing input or output element that provides data to this input.
     * The relatedData element allows indicating that an input to a parent action is an input to specific child actions. It also allows the output of one action to be identified as the input to a different action
     */
    relatedData?: id;
    /**
     * Extension for relatedData
     **/
    _relatedData?: Element;
}
/**
 * Output data definition
 * Defines the outputs of the action, if any.
 */
export interface PlanDefinitionActionOutput extends BackboneElement {
    /**
     * User-visible title
     * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * What data is provided
     * Defines the data that results as output from the action.
     */
    requirement?: DataRequirement;
    /**
     * What data is provided
     * Points to an existing input or output element that is results as output from the action.
     * The relatedData element allows indicating that the output of child action is also the output of a parent action. It also allows the input of one action to be identified as the output of a different action
     */
    relatedData?: string;
    /**
     * Extension for relatedData
     **/
    _relatedData?: Element;
}
/**
 * Relationship to another action
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export interface PlanDefinitionActionRelatedAction extends BackboneElement {
    /**
     * What action is this related to
     * The element id of the target related action.
     */
    targetId: id;
    /**
     * Extension for targetId
     **/
    _targetId?: Element;
    /**
     * Time offset for the relationship
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetDuration?: Duration;
    /**
     * Time offset for the relationship
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetRange?: Range;
    /**
     * before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
     * The relationship of the start of this action to the related action.
     */
    relationship: PlanDefinitionActionRelationshipType;
    /**
     * before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
     * The relationship of the end of this action to the related action.
     */
    endRelationship?: PlanDefinitionActionRelationshipType;
}
/**
 * Who should participate in the action
 * Indicates who should participate in performing the action described.
 */
export interface PlanDefinitionActionParticipant extends BackboneElement {
    /**
     * What actor
     * A reference to the id element of the actor who will participate in this action.
     */
    actorId?: string;
    /**
     * Extension for actorId
     **/
    _actorId?: Element;
    /**
     * Who or what can participate
     * The type of participant in the action.
     */
    typeCanonical?: canonical;
    /**
     * Extension for typeCanonical
     **/
    _typeCanonical?: Element;
    /**
     * Who or what can participate
     * The type of participant in the action.
     * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
     */
    typeReference?: Reference;
    /**
     * E.g. Nurse, Surgeon, Parent
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
    /**
     * E.g. Author, Reviewer, Witness, etc
     * Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
     */
    function?: CodeableConcept;
    /**
     * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
     * The type of participant in the action.
     */
    type?: PlanDefinitionActivityParticipantType;
}
/**
 * Dynamic aspects of the definition
 * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export interface PlanDefinitionActionDynamicValue extends BackboneElement {
    /**
     * The path to the element to be set dynamically
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     * To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * An expression that provides the dynamic value for the customization
     * An expression specifying the value of the customized element.
     * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
     */
    expression?: Expression;
}
/**
 * Action defined by the plan
 * An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification.
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
export interface PlanDefinitionAction extends BackboneElement {
    /**
     * Unique id for the action in the PlanDefinition
     * An identifier that is unique within the PlanDefinition to allow linkage within the realized CarePlan and/or RequestOrchestration.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * User-visible prefix for the action (e.g. 1. or A.)
     * A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
     */
    prefix?: string;
    /**
     * Extension for prefix
     **/
    _prefix?: Element;
    /**
     * User-visible title
     * The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Brief description of the action
     * A brief description of the action used to provide a summary to display to the user.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
     * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    textEquivalent?: markdown;
    /**
     * Extension for textEquivalent
     **/
    _textEquivalent?: Element;
    /**
     * Code representing the meaning of the action or sub-actions
     * A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property.
     */
    code?: CodeableConcept;
    /**
     * Why the action should be performed
     * A description of why this action is necessary or appropriate.
     * This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
     */
    reason?: CodeableConcept[];
    /**
     * Supporting documentation for the intended performer of the action
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * What goals this action supports
     * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action.
     */
    goalId?: id[];
    /**
     * Extension for goalId
     **/
    _goalId?: Element[];
    /**
     * Type of individual the action is focused on
     * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.

In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * Type of individual the action is focused on
     * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.

In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
     */
    subjectReference?: Reference;
    /**
     * Type of individual the action is focused on
     * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.

In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
     */
    subjectCanonical?: canonical;
    /**
     * Extension for subjectCanonical
     **/
    _subjectCanonical?: Element;
    /**
     * When the action should be triggered
     * A description of when the action should be triggered. When multiple triggers are specified on an action, any triggering event invokes the action.
     */
    trigger?: TriggerDefinition[];
    /**
     * Whether or not the action is applicable
     * An expression that describes applicability criteria or start/stop conditions for the action.
     * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
     */
    condition?: PlanDefinitionActionCondition[];
    /**
     * Input data requirements
     * Defines input data requirements for the action.
     */
    input?: PlanDefinitionActionInput[];
    /**
     * Output data definition
     * Defines the outputs of the action, if any.
     */
    output?: PlanDefinitionActionOutput[];
    /**
     * Relationship to another action
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
     */
    relatedAction?: PlanDefinitionActionRelatedAction[];
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingAge?: Age;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingDuration?: Duration;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingRange?: Range;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
     */
    timingTiming?: Timing;
    /**
     * Where it should happen
     * Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.
     * May reference a specific clinical location or may just identify a type of location.
     */
    location?: CodeableReference;
    /**
     * Who should participate in the action
     * Indicates who should participate in performing the action described.
     */
    participant?: PlanDefinitionActionParticipant[];
    /**
     * create | update | remove | fire-event
     * The type of action to perform (create, update, remove).
     */
    type?: CodeableConcept;
    /**
     * Description of the activity to be performed
     * A reference to an ActivityDefinition that describes the action to be taken in detail, a MessageDefinition describing a message to be snet, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
     * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
     */
    definitionCanonical?: canonical;
    /**
     * Extension for definitionCanonical
     **/
    _definitionCanonical?: Element;
    /**
     * Description of the activity to be performed
     * A reference to an ActivityDefinition that describes the action to be taken in detail, a MessageDefinition describing a message to be snet, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
     * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
     */
    definitionUri?: uri;
    /**
     * Extension for definitionUri
     **/
    _definitionUri?: Element;
    /**
     * Transform to apply the template
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     * Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
     */
    transform?: canonical;
    /**
     * Extension for transform
     **/
    _transform?: Element;
    /**
     * Dynamic aspects of the definition
     * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
     * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
     */
    dynamicValue?: PlanDefinitionActionDynamicValue[];
    /**
     * A sub-action
     * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
     */
    action?: PlanDefinitionAction[];
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    priority?: PlanDefinitionRequestPriority;
    /**
     * visual-group | logical-group | sentence-group
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: PlanDefinitionActionGroupingBehavior;
    /**
     * any | all | all-or-none | exactly-one | at-most-one | one-or-more
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: PlanDefinitionActionSelectionBehavior;
    /**
     * must | could | must-unless-documented
     * Defines the required behavior for the action.
     */
    requiredBehavior?: PlanDefinitionActionRequiredBehavior;
    /**
     * yes | no
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: PlanDefinitionActionPrecheckBehavior;
    /**
     * single | multiple
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: PlanDefinitionActionCardinalityBehavior;
}
/**
 * The definition of a plan for a series of actions, independent of any specific patient or context
 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.
 */
export interface PlanDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'PlanDefinition';
    /**
     * Canonical identifier for this plan definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the plan definition
     * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the plan definition
     * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
     * There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this plan definition (computer friendly)
     * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this plan definition (human friendly)
     * A short, descriptive, user-friendly title for the plan definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Subordinate title of the plan definition
     * An explanatory or alternate title for the plan definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * Extension for subtitle
     **/
    _subtitle?: Element;
    /**
     * order-set | clinical-protocol | eca-rule | workflow-definition
     * A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
     */
    type?: CodeableConcept;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of plan definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Type of individual the plan definition is focused on
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * Type of individual the plan definition is focused on
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
     */
    subjectReference?: Reference;
    /**
     * Type of individual the plan definition is focused on
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
     */
    subjectCanonical?: canonical;
    /**
     * Extension for subjectCanonical
     **/
    _subjectCanonical?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the plan definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the plan definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the plan definition
     * A free text natural language description of the plan definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the plan definition is presumed to be the predominant language in the place the plan definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for plan definition (if applicable)
     * A legal or geographic region in which the plan definition is intended to be used.
     * It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this plan definition is defined
     * Explanation of why this plan definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the plan definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Describes the clinical usage of the plan
     * A detailed description of how the plan definition is used from a clinical perspective.
     */
    usage?: markdown;
    /**
     * Extension for usage
     **/
    _usage?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
     * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the plan definition was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the plan definition was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the plan definition is expected to be used
     * The period during which the plan definition content was or is planned to be in active use.
     * The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a plan definition intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment
     * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the content
     * An individiual or organization primarily involved in the creation and maintenance of the content.
     */
    author?: ContactDetail[];
    /**
     * Who edited the content
     * An individual or organization primarily responsible for internal coherence of the content.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the content
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the content
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations
     * Related artifacts such as additional documentation, justification, or bibliographic references.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Logic used by the plan definition
     * A reference to a Library resource containing any formal logic used by the plan definition.
     */
    library?: canonical[];
    /**
     * Extension for library
     **/
    _library?: Element[];
    /**
     * What the plan is trying to accomplish
     * A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
     */
    goal?: PlanDefinitionGoal[];
    /**
     * Actors within the plan
     * Actors represent the individuals or groups involved in the execution of the defined set of activities.
     */
    actor?: PlanDefinitionActor[];
    /**
     * Action defined by the plan
     * An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification.
     * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
     */
    action?: PlanDefinitionAction[];
    /**
     * Preconditions for service
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededBoolean?: boolean;
    /**
     * Extension for asNeededBoolean
     **/
    _asNeededBoolean?: Element;
    /**
     * Preconditions for service
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * draft | active | retired | unknown
     * The status of this plan definition. Enables tracking the life-cycle of the content.
     * Allows filtering of plan definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: PlanDefinitionPublicationStatus;
}
/**
 * Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care
 * The official qualifications, certifications, accreditations, training, licenses (and other types of educations/skills/capabilities) that authorize or otherwise pertain to the provision of care by the practitioner.

For example, a medical license issued by a medical board of licensure authorizing the practitioner to practice medicine within a certain locality.
 * The PractitionerRole.specialty defines the functional role that they are practicing at a given organization or location.  Those specialties may or might not require a qualification, and are not defined on the practitioner.
 */
export interface PractitionerQualification extends BackboneElement {
    /**
     * An identifier for this qualification for the practitioner
     * An identifier that applies to this person's qualification.
     */
    identifier?: Identifier[];
    /**
     * Coded representation of the qualification
     * Coded representation of the qualification.
     */
    code: CodeableConcept;
    /**
     * Period during which the qualification is valid
     * Period during which the qualification is valid.
     */
    period?: Period;
    /**
     * Organization that regulates and issues the qualification
     * Organization that regulates and issues the qualification.
     */
    issuer?: Reference;
}
/**
 * A language which may be used to communicate with the practitioner
 * A language which may be used to communicate with the practitioner, often for correspondence/administrative purposes.

The `PractitionerRole.communication` property should be used for publishing the languages that a practitioner is able to communicate with patients (on a per Organization/Role basis).
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Practitioner.Communication associations.

For animals, language is not a relevant field, and should be absent from the instance.
 */
export interface PractitionerCommunication extends BackboneElement {
    /**
     * The language code used to communicate with the practitioner
     * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
     * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
     */
    language: CodeableConcept;
    /**
     * Language preference indicator
     * Indicates whether or not the person prefers this language (over other languages he masters up a certain level).
     * This language is specifically identified for communicating directly with the practitioner (typically un-related to patient communications).
     */
    preferred?: boolean;
    /**
     * Extension for preferred
     **/
    _preferred?: Element;
}
/**
 * A person with a  formal responsibility in the provisioning of healthcare or related services
 * A person who is directly or indirectly involved in the provisioning of healthcare or related services.
 */
export interface Practitioner extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Practitioner';
    /**
     * An identifier for the person as this agent
     * An identifier that applies to this person in this role.
     */
    identifier?: Identifier[];
    /**
     * Whether this practitioner's record is in active use
     * Whether this practitioner's record is in active use.
     * If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * The name(s) associated with the practitioner
     * The name(s) associated with the practitioner.
     * The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.

In general, select the value to be used in the ResourceReference.display based on this:

1. There is more than 1 name
2. Use = usual
3. Period is current to the date of the usage
4. Use = official
5. Other order as decided by internal business rules.
     */
    name?: HumanName[];
    /**
     * A contact detail for the practitioner (that apply to all roles)
     * A contact detail for the practitioner, e.g. a telephone number or an email address.
     * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and to help with identification.  These typically will have home numbers, or mobile numbers that are not role specific.
     */
    telecom?: ContactPoint[];
    /**
     * The date  on which the practitioner was born
     * The date of birth for the practitioner.
     */
    birthDate?: date;
    /**
     * Extension for birthDate
     **/
    _birthDate?: Element;
    /**
     * Indicates if the practitioner is deceased or not
     * Indicates if the practitioner is deceased or not.
     * If there's no value in the instance, it means there is no statement on whether or not the practitioner is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
     */
    deceasedBoolean?: boolean;
    /**
     * Extension for deceasedBoolean
     **/
    _deceasedBoolean?: Element;
    /**
     * Indicates if the practitioner is deceased or not
     * Indicates if the practitioner is deceased or not.
     * If there's no value in the instance, it means there is no statement on whether or not the practitioner is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
     */
    deceasedDateTime?: dateTime;
    /**
     * Extension for deceasedDateTime
     **/
    _deceasedDateTime?: Element;
    /**
     * Address(es) of the practitioner that are not role specific (typically home address)
     * Address(es) of the practitioner that are not role specific (typically home address).
Work addresses are not typically entered in this property as they are usually role dependent.
     * The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).
     */
    address?: Address[];
    /**
     * Image of the person
     * Image of the person.
     */
    photo?: Attachment[];
    /**
     * Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care
     * The official qualifications, certifications, accreditations, training, licenses (and other types of educations/skills/capabilities) that authorize or otherwise pertain to the provision of care by the practitioner.

For example, a medical license issued by a medical board of licensure authorizing the practitioner to practice medicine within a certain locality.
     * The PractitionerRole.specialty defines the functional role that they are practicing at a given organization or location.  Those specialties may or might not require a qualification, and are not defined on the practitioner.
     */
    qualification?: PractitionerQualification[];
    /**
     * A language which may be used to communicate with the practitioner
     * A language which may be used to communicate with the practitioner, often for correspondence/administrative purposes.

The `PractitionerRole.communication` property should be used for publishing the languages that a practitioner is able to communicate with patients (on a per Organization/Role basis).
     * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Practitioner.Communication associations.

For animals, language is not a relevant field, and should be absent from the instance.
     */
    communication?: PractitionerCommunication[];
    /**
     * male | female | other | unknown
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: PractitionerAdministrativeGender;
}
/**
 * Roles/organizations the practitioner is associated with
 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
 */
export interface PractitionerRole extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'PractitionerRole';
    /**
     * Identifiers for a role/location
     * Business Identifiers that are specific to a role/location.
     * A specific identifier value (e.g. Minnesota Registration ID) may appear on multiple PractitionerRole instances which could be for different periods, or different Roles (or other reasons).  A specific identifier may be included multiple times in the same PractitionerRole instance with different identifier validity periods.
     */
    identifier?: Identifier[];
    /**
     * Whether this practitioner role record is in active use
     *  Whether this practitioner role record is in active use. Some systems may use this property to mark non-active practitioners, such as those that are not currently employed.
     * If this value is false, you may refer to the period to see when the role was in active use. If there is no period specified, no inference can be made about when it was active.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * The period during which the practitioner is authorized to perform in these role(s)
     * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
     * If a practitioner is performing a role within an organization over multiple, non-adjacent periods, there should be a distinct PractitionerRole instance for each period.  For example, if a nurse is employed at a hospital, leaves the organization for a period of time due to pandemic related stress, but returns post-pandemic to the same job role, there would be two PractitionerRole instances for the different periods of employment.
     */
    period?: Period;
    /**
     * Practitioner that provides services for the organization
     * Practitioner that is able to provide the defined services for the organization.
     */
    practitioner?: Reference;
    /**
     * Organization where the roles are available
     * The organization where the Practitioner performs the roles associated.
     */
    organization?: Reference;
    /**
     * Roles which this practitioner may perform
     * Roles which this practitioner is authorized to perform for the organization.
     * A person may have more than one role.
     */
    code?: CodeableConcept[];
    /**
     * Specific specialty of the practitioner
     * The specialty of a practitioner that describes the functional role they are practicing at a given organization or location.
     * The specialty represents the functional role a practitioner is playing within an organization/location. This role may require the individual have certain qualifications, which would be represented in the Practitioner.qualifications property.  Note that qualifications may or might not relate to or be required by the practicing specialty.
     */
    specialty?: CodeableConcept[];
    /**
     * Location(s) where the practitioner provides care
     * The location(s) at which this practitioner provides care.
     */
    location?: Reference[];
    /**
     * Healthcare services provided for this role's Organization/Location(s)
     * The list of healthcare services that this worker provides for this role's Organization/Location(s).
     */
    healthcareService?: Reference[];
    /**
     * Official contact details relating to this PractitionerRole
     * The contact details of communication devices available relevant to the specific PractitionerRole. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
     */
    contact?: ExtendedContactDetail[];
    /**
     * Collection of characteristics (attributes)
     * Collection of characteristics (attributes).
     * These could be such things as is the service mode used by this role.
     */
    characteristic?: CodeableConcept[];
    /**
     * A language the practitioner (in this role) can use in patient communication
     * A language the practitioner can use in patient communication. The practitioner may know several languages (listed in practitioner.communication), however these are the languages that could be advertised in a directory for a patient to search.
     * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.

Note that for non-patient oriented communication, see Practitioner.communication.  Note that all 'person' type resources (Person, RelatedPerson, Patient, Practitioner) have a communication structure that includes preferences.  Role or service oriented resources such as HealthcareService and PractitionerRole only include languages that are available for interacting with patients.
     */
    communication?: CodeableConcept[];
    /**
     * Times the Practitioner is available at this location and/or healthcare service (including exceptions)
     * A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
     * More detailed availability information may be provided in associated Schedule/Slot resources.

Systems may choose to render availability differently than it is exchanged on the interface. For example, rather than "Mon, Tue, Wed, Thur, Fri from 9am-12am; Mon, Tue, Wed, Thur, Fri from 1pm-5pm" as would be implied by two availableTime repetitions, an application could render this information as "Mon-Fri 9-12am and 1-5pm".

The NotAvailableTime(s) included indicate the general days/periods where the practitioner is not available (for things such as vacation time, or public holidays).
     */
    availability?: Availability[];
    /**
     * Endpoints for interacting with the practitioner in this role
     *  Technical endpoints providing access to services operated for the practitioner with this role. Commonly used for locating scheduling services, or identifying where to send referrals electronically.
     */
    endpoint?: Reference[];
}
/**
 * Who performed the procedure and what they did
 * Indicates who or what performed the procedure and how they were involved.
 */
export interface ProcedurePerformer extends BackboneElement {
    /**
     * Type of performance
     * Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
     */
    function?: CodeableConcept;
    /**
     * Who performed the procedure
     * Indicates who or what performed the procedure.
     */
    actor: Reference;
    /**
     * Organization the device or practitioner was acting for
     * The Organization the Patient, RelatedPerson, Device, CareTeam, and HealthcareService was acting on behalf of.
     * Organization, Patient, RelatedPerson, Device, CareTeam, and HealthcareService can be associated with multiple organizations. This element indicates which organization they were acting on behalf of when performing the action.
     */
    onBehalfOf?: Reference;
    /**
     * When the performer performed the procedure
     * Time period during which the performer performed the procedure.
     */
    period?: Period;
}
/**
 * Manipulated, implanted, or removed device
 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
 */
export interface ProcedureFocalDevice extends BackboneElement {
    /**
     * Kind of change to device
     * The kind of change that happened to the device during the procedure.
     */
    action?: CodeableConcept;
    /**
     * Device that was changed
     * The device that was manipulated (changed) during the procedure.
     */
    manipulated: Reference;
}
/**
 * An action that is being or was performed on an individual or entity
 * An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing.
 */
export interface Procedure extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Procedure';
    /**
     * External Identifiers for this procedure
     * Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
     * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and Person resource instances might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * A request for this procedure
     * A reference to a resource that contains details of the request for this procedure.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event
     * A larger event of which this particular procedure is a component or step.
     * The MedicationAdministration resource has a partOf reference to Procedure, but this is not a circular reference.   For example, the anesthesia MedicationAdministration is part of the surgical Procedure (MedicationAdministration.partOf = Procedure).  For example, the procedure to insert the IV port for an IV medication administration is part of the medication administration (Procedure.partOf = MedicationAdministration).
     */
    partOf?: Reference[];
    /**
     * Reason for current status
     * Captures the reason for the current state of the procedure.
     * This is generally only used for "exception" statuses such as "not-done", "suspended" or "aborted". The reason for performing the event at all is captured in reasonCode, not here.
     */
    statusReason?: CodeableConcept;
    /**
     * Classification of the procedure
     * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    category?: CodeableConcept[];
    /**
     * Identification of the procedure
     * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    code?: CodeableConcept;
    /**
     * Individual or entity the procedure was performed on
     * On whom or on what the procedure was performed. This is usually an individual human, but can also be performed on animals, groups of humans or animals, organizations or practitioners (for licensing), locations or devices (for safety inspections or regulatory authorizations).  If the actual focus of the procedure is different from the subject, the focus element specifies the actual focus of the procedure.
     */
    subject: Reference;
    /**
     * Who is the target of the procedure when it is not the subject of record only
     * Who is the target of the procedure when it is not the subject of record only.  If focus is not present, then subject is the focus.  If focus is present and the subject is one of the targets of the procedure, include subject as a focus as well. If focus is present and the subject is not included in focus, it implies that the procedure was only targeted on the focus. For example, when a caregiver is given education for a patient, the caregiver would be the focus and the procedure record is associated with the subject (e.g. patient).  For example, use focus when recording the target of the education, training, or counseling is the parent or relative of a patient.
     */
    focus?: Reference;
    /**
     * The Encounter during which this Procedure was created
     * The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
     * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
     */
    encounter?: Reference;
    /**
     * When the procedure occurred or is occurring
     * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.

Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When the procedure occurred or is occurring
     * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.

Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
     */
    occurrencePeriod?: Period;
    /**
     * When the procedure occurred or is occurring
     * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.

Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
     */
    occurrenceString?: string;
    /**
     * Extension for occurrenceString
     **/
    _occurrenceString?: Element;
    /**
     * When the procedure occurred or is occurring
     * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.

Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
     */
    occurrenceAge?: Age;
    /**
     * When the procedure occurred or is occurring
     * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.

Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
     */
    occurrenceRange?: Range;
    /**
     * When the procedure occurred or is occurring
     * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.

Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
     */
    occurrenceTiming?: Timing;
    /**
     * When the procedure was first captured in the subject's record
     * The date the occurrence of the procedure was first captured in the record regardless of Procedure.status (potentially after the occurrence of the event).
     */
    recorded?: dateTime;
    /**
     * Extension for recorded
     **/
    _recorded?: Element;
    /**
     * Who recorded the procedure
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * Reported rather than primary record
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
     */
    reportedBoolean?: boolean;
    /**
     * Extension for reportedBoolean
     **/
    _reportedBoolean?: Element;
    /**
     * Reported rather than primary record
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
     */
    reportedReference?: Reference;
    /**
     * Who performed the procedure and what they did
     * Indicates who or what performed the procedure and how they were involved.
     */
    performer?: ProcedurePerformer[];
    /**
     * Where the procedure happened
     * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
     */
    location?: Reference;
    /**
     * The justification that the procedure was performed
     * The coded reason or reference why the procedure was performed. This may be a coded entity of some type, be present as text, or be a reference to one of several resources that justify the procedure.
     * Use Procedure.reason.concept when a code sufficiently describes the reason. Use Procedure.reason.reference when referencing a resource, which allows more information to be conveyed, such as onset date.  For a single Procedure.reason, if both Procedure.reason.concept and Procedure.reason.reference are present, they are expected to be consistent with each other.
     */
    reason?: CodeableReference[];
    /**
     * Target body sites
     * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
     * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/procedure-targetBodyStructure](http://hl7.org/fhir/extensions/StructureDefinition-procedure-targetBodyStructure.html).
     */
    bodySite?: CodeableConcept[];
    /**
     * The result of procedure
     * The outcome of the procedure - did it resolve the reasons for the procedure being performed?
     * If outcome contains narrative text only, it can be captured using the CodeableConcept.text.
     */
    outcome?: CodeableConcept;
    /**
     * Any report resulting from the procedure
     * This could be a histology result, pathology report, surgical report, etc.
     * There could potentially be multiple reports - e.g. if this was a procedure which took multiple biopsies resulting in a number of anatomical pathology reports.
     */
    report?: Reference[];
    /**
     * Complication following the procedure
     * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
     * If complications are only expressed by the narrative text, they can be captured using the CodeableReference.concept.text.
     */
    complication?: CodeableReference[];
    /**
     * Instructions for follow up
     * If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
     */
    followUp?: CodeableConcept[];
    /**
     * Additional information about the procedure
     * Any other notes and comments about the procedure.
     */
    note?: Annotation[];
    /**
     * Manipulated, implanted, or removed device
     * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
     */
    focalDevice?: ProcedureFocalDevice[];
    /**
     * Items used during procedure
     * Identifies medications, devices and any other substance used as part of the procedure.
     * For devices actually implanted or removed, use Procedure.focalDevice.manipulated.
     */
    used?: CodeableReference[];
    /**
     * Extra information relevant to the procedure
     * Other resources from the patient record that may be relevant to the procedure.  The information from these resources was either used to create the instance or is provided to help with its interpretation. This extension should not be used if more specific inline elements or extensions are available.
     */
    supportingInfo?: Reference[];
    /**
     * preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
     * A code specifying the state of the procedure. Generally, this will be the in-progress or completed state.
     * The "unknown" code is not to be used to convey other statuses.  The "unknown" code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: ProcedureStatus;
}
/**
 * Actor involved
 * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export interface ProvenanceAgent extends BackboneElement {
    /**
     * How the agent participated
     * The Functional Role of the agent with respect to the activity.
     * For example: assembler, author, prescriber, signer, investigator, etc.
     */
    type?: CodeableConcept;
    /**
     * What the agents role was
     * The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
     * For example: Chief-of-Radiology, Nurse, Physician, Medical-Student, etc.
     */
    role?: CodeableConcept[];
    /**
     * The agent that participated in the event
     * Indicates who or what performed in the event.
     */
    who: Reference;
    /**
     * The agent that delegated
     * The agent that delegated authority to perform the activity performed by the agent.who element.
     */
    onBehalfOf?: Reference;
}
/**
 * An entity used in this activity
 * An entity used in this activity.
 */
export interface ProvenanceEntity extends BackboneElement {
    /**
     * Identity of entity
     * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
     * whatIdentity should be used for entities that are not a Resource type.
     */
    what: Reference;
    /**
     * Entity is attributed to this agent
     * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which used the entity.
     * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 V2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.
     */
    agent?: ProvenanceAgent[];
    /**
     * revision | quotation | source | instantiates | removal
     * How the entity was used during the activity.
     */
    role: ProvenanceEntityRole;
}
/**
 * Who, What, When for a set of resources
 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
 * Some parties may be duplicated between the target resource and its provenance.  For instance, the prescriber is usually (but not always) the author of the prescription resource. This resource is defined with close consideration for W3C Provenance.
 */
export interface Provenance extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Provenance';
    /**
     * Target Reference(s) (usually version specific)
     * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
     * Target references are usually version specific, but might not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource might not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.
     */
    target: Reference[];
    /**
     * When the activity occurred
     * The period during which the activity occurred.
     * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
     */
    occurredPeriod?: Period;
    /**
     * When the activity occurred
     * The period during which the activity occurred.
     * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
     */
    occurredDateTime?: dateTime;
    /**
     * Extension for occurredDateTime
     **/
    _occurredDateTime?: Element;
    /**
     * When the activity was recorded / updated
     * The instant of time at which the activity was recorded.
     * This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.
     */
    recorded?: instant;
    /**
     * Extension for recorded
     **/
    _recorded?: Element;
    /**
     * Policy or plan the activity was defined by
     * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
     * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
     */
    policy?: uri[];
    /**
     * Extension for policy
     **/
    _policy?: Element[];
    /**
     * Where the activity occurred, if relevant
     * Where the activity occurred, if relevant.
     */
    location?: Reference;
    /**
     * Authorization (purposeOfUse) related to the event
     * The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
     */
    authorization?: CodeableReference[];
    /**
     * Activity that occurred
     * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
     */
    activity?: CodeableConcept;
    /**
     * Workflow authorization within which this event occurred
     * Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
     */
    basedOn?: Reference[];
    /**
     * The patient is the subject of the data created/updated (.target) by the activity
     * The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
     */
    patient?: Reference;
    /**
     * Encounter within which this event occurred or which the event is tightly associated
     * This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
     */
    encounter?: Reference;
    /**
     * Actor involved
     * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
     * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
     */
    agent: ProvenanceAgent[];
    /**
     * An entity used in this activity
     * An entity used in this activity.
     */
    entity?: ProvenanceEntity[];
    /**
     * Signature on target
     * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
     */
    signature?: Signature[];
}
/**
 * Only allow data when
 * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
 * If multiple repetitions of this extension are present, the interpretation is driven by enableBehavior (either all repetitions must evaluate to true for this item to be enabled, or only one must evaluate to true for the item to be enabled).  If the enableWhen.question has multiple answers, the condition evaluates to true if *any* of the answers for the referenced item match the enableWhen condition.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.  If enableWhen logic depends on an item that is disabled, the logic should proceed as though the item is not valued - even if a default value or other value might be retained in memory in the event of the item being re-enabled.  In some cases, the comparison between the indicated answer and the specified value may differ only by precision.  For example, the enableWhen might be Q1 > 1970, but the answer to Q1 is 1970-10-15.  There is not a clear answer as to whether 1970-10-15 should be considered 'greater' than 1970, given that it is an imprecise value.  In these indeterminate situations, the form filler has the option of refusing to render the form.  If the form **is** displayed, items where enableWhen is indeterminate SHOULD be treated as enabled with a warning indicating that the questionnaire logic was faulty and it is possible that the item should not be enabled.  Questionnaires SHOULD be designed to take into account challenges around varying precision to minimize non-deterministic situations by setting constraints around expected precision, etc.
 */
export interface QuestionnaireItemEnableWhen extends BackboneElement {
    /**
     * The linkId of question that determines whether item is enabled/disabled
     * The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
     * If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.  If there are multiple items with the same linkId and all are equadistant (e.g. a question references a question that appears in a separate repeating group), that is an error.  (Consider using the enableWhenExpression extension to define logic to handle such a situation.)
     */
    question: string;
    /**
     * Extension for question
     **/
    _question?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerBoolean?: boolean;
    /**
     * Extension for answerBoolean
     **/
    _answerBoolean?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerDecimal?: decimal;
    /**
     * Extension for answerDecimal
     **/
    _answerDecimal?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerInteger?: integer;
    /**
     * Extension for answerInteger
     **/
    _answerInteger?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerDate?: date;
    /**
     * Extension for answerDate
     **/
    _answerDate?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerDateTime?: dateTime;
    /**
     * Extension for answerDateTime
     **/
    _answerDateTime?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerTime?: time;
    /**
     * Extension for answerTime
     **/
    _answerTime?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerString?: string;
    /**
     * Extension for answerString
     **/
    _answerString?: Element;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerCoding?: Coding;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerQuantity?: Quantity;
    /**
     * Value for question comparison based on operator
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
     */
    answerReference?: Reference;
    /**
     * exists | = | != | > | < | >= | <=
     * Specifies the criteria by which the question is enabled.
     */
    operator: QuestionnaireItemOperator;
}
/**
 * Permitted answer
 * One of the permitted answers for the question.
 * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
 */
export interface QuestionnaireItemAnswerOption extends BackboneElement {
    /**
     * Answer value
     * A potential answer that's allowed as the answer to this question.
     * The data type of the value must agree with the item.type.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Answer value
     * A potential answer that's allowed as the answer to this question.
     * The data type of the value must agree with the item.type.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Answer value
     * A potential answer that's allowed as the answer to this question.
     * The data type of the value must agree with the item.type.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Answer value
     * A potential answer that's allowed as the answer to this question.
     * The data type of the value must agree with the item.type.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Answer value
     * A potential answer that's allowed as the answer to this question.
     * The data type of the value must agree with the item.type.
     */
    valueCoding?: Coding;
    /**
     * Answer value
     * A potential answer that's allowed as the answer to this question.
     * The data type of the value must agree with the item.type.
     */
    valueReference?: Reference;
    /**
     * Whether option is selected by default
     * Indicates whether the answer value is selected when the list of possible answers is initially shown.
     */
    initialSelected?: boolean;
    /**
     * Extension for initialSelected
     **/
    _initialSelected?: Element;
}
/**
 * Initial value(s) when item is first rendered
 * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial.answer[x] must agree with the item.type, and only repeating items can have more then one initial value.
 */
export interface QuestionnaireItemInitial extends BackboneElement {
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueAttachment?: Attachment;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueCoding?: Coding;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueQuantity?: Quantity;
    /**
     * Actual value for initializing the question
     * The actual value to for an initial answer.
     * The type of the initial value must be consistent with the type of the item.
     */
    valueReference?: Reference;
}
/**
 * Questions and sections within the Questionnaire
 * A particular question, question grouping or display text that is part of the questionnaire.
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export interface QuestionnaireItem extends BackboneElement {
    /**
     * Unique id for item in questionnaire
     * An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
     * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.

LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
     */
    linkId: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * ElementDefinition - details for the item
     * This element is a URI that refers to an [ElementDefinition](elementdefinition.html) or to an [ObservationDefinition](observationdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in [Comments](questionnaire.html#definition), below.
     * The uri refers to an ElementDefinition in a [StructureDefinition](structuredefinition.html#) or to an [ObservationDefinition](observationdefinition.html) and always starts with the [canonical URL](references.html#canonical) for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](types-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition.
     */
    definition?: uri;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Corresponding concept for this item in a terminology
     * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
     * The value may come from the ElementDefinition referred to by .definition.
     */
    code?: Coding[];
    /**
     * E.g. "1(a)", "2.5.3"
     * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
     * These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.  Typically, these won't be used for "display" items, though such use is not prohibited.  Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
     */
    prefix?: string;
    /**
     * Extension for prefix
     **/
    _prefix?: Element;
    /**
     * Primary text for the item
     * The name of a section, the text of a question or text content for a display item.
     * When using this element to represent the name of a section, use group type item and also make sure to limit the text element to a short string suitable for display as a section heading.  Group item instructions should be included as a display type item within the group.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * Only allow data when
     * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
     * If multiple repetitions of this extension are present, the interpretation is driven by enableBehavior (either all repetitions must evaluate to true for this item to be enabled, or only one must evaluate to true for the item to be enabled).  If the enableWhen.question has multiple answers, the condition evaluates to true if *any* of the answers for the referenced item match the enableWhen condition.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.  If enableWhen logic depends on an item that is disabled, the logic should proceed as though the item is not valued - even if a default value or other value might be retained in memory in the event of the item being re-enabled.  In some cases, the comparison between the indicated answer and the specified value may differ only by precision.  For example, the enableWhen might be Q1 > 1970, but the answer to Q1 is 1970-10-15.  There is not a clear answer as to whether 1970-10-15 should be considered 'greater' than 1970, given that it is an imprecise value.  In these indeterminate situations, the form filler has the option of refusing to render the form.  If the form **is** displayed, items where enableWhen is indeterminate SHOULD be treated as enabled with a warning indicating that the questionnaire logic was faulty and it is possible that the item should not be enabled.  Questionnaires SHOULD be designed to take into account challenges around varying precision to minimize non-deterministic situations by setting constraints around expected precision, etc.
     */
    enableWhen?: QuestionnaireItemEnableWhen[];
    /**
     * Whether the item must be included in data results
     * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
     * If the required item is a question, it must have a direct answer (i.e. an answer to the question itself, not merely answers to child questions) in order for the QuestionnaireResponse to be complete.  If the required item is a group, it must have at least one descendant question which has an answer  Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  It also only has meaning if the parent element is present.  If a non-required 'group' item contains a 'required' question item, it's completely fine to omit the group (because it's not required) despite it having a required child.  Similarly, if an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one descendant item with a populated answer). The value for 'required' may come from the ElementDefinition referred to by .definition.
     */
    required?: boolean;
    /**
     * Extension for required
     **/
    _required?: Element;
    /**
     * Whether the item may repeat
     * An indication, if true, that a QuestionnaireResponse for this item may include multiple answers associated with a single instance of this item (for question-type items) or multiple repetitions of the item (for group-type items).
     * If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition (i.e. "repeat the question") or to simply allow entry/selection of multiple answers for the question (repeat the answers).  Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.

The resulting QuestionnaireResponse will be populated the same way regardless of rendering - one 'question' item with multiple answer values.

 The value may come from the ElementDefinition referred to by .definition.  When repeats=true for a group, it'll be represented with multiple items with the same linkId in the QuestionnaireResponse.  For a question, it'll be represented by a single item with that linkId with multiple answers.
     */
    repeats?: boolean;
    /**
     * Extension for repeats
     **/
    _repeats?: Element;
    /**
     * Don't allow human editing
     * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
     * If specified on a 'group', then all items beneath the specified group are read only.  For questions, this only marks the answer associated with the specific item read only.  Descendant questions are not impacted.  The value of readOnly elements can be established by asserting extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
     */
    readOnly?: boolean;
    /**
     * Extension for readOnly
     **/
    _readOnly?: Element;
    /**
     * No more than these many characters
     * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
     * For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
     */
    maxLength?: integer;
    /**
     * Extension for maxLength
     **/
    _maxLength?: Element;
    /**
     * ValueSet containing permitted answers
     * A reference to a value set containing a list of values representing permitted answers for a question.
     * LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](https://terminology.hl7.org/LOINC.html). The value may come from the ElementDefinition referred to by .definition.
     */
    answerValueSet?: canonical;
    /**
     * Extension for answerValueSet
     **/
    _answerValueSet?: Element;
    /**
     * Permitted answer
     * One of the permitted answers for the question.
     * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
     */
    answerOption?: QuestionnaireItemAnswerOption[];
    /**
     * Initial value(s) when item is first rendered
     * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
     * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial.answer[x] must agree with the item.type, and only repeating items can have more then one initial value.
     */
    initial?: QuestionnaireItemInitial[];
    /**
     * Nested questionnaire items
     * Text, questions and other groups to be nested beneath a question or group.
     * There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
     */
    item?: QuestionnaireItem[];
    /**
     * all | any
     * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
     * This element must be specified if more than one enableWhen value is provided.
     */
    enableBehavior?: QuestionnaireEnableWhenBehavior;
    /**
     * hidden | protected
     * Indicates if and how items that are disabled (because enableWhen evaluates to 'false') should be displayed.
     * If not specified, rendering behavior is up to the client.  This element is only meaningful if enableWhen or an equivalent extension is present
     */
    disabledDisplay?: QuestionnaireDisabledDisplay;
    /**
     * optionsOnly | optionsOrType | optionsOrString
     * For items that have a defined set of allowed answers (via answerOption or answerValueSet), indicates whether values *other* than those specified can be selected.
     */
    answerConstraint?: QuestionnaireAnswerConstraint;
    /**
     * group | display | boolean | decimal | integer | date | dateTime +
     * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, Coding, etc.).
     * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
     */
    type: QuestionnaireItemType;
}
/**
 * A structured set of questions
 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
 */
export interface Questionnaire extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Questionnaire';
    /**
     * Canonical identifier for this questionnaire, represented as an absolute URI (globally unique)
     * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.

The name of the referenced questionnaire can be conveyed using the http://hl7.org/fhir/StructureDefinition/display extension.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business identifier for questionnaire
     * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the questionnaire
     * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different questionnaires that have the same url but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the questionnaire with the format. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this questionnaire (computer friendly)
     * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type no-whitespace name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this questionnaire (human friendly)
     * A short, descriptive, user-friendly title for the questionnaire.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Based on Questionnaire
     * The URL of a Questionnaire that this Questionnaire is based on.
     * This element covers a broad range of relationships, from 'somewhat inspired by' to 'fully compliant with'.         There is a standard extensionthat allows clearer differentiation between the specifics of the derivation relationship where          this is needed - e.g. to determine substitutability and validation expectations -          [http://hl7.org/fhir/StructureDefinition/questionnaire-derivationType](http://hl7.org/fhir/extensions/StructureDefinition-questionnaire-derivationType.html).
     */
    derivedFrom?: canonical[];
    /**
     * Extension for derivedFrom
     **/
    _derivedFrom?: Element[];
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
     * Allows filtering of questionnaires that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Resource that can be subject of QuestionnaireResponse
     * The types of subjects that can be the subject of responses created for the questionnaire.
     * If none are specified, then the subject is unlimited.
     */
    subjectType?: code[];
    /**
     * Extension for subjectType
     **/
    _subjectType?: Element[];
    /**
     * Date last changed
     * The date  (and optionally time) when the questionnaire was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the questionnaire.
     * Usually an organization but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the questionnaire
     * A free text natural language description of the questionnaire from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context. (E.g. the language of the questionnaire is presumed to be the predominant language in the place the questionnaire was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaires.
     * When multiple useContexts are specified, there is no expectation that all or even any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for questionnaire (if applicable)
     * A legal or geographic region in which the questionnaire is intended to be used.
     * It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this questionnaire is defined
     * Explanation of why this questionnaire is needed and why it has been designed as it has.
     * This element does not describe the usage of the questionnaire. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the questionnaire was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the questionnaire was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the questionnaire is expected to be used
     * The period during which the questionnaire content was or is planned to be in active use.
     * The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a questionnaire intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * Concept that represents the overall questionnaire
     * An identifier for this collection of questions in a particular terminology such as LOINC.
     */
    code?: Coding[];
    /**
     * Questions and sections within the Questionnaire
     * A particular question, question grouping or display text that is part of the questionnaire.
     * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
     */
    item?: QuestionnaireItem[];
    /**
     * draft | active | retired | unknown
     * The current state of this questionnaire.
     * A nominal state-transition diagram can be found in the] documentation

Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: QuestionnairePublicationStatus;
}
/**
 * The response(s) to the question
 * The respondent's answer(s) to the question.
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export interface QuestionnaireResponseItemAnswer extends BackboneElement {
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueAttachment?: Attachment;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueCoding?: Coding;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueQuantity?: Quantity;
    /**
     * Single-valued answer to the question
     * The answer (or one of the answers) provided by the respondent to the question.
     * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
     */
    valueReference?: Reference;
    /**
     * Child items of question
     * Nested groups and/or questions found within this particular answer.
     * Only used when nesting beneath a question - see item.item for nesting beneath groups
     */
    item?: QuestionnaireResponseItem[];
}
/**
 * Groups and questions
 * A group or question item from the original questionnaire for which answers are provided.
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).\nWhen dealing with repeating items, each group repetition will be handled by a separate item.  However, repeating questions are handled with a single question item and potentially multiple answers.
 */
export interface QuestionnaireResponseItem extends BackboneElement {
    /**
     * Pointer to specific item from Questionnaire
     * The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
     */
    linkId: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * ElementDefinition - details for the item
     * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
     * The ElementDefinition must be in a [StructureDefinition](structuredefinition.html#), and must have a fragment identifier that identifies the specific data element by its id (Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].

There is no need for this element if the item pointed to by the linkId has a definition listed.
     */
    definition?: uri;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Name for group or question text
     * Text that is displayed above the contents of the group or as the text of the question being answered.
     * The text for an item SHOULD be identical to the text from the corresponding Questionnaire.item. This can't be strictly enforced because it's possible for the Questionnaire to be updated subsequent to the QuestionnaireResponse having been created, however the intention is that the text in the QuestionnaireResponse reflects what the user saw when completing the Questionnaire.
     */
    text?: string;
    /**
     * Extension for text
     **/
    _text?: Element;
    /**
     * The response(s) to the question
     * The respondent's answer(s) to the question.
     * The value is nested because we cannot have a repeating structure that has variable type.
     */
    answer?: QuestionnaireResponseItemAnswer[];
    /**
     * Child items of group item
     * Sub-questions, sub-groups or display items nested beneath a group.
     * Only used when nesting beneath a group - see item.answer.item for nesting beneath questions
     */
    item?: QuestionnaireResponseItem[];
}
/**
 * A structured set of questions and their answers
 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
 * The QuestionnaireResponse contains enough information about the questions asked and their organization that it can be interpreted somewhat independently from the Questionnaire it is based on.  I.e. You don't need access to the Questionnaire in order to extract basic information from a QuestionnaireResponse.
 */
export interface QuestionnaireResponse extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'QuestionnaireResponse';
    /**
     * Business identifier for this set of answers
     * Business identifiers assigned to this questionnaire response by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.
     * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).
     */
    identifier?: Identifier[];
    /**
     * Request fulfilled by this QuestionnaireResponse
     * A plan, proposal or order that is fulfilled in whole or in part by this questionnaire response.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event
     * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
     * Not to be used to link an questionnaire response to an Encounter - use 'context' for that.

Composition of questionnaire responses will be handled using the Assemble operation defined in the SDC IG.  For relationships to referrals, and other types of requests, use basedOn.
     */
    partOf?: Reference[];
    /**
     * Canonical URL of Questionnaire being answered
     * The Questionnaire that defines and organizes the questions for which answers are being provided.
     * If a QuestionnaireResponse references a Questionnaire that can be resolved, then the QuestionnaireResponse structure must be consistent with the Questionnaire (i.e. questions must be organized into the same groups, nested questions must still be nested, etc.).  It is possible to have a QuestionnaireResponse whose 'questionnaire' element does not resolve.  It is also possible for the questionnaire element to not have a value but only extensions (e.g. conveying the title or identifier for the questionnaire).  This may happen for legacy data.  If there is no formally defined Questionnaire, it is undefined what the 'correct' values for the linkId elements should be and it is possible that linkIds might be inconsistent for QuestionnaireResponses for the same form if captured by distinct systems.
     */
    questionnaire: canonical;
    /**
     * Extension for questionnaire
     **/
    _questionnaire?: Element;
    /**
     * The subject of the questions
     * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
     * If the Questionnaire declared a subjectType, the resource pointed to by this element must be an instance of one of the listed types.
     */
    subject?: Reference;
    /**
     * Encounter the questionnaire response is part of
     * The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.
     * This will typically be the encounter the questionnaire response was created during, but some questionnaire responses may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission forms).  A questionnaire that was initiated during an encounter but not fully completed during the encounter would still generally be associated with the encounter.
     */
    encounter?: Reference;
    /**
     * Date the answers were gathered
     * The date and/or time that this questionnaire response was last modified by the user - e.g. changing answers or revising status.
     * May be different from the lastUpdateTime of the resource itself, because that reflects when the data was known to the server, not when the data was captured.

This element is optional to allow for systems that might not know the value, however it SHOULD be populated if possible.
     */
    authored?: dateTime;
    /**
     * Extension for authored
     **/
    _authored?: Element;
    /**
     * The individual or device that received and recorded the answers
     * The individual or device that received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
     * Mapping a subject's answers to multiple choice options and determining what to put in the textual answer is a matter of interpretation. Authoring by device would indicate that some portion of the questionnaire had been auto-populated. Device should only be used if it directly determined the answers, not if it was merely used as a capture tool to record answers provided by others. In the latter case, information about the physical device, software, etc. would be captured using Provenance.
     */
    author?: Reference;
    /**
     * The individual or device that answered the questions
     * The individual or device that answered the questions about the subject.
     * If not specified, no inference can be made about who provided the data. Device should only be used if it directly determined the answers, not if it was merely used as a capture tool to record answers provided by others. In the latter case, information about the physical device, software, etc. would be captured using Provenance.
     */
    source?: Reference;
    /**
     * Groups and questions
     * A group or question item from the original questionnaire for which answers are provided.
     * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).\nWhen dealing with repeating items, each group repetition will be handled by a separate item.  However, repeating questions are handled with a single question item and potentially multiple answers.
     */
    item?: QuestionnaireResponseItem[];
    /**
     * in-progress | completed | amended | entered-in-error | stopped
     * The current state of the questionnaire response.
     * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
     */
    status: QuestionnaireResponseStatus;
}
/**
 * The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page)
 * The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).
 */
export interface RegulatedAuthorizationCase extends BackboneElement {
    /**
     * Identifier by which this case can be referenced
     * Identifier by which this case can be referenced.
     */
    identifier?: Identifier;
    /**
     * The defining type of case
     * The defining type of case.
     */
    type?: CodeableConcept;
    /**
     * The status associated with the case
     * The status associated with the case.
     */
    status?: CodeableConcept;
    /**
     * Relevant date for this case
     * Relevant date for this case.
     */
    datePeriod?: Period;
    /**
     * Relevant date for this case
     * Relevant date for this case.
     */
    dateDateTime?: dateTime;
    /**
     * Extension for dateDateTime
     **/
    _dateDateTime?: Element;
    /**
     * Applications submitted to obtain a regulated authorization. Steps within the longer running case or procedure
     * A regulatory submission from an organization to a regulator, as part of an assessing case. Multiple applications may occur over time, with more or different information to support or modify the submission or the authorization. The applications can be considered as steps within the longer running case or procedure for this authorization process.
     */
    application?: RegulatedAuthorizationCase[];
}
/**
 * Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity e.g. Market Authorization for a Medicinal Product
 * Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.
 */
export interface RegulatedAuthorization extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'RegulatedAuthorization';
    /**
     * Business identifier for the authorization, typically assigned by the authorizing body
     * Business identifier for the authorization, typically assigned by the authorizing body.
     */
    identifier?: Identifier[];
    /**
     * The product type, treatment, facility or activity that is being authorized
     * The product type, treatment, facility or activity that is being authorized.
     */
    subject?: Reference[];
    /**
     * Overall type of this authorization, for example drug marketing approval, orphan drug designation
     * Overall type of this authorization, for example drug marketing approval, orphan drug designation.
     */
    type?: CodeableConcept;
    /**
     * General textual supporting information
     * General textual supporting information.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The territory in which the authorization has been granted
     * The territory (e.g., country, jurisdiction etc.) in which the authorization has been granted.
     */
    region?: CodeableConcept[];
    /**
     * The status that is authorised e.g. approved. Intermediate states can be tracked with cases and applications
     * The status that is authorised e.g. approved. Intermediate states and actions can be tracked with cases and applications.
     */
    status?: CodeableConcept;
    /**
     * The date at which the current status was assigned
     * The date at which the current status was assigned.
     */
    statusDate?: dateTime;
    /**
     * Extension for statusDate
     **/
    _statusDate?: Element;
    /**
     * The time period in which the regulatory approval etc. is in effect, e.g. a Marketing Authorization includes the date of authorization and/or expiration date
     * The time period in which the regulatory approval, clearance or licencing is in effect. As an example, a Marketing Authorization includes the date of authorization and/or an expiration date.
     */
    validityPeriod?: Period;
    /**
     * Condition for which the use of the regulated product applies
     * Condition for which the use of the regulated product applies.
     */
    indication?: CodeableReference[];
    /**
     * The intended use of the product, e.g. prevention, treatment
     * The intended use of the product, e.g. prevention, treatment, diagnosis.
     */
    intendedUse?: CodeableConcept;
    /**
     * The legal/regulatory framework or reasons under which this authorization is granted
     * The legal or regulatory framework against which this authorization is granted, or other reasons for it.
     */
    basis?: CodeableConcept[];
    /**
     * The organization that has been granted this authorization, by the regulator
     * The organization that has been granted this authorization, by some authoritative body (the 'regulator').
     */
    holder?: Reference;
    /**
     * The regulatory authority or authorizing body granting the authorization
     * The regulatory authority or authorizing body granting the authorization. For example, European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), etc.
     */
    regulator?: Reference;
    /**
     * Additional information or supporting documentation about the authorization
     * Additional information or supporting documentation about the authorization.
     */
    attachedDocument?: Reference[];
    /**
     * The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page)
     * The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).
     */
    case?: RegulatedAuthorizationCase;
}
/**
 * A language which may be used to communicate with the related person about the patient's health
 * A language which may be used to communicate with the related person about the patient's health.
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export interface RelatedPersonCommunication extends BackboneElement {
    /**
     * The language which can be used to communicate with the related person about the patient's health
     * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
     * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
     */
    language: CodeableConcept;
    /**
     * Language preference indicator
     * Indicates whether or not the related person prefers this language (over other languages he or she masters up a certain level).
     * This language is specifically identified for communicating healthcare information.
     */
    preferred?: boolean;
    /**
     * Extension for preferred
     **/
    _preferred?: Element;
}
/**
 * A person that is related to a patient, but who is not a direct target of care
 * Information about a person that is involved in a patient's health or the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
 */
export interface RelatedPerson extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'RelatedPerson';
    /**
     * A human identifier for this person
     * Identifier for a person within a particular scope.
     * RelatedPerson identifiers might not be unique across instances within a system, as a single human individual may be represented as many different RelatedPerson resources with different roles, periods, or relationships.
     */
    identifier?: Identifier[];
    /**
     * Whether this related person's record is in active use
     * Whether this related person record is in active use.
     * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * The patient this person is related to
     * The patient this person is related to.
     */
    patient: Reference;
    /**
     * The relationship of the related person to the patient
     * The nature of the relationship between the related person and the patient.
     * The directionality of the relationship is from the RelatedPerson to the Patient. For example, if the Patient is a child, and the RelatedPerson is the mother, the relationship would be PRN (parent) or MTH (mother).
     */
    relationship?: CodeableConcept[];
    /**
     * A name associated with the person
     * A name associated with the person.
     */
    name?: HumanName[];
    /**
     * A contact detail for the person
     * A contact detail for the person, e.g. a telephone number or an email address.
     * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
     */
    telecom?: ContactPoint[];
    /**
     * The date on which the related person was born
     * The date on which the related person was born.
     */
    birthDate?: date;
    /**
     * Extension for birthDate
     **/
    _birthDate?: Element;
    /**
     * Address where the related person can be contacted or visited
     * Address where the related person can be contacted or visited.
     */
    address?: Address[];
    /**
     * Image of the person
     * Image of the person.
     */
    photo?: Attachment[];
    /**
     * Period of time that this relationship is considered valid
     * The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
     * If an individual has a relationship with a patient over multiple, non-adjacent periods, there should be a distinct RelatedPerson instance for each period.  For example, if a person is a roommate for a period of time, moves out, and is later a roommate with the same person again, you would have two RelatedPerson instances.
     */
    period?: Period;
    /**
     * A language which may be used to communicate with the related person about the patient's health
     * A language which may be used to communicate with the related person about the patient's health.
     * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
     */
    communication?: RelatedPersonCommunication[];
    /**
     * male | female | other | unknown
     * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: RelatedPersonAdministrativeGender;
}
/**
 * Whether or not the action is applicable
 * An expression that describes applicability criteria, or start/stop conditions for the action.
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
export interface RequestOrchestrationActionCondition extends BackboneElement {
    /**
     * Boolean-valued expression
     * An expression that returns true or false, indicating whether or not the condition is satisfied.
     * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
     */
    expression?: Expression;
    /**
     * applicability | start | stop
     * The kind of condition.
     * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
     */
    kind: RequestOrchestrationActionConditionKind;
}
/**
 * Input data requirements
 * Defines input data requirements for the action.
 */
export interface RequestOrchestrationActionInput extends BackboneElement {
    /**
     * User-visible title
     * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * What data is provided
     * Defines the data that is to be provided as input to the action.
     */
    requirement?: DataRequirement;
    /**
     * What data is provided
     * Points to an existing input or output element that provides data to this input.
     * The relatedData element allows indicating that an input to a parent action is an input to specific child actions. It also allows the output of one action to be identified as the input to a different action
     */
    relatedData?: id;
    /**
     * Extension for relatedData
     **/
    _relatedData?: Element;
}
/**
 * Output data definition
 * Defines the outputs of the action, if any.
 */
export interface RequestOrchestrationActionOutput extends BackboneElement {
    /**
     * User-visible title
     * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * What data is provided
     * Defines the data that results as output from the action.
     */
    requirement?: DataRequirement;
    /**
     * What data is provided
     * Points to an existing input or output element that is results as output from the action.
     * The relatedData element allows indicating that the output of child action is also the output of a parent action. It also allows the input of one action to be identified as the output of a different action
     */
    relatedData?: string;
    /**
     * Extension for relatedData
     **/
    _relatedData?: Element;
}
/**
 * Relationship to another action
 * A relationship to another action such as "before" or "30-60 minutes after start of".
 */
export interface RequestOrchestrationActionRelatedAction extends BackboneElement {
    /**
     * What action this is related to
     * The element id of the target related action.
     */
    targetId: id;
    /**
     * Extension for targetId
     **/
    _targetId?: Element;
    /**
     * Time offset for the relationship
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetDuration?: Duration;
    /**
     * Time offset for the relationship
     * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
     */
    offsetRange?: Range;
    /**
     * before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
     * The relationship of this action to the related action.
     */
    relationship: RequestOrchestrationActionRelationshipType;
    /**
     * before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
     * The relationship of the end of this action to the related action.
     */
    endRelationship?: RequestOrchestrationActionRelationshipType;
}
/**
 * Who should perform the action
 * The participant that should perform or be responsible for this action.
 * Because request orchestrations represent potential options for performing activities, some specific participants may still be unknown, so this element allows for both definitional participants (in the same way they are specified in ActivityDefinition and PlanDefinition resources) as well as identifying specific participants when they are known.
 */
export interface RequestOrchestrationActionParticipant extends BackboneElement {
    /**
     * Who or what can participate
     * The type of participant in the action.
     */
    typeCanonical?: canonical;
    /**
     * Extension for typeCanonical
     **/
    _typeCanonical?: Element;
    /**
     * Who or what can participate
     * The type of participant in the action.
     * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
     */
    typeReference?: Reference;
    /**
     * E.g. Nurse, Surgeon, Parent, etc
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
    /**
     * E.g. Author, Reviewer, Witness, etc
     * Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
     */
    function?: CodeableConcept;
    /**
     * Who/what is participating?
     * A reference to the actual participant.
     */
    actorCanonical?: canonical;
    /**
     * Extension for actorCanonical
     **/
    _actorCanonical?: Element;
    /**
     * Who/what is participating?
     * A reference to the actual participant.
     */
    actorReference?: Reference;
    /**
     * careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
     * The type of participant in the action.
     */
    type?: RequestOrchestrationActivityParticipantType;
}
/**
 * Dynamic aspects of the definition
 * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
 * Dynamic values are applied in the order in which they are defined in the RequestOrchestration resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export interface RequestOrchestrationActionDynamicValue extends BackboneElement {
    /**
     * The path to the element to be set dynamically
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     * To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * An expression that provides the dynamic value for the customization
     * An expression specifying the value of the customized element.
     * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
     */
    expression?: Expression;
}
/**
 * Proposed actions, if any
 * The actions, if any, produced by the evaluation of the artifact.
 */
export interface RequestOrchestrationAction extends BackboneElement {
    /**
     * Pointer to specific item from the PlanDefinition
     * The linkId of the action from the PlanDefinition that corresponds to this action in the RequestOrchestration resource.
     */
    linkId?: string;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * User-visible prefix for the action (e.g. 1. or A.)
     * A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
     */
    prefix?: string;
    /**
     * Extension for prefix
     **/
    _prefix?: Element;
    /**
     * User-visible title
     * The title of the action displayed to a user.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Short description of the action
     * A short description of the action used to provide a summary to display to the user.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
     * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    textEquivalent?: markdown;
    /**
     * Extension for textEquivalent
     **/
    _textEquivalent?: Element;
    /**
     * Code representing the meaning of the action or sub-actions
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
     */
    code?: CodeableConcept[];
    /**
     * Supporting documentation for the intended performer of the action
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: RelatedArtifact[];
    /**
     * What goals
     * Goals that are intended to be achieved by following the requests in this action.
     */
    goal?: Reference[];
    /**
     * Whether or not the action is applicable
     * An expression that describes applicability criteria, or start/stop conditions for the action.
     * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
     */
    condition?: RequestOrchestrationActionCondition[];
    /**
     * Input data requirements
     * Defines input data requirements for the action.
     */
    input?: RequestOrchestrationActionInput[];
    /**
     * Output data definition
     * Defines the outputs of the action, if any.
     */
    output?: RequestOrchestrationActionOutput[];
    /**
     * Relationship to another action
     * A relationship to another action such as "before" or "30-60 minutes after start of".
     */
    relatedAction?: RequestOrchestrationActionRelatedAction[];
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
     */
    timingDateTime?: dateTime;
    /**
     * Extension for timingDateTime
     **/
    _timingDateTime?: Element;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
     */
    timingAge?: Age;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
     */
    timingPeriod?: Period;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
     */
    timingDuration?: Duration;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
     */
    timingRange?: Range;
    /**
     * When the action should take place
     * An optional value describing when the action should be performed.
     * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
     */
    timingTiming?: Timing;
    /**
     * Where it should happen
     * Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.
     * May reference a specific clinical location or may just identify a type of location.
     */
    location?: CodeableReference;
    /**
     * Who should perform the action
     * The participant that should perform or be responsible for this action.
     * Because request orchestrations represent potential options for performing activities, some specific participants may still be unknown, so this element allows for both definitional participants (in the same way they are specified in ActivityDefinition and PlanDefinition resources) as well as identifying specific participants when they are known.
     */
    participant?: RequestOrchestrationActionParticipant[];
    /**
     * create | update | remove | fire-event
     * The type of action to perform (create, update, remove).
     */
    type?: CodeableConcept;
    /**
     * The target of the action
     * The resource that is the target of the action (e.g. CommunicationRequest).
     * The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
     */
    resource?: Reference;
    /**
     * Description of the activity to be performed
     * A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
     * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
     */
    definitionCanonical?: canonical;
    /**
     * Extension for definitionCanonical
     **/
    _definitionCanonical?: Element;
    /**
     * Description of the activity to be performed
     * A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
     * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
     */
    definitionUri?: uri;
    /**
     * Extension for definitionUri
     **/
    _definitionUri?: Element;
    /**
     * Transform to apply the template
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     * Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
     */
    transform?: canonical;
    /**
     * Extension for transform
     **/
    _transform?: Element;
    /**
     * Dynamic aspects of the definition
     * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
     * Dynamic values are applied in the order in which they are defined in the RequestOrchestration resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
     */
    dynamicValue?: RequestOrchestrationActionDynamicValue[];
    /**
     * Sub action
     * Sub actions.
     */
    action?: RequestOrchestrationAction[];
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    priority?: RequestOrchestrationRequestPriority;
    /**
     * visual-group | logical-group | sentence-group
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: RequestOrchestrationActionGroupingBehavior;
    /**
     * any | all | all-or-none | exactly-one | at-most-one | one-or-more
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: RequestOrchestrationActionSelectionBehavior;
    /**
     * must | could | must-unless-documented
     * Defines expectations around whether an action is required.
     */
    requiredBehavior?: RequestOrchestrationActionRequiredBehavior;
    /**
     * yes | no
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: RequestOrchestrationActionPrecheckBehavior;
    /**
     * single | multiple
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: RequestOrchestrationActionCardinalityBehavior;
}
/**
 * A set of related requests
 * A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
 */
export interface RequestOrchestration extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'RequestOrchestration';
    /**
     * Business identifier
     * Allows a service to provide a unique, business identifier for the request.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * Fulfills plan, proposal, or order
     * A plan, proposal or order that is fulfilled in whole or in part by this request.
     */
    basedOn?: Reference[];
    /**
     * Request(s) replaced by this request
     * Completed or terminated request(s) whose function is taken by this new request.
     * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
     */
    replaces?: Reference[];
    /**
     * Composite request this is part of
     * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
     * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
     */
    groupIdentifier?: Identifier;
    /**
     * What's being requested/ordered
     * A code that identifies what the overall request orchestration is.
     * This element can be used to provide a code that captures the meaning of the request orchestration as a whole, as opposed to the code of the action element, which captures the meaning of the individual actions within the request orchestration.
     */
    code?: CodeableConcept;
    /**
     * Who the request orchestration is about
     * The subject for which the request orchestration was created.
     */
    subject?: Reference;
    /**
     * Created as part of
     * Describes the context of the request orchestration, if any.
     */
    encounter?: Reference;
    /**
     * When the request orchestration was authored
     * Indicates when the request orchestration was created.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Device or practitioner that authored the request orchestration
     * Provides a reference to the author of the request orchestration.
     */
    author?: Reference;
    /**
     * Why the request orchestration is needed
     * Describes the reason for the request orchestration in coded or textual form.
     */
    reason?: CodeableReference[];
    /**
     * What goals
     * Goals that are intended to be achieved by following the requests in this RequestOrchestration.
     */
    goal?: Reference[];
    /**
     * Additional notes about the response
     * Provides a mechanism to communicate additional information about the response.
     */
    note?: Annotation[];
    /**
     * Proposed actions, if any
     * The actions, if any, produced by the evaluation of the artifact.
     */
    action?: RequestOrchestrationAction[];
    /**
     * draft | active | on-hold | revoked | completed | entered-in-error | unknown
     * The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration.
     */
    status: RequestOrchestrationRequestStatus;
    /**
     * proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
     * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
     */
    intent: RequestOrchestrationRequestIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the request should be addressed with respect to other requests.
     */
    priority?: RequestOrchestrationRequestPriority;
}
/**
 * Actual statement as markdown
 * The actual statement of requirement, in markdown format.
 */
export interface RequirementsStatement extends BackboneElement {
    /**
     * Key that identifies this statement
     * Key that identifies this statement (unique within this resource).
     * Refer directly to the statement by {url}#{key}
     */
    key: id;
    /**
     * Extension for key
     **/
    _key?: Element;
    /**
     * Short Human label for this statement
     * A short human usable label for this statement.
     * The key is intended for computers, while this is intended for humans. In its absence, the key should be convenient for a human to say (e.g. not a UUID)
     */
    label?: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Set to true if requirements statement is conditional
     * This boolean flag is set to true of the text of the requirement is conditional on something e.g. it includes lanauage like 'if x then y'. This conditionality flag is introduced for purposes of filtering and colour highlighting etc.
     * There is no intent that the conditional statement by evaluatable
     */
    conditionality?: boolean;
    /**
     * Extension for conditionality
     **/
    _conditionality?: Element;
    /**
     * The actual requirement
     * The actual requirement for human consumption.
     */
    requirement: markdown;
    /**
     * Extension for requirement
     **/
    _requirement?: Element;
    /**
     * Another statement this clarifies/restricts ([url#]key)
     * Another statement on one of the requirements that this requirement clarifies or restricts.
     * This can be just a key, if there is only one matching statement in the requirements statements referenced in Requirements.derivedFrom. If there is more than one, it should be in the format ```url#key```
     */
    derivedFrom?: string;
    /**
     * Extension for derivedFrom
     **/
    _derivedFrom?: Element;
    /**
     * A larger requirement that this requirement helps to refine and enable
     * A larger requirement that this requirement helps to refine and enable.
     * Follows the same convention as statement.derivedFrom, where a reference is the canonical of the Requirements followed by '#' and the 'key' of the specific requirement.
     */
    parent?: string;
    /**
     * Extension for parent
     **/
    _parent?: Element;
    /**
     * Design artifact that satisfies this requirement
     * A reference to another artifact that satisfies this requirement. This could be a Profile, extension, or an element in one of those, or a CapabilityStatement, OperationDefinition, SearchParameter, CodeSystem(/code), ValueSet, Libary etc.
     * This is for use when the requirement is met be a pre-existing artifact e.g. a rule that's met by the base FHIR spec, or a national implementation guide.
     */
    satisfiedBy?: url[];
    /**
     * Extension for satisfiedBy
     **/
    _satisfiedBy?: Element[];
    /**
     * External artifact (rule/document etc. that) created this requirement
     * A reference to another artifact that created this requirement. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.
     */
    reference?: url[];
    /**
     * Extension for reference
     **/
    _reference?: Element[];
    /**
     * Who asked for this statement
     * Who asked for this statement to be a requirement. By default, it's assumed that the publisher knows who it is if it matters.
     */
    source?: Reference[];
    /**
     * SHALL | SHOULD | MAY | SHOULD-NOT
     * A short human usable label for this statement.
     * The conformance code is extracted from the requirement to make indexing and display easier. The requirement needs to express the conformance verbs directly in the markdown content. It's not unusual to mix verbs in a single sentence (e.g. System SHALL do X and SHOULD do Y)
     */
    conformance?: RequirementsStatementConformance[];
}
/**
 * A set of requirements - features of systems that are necessary
 * A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals.
 */
export interface Requirements extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Requirements';
    /**
     * Canonical identifier for this Requirements, represented as a URI (globally unique)
     * An absolute URI that is used to identify this Requirements when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Requirements is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Requirements is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the Requirements (business identifier)
     * A formal identifier that is used to identify this Requirements when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the Requirements
     * The identifier that is used to identify this version of the Requirements when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Requirements author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different Requirements instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the Requirements with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this Requirements (computer friendly)
     * A natural language name identifying the Requirements. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this Requirements (human friendly)
     * A short, descriptive, user-friendly title for the Requirements.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this Requirements is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of Requirements that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the Requirements was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the Requirements changes.
     * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the Requirements. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the Requirements.
     * Usually an organization but may be an individual. The publisher (or steward) of the Requirements is the organization or individual primarily responsible for the maintenance and upkeep of the Requirements. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the Requirements. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the requirements
     * A free text natural language description of the requirements.
     * This description can be used for a general description of the requirements, and which covers why it was defined.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Requirements instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for Requirements (if applicable)
     * A legal or geographic region in which the Requirements is intended to be used.
     * It may be possible for the Requirements to be used in jurisdictions other than those for which it was originally designed or intended

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.).
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this Requirements is defined
     * Explanation of why this Requirements is needed and why it has been designed as it has.
     * This element does not describe the usage of the Requirements. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Requirements.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the Requirements and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Requirements.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Other set of Requirements this builds on
     * Another set of Requirements that this set of Requirements builds on and updates.
     * Existing statements (by key) may be narrowed or clarified, and additional statements added.
     */
    derivedFrom?: canonical[];
    /**
     * Extension for derivedFrom
     **/
    _derivedFrom?: Element[];
    /**
     * External artifact (rule/document etc. that) created this set of requirements
     * A reference to another artifact that created this set of requirements. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.
     */
    reference?: url[];
    /**
     * Extension for reference
     **/
    _reference?: Element[];
    /**
     * Actor for these requirements
     * An actor these requirements are in regard to.
     * If more than one actor is specified, then it's up to the statements to describe in narrative if they don't apply to all actors.
     */
    actor?: canonical[];
    /**
     * Extension for actor
     **/
    _actor?: Element[];
    /**
     * Actual statement as markdown
     * The actual statement of requirement, in markdown format.
     */
    statement?: RequirementsStatement[];
    /**
     * draft | active | retired | unknown
     * The status of this Requirements. Enables tracking the life-cycle of the content.
     * Allows filtering of Requirements that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: RequirementsPublicationStatus;
}
/**
 * Additional names for the study
 * Additional names for the study.
 */
export interface ResearchStudyLabel extends BackboneElement {
    /**
     * primary | official | scientific | plain-language | subtitle | short-title | acronym | earlier-title | language | auto-translated | human-use | machine-use | duplicate-uid
     * Kind of name.
     */
    type?: CodeableConcept;
    /**
     * The name
     * The name.
     */
    value?: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Sponsors, collaborators, and other parties
 * Sponsors, collaborators, and other parties.
 * For a Sponsor or a PrincipalInvestigator use the dedicated attributes provided.
 */
export interface ResearchStudyAssociatedParty extends BackboneElement {
    /**
     * Name of associated party
     * Name of associated party.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * sponsor | lead-sponsor | sponsor-investigator | primary-investigator | collaborator | funding-source | general-contact | recruitment-contact | sub-investigator | study-director | study-chair
     * Type of association.
     */
    role: CodeableConcept;
    /**
     * When active in the role
     * Identifies the start date and the end date of the associated party in the role.
     * The cardinality is 0..* due to the fact that an associated party may be intermittently active in a given role over multiple time periods.
     */
    period?: Period[];
    /**
     * nih | fda | government | nonprofit | academic | industry
     * A categorization other than role for the associated party.
     */
    classifier?: CodeableConcept[];
    /**
     * Individual or organization associated with study (use practitionerRole to specify their organisation)
     * Individual or organization associated with study (use practitionerRole to specify their organisation).
     * Suggestions of a better attribute name are appreciated
     */
    party?: Reference;
}
/**
 * Status of study with time for that status
 * Status of study with time for that status.
 */
export interface ResearchStudyProgressStatus extends BackboneElement {
    /**
     * Label for status or state (e.g. recruitment status)
     * Label for status or state (e.g. recruitment status).
     */
    state: CodeableConcept;
    /**
     * Actual if true else anticipated
     * An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date.
     */
    actual?: boolean;
    /**
     * Extension for actual
     **/
    _actual?: Element;
    /**
     * Date range
     * Date range.
     */
    period?: Period;
}
/**
 * Target or actual group of participants enrolled in study
 * Target or actual group of participants enrolled in study.
 */
export interface ResearchStudyRecruitment extends BackboneElement {
    /**
     * Estimated total number of participants to be enrolled
     * Estimated total number of participants to be enrolled.
     */
    targetNumber?: unsignedInt;
    /**
     * Extension for targetNumber
     **/
    _targetNumber?: Element;
    /**
     * Actual total number of participants enrolled in study
     * Actual total number of participants enrolled in study.
     */
    actualNumber?: unsignedInt;
    /**
     * Extension for actualNumber
     **/
    _actualNumber?: Element;
    /**
     * Inclusion and exclusion criteria
     * Inclusion and exclusion criteria.
     */
    eligibility?: Reference;
    /**
     * Group of participants who were enrolled in study
     * Group of participants who were enrolled in study.
     */
    actualGroup?: Reference;
}
/**
 * Defined path through the study for a subject
 * Describes an expected event or sequence of events for one of the subjects of a study. E.g. for a living subject: exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. E.g. for a stability study: {store sample from lot A at 25 degrees for 1 month}, {store sample from lot A at 40 degrees for 1 month}.
 * In many clinical trials this is refered to as the ARM of the study, but such a term is not used in other sorts of trials even when there is a comparison between two or more groups.
 */
export interface ResearchStudyComparisonGroup extends BackboneElement {
    /**
     * Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily
     * Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily.
     */
    linkId?: id;
    /**
     * Extension for linkId
     **/
    _linkId?: Element;
    /**
     * Label for study comparisonGroup
     * Unique, human-readable label for this comparisonGroup of the study.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Categorization of study comparisonGroup
     * Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater.
     */
    type?: CodeableConcept;
    /**
     * Short explanation of study path
     * A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Interventions or exposures in this comparisonGroup or cohort
     * Interventions or exposures in this comparisonGroup or cohort.
     */
    intendedExposure?: Reference[];
    /**
     * Group of participants who were enrolled in study comparisonGroup
     * Group of participants who were enrolled in study comparisonGroup.
     */
    observedGroup?: Reference;
}
/**
 * A goal for the study
 * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
 */
export interface ResearchStudyObjective extends BackboneElement {
    /**
     * Label for the objective
     * Unique, human-readable label for this objective of the study.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * primary | secondary | exploratory
     * The kind of study objective.
     */
    type?: CodeableConcept;
    /**
     * Description of the objective
     * Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
}
/**
 * A variable measured during the study
 * An "outcome measure", "endpoint", "effect measure" or "measure of effect" is a specific measurement or observation used to quantify the effect of experimental variables on the participants in a study, or for observational studies, to describe patterns of diseases or traits or associations with exposures, risk factors or treatment.
 * A study may have multiple distinct outcome measures that can be used to assess the overall goal for a study. The goal of a study is in the objective whereas the metric by which the goal is assessed is the outcomeMeasure. Examples: Time to Local Recurrence (TLR), Disease-free Survival (DFS), 30 Day Mortality, Systolic BP
 */
export interface ResearchStudyOutcomeMeasure extends BackboneElement {
    /**
     * Label for the outcome
     * Label for the outcome.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * primary | secondary | exploratory
     * The parameter or characteristic being assessed as one of the values by which the study is assessed.
     */
    type?: CodeableConcept[];
    /**
     * Description of the outcome
     * Description of the outcome.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Structured outcome definition
     * Structured outcome definition.
     */
    reference?: Reference;
}
/**
 * Investigation to increase healthcare-related patient-independent knowledge
 * A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.
 * Need to make sure we encompass public health studies.
 */
export interface ResearchStudy extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ResearchStudy';
    /**
     * Canonical identifier for this study resource
     * Canonical identifier for this study resource, represented as a globally unique URI.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business Identifier for study
     * Identifiers assigned to this research study by the sponsor or other systems.
     */
    identifier?: Identifier[];
    /**
     * The business version for the study record
     * The business version for the study record.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Name for this study (computer friendly)
     * Name for this study (computer friendly).
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Human readable name of the study
     * The human readable name of the research study.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Additional names for the study
     * Additional names for the study.
     */
    label?: ResearchStudyLabel[];
    /**
     * Steps followed in executing study
     * The set of steps expected to be performed as part of the execution of the study.
     */
    protocol?: Reference[];
    /**
     * Part of larger study
     * A larger research study of which this particular study is a component or step.
     */
    partOf?: Reference[];
    /**
     * References, URLs, and attachments
     * Citations, references, URLs and other related documents.  When using relatedArtifact to share URLs, the relatedArtifact.type will often be set to one of "documentation" or "supported-with" and the URL value will often be in relatedArtifact.document.url but another possible location is relatedArtifact.resource when it is a canonical URL.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Date the resource last changed
     * The date (and optionally time) when the ResearchStudy Resource was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility
     * The type of study based upon the intent of the study activities. A classification of the intent of the study.
     */
    primaryPurposeType?: CodeableConcept;
    /**
     * n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4
     * The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
     */
    phase?: CodeableConcept;
    /**
     * Classifications of the study design characteristics
     * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
     */
    studyDesign?: CodeableConcept[];
    /**
     * Drugs, devices, etc. under study
     * The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
     */
    focus?: CodeableReference[];
    /**
     * Condition being studied
     * The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
     */
    condition?: CodeableConcept[];
    /**
     * Used to search for the study
     * Key terms to aid in searching for or filtering the study.
     */
    keyword?: CodeableConcept[];
    /**
     * Geographic area for the study
     * A country, state or other area where the study is taking place rather than its precise geographic location or address.
     */
    region?: CodeableConcept[];
    /**
     * Brief text explaining the study
     * A brief text for explaining the study.
     */
    descriptionSummary?: markdown;
    /**
     * Extension for descriptionSummary
     **/
    _descriptionSummary?: Element;
    /**
     * Detailed narrative of the study
     * A detailed and human-readable narrative of the study. E.g., study abstract.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * When the study began and ended
     * Identifies the start date and the expected (or actual, depending on status) end date for the study.
     */
    period?: Period;
    /**
     * Facility where study activities are conducted
     * A facility in which study activities are conducted.
     */
    site?: Reference[];
    /**
     * Comments made about the study
     * Comments made about the study by the performer, subject or other participants.
     */
    note?: Annotation[];
    /**
     * Classification for the study
     * Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource.
     */
    classifier?: CodeableConcept[];
    /**
     * Sponsors, collaborators, and other parties
     * Sponsors, collaborators, and other parties.
     * For a Sponsor or a PrincipalInvestigator use the dedicated attributes provided.
     */
    associatedParty?: ResearchStudyAssociatedParty[];
    /**
     * Status of study with time for that status
     * Status of study with time for that status.
     */
    progressStatus?: ResearchStudyProgressStatus[];
    /**
     * accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design
     * A description and/or code explaining the premature termination of the study.
     */
    whyStopped?: CodeableConcept;
    /**
     * Target or actual group of participants enrolled in study
     * Target or actual group of participants enrolled in study.
     */
    recruitment?: ResearchStudyRecruitment;
    /**
     * Defined path through the study for a subject
     * Describes an expected event or sequence of events for one of the subjects of a study. E.g. for a living subject: exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. E.g. for a stability study: {store sample from lot A at 25 degrees for 1 month}, {store sample from lot A at 40 degrees for 1 month}.
     * In many clinical trials this is refered to as the ARM of the study, but such a term is not used in other sorts of trials even when there is a comparison between two or more groups.
     */
    comparisonGroup?: ResearchStudyComparisonGroup[];
    /**
     * A goal for the study
     * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
     */
    objective?: ResearchStudyObjective[];
    /**
     * A variable measured during the study
     * An "outcome measure", "endpoint", "effect measure" or "measure of effect" is a specific measurement or observation used to quantify the effect of experimental variables on the participants in a study, or for observational studies, to describe patterns of diseases or traits or associations with exposures, risk factors or treatment.
     * A study may have multiple distinct outcome measures that can be used to assess the overall goal for a study. The goal of a study is in the objective whereas the metric by which the goal is assessed is the outcomeMeasure. Examples: Time to Local Recurrence (TLR), Disease-free Survival (DFS), 30 Day Mortality, Systolic BP
     */
    outcomeMeasure?: ResearchStudyOutcomeMeasure[];
    /**
     * Link to results generated during the study
     * Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov.
     */
    result?: Reference[];
    /**
     * draft | active | retired | unknown
     * The publication state of the resource (not of the study).
     */
    status: ResearchStudyPublicationStatus;
}
/**
 * Subject status
 * The current state (status) of the subject and resons for status change where appropriate.
 * This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them.

It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
 */
export interface ResearchSubjectProgress extends BackboneElement {
    /**
     * state | milestone
     * Identifies the aspect of the subject's journey that the state refers to.
     */
    type?: CodeableConcept;
    /**
     * candidate | eligible | follow-up | ineligible | not-registered | off-study | on-study | on-study-intervention | on-study-observation | pending-on-study | potential-candidate | screening | withdrawn
     * The current state of the subject.
     */
    subjectState?: CodeableConcept;
    /**
     * SignedUp | Screened | Randomized
     * The milestones the subject has passed through.
     * There can be multiple entries but it is also valid to just have the most recent.  This should npt be rlied upon as the full path the subject has taken.
     */
    milestone?: CodeableConcept;
    /**
     * State change reason
     * The reason for the state change.  If coded it should follow the formal subject state model.
     */
    reason?: CodeableConcept;
    /**
     * State change date
     * The date when the new status started.
     * This is NOT the date the change in state was recorded.
     */
    startDate?: dateTime;
    /**
     * Extension for startDate
     **/
    _startDate?: Element;
    /**
     * State change date
     * The date when the state ended.
     */
    endDate?: dateTime;
    /**
     * Extension for endDate
     **/
    _endDate?: Element;
}
/**
 * Participant or object which is the recipient of investigative activities in a study
 * A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study.
 * Need to make sure we encompass public health studies.
 */
export interface ResearchSubject extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ResearchSubject';
    /**
     * Business Identifier for research subject in a study
     * Identifiers assigned to this research subject for a study.
     */
    identifier?: Identifier[];
    /**
     * Subject status
     * The current state (status) of the subject and resons for status change where appropriate.
     * This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them.

It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
     */
    progress?: ResearchSubjectProgress[];
    /**
     * Start and end of participation
     * The dates the subject began and ended their participation in the study.
     */
    period?: Period;
    /**
     * Study subject is part of
     * Reference to the study the subject is participating in.
     */
    study: Reference;
    /**
     * Who or what is part of study
     * The record of the person, animal or other entity involved in the study.
     */
    subject: Reference;
    /**
     * What path should be followed
     * The name of the arm in the study the subject is expected to follow as part of this study.
     * Maybe this is really PlanDefinition.
     */
    assignedComparisonGroup?: id;
    /**
     * Extension for assignedComparisonGroup
     **/
    _assignedComparisonGroup?: Element;
    /**
     * What path was followed
     * The name of the arm in the study the subject actually followed as part of this study.
     */
    actualComparisonGroup?: id;
    /**
     * Extension for actualComparisonGroup
     **/
    _actualComparisonGroup?: Element;
    /**
     * Agreement to participate in study
     * A record of the patient's informed agreement to participate in the study.
     */
    consent?: Reference[];
    /**
     * draft | active | retired | unknown
     * The publication state of the resource (not of the subject).
     */
    status: ResearchSubjectPublicationStatus;
}
/**
 * Base Resource
 * This is the base resource type for everything.
 */
export interface Resource extends Base {
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * Extension for 'resourceType'.
     */
    _resourceType?: Element;
    /**
     * Logical id of this artifact
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     * Within the context of the FHIR RESTful interactions, the resource has an id except for cases like the create and conditional update. Otherwise, the use of the resouce id depends on the given use case.
     */
    id?: string;
    /**
     * Extension for id
     **/
    _id?: Element;
    /**
     * Metadata about the resource
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A set of rules under which this content was created
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     * Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of its narrative along with other profiles, value sets, etc.
     */
    implicitRules?: uri;
    /**
     * Extension for implicitRules
     **/
    _implicitRules?: Element;
    /**
     * Language of the resource content
     * The base language in which the resource is written.
     * Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
     */
    language?: code;
    /**
     * Extension for language
     **/
    _language?: Element;
}
/**
 * Outcome predicted
 * Describes the expected outcome for the subject.
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
export interface RiskAssessmentPrediction extends BackboneElement {
    /**
     * Possible outcome for the subject
     * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
     */
    outcome?: CodeableConcept;
    /**
     * Likelihood of specified outcome
     * Indicates how likely the outcome is (in the specified timeframe).
     * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
     */
    probabilityDecimal?: decimal;
    /**
     * Extension for probabilityDecimal
     **/
    _probabilityDecimal?: Element;
    /**
     * Likelihood of specified outcome
     * Indicates how likely the outcome is (in the specified timeframe).
     * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
     */
    probabilityRange?: Range;
    /**
     * Likelihood of specified outcome as a qualitative value
     * Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
     */
    qualitativeRisk?: CodeableConcept;
    /**
     * Relative likelihood
     * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
     */
    relativeRisk?: decimal;
    /**
     * Extension for relativeRisk
     **/
    _relativeRisk?: Element;
    /**
     * Timeframe or age range
     * Indicates the period of time or age range of the subject to which the specified probability applies.
     * If not specified, the risk applies "over the subject's lifespan".
     */
    whenPeriod?: Period;
    /**
     * Timeframe or age range
     * Indicates the period of time or age range of the subject to which the specified probability applies.
     * If not specified, the risk applies "over the subject's lifespan".
     */
    whenRange?: Range;
    /**
     * Explanation of prediction
     * Additional information explaining the basis for the prediction.
     */
    rationale?: string;
    /**
     * Extension for rationale
     **/
    _rationale?: Element;
}
/**
 * Potential outcomes for a subject with likelihood
 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
 */
export interface RiskAssessment extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'RiskAssessment';
    /**
     * Unique identifier for the assessment
     * Business identifier assigned to the risk assessment.
     */
    identifier?: Identifier[];
    /**
     * Request fulfilled by this assessment
     * A reference to the request that is fulfilled by this risk assessment.
     */
    basedOn?: Reference;
    /**
     * Part of this occurrence
     * A reference to a resource that this risk assessment is part of, such as a Procedure.
     */
    parent?: Reference;
    /**
     * Evaluation mechanism
     * The algorithm, process or mechanism used to evaluate the risk.
     */
    method?: CodeableConcept;
    /**
     * Type of assessment
     * The type of the risk assessment performed.
     */
    code?: CodeableConcept;
    /**
     * Who/what does assessment apply to?
     * The patient or group the risk assessment applies to.
     */
    subject: Reference;
    /**
     * Where was assessment performed?
     * The encounter where the assessment was performed.
     */
    encounter?: Reference;
    /**
     * When was assessment made?
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When was assessment made?
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrencePeriod?: Period;
    /**
     * Condition assessed
     * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
     */
    condition?: Reference;
    /**
     * Who did assessment?
     * The provider, patient, related person, or software application that performed the assessment.
     */
    performer?: Reference;
    /**
     * Why the assessment was necessary?
     * The reason the risk assessment was performed.
     */
    reason?: CodeableReference[];
    /**
     * Information used in assessment
     * Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    basis?: Reference[];
    /**
     * Outcome predicted
     * Describes the expected outcome for the subject.
     * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
     */
    prediction?: RiskAssessmentPrediction[];
    /**
     * How to reduce risk
     * A description of the steps that might be taken to reduce the identified risk(s).
     */
    mitigation?: string;
    /**
     * Extension for mitigation
     **/
    _mitigation?: Element;
    /**
     * Comments on the risk assessment
     * Additional comments about the risk assessment.
     */
    note?: Annotation[];
    /**
     * registered | preliminary | final | amended +
     * The status of the RiskAssessment, using the same statuses as an Observation.
     */
    status: RiskAssessmentStatus;
}
/**
 * A container for slots of time that may be available for booking appointments
 * A container for slots of time that may be available for booking appointments.
 */
export interface Schedule extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Schedule';
    /**
     * External Ids for this item
     * External Ids for this item.
     */
    identifier?: Identifier[];
    /**
     * Whether this schedule is in active use
     * Whether this schedule record is in active use or should not be used (such as was entered in error).
     * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
     */
    active?: boolean;
    /**
     * Extension for active
     **/
    _active?: Element;
    /**
     * High-level category
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * Specific service
     * The specific service that is to be performed during this appointment.
     */
    serviceType?: CodeableReference[];
    /**
     * Type of specialty needed
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * Human-readable label
     * Further description of the schedule as it would be presented to a consumer while searching.
     * This MAY be used to describe what the schedule is for where it is clearer than just the name of the single actor.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Resource(s) that availability information is being provided for
     * Slots that reference this schedule resource provide the availability details to these referenced resource(s).
     * The capacity to support multiple referenced resource types should be used in cases where the specific resources themselves cannot be scheduled without the other, and thus only make sense to the system exposing them as a group. Common examples of this are where the combination of a practitioner and a room (Location) are always required by a system.
     */
    actor: Reference[];
    /**
     * Period of time covered by schedule
     * The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
     */
    planningHorizon?: Period;
    /**
     * Comments on availability
     * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
     */
    comment?: markdown;
    /**
     * Extension for comment
     **/
    _comment?: Element;
}
/**
 * For Composite resources to define the parts
 * Used to define the parts of a composite search parameter.
 */
export interface SearchParameterComponent extends BackboneElement {
    /**
     * Defines how the part works
     * The definition of the search parameter that describes this part.
     */
    definition: canonical;
    /**
     * Extension for definition
     **/
    _definition?: Element;
    /**
     * Subexpression relative to main expression
     * A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
     * This expression overrides the expression in the definition and extracts the index values from the outcome of the composite expression.
     */
    expression: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
}
/**
 * Search parameter for a resource
 * A search parameter that defines a named search item that can be used to search/filter on a resource.
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface SearchParameter extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SearchParameter';
    /**
     * Canonical identifier for this search parameter, represented as a URI (globally unique)
     * An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the search parameter (business identifier)
     * A formal identifier that is used to identify this search parameter when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Business version of the search parameter
     * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different search parameter instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the search parameter with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this search parameter (computer friendly)
     * A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this search parameter (human friendly)
     * A short, descriptive, user-friendly title for the search parameter.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Original definition for the search parameter
     * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
     * The intent of this is that a server can designate that it provides support for a search parameter defined in the specification itself (e.g.  [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantity), but detail how it is supported by the server.
     */
    derivedFrom?: canonical;
    /**
     * Extension for derivedFrom
     **/
    _derivedFrom?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of search parameters that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the search parameter was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the search parameter. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual tresponsible for the release and ongoing maintenance of the search parameter.
     * Usually an organization but may be an individual. The publisher (or steward) of the search parameter is the organization or individual primarily responsible for the maintenance and upkeep of the search parameter. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the search parameter. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the search parameter
     * And how it used.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the search parameter as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the search parameter is presumed to be the predominant language in the place the search parameter was created).
     */
    description: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for search parameter (if applicable)
     * A legal or geographic region in which the search parameter is intended to be used.
     * It may be possible for the search parameter to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this search parameter is defined
     * Explanation of why this search parameter is needed and why it has been designed as it has.
     * This element does not describe the usage of the search parameter. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this search parameter.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the search parameter and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the search parameter.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Recommended name for parameter in search url
     * The label that is recommended to be used in the URL or the parameter name in a parameters resource for this search parameter.  In some cases, servers may need to use a different CapabilityStatement searchParam.name to differentiate between multiple SearchParameters that happen to have the same code.
     * For maximum compatibility, use only lowercase ASCII characters. Note that HL7 will never define multiple search parameters with the same code.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * The resource type(s) this search parameter applies to
     * The base resource type(s) that this search parameter can be used against.
     * A search parameter must always apply to at least one resource type. When search parameters apply to more than one resource type, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).
     */
    base: code[];
    /**
     * Extension for base
     **/
    _base?: Element[];
    /**
     * FHIRPath expression that extracts the values
     * A FHIRPath expression that returns a set of elements for the search parameter.
     * Note that the elements returned by the expression are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system. For composite search parameters, the outcome of the expression must a collection of base elements from which the composites are derived.
     */
    expression?: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * FHIRPath expression that constraints the usage of this SearchParamete
     * FHIRPath expression that defines/sets a complex constraint for when this SearchParameter is applicable.
     */
    constraint?: string;
    /**
     * Extension for constraint
     **/
    _constraint?: Element;
    /**
     * Types of resource (if a resource reference)
     * Types of resource (if a resource is referenced).
     * In some cases, targets may exist for a search parameter that do not exist for the specified FHIRPath for all of the resources identified in SearchParameter.base.  For example, the core clinical-encounter search parameter allows both Encounter and EpisodeOfCare as targets, even though not all of the base resources have EpisodeOfCare as a valid target.

However, the list of targets SHOULD cover all targets that might appear that are permitted by the specified FHIRPath.
     */
    target?: code[];
    /**
     * Extension for target
     **/
    _target?: Element[];
    /**
     * Allow multiple values per parameter (or)
     * Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
     */
    multipleOr?: boolean;
    /**
     * Extension for multipleOr
     **/
    _multipleOr?: Element;
    /**
     * Allow multiple parameters (and)
     * Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.
     */
    multipleAnd?: boolean;
    /**
     * Extension for multipleAnd
     **/
    _multipleAnd?: Element;
    /**
     * Chained names supported
     * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
     * Notes:

* Not all systems will declare chain values.  If no chain values are specified at all, then no presumptions can be made about the degree of chaining support available
* A server may use a single chain value of '*' to mean that all reference search types supported can be chained rather than enumerating all chain values
*  If a particular reference search parameter is supported, but not subsequent chaining, then just list that search parameter name - e.g. for Patient.practitioner, the chain value would be ```practitioner```
* If a particular reference search parameter is supported with unlimited chaining beneath it, then follow the search parameter name with '.'.  E.g. ```practitioner.```
* If there are specific (not unlimited) chaining paths allowed they can be explicitly enumerated.  E.g. ```practitioner.organization```
     */
    chain?: string[];
    /**
     * Extension for chain
     **/
    _chain?: Element[];
    /**
     * For Composite resources to define the parts
     * Used to define the parts of a composite search parameter.
     */
    component?: SearchParameterComponent[];
    /**
     * draft | active | retired | unknown
     * The status of this search parameter. Enables tracking the life-cycle of the content.
     * Allows filtering of search parameters that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: SearchParameterPublicationStatus;
    /**
     * number | date | string | token | reference | composite | quantity | uri | special
     * The type of value that a search parameter may contain, and how the content is interpreted.
     */
    type: SearchParameterSearchParamType;
    /**
     * normal | phonetic | other
     * How the search parameter relates to the set of elements returned by evaluating the expression query.
     */
    processingMode?: SearchParameterSearchProcessingModeType;
    /**
     * eq | ne | gt | lt | ge | le | sa | eb | ap
     * Comparators supported for the search parameter.
     * If no comparators are listed, clients should not expect servers to support any comparators.
     */
    comparator?: SearchParameterSearchComparator[];
    /**
     * missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
     * A modifier supported for the search parameter.
     */
    modifier?: SearchParameterSearchModifierCode[];
}
/**
 * The parameter details for the service being requested
 * The parameter details for the service being requested.
 */
export interface ServiceRequestOrderDetailParameter extends BackboneElement {
    /**
     * The detail of the order being requested
     * A value representing the additional detail or instructions for the order (e.g., catheter insertion, body elevation, descriptive device configuration and/or setting instructions).
     */
    code: CodeableConcept;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valueQuantity?: Quantity;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valueRatio?: Ratio;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valueRange?: Range;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * The value for the order detail
     * Indicates a value for the order detail.
     * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
     */
    valuePeriod?: Period;
}
/**
 * Additional order information
 * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
 * For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
 */
export interface ServiceRequestOrderDetail extends BackboneElement {
    /**
     * The context of the order details by reference
     * Indicates the context of the order details by reference.
     */
    parameterFocus?: CodeableReference;
    /**
     * The parameter details for the service being requested
     * The parameter details for the service being requested.
     */
    parameter: ServiceRequestOrderDetailParameter[];
}
/**
 * Patient or consumer-oriented instructions
 * Instructions in terms that are understood by the patient or consumer.
 */
export interface ServiceRequestPatientInstruction extends BackboneElement {
    /**
     * Patient or consumer-oriented instructions
     * Instructions in terms that are understood by the patient or consumer.
     */
    instructionMarkdown?: markdown;
    /**
     * Extension for instructionMarkdown
     **/
    _instructionMarkdown?: Element;
    /**
     * Patient or consumer-oriented instructions
     * Instructions in terms that are understood by the patient or consumer.
     */
    instructionReference?: Reference;
}
/**
 * A request for a service to be performed
 * A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
 */
export interface ServiceRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ServiceRequest';
    /**
     * Identifiers assigned to this order
     * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
     * The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 V2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 V2).  For further discussion and examples see the resource notes section below.
     */
    identifier?: Identifier[];
    /**
     * Instantiates FHIR protocol or definition
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     * The PlanDefinition resource is used to describe series, sequences, or groups of actions to be taken, while the ActivityDefinition resource is used to define each specific step or activity to be performed. More information can be found in the [Boundaries and Relationships](plandefinition.html#12.23.2) section for PlanDefinition.
     */
    instantiatesCanonical?: canonical[];
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element[];
    /**
     * Instantiates external protocol or definition
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
     */
    instantiatesUri?: uri[];
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element[];
    /**
     * What request fulfills
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * What request replaces
     * The request takes the place of the referenced completed or terminated request(s).
     */
    replaces?: Reference[];
    /**
     * Composite Request ID
     * A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
     * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition. Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
     */
    requisition?: Identifier;
    /**
     * Classification of service
     * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
     * There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
     */
    category?: CodeableConcept[];
    /**
     * True if service/procedure should not be performed
     * Set this to true if the record is saying that the service/procedure should NOT be performed.
     * In general, only the code and timeframe will be present, though occasional additional qualifiers such as body site or even performer could be included to narrow the scope of the prohibition.  If the ServiceRequest.code and ServiceRequest.doNotPerform both contain negation, that will reinforce prohibition and should not have a double negative interpretation.
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * What is being requested/ordered
     * A code or reference that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
     * Many laboratory and radiology procedure codes embed the specimen/organ system in the test order name, for example,  serum or serum/plasma glucose, or a chest x-ray. The specimen might not be recorded separately from the test code.
     */
    code?: CodeableReference;
    /**
     * Additional order information
     * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
     * For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
     */
    orderDetail?: ServiceRequestOrderDetail[];
    /**
     * Service amount
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityQuantity?: Quantity;
    /**
     * Service amount
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityRatio?: Ratio;
    /**
     * Service amount
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityRange?: Range;
    /**
     * Individual or Entity the service is ordered for
     * On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
     */
    subject: Reference;
    /**
     * What the service request is about, when it is not about the subject of record
     * The actual focus of a service request when it is not the subject of record representing something or someone associated with the subject such as a spouse, parent, fetus, or donor. The focus of a service request could also be an existing condition,  an intervention, the subject's diet,  another service request on the subject,  or a body structure such as tumor or implanted device.
     */
    focus?: Reference[];
    /**
     * Encounter in which the request was created
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    encounter?: Reference;
    /**
     * When service should occur
     * The date/time at which the requested service should occur.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When service should occur
     * The date/time at which the requested service should occur.
     */
    occurrencePeriod?: Period;
    /**
     * When service should occur
     * The date/time at which the requested service should occur.
     */
    occurrenceTiming?: Timing;
    /**
     * Preconditions for service
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededBoolean?: boolean;
    /**
     * Extension for asNeededBoolean
     **/
    _asNeededBoolean?: Element;
    /**
     * Preconditions for service
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * Date request signed
     * When the request transitioned to being actionable.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Who/what is requesting service
     * The individual who initiated the request and has responsibility for its activation.
     * This not the dispatcher, but rather who is the authorizer.  This element is not intended to handle delegation which would generally be managed through the Provenance resource.
     */
    requester?: Reference;
    /**
     * Performer role
     * Desired type of performer for doing the requested service.
     * This is a  role, not  a participation type.  In other words, does not describe the task but describes the capacity.  For example, “compounding pharmacy”, “psychiatrist” or “internal referral”.
     */
    performerType?: CodeableConcept;
    /**
     * Requested performer
     * The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
     * If multiple performers are present, it is interpreted as a list of *alternative* performers without any preference regardless of order.  If order of preference is needed use the [http://hl7.org/fhir/StructureDefinition/request-performerOrder](http://hl7.org/fhir/extensions/StructureDefinition-request-performerOrder.html).  Use CareTeam to represent a group of performers (for example, Practitioner A *and* Practitioner B).
     */
    performer?: Reference[];
    /**
     * Requested location
     * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
     */
    location?: CodeableReference[];
    /**
     * Explanation/Justification for procedure or service
     * An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
     * This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all. To be as specific as possible,  a reference to  *Observation* or *Condition* should be used if available.  Otherwise, use `concept.text` element if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
     */
    reason?: CodeableReference[];
    /**
     * Associated insurance coverage
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
     */
    insurance?: Reference[];
    /**
     * Additional clinical information
     * Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
     * To represent information about how the services are to be delivered use the `instructions` element.
     */
    supportingInfo?: CodeableReference[];
    /**
     * Procedure Samples
     * One or more specimens that the laboratory procedure will use.
     * The purpose of the ServiceRequest.specimen is to reflect the actual specimen that the requested test/procedure is asked to be performed on, whether the lab already has it or not.  References to specimens for purposes other than to perform a test/procedure on should be made using the ServiceRequest.supportingInfo or the Specimen.parent where the Specimen.parent would enable descendency and ServiceRequest.supportingInfo a general reference for context.
     */
    specimen?: Reference[];
    /**
     * Coded location on Body
     * Anatomic location where the procedure should be performed. This is the target site.
     * Only used if not implicit in the code found in ServiceRequest.code.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [http://hl7.org/fhir/StructureDefinition/procedure-targetBodyStructure](http://hl7.org/fhir/extensions/StructureDefinition-procedure-targetBodyStructure.html).
     */
    bodySite?: CodeableConcept[];
    /**
     * BodyStructure-based location on the body
     * Anatomic location where the procedure should be performed. This is the target site.
     */
    bodyStructure?: Reference;
    /**
     * Comments
     * Any other notes and comments made about the service request. For example, internal billing notes.
     */
    note?: Annotation[];
    /**
     * Patient or consumer-oriented instructions
     * Instructions in terms that are understood by the patient or consumer.
     */
    patientInstruction?: ServiceRequestPatientInstruction[];
    /**
     * Request provenance
     * Key events in the history of the request.
     * This might not include provenances for all versions of the request – only those deemed “relevant” or important.
This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
All Provenances should have some historical version of this Request as their subject.
     */
    relevantHistory?: Reference[];
    /**
     * draft | active | on-hold | revoked | completed | entered-in-error | unknown
     * The status of the order.
     * The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, revoked or placed on-hold. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.
     */
    status: ServiceRequestStatus;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
     */
    priority?: ServiceRequestPriority;
    /**
     * proposal | plan | directive | order +
     * Whether the request is a proposal, plan, an original order or a reflex order.
     * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
     */
    intent: ServiceRequestIntent;
}
/**
 * A slot of time on a schedule that may be available for booking appointments
 * A slot of time on a schedule that may be available for booking appointments.
 */
export interface Slot extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Slot';
    /**
     * External Ids for this item
     * External Ids for this item.
     */
    identifier?: Identifier[];
    /**
     * A broad categorization of the service that is to be performed during this appointment
     * A broad categorization of the service that is to be performed during this appointment.
     */
    serviceCategory?: CodeableConcept[];
    /**
     * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the Schedule resource
     * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the Schedule resource.
     */
    serviceType?: CodeableReference[];
    /**
     * The specialty of a practitioner that would be required to perform the service requested in this appointment
     * The specialty of a practitioner that would be required to perform the service requested in this appointment.
     */
    specialty?: CodeableConcept[];
    /**
     * The style of appointment or patient that may be booked in the slot (not service type)
     * The style of appointment or patient that may be booked in the slot (not service type).
     * A slot may be allow multiple appointment types, but when booked, would only be used for one of the given appointment types.
     */
    appointmentType?: CodeableConcept[];
    /**
     * The schedule resource that this slot defines an interval of status information
     * The schedule resource that this slot defines an interval of status information.
     */
    schedule: Reference;
    /**
     * Date/Time that the slot is to begin
     * Date/Time that the slot is to begin.
     */
    start: instant;
    /**
     * Extension for start
     **/
    _start?: Element;
    /**
     * Date/Time that the slot is to conclude
     * Date/Time that the slot is to conclude.
     */
    end: instant;
    /**
     * Extension for end
     **/
    _end?: Element;
    /**
     * This slot has already been overbooked, appointments are unlikely to be accepted for this time
     * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
     */
    overbooked?: boolean;
    /**
     * Extension for overbooked
     **/
    _overbooked?: Element;
    /**
     * Comments on the slot to describe any extended information. Such as custom constraints on the slot
     * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * busy | free | busy-unavailable | busy-tentative | entered-in-error
     * busy | free | busy-unavailable | busy-tentative | entered-in-error.
     */
    status: SlotStatus;
}
/**
 * The physical feature of a specimen
 * A physical feature or landmark on a specimen, highlighted for context by the collector of the specimen (e.g. surgeon), that identifies the type of feature as well as its meaning (e.g. the red ink indicating the resection margin of the right lobe of the excised prostate tissue or wire loop at radiologically suspected tumor location).
 */
export interface SpecimenFeature extends BackboneElement {
    /**
     * Highlighted feature
     * The landmark or feature being highlighted.
     */
    type: CodeableConcept;
    /**
     * Information about the feature
     * Description of the feature of the specimen.
     */
    description: string;
    /**
     * Extension for description
     **/
    _description?: Element;
}
/**
 * Collection details
 * Details concerning the specimen collection.
 */
export interface SpecimenCollection extends BackboneElement {
    /**
     * Who collected the specimen
     * Person who collected the specimen.
     */
    collector?: Reference;
    /**
     * Collection time
     * Time when specimen was collected from subject - the physiologically relevant time.
     */
    collectedDateTime?: dateTime;
    /**
     * Extension for collectedDateTime
     **/
    _collectedDateTime?: Element;
    /**
     * Collection time
     * Time when specimen was collected from subject - the physiologically relevant time.
     */
    collectedPeriod?: Period;
    /**
     * How long it took to collect specimen
     * The span of time over which the collection of a specimen occurred.
     */
    duration?: Duration;
    /**
     * The quantity of specimen collected
     * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
     */
    quantity?: Quantity;
    /**
     * Technique used to perform collection
     * A coded value specifying the technique that is used to perform the procedure.
     */
    method?: CodeableConcept;
    /**
     * Device used to perform collection
     * A coded value specifying the technique that is used to perform the procedure.
     */
    device?: CodeableReference;
    /**
     * The procedure that collects the specimen
     * The procedure event during which the specimen was collected (e.g. the surgery leading to the collection of a pathology sample).
     */
    procedure?: Reference;
    /**
     * Anatomical collection site
     * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
     * Reasons for using BodyStructure reference include: 1.) Need to identify a specific site instance (e.g. a specific mole), 2.) a single pre-coordinated coded concept for the body site does not exist, 3.) a desire to represent bodySite using multiple attributes (e.g. modifiers).
     */
    bodySite?: CodeableReference;
    /**
     * Whether or how long patient abstained from food and/or drink
     * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
     * Representing fasting status using this element is preferred to representing it with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7 (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a component observation ` such as `Observation.component code`  = LOINC 49541-6 (Fasting status - Reported).
     */
    fastingStatusCodeableConcept?: CodeableConcept;
    /**
     * Whether or how long patient abstained from food and/or drink
     * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
     * Representing fasting status using this element is preferred to representing it with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7 (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a component observation ` such as `Observation.component code`  = LOINC 49541-6 (Fasting status - Reported).
     */
    fastingStatusDuration?: Duration;
}
/**
 * Processing and processing step details
 * Details concerning processing and processing steps for the specimen.
 */
export interface SpecimenProcessing extends BackboneElement {
    /**
     * Textual description of procedure
     * Textual description of procedure.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Indicates the treatment step  applied to the specimen
     * A coded value specifying the method used to process the specimen.
     */
    method?: CodeableConcept;
    /**
     * Material used in the processing step
     * Material used in the processing step.
     */
    additive?: Reference[];
    /**
     * Date and time of specimen processing
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timeDateTime?: dateTime;
    /**
     * Extension for timeDateTime
     **/
    _timeDateTime?: Element;
    /**
     * Date and time of specimen processing
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timePeriod?: Period;
}
/**
 * Direct container of specimen (tube/slide, etc.)
 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
 */
export interface SpecimenContainer extends BackboneElement {
    /**
     * Device resource for the container
     * The device resource for the the container holding the specimen. If the container is in a holder then the referenced device will point to a parent device.
     */
    device: Reference;
    /**
     * Where the container is
     * The location of the container holding the specimen.
     */
    location?: Reference;
    /**
     * Quantity of specimen within container
     * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
     */
    specimenQuantity?: Quantity;
}
/**
 * Sample for analysis
 * A sample to be used for analysis.
 */
export interface Specimen extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Specimen';
    /**
     * External Identifier
     * Id for specimen.
     */
    identifier?: Identifier[];
    /**
     * Identifier assigned by the lab
     * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
     */
    accessionIdentifier?: Identifier;
    /**
     * Kind of material that forms the specimen
     * The kind of material that forms the specimen.
     * The type can change the way that a specimen is handled and drives what kind of analyses can properly be performed on the specimen. It is frequently used in diagnostic work flow decision making systems.
     */
    type?: CodeableConcept;
    /**
     * Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance, a biologically-derived product, or a device
     * Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance, a biologically-derived product, or a device.
     */
    subject?: Reference;
    /**
     * The time when specimen is received by the testing laboratory
     * Time when specimen is received by the testing laboratory for processing or testing.
     */
    receivedTime?: dateTime;
    /**
     * Extension for receivedTime
     **/
    _receivedTime?: Element;
    /**
     * Specimen from which this specimen originated
     * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
     * The parent specimen could be the source from which the current specimen is derived by some processing step (e.g. an aliquot or isolate or extracted nucleic acids from clinical samples) or one of many specimens that were combined to create a pooled sample.
     */
    parent?: Reference[];
    /**
     * Why the specimen was collected
     * Details concerning a service request that required a specimen to be collected.
     * The request may be explicit or implied such with a ServiceRequest that requires a blood draw.
     */
    request?: Reference[];
    /**
     * The role the specimen serves
     * The role or reason for the specimen in the testing workflow.
     */
    role?: CodeableConcept[];
    /**
     * The physical feature of a specimen
     * A physical feature or landmark on a specimen, highlighted for context by the collector of the specimen (e.g. surgeon), that identifies the type of feature as well as its meaning (e.g. the red ink indicating the resection margin of the right lobe of the excised prostate tissue or wire loop at radiologically suspected tumor location).
     */
    feature?: SpecimenFeature[];
    /**
     * Collection details
     * Details concerning the specimen collection.
     */
    collection?: SpecimenCollection;
    /**
     * Processing and processing step details
     * Details concerning processing and processing steps for the specimen.
     */
    processing?: SpecimenProcessing[];
    /**
     * Direct container of specimen (tube/slide, etc.)
     * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
     */
    container?: SpecimenContainer[];
    /**
     * State of the specimen
     * A mode or state of being that describes the nature of the specimen.
     * Specimen condition is an observation made about the specimen.  It's a point-in-time assessment.  It can be used to assess its quality or appropriateness for a specific test.
     */
    condition?: CodeableConcept[];
    /**
     * Comments
     * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
     */
    note?: Annotation[];
    /**
     * available | unavailable | unsatisfactory | entered-in-error
     * The availability of the specimen.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status?: SpecimenStatus;
    /**
     * grouped | pooled
     * This element signifies if the specimen is part of a group or pooled.
     */
    combined?: SpecimenPublicationStatus;
}
/**
 * Additive associated with container
 * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
 */
export interface SpecimenDefinitionTypeTestedContainerAdditive extends BackboneElement {
    /**
     * Additive associated with container
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveCodeableConcept?: CodeableConcept;
    /**
     * Additive associated with container
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveReference?: Reference;
}
/**
 * The specimen's container
 * The specimen's container.
 */
export interface SpecimenDefinitionTypeTestedContainer extends BackboneElement {
    /**
     * The material type used for the container
     * The type of material of the container.
     * Examples: glass, plastic, metal.
     */
    material?: CodeableConcept;
    /**
     * Kind of container associated with the kind of specimen
     * The type of container used to contain this kind of specimen.
     */
    type?: CodeableConcept;
    /**
     * Color of container cap
     * Color of container cap.
     */
    cap?: CodeableConcept;
    /**
     * The description of the kind of container
     * The textual description of the kind of container.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The capacity of this kind of container
     * The capacity (volume or other measure) of this kind of container.
     */
    capacity?: Quantity;
    /**
     * Minimum volume
     * The minimum volume to be conditioned in the container.
     */
    minimumVolumeQuantity?: Quantity;
    /**
     * Minimum volume
     * The minimum volume to be conditioned in the container.
     */
    minimumVolumeString?: string;
    /**
     * Extension for minimumVolumeString
     **/
    _minimumVolumeString?: Element;
    /**
     * Additive associated with container
     * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additive?: SpecimenDefinitionTypeTestedContainerAdditive[];
    /**
     * Special processing applied to the container for this specimen type
     * Special processing that should be applied to the container for this kind of specimen.
     */
    preparation?: markdown;
    /**
     * Extension for preparation
     **/
    _preparation?: Element;
}
/**
 * Specimen handling before testing
 * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
 */
export interface SpecimenDefinitionTypeTestedHandling extends BackboneElement {
    /**
     * Qualifies the interval of temperature
     * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
     */
    temperatureQualifier?: CodeableConcept;
    /**
     * Temperature range for these handling instructions
     * The temperature interval for this set of handling instructions.
     */
    temperatureRange?: Range;
    /**
     * Maximum preservation time
     * The maximum time interval of preservation of the specimen with these conditions.
     */
    maxDuration?: Duration;
    /**
     * Preservation instruction
     * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
     */
    instruction?: markdown;
    /**
     * Extension for instruction
     **/
    _instruction?: Element;
}
/**
 * Specimen in container intended for testing by lab
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
export interface SpecimenDefinitionTypeTested extends BackboneElement {
    /**
     * Primary or secondary specimen
     * Primary of secondary specimen.
     */
    isDerived?: boolean;
    /**
     * Extension for isDerived
     **/
    _isDerived?: Element;
    /**
     * Type of intended specimen
     * The kind of specimen conditioned for testing expected by lab.
     */
    type?: CodeableConcept;
    /**
     * The specimen's container
     * The specimen's container.
     */
    container?: SpecimenDefinitionTypeTestedContainer;
    /**
     * Requirements for specimen delivery and special handling
     * Requirements for delivery and special handling of this kind of conditioned specimen.
     */
    requirement?: markdown;
    /**
     * Extension for requirement
     **/
    _requirement?: Element;
    /**
     * The usual time for retaining this kind of specimen
     * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
     */
    retentionTime?: Duration;
    /**
     * Specimen for single use only
     * Specimen can be used by only one test or panel if the value is "true".
     */
    singleUse?: boolean;
    /**
     * Extension for singleUse
     **/
    _singleUse?: Element;
    /**
     * Criterion specified for specimen rejection
     * Criterion for rejection of the specimen in its container by the laboratory.
     */
    rejectionCriterion?: CodeableConcept[];
    /**
     * Specimen handling before testing
     * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
     */
    handling?: SpecimenDefinitionTypeTestedHandling[];
    /**
     * Where the specimen will be tested
     * Where the specimen will be tested: e.g., lab, sector, device or any combination of these.
     */
    testingDestination?: CodeableConcept[];
    /**
     * preferred | alternate
     * The preference for this type of conditioned specimen.
     */
    preference: SpecimenDefinitionSpecimenContainedPreference;
}
/**
 * Kind of specimen
 * A kind of specimen with associated set of requirements.
 */
export interface SpecimenDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SpecimenDefinition';
    /**
     * Logical canonical URL to reference this SpecimenDefinition (globally unique)
     * An absolute URL that is used to identify this SpecimenDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this SpecimenDefinition is (or will be) published. The URL SHOULD include the major version of the SpecimenDefinition. For more information see Technical and Business Versions.
     * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business identifier
     * A business identifier assigned to this SpecimenDefinition.
     */
    identifier?: Identifier;
    /**
     * Business version of the SpecimenDefinition
     * The identifier that is used to identify this version of the SpecimenDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the SpecimenDefinition author and is not expected to be globally unique.
     * There may be multiple different instances of a SpecimenDefinition that have the same identifier but different versions.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this {{title}} (computer friendly)
     * A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this SpecimenDefinition (Human friendly)
     * A short, descriptive, user-friendly title for the SpecimenDefinition.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Based on FHIR definition of another SpecimenDefinition
     * The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition.
     */
    derivedFromCanonical?: canonical[];
    /**
     * Extension for derivedFromCanonical
     **/
    _derivedFromCanonical?: Element[];
    /**
     * Based on external definition
     * The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition.
     */
    derivedFromUri?: uri[];
    /**
     * Extension for derivedFromUri
     **/
    _derivedFromUri?: Element[];
    /**
     * If this SpecimenDefinition is not for real usage
     * A flag to indicate that this SpecimenDefinition is not authored for  genuine usage.
     * Allows filtering of SpecimenDefinition that are appropriate for use vs. not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Type of subject for specimen collection
     * A code or group definition that describes the intended subject  from which this kind of specimen is to be collected.
     * Examples: person, animal, device, water ….
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * Type of subject for specimen collection
     * A code or group definition that describes the intended subject  from which this kind of specimen is to be collected.
     * Examples: person, animal, device, water ….
     */
    subjectReference?: Reference;
    /**
     * Date status first applied
     * For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The name of the individual or organization that published the SpecimenDefinition
     * Helps establish the "authority/credibility" of the SpecimenDefinition. May also allow for contact.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the SpecimenDefinition
     * A free text natural language description of the SpecimenDefinition from the consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Content intends to support these contexts
     * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of specimen definitions.
     * When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for this SpecimenDefinition (if applicable)
     * A jurisdiction in which the SpecimenDefinition is intended to be used.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this SpecimenDefinition is defined
     * Explains why this SpecimeDefinition is needed and why it has been designed as it has.
     * This element does not describe the usage of the SpecimenDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this SpecimenDefinition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When SpecimenDefinition was approved by publisher
     * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The date may be more recent than the approval date because of minor changes / editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * The date on which the asset content was last reviewed by the publisher
     * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
     * If specified, this is usually after the approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * The effective date range for the SpecimenDefinition
     * The period during which the SpecimenDefinition content was or is planned to be effective.
     * The effective period for a SpecimenDefinition determines when the content is applicable for usage and is independent of publication and review dates.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * Kind of material to collect
     * The kind of material to be collected.
     */
    typeCollected?: CodeableConcept;
    /**
     * Patient preparation for collection
     * Preparation of the patient for specimen collection.
     */
    patientPreparation?: CodeableConcept[];
    /**
     * Time aspect for collection
     * Time aspect of specimen collection (duration or offset).
     */
    timeAspect?: string;
    /**
     * Extension for timeAspect
     **/
    _timeAspect?: Element;
    /**
     * Specimen collection procedure
     * The action to be performed for collecting the specimen.
     */
    collection?: CodeableConcept[];
    /**
     * Specimen in container intended for testing by lab
     * Specimen conditioned in a container as expected by the testing laboratory.
     */
    typeTested?: SpecimenDefinitionTypeTested[];
    /**
     * draft | active | retired | unknown
     * The current state of theSpecimenDefinition.
     * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: SpecimenDefinitionPublicationStatus;
}
/**
 * External specification that the content is mapped to
 * An external specification that the content is mapped to.
 */
export interface StructureDefinitionMapping extends BackboneElement {
    /**
     * Internal id when this mapping is used
     * An Internal id that is used to identify this mapping set when specific mappings are made.
     * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
     */
    identity: id;
    /**
     * Extension for identity
     **/
    _identity?: Element;
    /**
     * Identifies what this mapping refers to
     * An absolute URI that identifies the specification that this mapping is expressed to.
     * A formal identity for the specification being mapped to helps with identifying maps consistently.
     */
    uri?: uri;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * Names what this mapping refers to
     * A name for the specification that is being mapped to.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Versions, Issues, Scope limitations etc
     * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
}
/**
 * If an extension, where it can be used in instances
 * Identifies the types of resource or data type elements to which the extension can be applied. For more guidance on using the 'context' element, see the [defining extensions page](defining-extensions.html#context).
 */
export interface StructureDefinitionContext extends BackboneElement {
    /**
     * Where the extension can be used in instances
     * An expression that defines where an extension can be used in resources.
     */
    expression: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * fhirpath | element | extension
     * Defines how to interpret the expression that defines what the context of the extension is.
     */
    type: StructureDefinitionExtensionContextType;
}
/**
 * Snapshot view of the structure
 * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
    /**
     * Definition of elements in the resource (if no StructureDefinition)
     * Captures constraints on each element within the resource.
     */
    element: ElementDefinition[];
}
/**
 * Differential view of the structure
 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
 */
export interface StructureDefinitionDifferential extends BackboneElement {
    /**
     * Definition of elements in the resource (if no StructureDefinition)
     * Captures constraints on each element within the resource.
     */
    element: ElementDefinition[];
}
/**
 * Structural Definition
 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
 */
export interface StructureDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'StructureDefinition';
    /**
     * Canonical identifier for this structure definition, represented as a URI (globally unique)
     * An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the structure definition
     * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure definition outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the structure definition
     * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. There is no expectation that versions can be placed in a lexicographical sequence, so authors are encouraged to populate the StructureDefinition.versionAlgorithm[x] element to enable comparisons. If there is no managed version available, authors can consider using ISO date/time syntax (e.g., '2023-01-01').
     * There may be different structure definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this structure definition (computer friendly)
     * A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.Some Examples:

* O2SatObservation
* PresentationReport
* Immunization2
* AcmeAdmissionRecordOld.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this structure definition (human friendly)
     * A short, descriptive, user-friendly title for the structure definition.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.Applications don't have to use this name but can always fall back to it. The title also corresponds to the label for the root element.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of structure definitions that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the structure definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the structure definition.
     * Usually an organization but may be an individual. The publisher (or steward) of the structure definition is the organization or individual primarily responsible for the maintenance and upkeep of the structure definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure definition. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the structure definition
     * A free text natural language description of the structure definition from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure definition is presumed to be the predominant language in the place the structure definition was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for structure definition (if applicable)
     * A legal or geographic region in which the structure definition is intended to be used.
     * It may be possible for the structure definition to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this structure definition is defined
     * Explanation of why this structure definition is needed and why it has been designed as it has.
     * This element does not describe the usage of the structure definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure definition.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.  The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Assist with indexing and finding
     * (DEPRECATED) A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
     * Note that this element is deprecated. Use the [http://hl7.org/fhir/StructureDefinition/artifact-topic](http://hl7.org/fhir/extensions/StructureDefinition-artifact-topic.html) extension instead.
     */
    keyword?: Coding[];
    /**
     * FHIR Version this StructureDefinition targets
     * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
     * A StructureDefinition does not need to specify the target it applies to as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.
     */
    fhirVersion?: code;
    /**
     * Extension for fhirVersion
     **/
    _fhirVersion?: Element;
    /**
     * External specification that the content is mapped to
     * An external specification that the content is mapped to.
     */
    mapping?: StructureDefinitionMapping[];
    /**
     * Whether the structure is abstract
     * Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
     * Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of "abstract" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type "Element" in the StructureDefinition, but have children described, are anonymous concrete types that specialize Element.
     */
    abstract: boolean;
    /**
     * Extension for abstract
     **/
    _abstract?: Element;
    /**
     * If an extension, where it can be used in instances
     * Identifies the types of resource or data type elements to which the extension can be applied. For more guidance on using the 'context' element, see the [defining extensions page](defining-extensions.html#context).
     */
    context?: StructureDefinitionContext[];
    /**
     * FHIRPath invariants - when the extension can be used
     * A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
     * The rules are only evaluated when the extension is present. When evaluating the invariant, the FHIRPath focus is the element that holds the extension, and %extension refers to the extension itself.
     */
    contextInvariant?: string[];
    /**
     * Extension for contextInvariant
     **/
    _contextInvariant?: Element[];
    /**
     * Type defined or constrained by this structure
     * The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models, where they are required.
     * Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a type defining structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing.

The type must match the elements defined in the differential and the snapshot. For all FHIR defined types, the path name of the element will start with the type name. For logical models, where the type SHALL be a fully specified URL, the type name SHOULD start with the final path segment of the type URL where required. E.g. If the type was "http://example.org/fhir/MyLogicalModelType", the type name should start with 'MyLogicalModelType'.
     */
    type: uri;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Definition that this type is constrained/specialized from
     * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
     * If differential constraints are specified in this structure, they are applied to the base in a "differential" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of "Base", "Element" or another logical model.
     */
    baseDefinition?: canonical;
    /**
     * Extension for baseDefinition
     **/
    _baseDefinition?: Element;
    /**
     * Snapshot view of the structure
     * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
     */
    snapshot?: StructureDefinitionSnapshot;
    /**
     * Differential view of the structure
     * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
     */
    differential?: StructureDefinitionDifferential;
    /**
     * draft | active | retired | unknown
     * The status of this structure definition. Enables tracking the life-cycle of the content.
     * Allows filtering of structure definitions that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: StructureDefinitionPublicationStatus;
    /**
     * primitive-type | complex-type | resource | logical
     * Defines the kind of structure that this definition is describing.
     */
    kind: StructureDefinitionKind;
    /**
     * specialization | constraint - How relates to base definition
     * How the type relates to the baseDefinition.
     * If the definition is a specialization, then it adds to the differential new elements and optionally additional rules to an existing concrete type, and the snapshot includes the inherited elements and rules.  If the definition is a constraint, then it cannot define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
     */
    derivation?: StructureDefinitionTypeDerivationRule;
}
/**
 * Structure Definition used by this map
 * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
 * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
 */
export interface StructureMapStructure extends BackboneElement {
    /**
     * Canonical reference to structure definition
     * The canonical reference to the structure.
     */
    url: canonical;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Name for type in this map
     * The name used for this type in the map.
     * This is needed if both types have the same name (e.g. version conversion).
     */
    alias?: string;
    /**
     * Extension for alias
     **/
    _alias?: Element;
    /**
     * Documentation on use of structure
     * Documentation that describes how the structure is used in the mapping.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * source | queried | target | produced
     * How the referenced structure is used in this mapping.
     */
    mode: StructureMapModelMode;
}
/**
 * Definition of the constant value used in the map rules
 * Definition of a constant value used in the map rules.
 */
export interface StructureMapConst extends BackboneElement {
    /**
     * Constant name
     * Other maps used by this map (canonical URLs).
     */
    name?: id;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * FHIRPath exression - value of the constant
     * A FHIRPath expression that is the value of this variable.
     */
    value?: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Named instance provided when invoking the map
 * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
 * If no inputs are named, then the entry mappings are type based.
 */
export interface StructureMapGroupInput extends BackboneElement {
    /**
     * Name for this instance of data
     * Name for this instance of data.
     */
    name: id;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Type for this instance of data
     * Type for this instance of data.
     */
    type?: string;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Documentation for this instance of data
     * Documentation for this instance of data.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * source | target
     * Mode for this instance of data.
     */
    mode: StructureMapInputMode;
}
/**
 * Source inputs to the mapping
 * Source inputs to the mapping.
 */
export interface StructureMapGroupRuleSource extends BackboneElement {
    /**
     * Type or variable this rule applies to
     * Type or variable this rule applies to.
     */
    context: id;
    /**
     * Extension for context
     **/
    _context?: Element;
    /**
     * Specified minimum cardinality
     * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
     */
    min?: integer;
    /**
     * Extension for min
     **/
    _min?: Element;
    /**
     * Specified maximum cardinality (number or *)
     * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
     */
    max?: string;
    /**
     * Extension for max
     **/
    _max?: Element;
    /**
     * Rule only applies if source has this type
     * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
     */
    type?: string;
    /**
     * Extension for type
     **/
    _type?: Element;
    /**
     * Default value if no value exists
     * A value to use if there is no existing value in the source object.
     * If there's a default value on an item that can repeat, it will only be used once.
     */
    defaultValue?: string;
    /**
     * Extension for defaultValue
     **/
    _defaultValue?: Element;
    /**
     * Optional field for this source
     * Optional field for this source.
     */
    element?: string;
    /**
     * Extension for element
     **/
    _element?: Element;
    /**
     * Named context for field, if a field is specified
     * Named context for field, if a field is specified.
     */
    variable?: id;
    /**
     * Extension for variable
     **/
    _variable?: Element;
    /**
     * FHIRPath expression  - must be true or the rule does not apply
     * FHIRPath expression  - must be true or the rule does not apply.
     */
    condition?: string;
    /**
     * Extension for condition
     **/
    _condition?: Element;
    /**
     * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing
     * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
     */
    check?: string;
    /**
     * Extension for check
     **/
    _check?: Element;
    /**
     * Message to put in log if source exists (FHIRPath)
     * A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
     * This is typically used for recording that something Is not transformed to the target for some reason.
     */
    logMessage?: string;
    /**
     * Extension for logMessage
     **/
    _logMessage?: Element;
    /**
     * first | not_first | last | not_last | only_one
     * How to handle the list mode for this element.
     */
    listMode?: StructureMapSourceListMode;
}
/**
 * Parameters to the transform
 * Parameters to the transform.
 */
export interface StructureMapGroupRuleTargetParameter extends BackboneElement {
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Parameter value - variable or literal
     * Parameter value - variable or literal.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
}
/**
 * Content to create because of this mapping rule
 * Content to create because of this mapping rule.
 */
export interface StructureMapGroupRuleTarget extends BackboneElement {
    /**
     * Variable this rule applies to
     * Variable this rule applies to.
     */
    context?: string;
    /**
     * Extension for context
     **/
    _context?: Element;
    /**
     * Field to create in the context
     * Field to create in the context.
     */
    element?: string;
    /**
     * Extension for element
     **/
    _element?: Element;
    /**
     * Named context for field, if desired, and a field is specified
     * Named context for field, if desired, and a field is specified.
     */
    variable?: id;
    /**
     * Extension for variable
     **/
    _variable?: Element;
    /**
     * Internal rule reference for shared list items
     * Internal rule reference for shared list items.
     */
    listRuleId?: id;
    /**
     * Extension for listRuleId
     **/
    _listRuleId?: Element;
    /**
     * Parameters to the transform
     * Parameters to the transform.
     */
    parameter?: StructureMapGroupRuleTargetParameter[];
    /**
     * first | share | last | single
     * If field is a list, how to manage the list.
     */
    listMode?: StructureMapTargetListMode[];
    /**
     * create | copy +
     * How the data is copied / created.
     */
    transform?: StructureMapTransform;
}
/**
 * Which other rules to apply in the context of this rule
 * Which other rules to apply in the context of this rule.
 */
export interface StructureMapGroupRuleDependent extends BackboneElement {
    /**
     * Name of a rule or group to apply
     * Name of a rule or group to apply.
     */
    name: id;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Parameter to pass to the rule or group
     * Parameter to pass to the rule or group.
     */
    parameter: StructureMapGroupRuleTargetParameter[];
}
/**
 * Transform Rule from source to target
 * Transform Rule from source to target.
 */
export interface StructureMapGroupRule extends BackboneElement {
    /**
     * Name of the rule for internal references
     * Name of the rule for internal references.
     */
    name?: id;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Source inputs to the mapping
     * Source inputs to the mapping.
     */
    source: StructureMapGroupRuleSource[];
    /**
     * Content to create because of this mapping rule
     * Content to create because of this mapping rule.
     */
    target?: StructureMapGroupRuleTarget[];
    /**
     * Rules contained in this rule
     * Rules contained in this rule.
     */
    rule?: StructureMapGroupRule[];
    /**
     * Which other rules to apply in the context of this rule
     * Which other rules to apply in the context of this rule.
     */
    dependent?: StructureMapGroupRuleDependent[];
    /**
     * Documentation for this instance of data
     * Documentation for this instance of data.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
}
/**
 * Named sections for reader convenience
 * Organizes the mapping into managable chunks for human review/ease of maintenance.
 */
export interface StructureMapGroup extends BackboneElement {
    /**
     * Human-readable label
     * A unique name for the group for the convenience of human readers.
     */
    name: id;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Another group that this group adds rules to
     * Another group that this group adds rules to.
     */
    extends?: id;
    /**
     * Extension for extends
     **/
    _extends?: Element;
    /**
     * Additional description/explanation for group
     * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
    /**
     * Named instance provided when invoking the map
     * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
     * If no inputs are named, then the entry mappings are type based.
     */
    input: StructureMapGroupInput[];
    /**
     * Transform Rule from source to target
     * Transform Rule from source to target.
     */
    rule?: StructureMapGroupRule[];
    /**
     * types | type-and-types
     * If this is the default rule set to apply for the source type or this combination of types.
     * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
     */
    typeMode?: StructureMapGroupTypeMode;
}
/**
 * A Map of relationships between 2 structures that can be used to transform data
 * A Map of relationships between 2 structures that can be used to transform data.
 */
export interface StructureMap extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'StructureMap';
    /**
     * Canonical identifier for this structure map, represented as a URI (globally unique)
     * An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the structure map
     * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the structure map
     * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this structure map (computer friendly)
     * A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this structure map (human friendly)
     * A short, descriptive, user-friendly title for the structure map.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of structure maps that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the structure map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the structure map.
     * Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the structure map
     * A free text natural language description of the structure map from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for structure map (if applicable)
     * A legal or geographic region in which the structure map is intended to be used.
     * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this structure map is defined
     * Explanation of why this structure map is needed and why it has been designed as it has.
     * This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Structure Definition used by this map
     * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
     * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
     */
    structure?: StructureMapStructure[];
    /**
     * Other maps used by this map (canonical URLs)
     * Other maps used by this map (canonical URLs).
     */
    import?: canonical[];
    /**
     * Extension for import
     **/
    _import?: Element[];
    /**
     * Definition of the constant value used in the map rules
     * Definition of a constant value used in the map rules.
     */
    const?: StructureMapConst[];
    /**
     * Named sections for reader convenience
     * Organizes the mapping into managable chunks for human review/ease of maintenance.
     */
    group: StructureMapGroup[];
    /**
     * draft | active | retired | unknown
     * The status of this structure map. Enables tracking the life-cycle of the content.
     * Allows filtering of structure maps that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: StructureMapPublicationStatus;
}
/**
 * Criteria for narrowing the subscription topic stream
 * The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions applicable to that resource are met; otherwise it returns false (i.e., logical AND).
 */
export interface SubscriptionFilterBy extends BackboneElement {
    /**
     * Allowed Resource (reference to definition) for this Subscription filter
     * A resource listed in the `SubscriptionTopic` this `Subscription` references (`SubscriptionTopic.canFilterBy.resource`). This element can be used to differentiate filters for topics that include more than one resource type.
     */
    resourceType?: uri;
    /**
     * Extension for resourceType
     **/
    _resourceType?: Element;
    /**
     * Filter label defined in SubscriptionTopic
     * The filter as defined in the `SubscriptionTopic.canFilterBy.filterParameter` element.
     */
    filterParameter: string;
    /**
     * Extension for filterParameter
     **/
    _filterParameter?: Element;
    /**
     * Literal value or resource path
     * The literal value or resource path as is legal in search - for example, `Patient/123` or `le1950`.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * eq | ne | gt | lt | ge | le | sa | eb | ap
     * Comparator applied to this filter parameter.
     * Must be a comparator allowed by the SubscriptionTopic relevant to this Subscription filter.
     */
    comparator?: SubscriptionSearchComparator;
    /**
     * missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
     * Modifier applied to this filter parameter.
     * Must be a modifier allowed by the SubscriptionTopic relevant to this Subscription filter.
     */
    modifier?: SubscriptionSearchModifierCode;
}
/**
 * Channel type
 * Channel-dependent information to send as part of the notification (e.g., HTTP Headers).
 * Exactly what these mean depend on the channel type. They can convey additional information to the server or recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions. Note that names are not required to be unique, but channel definitions can impose restrictions.
 */
export interface SubscriptionParameter extends BackboneElement {
    /**
     * Name (key) of the parameter
     * Parameter name for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the name would be Authorization.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Value of the parameter to use or pass through
     * Parameter value for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the value would be `Bearer 0193...`.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * Notification about a SubscriptionTopic
 * The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.
 */
export interface Subscription extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Subscription';
    /**
     * Additional identifiers (business identifier)
     * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier[];
    /**
     * Human readable name for this subscription
     * A natural language name identifying the subscription.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Reference to the subscription topic being subscribed to
     * The reference to the subscription topic to be notified about.
     */
    topic: canonical;
    /**
     * Extension for topic
     **/
    _topic?: Element;
    /**
     * Contact details for source (e.g. troubleshooting)
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    contact?: ContactPoint[];
    /**
     * When to automatically delete the subscription
     * The time for the server to turn the subscription off.
     * The server is permitted to deviate from this time but should observe it.
     */
    end?: instant;
    /**
     * Extension for end
     **/
    _end?: Element;
    /**
     * Entity responsible for Subscription changes
     * Entity with authorization to make subsequent revisions to the Subscription and also determines what data the subscription is authorized to disclose.
     */
    managingEntity?: Reference;
    /**
     * Description of why this subscription was created
     * A description of why this subscription is defined.
     */
    reason?: string;
    /**
     * Extension for reason
     **/
    _reason?: Element;
    /**
     * Criteria for narrowing the subscription topic stream
     * The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions applicable to that resource are met; otherwise it returns false (i.e., logical AND).
     */
    filterBy?: SubscriptionFilterBy[];
    /**
     * Channel type for notifications
     * The type of channel to send notifications on.
     */
    channelType: Coding;
    /**
     * Where the channel points to
     * The url that describes the actual end-point to send notifications to.
     * For rest-hook the end-point must be an `http:` or `https:` URL; for websockets, `ws:` or `wss:`; for email, a `mailto:` url; and for message the endpoint can be in any form of url the server understands (usually, `http/s`: or `mllp:`). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs).
     */
    endpoint?: url;
    /**
     * Extension for endpoint
     **/
    _endpoint?: Element;
    /**
     * Channel type
     * Channel-dependent information to send as part of the notification (e.g., HTTP Headers).
     * Exactly what these mean depend on the channel type. They can convey additional information to the server or recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions. Note that names are not required to be unique, but channel definitions can impose restrictions.
     */
    parameter?: SubscriptionParameter[];
    /**
     * Interval in seconds to send 'heartbeat' notification
     * If present, a 'heartbeat' notification (keep-alive) is sent via this channel with an interval period equal to this elements integer value in seconds.  If not present, a heartbeat notification is not sent.
     */
    heartbeatPeriod?: unsignedInt;
    /**
     * Extension for heartbeatPeriod
     **/
    _heartbeatPeriod?: Element;
    /**
     * Timeout in seconds to attempt notification delivery
     * If present, the maximum amount of time a server will allow before failing a notification attempt.
     */
    timeout?: unsignedInt;
    /**
     * Extension for timeout
     **/
    _timeout?: Element;
    /**
     * MIME type to send, or omit for no payload
     * The MIME type to send the payload in - e.g., `application/fhir+xml` or `application/fhir+json`. Note that:

* clients may request notifications in a specific FHIR version by using the [FHIR Version Parameter](http.html#version-parameter) - e.g., `application/fhir+json; fhirVersion=4.0`.

* additional MIME types can be allowed by channels - e.g., `text/plain` and `text/html` are defined by the Email channel.
     */
    contentType?: code;
    /**
     * Extension for contentType
     **/
    _contentType?: Element;
    /**
     * Maximum number of events that can be combined in a single notification
     * If present, the maximum number of events that will be included in a notification bundle. Note that this is not a strict limit on the number of entries in a bundle, as dependent resources can be included.
     */
    maxCount?: positiveInt;
    /**
     * Extension for maxCount
     **/
    _maxCount?: Element;
    /**
     * requested | active | error | off | entered-in-error
     * The status of the subscription, which marks the server state for managing the subscription.
     * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: SubscriptionStatusCodes;
    /**
     * empty | id-only | full-resource
     * How much of the resource content to deliver in the notification payload. The choices are an empty payload, only the resource id, or the full resource content.
     * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.
     */
    content?: SubscriptionPayloadContent;
}
/**
 * Detailed information about any events relevant to this notification
 * Detailed information about events relevant to this subscription notification.
 */
export interface SubscriptionStatusNotificationEvent extends BackboneElement {
    /**
     * Sequencing index of this event
     * Either the sequential number of this event in this subscription context or a relative event number for this notification.
     * In subscriptions where delivery of notifications IS NOT guaranteed (e.g., REST-Hook), this number is a unique and monotonically-increasing event number for a subscription. In channels where delivery of notifications IS guaranteed, this number is a relative index for the events present in the notification (e.g., 1, 2, etc.).
     */
    eventNumber: integer64;
    /**
     * Extension for eventNumber
     **/
    _eventNumber?: Element;
    /**
     * The instant this event occurred
     * The actual time this event occurred on the server.
     */
    timestamp?: instant;
    /**
     * Extension for timestamp
     **/
    _timestamp?: Element;
    /**
     * Reference to the primary resource or information of this event
     * The focus of this event. While this will usually be a reference to the focus resource of the event, it MAY contain a reference to a non-FHIR object.
     */
    focus?: Reference;
    /**
     * References related to the focus resource and/or context of this event
     * Additional context information for this event. Generally, this will contain references to additional resources included with the event (e.g., the Patient relevant to an Encounter), however it MAY refer to non-FHIR objects.
     */
    additionalContext?: Reference[];
}
/**
 * Status information about a Subscription provided during event notification
 * The SubscriptionStatus resource describes the state of a Subscription during notifications.
 */
export interface SubscriptionStatus extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubscriptionStatus';
    /**
     * Events since the Subscription was created
     * The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications.
     */
    eventsSinceSubscriptionStart?: integer64;
    /**
     * Extension for eventsSinceSubscriptionStart
     **/
    _eventsSinceSubscriptionStart?: Element;
    /**
     * Detailed information about any events relevant to this notification
     * Detailed information about events relevant to this subscription notification.
     */
    notificationEvent?: SubscriptionStatusNotificationEvent[];
    /**
     * Reference to the Subscription responsible for this notification
     * The reference to the Subscription which generated this notification.
     */
    subscription: Reference;
    /**
     * Reference to the SubscriptionTopic this notification relates to
     * The reference to the SubscriptionTopic for the Subscription which generated this notification.
     * This value SHOULD NOT be present when using `empty` payloads, MAY be present when using `id-only` payloads, and SHOULD be present when using `full-resource` payloads.
     */
    topic?: canonical;
    /**
     * Extension for topic
     **/
    _topic?: Element;
    /**
     * List of errors on the subscription
     * A record of errors that occurred when the server processed a notification.
     * Recommended practice: clear errors when status is updated.
     */
    error?: CodeableConcept[];
    /**
     * requested | active | error | off | entered-in-error
     * The status of the subscription, which marks the server state for managing the subscription.
     */
    status?: SubscriptionStatusSubscriptionStatus;
    /**
     * handshake | heartbeat | event-notification | query-status | query-event
     * The type of event being conveyed with this notification.
     */
    type: SubscriptionStatusSubscriptionNotificationType;
}
/**
 * Query based trigger rule
 * The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
 */
export interface SubscriptionTopicResourceTriggerQueryCriteria extends BackboneElement {
    /**
     * Rule applied to previous resource state
     * The FHIR query based rules are applied to the previous resource state (e.g., state before an update).
     * The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading slash character (`/`).
     */
    previous?: string;
    /**
     * Extension for previous
     **/
    _previous?: Element;
    /**
     * Rule applied to current resource state
     * The FHIR query based rules are applied to the current resource state (e.g., state after an update).
     * The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading slash character (`/`).
     */
    current?: string;
    /**
     * Extension for current
     **/
    _current?: Element;
    /**
     * Both must be true flag
     * If set to `true`, both the `current` and `previous` query criteria must evaluate `true` to trigger a notification for this topic.  If set to `false` or not present, a notification for this topic will be triggered if either the `current` or `previous` tests evaluate to `true`.
     * Please note the interaction between this element and the `resultForCreate`/`resultForDelete` elements during `create` and `delete` interactions.  For example, if `resultForCreate` is set to `test-passes`, setting `requireBoth` to `false` means that every `create` will trigger a notification while setting `requireBoth` to `true` will result in notifications if the `current` test passes.  Similarly, if `resultForCreate` is set to `test-fails`, setting `requireBoth` to `true` means that no `create` will be able to generate a notification while setting `requireBoth` to `false` will result in notifications if the `current` test passes.
     */
    requireBoth?: boolean;
    /**
     * Extension for requireBoth
     **/
    _requireBoth?: Element;
    /**
     * test-passes | test-fails
     * For `create` interactions, should the `previous` criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `create` interactions is unspecified (server discretion).
     */
    resultForCreate?: SubscriptionTopicCriteriaNotExistsBehavior;
    /**
     * test-passes | test-fails
     * For 'delete' interactions, should the 'current' query criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `delete` interactions is unspecified (server discretion).
     */
    resultForDelete?: SubscriptionTopicCriteriaNotExistsBehavior;
}
/**
 * Definition of a resource-based trigger for the subscription topic
 * A definition of a resource-based event that triggers a notification based on the SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a resource update matching ANY of the definitions will trigger a notification).
 */
export interface SubscriptionTopicResourceTrigger extends BackboneElement {
    /**
     * Text representation of the resource trigger
     * The human readable description of this resource trigger for the SubscriptionTopic -  for example, "An Encounter enters the 'in-progress' state".
     * Implementation of particular subscription topics might not use a computable definition and instead base their design on the definition.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Data Type or Resource (reference to definition) for this trigger definition
     * URL of the Resource that is the type used in this resource trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
     */
    resource: uri;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * Query based trigger rule
     * The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
     */
    queryCriteria?: SubscriptionTopicResourceTriggerQueryCriteria;
    /**
     * FHIRPath based trigger rule
     * The FHIRPath based rules that the server should use to determine when to trigger a notification for this topic.
     * FHIRPath expression with %previous and %current vars.
     */
    fhirPathCriteria?: string;
    /**
     * Extension for fhirPathCriteria
     **/
    _fhirPathCriteria?: Element;
    /**
     * create | update | delete
     * The FHIR RESTful interaction which can be used to trigger a notification for the SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE). If not present, all supported interactions are assumed.
     */
    supportedInteraction?: SubscriptionTopicMethodCode[];
}
/**
 * Event definitions the SubscriptionTopic
 * Event definition which can be used to trigger the SubscriptionTopic.
 */
export interface SubscriptionTopicEventTrigger extends BackboneElement {
    /**
     * Text representation of the event trigger
     * The human readable description of an event to trigger a notification for the SubscriptionTopic - for example, "Patient Admission, as defined in HL7v2 via message ADT^A01". Multiple values are considered OR joined (e.g., matching any single event listed).
     * Implementation of particular subscription topics might not use a computable definition and instead base their design on the definition.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Event which can trigger a notification from the SubscriptionTopic
     * A well-defined event which can be used to trigger notifications from the SubscriptionTopic.
     */
    event: CodeableConcept;
    /**
     * Data Type or Resource (reference to definition) for this trigger definition
     * URL of the Resource that is the focus type used in this event trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
     */
    resource: uri;
    /**
     * Extension for resource
     **/
    _resource?: Element;
}
/**
 * Properties by which a Subscription can filter notifications from the SubscriptionTopic
 * List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be defined Search Parameters (e.g., Encounter.patient) or parameters defined within this SubscriptionTopic context (e.g., hub.event).
 */
export interface SubscriptionTopicCanFilterBy extends BackboneElement {
    /**
     * Description of this filter parameter
     * Description of how this filtering parameter is intended to be used.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * URL of the triggering Resource that this filter applies to
     * URL of the Resource that is the type used in this filter. This is the "focus" of the topic (or one of them if there are more than one). It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
     * URL of the Resource that is the type used in this filter. Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient. For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
     */
    resource?: uri;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * Human-readable and computation-friendly name for a filter parameter usable by subscriptions on this topic, via Subscription.filterBy.filterParameter
     * Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or topic-defined parameter (like "hub.event") which is a label for the filter.
     * Chained parameters are allowed (like "patient.gender") - but can not use colons or modifiers.
     */
    filterParameter: string;
    /**
     * Extension for filterParameter
     **/
    _filterParameter?: Element;
    /**
     * Canonical URL for a filterParameter definition
     * Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or the officially-defined URI for a shared filter concept (like "http://example.org/concepts/shared-common-event").
     * Chained parameters are allowed (like "patient.gender") - but can not use colons or modifiers.
     */
    filterDefinition?: uri;
    /**
     * Extension for filterDefinition
     **/
    _filterDefinition?: Element;
    /**
     * eq | ne | gt | lt | ge | le | sa | eb | ap
     * Comparators allowed for the filter parameter.
     * If no comparators are listed, clients should not expect servers to support any comparators.
     */
    comparator?: SubscriptionTopicSearchComparator[];
    /**
     * missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
     * Modifiers allowed for the filter parameter.
     * If no modifiers are listed, clients should not expect servers to support any modifiers.
     */
    modifier?: SubscriptionTopicSearchModifierCode[];
}
/**
 * Properties for describing the shape of notifications generated by this topic
 * List of properties to describe the shape (e.g., resources) included in notifications from this Subscription Topic.
 */
export interface SubscriptionTopicNotificationShape extends BackboneElement {
    /**
     * URL of the Resource that is the focus (main) resource in a notification shape
     * URL of the Resource that is the type used in this shape. This is the 'focus' resource of the topic (or one of them if there are more than one) and the root resource for this shape definition. It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
     * URL of the Resource that is the type used in this shape. Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, 'Patient' maps to http://hl7.org/fhir/StructureDefinition/Patient. For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
     */
    resource: uri;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * Include directives, rooted in the resource for this shape
     * Search-style _include directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.
     */
    include?: string[];
    /**
     * Extension for include
     **/
    _include?: Element[];
    /**
     * Reverse include directives, rooted in the resource for this shape
     * Search-style _revinclude directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.
     */
    revInclude?: string[];
    /**
     * Extension for revInclude
     **/
    _revInclude?: Element[];
}
/**
 * The definition of a specific topic for triggering events within the Subscriptions framework
 * Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.
 */
export interface SubscriptionTopic extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubscriptionTopic';
    /**
     * Canonical identifier for this subscription topic, represented as an absolute URI (globally unique)
     * An absolute URI that is used to identify this subscription topic when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this subscription topic is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the subscription topic is stored on different servers.
     * Can be a `urn:uuid:` or a `urn:oid:` but real `http/s:` addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.

When this is a locally defined topic or derived from a topic defined in the FHIR spec or an IG, this uniquely identifies the topic and functionality. Ideally this URL resolves to documentation about the use cases.

When this is a topic derived from another topic (e.g., it adds additional filters or functionality to a topic defined in an IG), then this URL should be different than the base and the `derivedFromCanonical` should be filled out with the unique uri as defined in the IG.

When this is a direct implementation from another IG or registered topic (with no additional filters, etc., so not derived), then this url is the unique url for this topic as defined by the IG.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business identifier for subscription topic
     * Business identifiers assigned to this subscription topic by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.
     * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
     */
    identifier?: Identifier[];
    /**
     * Business version of the subscription topic
     * The identifier that is used to identify this version of the subscription topic when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Topic author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
     * There may be multiple different instances of a subscription topic that have the same identifier but different versions.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this subscription topic (computer friendly)
     * A natural language name identifying the subscription topic This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this subscription topic (human friendly)
     * A short, descriptive, user-friendly title for the subscription topic.  For example, "admission".
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * Based on FHIR protocol or definition
     * The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic.
     */
    derivedFrom?: canonical[];
    /**
     * Extension for derivedFrom
     **/
    _derivedFrom?: Element[];
    /**
     * If for testing purposes, not real usage
     * A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
     * Allows filtering of SubscriptionTopic that are appropriate for use vs. not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date status first applied
     * The date (and optionally time) when the subscription topic was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the subscription topic changes.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * The name of the individual or organization that published the SubscriptionTopic
     * Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the SubscriptionTopic
     * A free text natural language description of the Topic from the consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Content intends to support these contexts
     * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions.
     * When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction of the SubscriptionTopic (if applicable)
     * A jurisdiction in which the Topic is intended to be used.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this SubscriptionTopic is defined
     * Explains why this Topic is needed and why it has been designed as it has.
     * This element does not describe the usage of the Topic.  Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Topic.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.
     * ...
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When SubscriptionTopic is/was approved by publisher
     * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The date may be more recent than the approval date because of minor changes / editorial corrections.
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * Date the Subscription Topic was last reviewed by the publisher
     * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
     * If specified, this is usually after the approval date.
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * The effective date range for the SubscriptionTopic
     * The period during which the SubscriptionTopic content was or is planned to be effective.
     * The effective period for a SubscriptionTopic  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 would be published in 2015.
     */
    effectivePeriod?: Period;
    /**
     * Definition of a resource-based trigger for the subscription topic
     * A definition of a resource-based event that triggers a notification based on the SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a resource update matching ANY of the definitions will trigger a notification).
     */
    resourceTrigger?: SubscriptionTopicResourceTrigger[];
    /**
     * Event definitions the SubscriptionTopic
     * Event definition which can be used to trigger the SubscriptionTopic.
     */
    eventTrigger?: SubscriptionTopicEventTrigger[];
    /**
     * Properties by which a Subscription can filter notifications from the SubscriptionTopic
     * List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be defined Search Parameters (e.g., Encounter.patient) or parameters defined within this SubscriptionTopic context (e.g., hub.event).
     */
    canFilterBy?: SubscriptionTopicCanFilterBy[];
    /**
     * Properties for describing the shape of notifications generated by this topic
     * List of properties to describe the shape (e.g., resources) included in notifications from this Subscription Topic.
     */
    notificationShape?: SubscriptionTopicNotificationShape[];
    /**
     * draft | active | retired | unknown
     * The current state of the SubscriptionTopic.
     * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation

Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: SubscriptionTopicPublicationStatus;
}
/**
 * Composition information about the substance
 * A substance can be composed of other substances.
 */
export interface SubstanceIngredient extends BackboneElement {
    /**
     * Optional amount (concentration)
     * The amount of the ingredient in the substance - a concentration ratio.
     */
    quantity?: Ratio;
    /**
     * A component of the substance
     * Another substance that is a component of this substance.
     */
    substanceCodeableConcept?: CodeableConcept;
    /**
     * A component of the substance
     * Another substance that is a component of this substance.
     */
    substanceReference?: Reference;
}
/**
 * A homogeneous material with a definite composition
 * A homogeneous material with a definite composition.
 */
export interface Substance extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Substance';
    /**
     * Unique identifier
     * Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly).
     */
    identifier?: Identifier[];
    /**
     * Is this an instance of a substance or a kind of one
     * A boolean to indicate if this an instance of a substance or a kind of one (a definition).
     */
    instance: boolean;
    /**
     * Extension for instance
     **/
    _instance?: Element;
    /**
     * What class/type of substance this is
     * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
     * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
     */
    category?: CodeableConcept[];
    /**
     * What substance this is
     * A code (or set of codes) that identify this substance.
     * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
     */
    code: CodeableReference;
    /**
     * Textual description of the substance, comments
     * A description of the substance - its appearance, handling requirements, and other usage notes.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * When no longer valid to use
     * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
     */
    expiry?: dateTime;
    /**
     * Extension for expiry
     **/
    _expiry?: Element;
    /**
     * Amount of substance in the package
     * The amount of the substance.
     */
    quantity?: Quantity;
    /**
     * Composition information about the substance
     * A substance can be composed of other substances.
     */
    ingredient?: SubstanceIngredient[];
    /**
     * active | inactive | entered-in-error
     * A code to indicate if the substance is actively used.
     */
    status?: SubstanceFHIRSubstanceStatus;
}
/**
 * Moiety, for structural modifications
 * Moiety, for structural modifications.
 */
export interface SubstanceDefinitionMoiety extends BackboneElement {
    /**
     * Role that the moiety is playing
     * Role that the moiety is playing.
     */
    role?: CodeableConcept;
    /**
     * Identifier by which this moiety substance is known
     * Identifier by which this moiety substance is known.
     */
    identifier?: Identifier;
    /**
     * Textual name for this moiety substance
     * Textual name for this moiety substance.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Stereochemistry type
     * Stereochemistry type.
     */
    stereochemistry?: CodeableConcept;
    /**
     * Optical activity type
     * Optical activity type.
     */
    opticalActivity?: CodeableConcept;
    /**
     * Molecular formula for this moiety (e.g. with the Hill system)
     * Molecular formula for this moiety of this substance, typically using the Hill system.
     */
    molecularFormula?: string;
    /**
     * Extension for molecularFormula
     **/
    _molecularFormula?: Element;
    /**
     * Quantitative value for this moiety
     * Quantitative value for this moiety.
     */
    amountQuantity?: Quantity;
    /**
     * Quantitative value for this moiety
     * Quantitative value for this moiety.
     */
    amountString?: string;
    /**
     * Extension for amountString
     **/
    _amountString?: Element;
    /**
     * The measurement type of the quantitative value
     * The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.
     */
    measurementType?: CodeableConcept;
}
/**
 * General specifications for this substance
 * General specifications for this substance.
 */
export interface SubstanceDefinitionCharacterization extends BackboneElement {
    /**
     * The method used to find the characterization e.g. HPLC
     * The method used to elucidate the characterization of the drug substance. Example: HPLC.
     */
    technique?: CodeableConcept;
    /**
     * Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form
     * Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form.
     */
    form?: CodeableConcept;
    /**
     * The description or justification in support of the interpretation of the data file
     * The description or justification in support of the interpretation of the data file.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis
     * The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis.
     */
    file?: Attachment[];
}
/**
 * General specifications for this substance
 * General specifications for this substance.
 */
export interface SubstanceDefinitionProperty extends BackboneElement {
    /**
     * A code expressing the type of property
     * A code expressing the type of property.
     */
    type: CodeableConcept;
    /**
     * A value for the property
     * A value for the property.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the property
     * A value for the property.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the property
     * A value for the property.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * A value for the property
     * A value for the property.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * A value for the property
     * A value for the property.
     */
    valueAttachment?: Attachment;
}
/**
 * The average mass of a molecule of a compound
 * The average mass of a molecule of a compound compared to 1/12 the mass of carbon 12 and calculated as the sum of the atomic weights of the constituent atoms.
 */
export interface SubstanceDefinitionMolecularWeight extends BackboneElement {
    /**
     * The method by which the weight was determined
     * The method by which the molecular weight was determined.
     */
    method?: CodeableConcept;
    /**
     * Type of molecular weight e.g. exact, average, weight average
     * Type of molecular weight such as exact, average (also known as. number average), weight average.
     */
    type?: CodeableConcept;
    /**
     * Used to capture quantitative values for a variety of elements
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amount: Quantity;
}
/**
 * A depiction of the structure of the substance
 * A depiction of the structure of the substance.
 */
export interface SubstanceDefinitionStructureRepresentation extends BackboneElement {
    /**
     * The kind of structural representation (e.g. full, partial)
     * The kind of structural representation (e.g. full, partial).
     */
    type?: CodeableConcept;
    /**
     * The structural representation as a text string in a standard format
     * The structural representation as a text string in a standard format.
     */
    representation?: string;
    /**
     * Extension for representation
     **/
    _representation?: Element;
    /**
     * The format of the representation e.g. InChI, SMILES, MOLFILE (note: not the physical file format)
     * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.
     */
    format?: CodeableConcept;
    /**
     * An attachment with the structural representation e.g. a structure graphic or AnIML file
     * An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.
     */
    document?: Reference;
}
/**
 * Structural information
 * Structural information.
 */
export interface SubstanceDefinitionStructure extends BackboneElement {
    /**
     * Stereochemistry type
     * Stereochemistry type.
     */
    stereochemistry?: CodeableConcept;
    /**
     * Optical activity type
     * Optical activity type.
     */
    opticalActivity?: CodeableConcept;
    /**
     * An expression which states the number and type of atoms present in a molecule of a substance
     * An expression which states the number and type of atoms present in a molecule of a substance.
     */
    molecularFormula?: string;
    /**
     * Extension for molecularFormula
     **/
    _molecularFormula?: Element;
    /**
     * Specified per moiety according to the Hill system
     * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
     */
    molecularFormulaByMoiety?: string;
    /**
     * Extension for molecularFormulaByMoiety
     **/
    _molecularFormulaByMoiety?: Element;
    /**
     * The molecular weight or weight range
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    molecularWeight?: SubstanceDefinitionMolecularWeight;
    /**
     * The method used to find the structure e.g. X-ray, NMR
     * The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay.
     */
    technique?: CodeableConcept[];
    /**
     * Source of information for the structure
     * The source of information about the structure.
     */
    sourceDocument?: Reference[];
    /**
     * A depiction of the structure of the substance
     * A depiction of the structure of the substance.
     */
    representation?: SubstanceDefinitionStructureRepresentation[];
}
/**
 * Codes associated with the substance
 * Codes associated with the substance.
 */
export interface SubstanceDefinitionCode extends BackboneElement {
    /**
     * The specific code
     * The specific code.
     */
    code?: CodeableConcept;
    /**
     * Status of the code assignment, for example 'provisional', 'approved'
     * Status of the code assignment, for example 'provisional', 'approved'.
     */
    status?: CodeableConcept;
    /**
     * The date at which the code status was changed
     * The date at which the code status was changed as part of the terminology maintenance.
     */
    statusDate?: dateTime;
    /**
     * Extension for statusDate
     **/
    _statusDate?: Element;
    /**
     * Any comment can be provided in this field
     * Any comment can be provided in this field, if necessary.
     */
    note?: Annotation[];
    /**
     * Supporting literature
     * Supporting literature.
     */
    source?: Reference[];
}
/**
 * Details of the official nature of this name
 * Details of the official nature of this name.
 */
export interface SubstanceDefinitionNameOfficial extends BackboneElement {
    /**
     * Which authority uses this official name
     * Which authority uses this official name.
     */
    authority?: CodeableConcept;
    /**
     * The status of the official name, for example 'draft', 'active'
     * The status of the official name, for example 'draft', 'active', 'retired'.
     */
    status?: CodeableConcept;
    /**
     * Date of official name change
     * Date of the official name change.
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
}
/**
 * Names applicable to this substance
 * Names applicable to this substance.
 */
export interface SubstanceDefinitionName extends BackboneElement {
    /**
     * The actual name
     * The actual name.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name type e.g. 'systematic',  'scientific, 'brand'
     * Name type, for example 'systematic',  'scientific, 'brand'.
     */
    type?: CodeableConcept;
    /**
     * The status of the name e.g. 'current', 'proposed'
     * The status of the name, for example 'current', 'proposed'.
     */
    status?: CodeableConcept;
    /**
     * If this is the preferred name for this substance
     * If this is the preferred name for this substance.
     */
    preferred?: boolean;
    /**
     * Extension for preferred
     **/
    _preferred?: Element;
    /**
     * Human language that the name is written in
     * Human language that the name is written in.
     */
    language?: CodeableConcept[];
    /**
     * The use context of this name e.g. as an active ingredient or as a food colour additive
     * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
     */
    domain?: CodeableConcept[];
    /**
     * The jurisdiction where this name applies
     * The jurisdiction where this name applies.
     */
    jurisdiction?: CodeableConcept[];
    /**
     * A synonym of this particular name, by which the substance is also known
     * A synonym of this particular name, by which the substance is also known.
     */
    synonym?: SubstanceDefinitionName[];
    /**
     * A translation for this name into another human language
     * A translation for this name into another human language.
     */
    translation?: SubstanceDefinitionName[];
    /**
     * Details of the official nature of this name
     * Details of the official nature of this name.
     */
    official?: SubstanceDefinitionNameOfficial[];
    /**
     * Supporting literature
     * Supporting literature.
     */
    source?: Reference[];
}
/**
 * A link between this substance and another
 * A link between this substance and another, with details of the relationship.
 */
export interface SubstanceDefinitionRelationship extends BackboneElement {
    /**
     * A pointer to another substance, as a resource or a representational code
     * A pointer to another substance, as a resource or just a representational code.
     */
    substanceDefinitionReference?: Reference;
    /**
     * A pointer to another substance, as a resource or a representational code
     * A pointer to another substance, as a resource or just a representational code.
     */
    substanceDefinitionCodeableConcept?: CodeableConcept;
    /**
     * For example "salt to parent", "active moiety"
     * For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of".
     */
    type: CodeableConcept;
    /**
     * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible relationships
     * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
     */
    isDefining?: boolean;
    /**
     * Extension for isDefining
     **/
    _isDefining?: Element;
    /**
     * A numeric factor for the relationship, e.g. that a substance salt has some percentage of active substance in relation to some other
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountQuantity?: Quantity;
    /**
     * A numeric factor for the relationship, e.g. that a substance salt has some percentage of active substance in relation to some other
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountRatio?: Ratio;
    /**
     * A numeric factor for the relationship, e.g. that a substance salt has some percentage of active substance in relation to some other
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountString?: string;
    /**
     * Extension for amountString
     **/
    _amountString?: Element;
    /**
     * For use when the numeric has an uncertain range
     * For use when the numeric has an uncertain range.
     */
    ratioHighLimitAmount?: Ratio;
    /**
     * An operator for the amount, for example "average", "approximately", "less than"
     * An operator for the amount, for example "average", "approximately", "less than".
     */
    comparator?: CodeableConcept;
    /**
     * Supporting literature
     * Supporting literature.
     */
    source?: Reference[];
}
/**
 * Material or taxonomic/anatomical source
 * Material or taxonomic/anatomical source for the substance.
 */
export interface SubstanceDefinitionSourceMaterial extends BackboneElement {
    /**
     * Classification of the origin of the raw material. e.g. cat hair is an Animal source type
     * A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.
     */
    type?: CodeableConcept;
    /**
     * The genus of an organism e.g. the Latin epithet of the plant/animal scientific name
     * The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.
     */
    genus?: CodeableConcept;
    /**
     * The species of an organism e.g. the Latin epithet of the species of the plant/animal
     * The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.
     */
    species?: CodeableConcept;
    /**
     * An anatomical origin of the source material within an organism
     * An anatomical origin of the source material within an organism.
     */
    part?: CodeableConcept;
    /**
     * The country or countries where the material is harvested
     * The country or countries where the material is harvested.
     */
    countryOfOrigin?: CodeableConcept[];
}
/**
 * The detailed description of a substance, typically at a level beyond what is used for prescribing
 * The detailed description of a substance, typically at a level beyond what is used for prescribing.
 */
export interface SubstanceDefinition extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubstanceDefinition';
    /**
     * Identifier by which this substance is known
     * Identifier by which this substance is known.
     */
    identifier?: Identifier[];
    /**
     * A business level version identifier of the substance
     * A business level version identifier of the substance.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Status of substance within the catalogue e.g. active, retired
     * Status of substance within the catalogue e.g. active, retired.
     */
    status?: CodeableConcept;
    /**
     * A categorization, high level e.g. polymer or nucleic acid, or food, chemical, biological, or lower e.g. polymer linear or branch chain, or type of impurity
     * A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant).
     */
    classification?: CodeableConcept[];
    /**
     * If the substance applies to human or veterinary use
     * If the substance applies to human or veterinary use.
     */
    domain?: CodeableConcept;
    /**
     * The quality standard, established benchmark, to which substance complies (e.g. USP/NF, BP)
     * The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).
     */
    grade?: CodeableConcept[];
    /**
     * Textual description of the substance
     * Textual description of the substance.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Supporting literature
     * Supporting literature.
     */
    informationSource?: Reference[];
    /**
     * Textual comment about the substance's catalogue or registry record
     * Textual comment about the substance's catalogue or registry record.
     */
    note?: Annotation[];
    /**
     * The entity that creates, makes, produces or fabricates the substance
     * The entity that creates, makes, produces or fabricates the substance. This is a set of potential manufacturers but is not necessarily comprehensive.
     */
    manufacturer?: Reference[];
    /**
     * An entity that is the source for the substance. It may be different from the manufacturer
     * An entity that is the source for the substance. It may be different from the manufacturer. Supplier is synonymous to a distributor.
     */
    supplier?: Reference[];
    /**
     * Moiety, for structural modifications
     * Moiety, for structural modifications.
     */
    moiety?: SubstanceDefinitionMoiety[];
    /**
     * General specifications for this substance
     * General specifications for this substance.
     */
    characterization?: SubstanceDefinitionCharacterization[];
    /**
     * General specifications for this substance
     * General specifications for this substance.
     */
    property?: SubstanceDefinitionProperty[];
    /**
     * General information detailing this substance
     * General information detailing this substance.
     */
    referenceInformation?: Reference;
    /**
     * The average mass of a molecule of a compound
     * The average mass of a molecule of a compound compared to 1/12 the mass of carbon 12 and calculated as the sum of the atomic weights of the constituent atoms.
     */
    molecularWeight?: SubstanceDefinitionMolecularWeight[];
    /**
     * Structural information
     * Structural information.
     */
    structure?: SubstanceDefinitionStructure;
    /**
     * Codes associated with the substance
     * Codes associated with the substance.
     */
    code?: SubstanceDefinitionCode[];
    /**
     * Names applicable to this substance
     * Names applicable to this substance.
     */
    name?: SubstanceDefinitionName[];
    /**
     * A link between this substance and another
     * A link between this substance and another, with details of the relationship.
     */
    relationship?: SubstanceDefinitionRelationship[];
    /**
     * Data items specific to nucleic acids
     * Data items specific to nucleic acids.
     */
    nucleicAcid?: Reference;
    /**
     * Data items specific to polymers
     * Data items specific to polymers.
     */
    polymer?: Reference;
    /**
     * Data items specific to proteins
     * Data items specific to proteins.
     */
    protein?: Reference;
    /**
     * Material or taxonomic/anatomical source
     * Material or taxonomic/anatomical source for the substance.
     */
    sourceMaterial?: SubstanceDefinitionSourceMaterial;
}
/**
 * The linkages between sugar residues will also be captured
 * The linkages between sugar residues will also be captured.
 */
export interface SubstanceNucleicAcidSubunitLinkage extends BackboneElement {
    /**
     * The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified
     * The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.
     */
    connectivity?: string;
    /**
     * Extension for connectivity
     **/
    _connectivity?: Element;
    /**
     * Each linkage will be registered as a fragment and have an ID
     * Each linkage will be registered as a fragment and have an ID.
     */
    identifier?: Identifier;
    /**
     * Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage
     * Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Residues shall be captured as described in 5.3.6.8.3
     * Residues shall be captured as described in 5.3.6.8.3.
     */
    residueSite?: string;
    /**
     * Extension for residueSite
     **/
    _residueSite?: Element;
}
/**
 * 5.3.6.8.1 Sugar ID (Mandatory)
 * 5.3.6.8.1 Sugar ID (Mandatory).
 */
export interface SubstanceNucleicAcidSubunitSugar extends BackboneElement {
    /**
     * The Substance ID of the sugar or sugar-like component that make up the nucleotide
     * The Substance ID of the sugar or sugar-like component that make up the nucleotide.
     */
    identifier?: Identifier;
    /**
     * The name of the sugar or sugar-like component that make up the nucleotide
     * The name of the sugar or sugar-like component that make up the nucleotide.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above
     * The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.
     */
    residueSite?: string;
    /**
     * Extension for residueSite
     **/
    _residueSite?: Element;
}
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export interface SubstanceNucleicAcidSubunit extends BackboneElement {
    /**
     * Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts
     * Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
     */
    subunit?: integer;
    /**
     * Extension for subunit
     **/
    _subunit?: Element;
    /**
     * Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured
     * Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.
     */
    sequence?: string;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * The length of the sequence shall be captured
     * The length of the sequence shall be captured.
     */
    length?: integer;
    /**
     * Extension for length
     **/
    _length?: Element;
    /**
     * (TBC)
     * (TBC).
     */
    sequenceAttachment?: Attachment;
    /**
     * The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant
     * The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
     */
    fivePrime?: CodeableConcept;
    /**
     * The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant
     * The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
     */
    threePrime?: CodeableConcept;
    /**
     * The linkages between sugar residues will also be captured
     * The linkages between sugar residues will also be captured.
     */
    linkage?: SubstanceNucleicAcidSubunitLinkage[];
    /**
     * 5.3.6.8.1 Sugar ID (Mandatory)
     * 5.3.6.8.1 Sugar ID (Mandatory).
     */
    sugar?: SubstanceNucleicAcidSubunitSugar[];
}
/**
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction
 * Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
 */
export interface SubstanceNucleicAcid extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubstanceNucleicAcid';
    /**
     * The type of the sequence shall be specified based on a controlled vocabulary
     * The type of the sequence shall be specified based on a controlled vocabulary.
     */
    sequenceType?: CodeableConcept;
    /**
     * The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit
     * The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.
     */
    numberOfSubunits?: integer;
    /**
     * Extension for numberOfSubunits
     **/
    _numberOfSubunits?: Element;
    /**
     * The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”
     * The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
     */
    areaOfHybridisation?: string;
    /**
     * Extension for areaOfHybridisation
     **/
    _areaOfHybridisation?: Element;
    /**
     * (TBC)
     * (TBC).
     */
    oligoNucleotideType?: CodeableConcept;
    /**
     * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times
     * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    subunit?: SubstanceNucleicAcidSubunit[];
}
/**
 * The starting materials - monomer(s) used in the synthesis of the polymer
 * The starting materials - monomer(s) used in the synthesis of the polymer.
 */
export interface SubstancePolymerMonomerSetStartingMaterial extends BackboneElement {
    /**
     * The type of substance for this starting material
     * The type of substance for this starting material.
     */
    code?: CodeableConcept;
    /**
     * Substance high level category, e.g. chemical substance
     * Substance high level category, e.g. chemical substance.
     */
    category?: CodeableConcept;
    /**
     * Used to specify whether the attribute described is a defining element for the unique identification of the polymer
     * Used to specify whether the attribute described is a defining element for the unique identification of the polymer.
     */
    isDefining?: boolean;
    /**
     * Extension for isDefining
     **/
    _isDefining?: Element;
    /**
     * A percentage
     * A percentage.
     */
    amount?: Quantity;
}
/**
 * Todo
 * Todo.
 */
export interface SubstancePolymerMonomerSet extends BackboneElement {
    /**
     * Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio
     * Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio.
     */
    ratioType?: CodeableConcept;
    /**
     * The starting materials - monomer(s) used in the synthesis of the polymer
     * The starting materials - monomer(s) used in the synthesis of the polymer.
     */
    startingMaterial?: SubstancePolymerMonomerSetStartingMaterial[];
}
/**
 * Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described
 * Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described.
 */
export interface SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends BackboneElement {
    /**
     * The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio
     * The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio.
     */
    type?: CodeableConcept;
    /**
     * An average amount of polymerisation
     * An average amount of polymerisation.
     */
    average?: integer;
    /**
     * Extension for average
     **/
    _average?: Element;
    /**
     * A low expected limit of the amount
     * A low expected limit of the amount.
     */
    low?: integer;
    /**
     * Extension for low
     **/
    _low?: Element;
    /**
     * A high expected limit of the amount
     * A high expected limit of the amount.
     */
    high?: integer;
    /**
     * Extension for high
     **/
    _high?: Element;
}
/**
 * A graphical structure for this SRU
 * A graphical structure for this SRU.
 */
export interface SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends BackboneElement {
    /**
     * The type of structure (e.g. Full, Partial, Representative)
     * The type of structure (e.g. Full, Partial, Representative).
     */
    type?: CodeableConcept;
    /**
     * The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF
     * The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
     */
    representation?: string;
    /**
     * Extension for representation
     **/
    _representation?: Element;
    /**
     * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF
     * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
     */
    format?: CodeableConcept;
    /**
     * An attached file with the structural representation
     * An attached file with the structural representation.
     */
    attachment?: Attachment;
}
/**
 * An SRU - Structural Repeat Unit
 * An SRU - Structural Repeat Unit.
 */
export interface SubstancePolymerRepeatRepeatUnit extends BackboneElement {
    /**
     * Structural repeat units are essential elements for defining polymers
     * Structural repeat units are essential elements for defining polymers.
     */
    unit?: string;
    /**
     * Extension for unit
     **/
    _unit?: Element;
    /**
     * The orientation of the polymerisation, e.g. head-tail, head-head, random
     * The orientation of the polymerisation, e.g. head-tail, head-head, random.
     */
    orientation?: CodeableConcept;
    /**
     * Number of repeats of this unit
     * Number of repeats of this unit.
     */
    amount?: integer;
    /**
     * Extension for amount
     **/
    _amount?: Element;
    /**
     * Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described
     * Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described.
     */
    degreeOfPolymerisation?: SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[];
    /**
     * A graphical structure for this SRU
     * A graphical structure for this SRU.
     */
    structuralRepresentation?: SubstancePolymerRepeatRepeatUnitStructuralRepresentation[];
}
/**
 * Specifies and quantifies the repeated units and their configuration
 * Specifies and quantifies the repeated units and their configuration.
 */
export interface SubstancePolymerRepeat extends BackboneElement {
    /**
     * A representation of an (average) molecular formula from a polymer
     * A representation of an (average) molecular formula from a polymer.
     */
    averageMolecularFormula?: string;
    /**
     * Extension for averageMolecularFormula
     **/
    _averageMolecularFormula?: Element;
    /**
     * How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average)
     * How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average).
     */
    repeatUnitAmountType?: CodeableConcept;
    /**
     * An SRU - Structural Repeat Unit
     * An SRU - Structural Repeat Unit.
     */
    repeatUnit?: SubstancePolymerRepeatRepeatUnit[];
}
/**
 * Properties of a substance specific to it being a polymer
 * Properties of a substance specific to it being a polymer.
 */
export interface SubstancePolymer extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubstancePolymer';
    /**
     * A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier
     * A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier.
     */
    identifier?: Identifier;
    /**
     * Overall type of the polymer
     * Overall type of the polymer.
     */
    class?: CodeableConcept;
    /**
     * Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic
     * Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic.
     */
    geometry?: CodeableConcept;
    /**
     * Descrtibes the copolymer sequence type (polymer connectivity)
     * Descrtibes the copolymer sequence type (polymer connectivity).
     */
    copolymerConnectivity?: CodeableConcept[];
    /**
     * Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder
     * Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder.
     */
    modification?: string;
    /**
     * Extension for modification
     **/
    _modification?: Element;
    /**
     * Todo
     * Todo.
     */
    monomerSet?: SubstancePolymerMonomerSet[];
    /**
     * Specifies and quantifies the repeated units and their configuration
     * Specifies and quantifies the repeated units and their configuration.
     */
    repeat?: SubstancePolymerRepeat[];
}
/**
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
 */
export interface SubstanceProteinSubunit extends BackboneElement {
    /**
     * Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts
     * Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
     */
    subunit?: integer;
    /**
     * Extension for subunit
     **/
    _subunit?: Element;
    /**
     * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence
     * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
     */
    sequence?: string;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * Length of linear sequences of amino acids contained in the subunit
     * Length of linear sequences of amino acids contained in the subunit.
     */
    length?: integer;
    /**
     * Extension for length
     **/
    _length?: Element;
    /**
     * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence
     * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
     */
    sequenceAttachment?: Attachment;
    /**
     * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID
     * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
     */
    nTerminalModificationId?: Identifier;
    /**
     * The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified
     * The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.
     */
    nTerminalModification?: string;
    /**
     * Extension for nTerminalModification
     **/
    _nTerminalModification?: Element;
    /**
     * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID
     * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
     */
    cTerminalModificationId?: Identifier;
    /**
     * The modification at the C-terminal shall be specified
     * The modification at the C-terminal shall be specified.
     */
    cTerminalModification?: string;
    /**
     * Extension for cTerminalModification
     **/
    _cTerminalModification?: Element;
}
/**
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators
 * A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
 */
export interface SubstanceProtein extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubstanceProtein';
    /**
     * The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence
     * The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.
     */
    sequenceType?: CodeableConcept;
    /**
     * Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable
     * Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.
     */
    numberOfSubunits?: integer;
    /**
     * Extension for numberOfSubunits
     **/
    _numberOfSubunits?: Element;
    /**
     * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions
     * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
     */
    disulfideLinkage?: string[];
    /**
     * Extension for disulfideLinkage
     **/
    _disulfideLinkage?: Element[];
    /**
     * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times
     * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    subunit?: SubstanceProteinSubunit[];
}
/**
 * Todo
 * Todo.
 */
export interface SubstanceReferenceInformationGene extends BackboneElement {
    /**
     * Todo
     * Todo.
     */
    geneSequenceOrigin?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    gene?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    source?: Reference[];
}
/**
 * Todo
 * Todo.
 */
export interface SubstanceReferenceInformationGeneElement extends BackboneElement {
    /**
     * Todo
     * Todo.
     */
    type?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    element?: Identifier;
    /**
     * Todo
     * Todo.
     */
    source?: Reference[];
}
/**
 * Todo
 * Todo.
 */
export interface SubstanceReferenceInformationTarget extends BackboneElement {
    /**
     * Todo
     * Todo.
     */
    target?: Identifier;
    /**
     * Todo
     * Todo.
     */
    type?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    interaction?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    organism?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    organismType?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    amountQuantity?: Quantity;
    /**
     * Todo
     * Todo.
     */
    amountRange?: Range;
    /**
     * Todo
     * Todo.
     */
    amountString?: string;
    /**
     * Extension for amountString
     **/
    _amountString?: Element;
    /**
     * Todo
     * Todo.
     */
    amountType?: CodeableConcept;
    /**
     * Todo
     * Todo.
     */
    source?: Reference[];
}
/**
 * Todo
 * Todo.
 */
export interface SubstanceReferenceInformation extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubstanceReferenceInformation';
    /**
     * Todo
     * Todo.
     */
    comment?: string;
    /**
     * Extension for comment
     **/
    _comment?: Element;
    /**
     * Todo
     * Todo.
     */
    gene?: SubstanceReferenceInformationGene[];
    /**
     * Todo
     * Todo.
     */
    geneElement?: SubstanceReferenceInformationGeneElement[];
    /**
     * Todo
     * Todo.
     */
    target?: SubstanceReferenceInformationTarget[];
}
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
 */
export interface SubstanceSourceMaterialFractionDescription extends BackboneElement {
    /**
     * This element is capturing information about the fraction of a plant part, or human plasma for fractionation
     * This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
     */
    fraction?: string;
    /**
     * Extension for fraction
     **/
    _fraction?: Element;
    /**
     * The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1
     * The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
     */
    materialType?: CodeableConcept;
}
/**
 * 4.9.13.6.1 Author type (Conditional)
 * 4.9.13.6.1 Author type (Conditional).
 */
export interface SubstanceSourceMaterialOrganismAuthor extends BackboneElement {
    /**
     * The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name
     * The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
     */
    authorType?: CodeableConcept;
    /**
     * The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank)
     * The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
     */
    authorDescription?: string;
    /**
     * Extension for authorDescription
     **/
    _authorDescription?: Element;
}
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional)
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
 */
export interface SubstanceSourceMaterialOrganismHybrid extends BackboneElement {
    /**
     * The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal
     * The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
     */
    maternalOrganismId?: string;
    /**
     * Extension for maternalOrganismId
     **/
    _maternalOrganismId?: Element;
    /**
     * The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal
     * The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
     */
    maternalOrganismName?: string;
    /**
     * Extension for maternalOrganismName
     **/
    _maternalOrganismName?: Element;
    /**
     * The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary
     * The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
     */
    paternalOrganismId?: string;
    /**
     * Extension for paternalOrganismId
     **/
    _paternalOrganismId?: Element;
    /**
     * The name of the paternal species constituting the hybrid organism shall be specified
     * The name of the paternal species constituting the hybrid organism shall be specified.
     */
    paternalOrganismName?: string;
    /**
     * Extension for paternalOrganismName
     **/
    _paternalOrganismName?: Element;
    /**
     * The hybrid type of an organism shall be specified
     * The hybrid type of an organism shall be specified.
     */
    hybridType?: CodeableConcept;
}
/**
 * 4.9.13.7.1 Kingdom (Conditional)
 * 4.9.13.7.1 Kingdom (Conditional).
 */
export interface SubstanceSourceMaterialOrganismOrganismGeneral extends BackboneElement {
    /**
     * The kingdom of an organism shall be specified
     * The kingdom of an organism shall be specified.
     */
    kingdom?: CodeableConcept;
    /**
     * The phylum of an organism shall be specified
     * The phylum of an organism shall be specified.
     */
    phylum?: CodeableConcept;
    /**
     * The class of an organism shall be specified
     * The class of an organism shall be specified.
     */
    class?: CodeableConcept;
    /**
     * The order of an organism shall be specified,
     * The order of an organism shall be specified,.
     */
    order?: CodeableConcept;
}
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
 */
export interface SubstanceSourceMaterialOrganism extends BackboneElement {
    /**
     * The family of an organism shall be specified
     * The family of an organism shall be specified.
     */
    family?: CodeableConcept;
    /**
     * The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies
     * The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
     */
    genus?: CodeableConcept;
    /**
     * The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies
     * The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
     */
    species?: CodeableConcept;
    /**
     * The Intraspecific type of an organism shall be specified
     * The Intraspecific type of an organism shall be specified.
     */
    intraspecificType?: CodeableConcept;
    /**
     * The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention
     * The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
     */
    intraspecificDescription?: string;
    /**
     * Extension for intraspecificDescription
     **/
    _intraspecificDescription?: Element;
    /**
     * 4.9.13.6.1 Author type (Conditional)
     * 4.9.13.6.1 Author type (Conditional).
     */
    author?: SubstanceSourceMaterialOrganismAuthor[];
    /**
     * 4.9.13.8.1 Hybrid species maternal organism ID (Optional)
     * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
     */
    hybrid?: SubstanceSourceMaterialOrganismHybrid;
    /**
     * 4.9.13.7.1 Kingdom (Conditional)
     * 4.9.13.7.1 Kingdom (Conditional).
     */
    organismGeneral?: SubstanceSourceMaterialOrganismOrganismGeneral;
}
/**
 * To do
 * To do.
 */
export interface SubstanceSourceMaterialPartDescription extends BackboneElement {
    /**
     * Entity of anatomical origin of source material within an organism
     * Entity of anatomical origin of source material within an organism.
     */
    part?: CodeableConcept;
    /**
     * The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply
     * The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
     */
    partLocation?: CodeableConcept;
}
/**
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex
 * Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
 */
export interface SubstanceSourceMaterial extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SubstanceSourceMaterial';
    /**
     * General high level classification of the source material specific to the origin of the material
     * General high level classification of the source material specific to the origin of the material.
     */
    sourceMaterialClass?: CodeableConcept;
    /**
     * The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent
     * The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
     */
    sourceMaterialType?: CodeableConcept;
    /**
     * The state of the source material when extracted
     * The state of the source material when extracted.
     */
    sourceMaterialState?: CodeableConcept;
    /**
     * The unique identifier associated with the source material parent organism shall be specified
     * The unique identifier associated with the source material parent organism shall be specified.
     */
    organismId?: Identifier;
    /**
     * The organism accepted Scientific name shall be provided based on the organism taxonomy
     * The organism accepted Scientific name shall be provided based on the organism taxonomy.
     */
    organismName?: string;
    /**
     * Extension for organismName
     **/
    _organismName?: Element;
    /**
     * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
     * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
     */
    parentSubstanceId?: Identifier[];
    /**
     * The parent substance of the Herbal Drug, or Herbal preparation
     * The parent substance of the Herbal Drug, or Herbal preparation.
     */
    parentSubstanceName?: string[];
    /**
     * Extension for parentSubstanceName
     **/
    _parentSubstanceName?: Element[];
    /**
     * The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate
     * The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
     */
    countryOfOrigin?: CodeableConcept[];
    /**
     * The place/region where the plant is harvested or the places/regions where the animal source material has its habitat
     * The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
     */
    geographicalLocation?: string[];
    /**
     * Extension for geographicalLocation
     **/
    _geographicalLocation?: Element[];
    /**
     * Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum)
     * Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
     */
    developmentStage?: CodeableConcept;
    /**
     * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels
     * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
     */
    fractionDescription?: SubstanceSourceMaterialFractionDescription[];
    /**
     * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf
     * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
     */
    organism?: SubstanceSourceMaterialOrganism;
    /**
     * To do
     * To do.
     */
    partDescription?: SubstanceSourceMaterialPartDescription[];
}
/**
 * The item that is delivered or supplied
 * The item that is being delivered or has been supplied.
 */
export interface SupplyDeliverySuppliedItem extends BackboneElement {
    /**
     * Amount supplied
     * The amount of the item that has been supplied.  Unit of measure may be included.
     */
    quantity?: Quantity;
    /**
     * Medication, Substance, Device or Biologically Derived Product supplied
     * Identifies the medication, substance, device or biologically derived product being supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * Medication, Substance, Device or Biologically Derived Product supplied
     * Identifies the medication, substance, device or biologically derived product being supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemReference?: Reference;
}
/**
 * Delivery of bulk Supplies
 * Record of delivery of what is supplied.
 */
export interface SupplyDelivery extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SupplyDelivery';
    /**
     * External identifier
     * Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
     * This identifier is typically assigned by the supplier, and may be used to reference the delivery when exchanging information about it with other systems.
     */
    identifier?: Identifier[];
    /**
     * Fulfills plan, proposal or order
     * A plan, proposal or order that is fulfilled in whole or in part by this event.
     */
    basedOn?: Reference[];
    /**
     * Part of referenced event
     * A larger event of which this particular event is a component or step.
     * Not to be used to link an event to an Encounter - use Event.context for that.

[The allowed reference resources may be adjusted as appropriate for the event resource].
     */
    partOf?: Reference[];
    /**
     * Patient for whom the item is supplied
     * A link to a resource representing the person whom the delivered item is for.
     */
    patient?: Reference;
    /**
     * Category of supply event
     * Indicates the type of supply being provided.  Examples include: Medication, Device, Biologically Derived Product.
     */
    type?: CodeableConcept;
    /**
     * The item that is delivered or supplied
     * The item that is being delivered or has been supplied.
     */
    suppliedItem?: SupplyDeliverySuppliedItem[];
    /**
     * When event occurred
     * The date or time(s) the activity occurred.
     * [The list of types may be constrained as appropriate for the type of event].
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When event occurred
     * The date or time(s) the activity occurred.
     * [The list of types may be constrained as appropriate for the type of event].
     */
    occurrencePeriod?: Period;
    /**
     * When event occurred
     * The date or time(s) the activity occurred.
     * [The list of types may be constrained as appropriate for the type of event].
     */
    occurrenceTiming?: Timing;
    /**
     * The item supplier
     * The individual or organization responsible for supplying the delivery.
     */
    supplier?: Reference;
    /**
     * Where the delivery was sent
     * Identification of the facility/location where the delivery was shipped to.
     */
    destination?: Reference;
    /**
     * Who received the delivery
     * Identifies the individual or organization that received the delivery.
     */
    receiver?: Reference[];
    /**
     * in-progress | completed | abandoned | entered-in-error
     * A code specifying the state of the dispense event.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status?: SupplyDeliveryStatus;
}
/**
 * Ordered item details
 * Specific parameters for the ordered item.  For example, the size of the indicated item.
 */
export interface SupplyRequestParameter extends BackboneElement {
    /**
     * Item detail
     * A code or string that identifies the device detail being asserted.
     */
    code?: CodeableConcept;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueQuantity?: Quantity;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueRange?: Range;
    /**
     * Value of detail
     * The value of the device detail.
     * Range means device should have a value that falls somewhere within the specified range.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
}
/**
 * Request for a medication, substance or device
 * A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization.
 */
export interface SupplyRequest extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'SupplyRequest';
    /**
     * Business Identifier for SupplyRequest
     * Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
     * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
     */
    identifier?: Identifier[];
    /**
     * What other request is fulfilled by this supply request
     * Plan/proposal/order fulfilled by this request.
     */
    basedOn?: Reference[];
    /**
     * The kind of supply (central, non-stock, etc.)
     * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
     */
    category?: CodeableConcept;
    /**
     * The patient for who the supply request is for
     * The patient to whom the supply will be given or for whom they will be used.
     */
    deliverFor?: Reference;
    /**
     * Medication, Substance, or Device requested to be supplied
     * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
     */
    item: CodeableReference;
    /**
     * The requested amount of the item indicated
     * The amount that is being ordered of the indicated item.
     */
    quantity: Quantity;
    /**
     * Ordered item details
     * Specific parameters for the ordered item.  For example, the size of the indicated item.
     */
    parameter?: SupplyRequestParameter[];
    /**
     * When the request should be fulfilled
     * When the request should be fulfilled.
     */
    occurrenceDateTime?: dateTime;
    /**
     * Extension for occurrenceDateTime
     **/
    _occurrenceDateTime?: Element;
    /**
     * When the request should be fulfilled
     * When the request should be fulfilled.
     */
    occurrencePeriod?: Period;
    /**
     * When the request should be fulfilled
     * When the request should be fulfilled.
     */
    occurrenceTiming?: Timing;
    /**
     * When the request was made
     * When the request was made.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Individual making the request
     * The device, practitioner, etc. who initiated the request.
     */
    requester?: Reference;
    /**
     * Who is intended to fulfill the request
     * Who is intended to fulfill the request.
     */
    supplier?: Reference[];
    /**
     * The reason why the supply item was requested
     * The reason why the supply item was requested.
     */
    reason?: CodeableReference[];
    /**
     * The origin of the supply
     * Where the supply is expected to come from.
     */
    deliverFrom?: Reference;
    /**
     * The destination of the supply
     * Where the supply is destined to go.
     */
    deliverTo?: Reference;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
     */
    priority?: SupplyRequestRequestPriority;
    /**
     * draft | active | suspended +
     * Status of the supply request.
     */
    status?: SupplyRequestStatus;
}
/**
 * Who or what performed the task
 * The entity who performed the requested task.
 */
export interface TaskPerformer extends BackboneElement {
    /**
     * Type of performance
     * A code or description of the performer of the task.
     */
    function?: CodeableConcept;
    /**
     * Who performed the task
     * The actor or entity who performed the task.
     */
    actor: Reference;
}
/**
 * Constraints on fulfillment tasks
 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 * Task.restriction can only be present if the Task is seeking fulfillment of another Request resource, and the restriction identifies what subset of the authorization conveyed by the request is supposed to be fulfilled by this Task. A possible example could be a standing order (the request) covering a significant time period and/or individuals, while the Task seeks fulfillment for only a subset of that time-period and a single individual.
 */
export interface TaskRestriction extends BackboneElement {
    /**
     * How many times to repeat
     * Indicates the number of times the requested action should occur.
     */
    repetitions?: positiveInt;
    /**
     * Extension for repetitions
     **/
    _repetitions?: Element;
    /**
     * When fulfillment is sought
     * The time-period for which fulfillment is sought. This must fall within the overall time period authorized in the referenced request.  E.g. ServiceRequest.occurance[x].
     * This is distinct from Task.executionPeriod. ExecutionPeriod indicates when the task needs to be initiated, while Task.restriction.period specifies the subset of the overall authorization that this period covers. For example, a MedicationRequest with an overall effective period of 1 year might have a Task whose restriction.period is 2 months (i.e. satisfy 2 months of medication therapy), while the execution period might be 'between now and 5 days from now' - i.e. If you say yes to this, then you're agreeing to supply medication for that 2 month period within the next 5 days.

Note that period.high is the due date representing the time by which the task should be completed.
     */
    period?: Period;
    /**
     * For whom is fulfillment sought?
     * For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
     */
    recipient?: Reference[];
}
/**
 * Information used to perform task
 * Additional information that may be needed in the execution of the task.
 */
export interface TaskInput extends BackboneElement {
    /**
     * Label for the input
     * A code or description indicating how the input is intended to be used as part of the task execution.
     * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
     */
    type: CodeableConcept;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueAddress?: Address;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueAge?: Age;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueAnnotation?: Annotation;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueAttachment?: Attachment;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueCoding?: Coding;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueCount?: Count;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDistance?: Distance;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDuration?: Duration;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueHumanName?: HumanName;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueIdentifier?: Identifier;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueMoney?: Money;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valuePeriod?: Period;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueQuantity?: Quantity;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueRange?: Range;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueRatio?: Ratio;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueRatioRange?: RatioRange;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueReference?: Reference;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueSampledData?: SampledData;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueSignature?: Signature;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueTiming?: Timing;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueExpression?: Expression;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueUsageContext?: UsageContext;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueAvailability?: Availability;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueDosage?: Dosage;
    /**
     * Content to use in performing the task
     * The value of the input parameter as a basic type.
     */
    valueMeta?: Meta;
}
/**
 * Information produced as part of task
 * Outputs produced by the Task.
 */
export interface TaskOutput extends BackboneElement {
    /**
     * Label for output
     * The name of the Output parameter.
     */
    type: CodeableConcept;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAddress?: Address;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAge?: Age;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAnnotation?: Annotation;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAttachment?: Attachment;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCoding?: Coding;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCount?: Count;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDistance?: Distance;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDuration?: Duration;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueHumanName?: HumanName;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueIdentifier?: Identifier;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueMoney?: Money;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valuePeriod?: Period;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueQuantity?: Quantity;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRange?: Range;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRatio?: Ratio;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRatioRange?: RatioRange;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueReference?: Reference;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueSampledData?: SampledData;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueSignature?: Signature;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueTiming?: Timing;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueExpression?: Expression;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUsageContext?: UsageContext;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAvailability?: Availability;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDosage?: Dosage;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueMeta?: Meta;
}
/**
 * A task to be performed
 * A task to be performed.
 */
export interface Task extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Task';
    /**
     * Task Instance Identifier
     * The business identifier for this task.
     */
    identifier?: Identifier[];
    /**
     * Formal definition of task
     * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    instantiatesCanonical?: canonical;
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element;
    /**
     * Formal definition of task
     * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    instantiatesUri?: uri;
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element;
    /**
     * Request fulfilled by this task
     * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by focus.  For example, based on a CarePlan (= basedOn), a task is created to fulfill a ServiceRequest ( = focus ) to collect a specimen from a patient.
     * Task.basedOn is never the same as Task.focus.  Task.basedOn will typically not be present for 'please fulfill' Tasks as a distinct authorization is rarely needed to request fulfillment.  If the Task is seeking fulfillment of an order, the order to be fulfilled is always communicated using `focus`, never basedOn.  However, authorization may be needed to perform other types of Task actions.  As an example of when both would be present, a Task seeking suspension of a prescription might have a Task.basedOn pointing to the ServiceRequest ordering surgery (which is the driver for suspending the MedicationRequest - which would be the Task.focus).
     */
    basedOn?: Reference[];
    /**
     * Requisition or grouper id
     * A shared identifier common to multiple independent Task and Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
     */
    groupIdentifier?: Identifier;
    /**
     * Composite task
     * Task that this particular task is part of.
     * This should usually be 0..1.
     */
    partOf?: Reference[];
    /**
     * Reason for current status
     * An explanation as to why this task is held, failed, was refused, etc.
     * This applies to the current status.  Look at the history of the task to see reasons for past statuses.
     */
    statusReason?: CodeableReference;
    /**
     * E.g. "Specimen collected", "IV prepped"
     * Contains business-specific nuances of the business state.
     */
    businessStatus?: CodeableConcept;
    /**
     * True if Task is prohibiting action
     * If true indicates that the Task is asking for the specified action to *not* occur.
     * The attributes provided with the Task qualify what is not to be done. For example, if a requestedPeriod is provided, the 'do not' request only applies within the specified time. If a requestedPerformer is specified then the 'do not' request only applies to performers of that type. Qualifiers include: code, subject, occurrence, requestedPerformer and performer.

In some cases, the Request.code may pre-coordinate prohibition into the requested action. E.g. 'NPO' (nothing by mouth), 'DNR' (do not recussitate). If this happens, doNotPerform SHALL NOT be set to true. I.e. The resource shall not have double negation. (E.g. 'Do not DNR').

doNotPerform should ONLY be used with Tasks that are tightly bounded in time or process phase.  E.g. 'Do not fulfill the midnight dose of medication X tonight due to the early morning scheduled procedure, where the nurse could reasonably check off 'Med X not given at midnight as instructed'.  Similarly, a decision support proposal that a patient should not be given a standard intake questionnaire (because the patient is cognitively impaired) would be marked as 'complete' or 'rejected' when the clinician preps the CarePlan or order set after reviewing the decision support results.  If there is a need to create a standing order to not do something that can't be satisfied by a single 'non-action', but rather an ongoing refusal to perform the function, MedicationRequest, ServiceRequest or some other form of authorization should be used.
     */
    doNotPerform?: boolean;
    /**
     * Extension for doNotPerform
     **/
    _doNotPerform?: Element;
    /**
     * Task Type
     * A name or code (or both) briefly describing what the task involves.
     * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
     */
    code?: CodeableConcept;
    /**
     * Human-readable explanation of task
     * A free-text description of what is to be performed.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * What task is acting on
     * The request being fulfilled or the resource being manipulated (changed, suspended, etc.) by this task.
     * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
     */
    focus?: Reference;
    /**
     * Beneficiary of the Task
     * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
     */
    for?: Reference;
    /**
     * Healthcare event during which this task originated
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
     */
    encounter?: Reference;
    /**
     * When the task should be performed
     * Indicates the start and/or end of the period of time when completion of the task is desired to take place.
     * This is typically used when the Task is *not* seeking fulfillment of a focus Request, as in that case the period would be specified on the Request and/or in the Task.restriction.period.  Instead, it is used for stand-alone tasks.
     */
    requestedPeriod?: Period;
    /**
     * Start and end time of execution
     * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
     */
    executionPeriod?: Period;
    /**
     * Task Creation Date
     * The date and time this task was created.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Task Last Modified Date
     * The date and time of last modification to this task.
     */
    lastModified?: dateTime;
    /**
     * Extension for lastModified
     **/
    _lastModified?: Element;
    /**
     * Who is asking for task to be done
     * The creator of the task.
     */
    requester?: Reference;
    /**
     * Who should perform Task
     * The kind of participant or specific participant that should perform the task.
     */
    requestedPerformer?: CodeableReference[];
    /**
     * Responsible individual
     * Party responsible for managing task execution.
     * Tasks may be created with an owner not yet identified.
     */
    owner?: Reference;
    /**
     * Who or what performed the task
     * The entity who performed the requested task.
     */
    performer?: TaskPerformer[];
    /**
     * Where task occurs
     * Principal physical location where this task is performed.
     * This should only be specified when the Task to be/being performed happens or is expected to happen primarily within the bounds of a single Location.  Other locations (e.g. source, destination, etc.) would either be reflected on the 'basedOn' Request or be conveyed as distinct Task.input values.
     */
    location?: Reference;
    /**
     * Why task is needed
     * A description, code, or reference indicating why this task needs to be performed.
     * This will typically not be present for Tasks with a code of 'please fulfill' as, for those, the reason for action is conveyed on the Request pointed to by Task.focus.  Some types of tasks will not need a 'reason'.  E.g. a request to discharge a patient can be inferred to be 'because the patient is ready' and this would not need a reason to be stated on the Task.
     */
    reason?: CodeableReference[];
    /**
     * Associated insurance coverage
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
     */
    insurance?: Reference[];
    /**
     * Comments made about the task
     * Free-text information captured about the task as it progresses.
     */
    note?: Annotation[];
    /**
     * Key events in history of the Task
     * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
     * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
     */
    relevantHistory?: Reference[];
    /**
     * Constraints on fulfillment tasks
     * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
     * Task.restriction can only be present if the Task is seeking fulfillment of another Request resource, and the restriction identifies what subset of the authorization conveyed by the request is supposed to be fulfilled by this Task. A possible example could be a standing order (the request) covering a significant time period and/or individuals, while the Task seeks fulfillment for only a subset of that time-period and a single individual.
     */
    restriction?: TaskRestriction;
    /**
     * Information used to perform task
     * Additional information that may be needed in the execution of the task.
     */
    input?: TaskInput[];
    /**
     * Information produced as part of task
     * Outputs produced by the Task.
     */
    output?: TaskOutput[];
    /**
     * unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
     * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
     * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.

In most cases, Tasks will have an intent of "order".
     */
    intent: TaskIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the Task should be addressed with respect to other requests.
     */
    priority?: TaskPriority;
    /**
     * draft | requested | received | accepted | +
     * The current status of the task.
     */
    status: TaskStatus;
}
/**
 * Software that is covered by this terminology capability statement
 * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
 */
export interface TerminologyCapabilitiesSoftware extends BackboneElement {
    /**
     * A name the software is known by
     * Name the software is known by.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Version covered by this statement
     * The version identifier for the software covered by this statement.
     * If possible, a version should be specified, as statements are likely to be different for different versions of software.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
}
/**
 * If this describes a specific instance
 * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
 */
export interface TerminologyCapabilitiesImplementation extends BackboneElement {
    /**
     * Describes this specific instance
     * Information about the specific installation that this terminology capability statement relates to.
     */
    description: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Base URL for the implementation
     * An absolute base URL for the implementation.
     */
    url?: url;
    /**
     * Extension for url
     **/
    _url?: Element;
}
/**
 * Filter Properties supported
 * Filter Properties supported.
 */
export interface TerminologyCapabilitiesCodeSystemVersionFilter extends BackboneElement {
    /**
     * Code of the property supported
     * Code of the property supported.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Operations supported for the property
     * Operations supported for the property.
     */
    op: code[];
    /**
     * Extension for op
     **/
    _op?: Element[];
}
/**
 * Version of Code System supported
 * For the code system, a list of versions that are supported by the server.
 * Language translations might not be available for all codes.
 */
export interface TerminologyCapabilitiesCodeSystemVersion extends BackboneElement {
    /**
     * Version identifier for this version
     * For version-less code systems, there should be a single version with no identifier.
     */
    code?: string;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * If this is the default version for this code system
     * If this is the default version for this code system.
     */
    isDefault?: boolean;
    /**
     * Extension for isDefault
     **/
    _isDefault?: Element;
    /**
     * If compositional grammar is supported
     * If the compositional grammar defined by the code system is supported.
     */
    compositional?: boolean;
    /**
     * Extension for compositional
     **/
    _compositional?: Element;
    /**
     * Language Displays supported
     * Language Displays supported.
     */
    language?: code[];
    /**
     * Extension for language
     **/
    _language?: Element[];
    /**
     * Filter Properties supported
     * Filter Properties supported.
     */
    filter?: TerminologyCapabilitiesCodeSystemVersionFilter[];
    /**
     * Properties supported for $lookup
     * Properties supported for $lookup.
     */
    property?: code[];
    /**
     * Extension for property
     **/
    _property?: Element[];
}
/**
 * A code system supported by the server
 * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export interface TerminologyCapabilitiesCodeSystem extends BackboneElement {
    /**
     * Canonical identifier for the code system, represented as a URI
     * Canonical identifier for the code system, represented as a URI.
     */
    uri?: canonical;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * Version of Code System supported
     * For the code system, a list of versions that are supported by the server.
     * Language translations might not be available for all codes.
     */
    version?: TerminologyCapabilitiesCodeSystemVersion[];
    /**
     * Whether subsumption is supported
     * True if subsumption is supported for this version of the code system.
     */
    subsumption?: boolean;
    /**
     * Extension for subsumption
     **/
    _subsumption?: Element;
    /**
     * not-present | example | fragment | complete | supplement
     * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
     */
    content: TerminologyCapabilitiesCodeSystemContentMode;
}
/**
 * Supported expansion parameter
 * Supported expansion parameter.
 */
export interface TerminologyCapabilitiesExpansionParameter extends BackboneElement {
    /**
     * Name of the supported expansion parameter
     * Name of the supported expansion parameter.
     */
    name: code;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Description of support for parameter
     * Description of support for parameter.
     */
    documentation?: string;
    /**
     * Extension for documentation
     **/
    _documentation?: Element;
}
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
 */
export interface TerminologyCapabilitiesExpansion extends BackboneElement {
    /**
     * Whether the server can return nested value sets
     * Whether the server can return nested value sets.
     */
    hierarchical?: boolean;
    /**
     * Extension for hierarchical
     **/
    _hierarchical?: Element;
    /**
     * Whether the server supports paging on expansion
     * Whether the server supports paging on expansion.
     */
    paging?: boolean;
    /**
     * Extension for paging
     **/
    _paging?: Element;
    /**
     * Allow request for incomplete expansions?
     * True if requests for incomplete expansions are allowed.
     */
    incomplete?: boolean;
    /**
     * Extension for incomplete
     **/
    _incomplete?: Element;
    /**
     * Supported expansion parameter
     * Supported expansion parameter.
     */
    parameter?: TerminologyCapabilitiesExpansionParameter[];
    /**
     * Documentation about text searching works
     * Documentation about text searching works.
     * This documentation should cover things like case sensitivity,  use of punctuation if not ignored, what wild cards are supported (if any), whether text is starts with or contains, and whether word order matters.
     */
    textFilter?: markdown;
    /**
     * Extension for textFilter
     **/
    _textFilter?: Element;
}
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
export interface TerminologyCapabilitiesValidateCode extends BackboneElement {
    /**
     * Whether translations are validated
     * Whether translations are validated.
     */
    translations: boolean;
    /**
     * Extension for translations
     **/
    _translations?: Element;
}
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
export interface TerminologyCapabilitiesTranslation extends BackboneElement {
    /**
     * Whether the client must identify the map
     * Whether the client must identify the map.
     */
    needsMap: boolean;
    /**
     * Extension for needsMap
     **/
    _needsMap?: Element;
}
/**
 * Information about the [ConceptMap/$closure](conceptmap-operation-closure.html) operation
 * Whether the $closure operation is supported.
 */
export interface TerminologyCapabilitiesClosure extends BackboneElement {
    /**
     * If cross-system closure is supported
     * If cross-system closure is supported.
     */
    translation?: boolean;
    /**
     * Extension for translation
     **/
    _translation?: Element;
}
/**
 * A statement of system capabilities
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
 */
export interface TerminologyCapabilities extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'TerminologyCapabilities';
    /**
     * Canonical identifier for this terminology capabilities, represented as a URI (globally unique)
     * An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the terminology capabilities
     * A formal identifier that is used to identify this terminology capabilities when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this terminology capabilities outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the terminology capabilities
     * The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different terminology capabilities instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the terminology capabilities with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this terminology capabilities (computer friendly)
     * A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this terminology capabilities (human friendly)
     * A short, descriptive, user-friendly title for the terminology capabilities.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of terminology capabilitiess that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date  (and optionally time) when the terminology capabilities was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the terminology capabilities. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the terminology capabilities.
     * Usually an organization but may be an individual. The publisher (or steward) of the terminology capabilities is the organization or individual primarily responsible for the maintenance and upkeep of the terminology capabilities. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the terminology capabilities. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the terminology capabilities
     * A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the terminology capabilities as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the terminology capabilities is presumed to be the predominant language in the place the terminology capabilities was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for terminology capabilities (if applicable)
     * A legal or geographic region in which the terminology capabilities is intended to be used.
     * It may be possible for the terminology capabilities to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this terminology capabilities is defined
     * Explanation of why this terminology capabilities is needed and why it has been designed as it has.
     * This element does not describe the usage of the terminology capabilities. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this terminology capabilities.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * Software that is covered by this terminology capability statement
     * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
     */
    software?: TerminologyCapabilitiesSoftware;
    /**
     * If this describes a specific instance
     * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
     */
    implementation?: TerminologyCapabilitiesImplementation;
    /**
     * Whether lockedDate is supported
     * Whether the server supports lockedDate.
     */
    lockedDate?: boolean;
    /**
     * Extension for lockedDate
     **/
    _lockedDate?: Element;
    /**
     * A code system supported by the server
     * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
     * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
     */
    codeSystem?: TerminologyCapabilitiesCodeSystem[];
    /**
     * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation
     * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
     */
    expansion?: TerminologyCapabilitiesExpansion;
    /**
     * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation
     * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
     */
    validateCode?: TerminologyCapabilitiesValidateCode;
    /**
     * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation
     * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
     */
    translation?: TerminologyCapabilitiesTranslation;
    /**
     * Information about the [ConceptMap/$closure](conceptmap-operation-closure.html) operation
     * Whether the $closure operation is supported.
     */
    closure?: TerminologyCapabilitiesClosure;
    /**
     * draft | active | retired | unknown
     * The status of this terminology capabilities. Enables tracking the life-cycle of the content.
     * Allows filtering of terminology capabilitiess that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: TerminologyCapabilitiesPublicationStatus;
    /**
     * instance | capability | requirements
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind: TerminologyCapabilitiesCapabilityStatementKind;
    /**
     * in-compose | in-expansion | in-compose-or-expansion
     * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
     * See notes on the [ValueSet](valueset.html#) resource.
     */
    codeSearch?: TerminologyCapabilitiesCodeSearchSupport;
}
/**
 * The required criteria to execute the test plan - e.g. preconditions, previous tests
 * The required criteria to execute the test plan - e.g. preconditions, previous tests...
 */
export interface TestPlanDependency extends BackboneElement {
    /**
     * Description of the dependency criterium
     * A textual description of the criterium - what is needed for the dependency to be considered met.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Link to predecessor test plans
     * Predecessor test plans - those that are expected to be successfully performed as a dependency for the execution of this test plan.
     */
    predecessor?: Reference;
}
/**
 * Required criteria to execute the test case
 * The required criteria to execute the test case - e.g. preconditions, previous tests.
 */
export interface TestPlanTestCaseDependency extends BackboneElement {
    /**
     * Description of the criteria
     * Description of the criteria.
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Link to predecessor test plans
     * Link to predecessor test plans.
     */
    predecessor?: Reference;
}
/**
 * The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript
 * The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript.
 */
export interface TestPlanTestCaseTestRunScript extends BackboneElement {
    /**
     * The language for the test cases e.g. 'gherkin', 'testscript'
     * The language for the test cases e.g. 'gherkin', 'testscript'.
     */
    language?: CodeableConcept;
    /**
     * The actual content of the cases - references to TestScripts or externally defined content
     * The actual content of the cases - references to TestScripts or externally defined content.
     */
    sourceString?: string;
    /**
     * Extension for sourceString
     **/
    _sourceString?: Element;
    /**
     * The actual content of the cases - references to TestScripts or externally defined content
     * The actual content of the cases - references to TestScripts or externally defined content.
     */
    sourceReference?: Reference;
}
/**
 * The actual test to be executed
 * The actual test to be executed.
 */
export interface TestPlanTestCaseTestRun extends BackboneElement {
    /**
     * The narrative description of the tests
     * The narrative description of the tests.
     */
    narrative?: markdown;
    /**
     * Extension for narrative
     **/
    _narrative?: Element;
    /**
     * The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript
     * The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript.
     */
    script?: TestPlanTestCaseTestRunScript;
}
/**
 * The test data used in the test case
 * The test data used in the test case.
 */
export interface TestPlanTestCaseTestData extends BackboneElement {
    /**
     * The type of test data description, e.g. 'synthea'
     * The type of test data description, e.g. 'synthea'.
     */
    type: Coding;
    /**
     * The actual test resources when they exist
     * The actual test resources when they exist.
     */
    content?: Reference;
    /**
     * Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc
     * Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc.
     */
    sourceString?: string;
    /**
     * Extension for sourceString
     **/
    _sourceString?: Element;
    /**
     * Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc
     * Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc.
     */
    sourceReference?: Reference;
}
/**
 * Test assertions or expectations
 * The test assertions - the expectations of test results from the execution of the test case.
 */
export interface TestPlanTestCaseAssertion extends BackboneElement {
    /**
     * Assertion type - for example 'informative' or 'required'
     * The test assertion type - this can be used to group assertions as 'required' or 'optional', or can be used for other classification of the assertion.
     */
    type?: CodeableConcept[];
    /**
     * The focus or object of the assertion
     * The focus or object of the assertion i.e. a resource.
     */
    object?: CodeableReference[];
    /**
     * The actual result assertion
     * The test assertion - the expected outcome from the test case execution.
     */
    result?: CodeableReference[];
}
/**
 * The test cases that constitute this plan
 * The individual test cases that are part of this plan, when they they are made explicit.
 */
export interface TestPlanTestCase extends BackboneElement {
    /**
     * Sequence of test case in the test plan
     * Sequence of test case - an ordinal number that indicates the order for the present test case in the test plan.
     */
    sequence?: integer;
    /**
     * Extension for sequence
     **/
    _sequence?: Element;
    /**
     * The scope or artifact covered by the case
     * The scope or artifact covered by the case, when the individual test case is associated with a testable artifact.
     */
    scope?: Reference[];
    /**
     * Required criteria to execute the test case
     * The required criteria to execute the test case - e.g. preconditions, previous tests.
     */
    dependency?: TestPlanTestCaseDependency[];
    /**
     * The actual test to be executed
     * The actual test to be executed.
     */
    testRun?: TestPlanTestCaseTestRun[];
    /**
     * The test data used in the test case
     * The test data used in the test case.
     */
    testData?: TestPlanTestCaseTestData[];
    /**
     * Test assertions or expectations
     * The test assertions - the expectations of test results from the execution of the test case.
     */
    assertion?: TestPlanTestCaseAssertion[];
}
/**
 * Description of intented testing
 * A plan for executing testing on an artifact or specifications.
 */
export interface TestPlan extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'TestPlan';
    /**
     * Canonical identifier for this test plan, represented as a URI (globally unique)
     * An absolute URI that is used to identify this test plan when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test plan is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test plan is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Business identifier identifier for the test plan
     * A formal identifier that is used to identify this test plan when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test plan outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the test plan
     * The identifier that is used to identify this version of the test plan when it is referenced in a specification, model, design or instance.  This is an arbitrary value managed by the test plan author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different test plan instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test plan with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this test plan (computer friendly)
     * A natural language name identifying the test plan. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this test plan (human friendly)
     * A short, descriptive, user-friendly title for the test plan.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this test plan is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of test plans that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date (and optionally time) when the test plan was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test plan changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test plan. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the test plan.
     * Usually an organization but may be an individual. The publisher (or steward) of the test plan is the organization or individual primarily responsible for the maintenance and upkeep of the test plan. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test plan. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the test plan
     * A free text natural language description of the test plan from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test plan as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test plan is presumed to be the predominant language in the place the test plan was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test plan instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction where the test plan applies (if applicable)
     * A legal or geographic region in which the test plan is intended to be used.
     * It may be possible for the test plan to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this test plan is defined
     * Explanation of why this test plan is needed and why it has been designed as it has.
     * This element does not describe the usage of the test plan Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test plan.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the test plan and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test plan. The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * The category of the Test Plan - can be acceptance, unit, performance
     * The category of the Test Plan - can be acceptance, unit, performance, etc.
     */
    category?: CodeableConcept[];
    /**
     * What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference
     * What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference...
     */
    scope?: Reference[];
    /**
     * A description of test tools to be used in the test plan - narrative for now
     * A description of test tools to be used in the test plan.
     */
    testTools?: markdown;
    /**
     * Extension for testTools
     **/
    _testTools?: Element;
    /**
     * The required criteria to execute the test plan - e.g. preconditions, previous tests
     * The required criteria to execute the test plan - e.g. preconditions, previous tests...
     */
    dependency?: TestPlanDependency[];
    /**
     * The threshold or criteria for the test plan to be considered successfully executed - narrative
     * The threshold or criteria for the test plan to be considered successfully executed - narrative.
     */
    exitCriteria?: markdown;
    /**
     * Extension for exitCriteria
     **/
    _exitCriteria?: Element;
    /**
     * The test cases that constitute this plan
     * The individual test cases that are part of this plan, when they they are made explicit.
     */
    testCase?: TestPlanTestCase[];
    /**
     * draft | active | retired | unknown
     * The status of this test plan. Enables tracking the life-cycle of the content.
     * Allows filtering of test plans that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: TestPlanPublicationStatus;
}
/**
 * A participant in the test execution, either the execution engine, a client, or a server
 * A participant in the test execution, either the execution engine, a client, or a server.
 */
export interface TestReportParticipant extends BackboneElement {
    /**
     * The uri of the participant. An absolute URL is preferred
     * The uri of the participant. An absolute URL is preferred.
     */
    uri: uri;
    /**
     * Extension for uri
     **/
    _uri?: Element;
    /**
     * The display name of the participant
     * The display name of the participant.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * test-engine | client | server
     * The type of participant.
     */
    type: TestReportParticipantType;
}
/**
 * The operation to perform
 * The operation performed.
 */
export interface TestReportSetupActionOperation extends BackboneElement {
    /**
     * A message associated with the result
     * An explanatory message associated with the result.
     */
    message?: markdown;
    /**
     * Extension for message
     **/
    _message?: Element;
    /**
     * A link to further details on the result
     * A link to further details on the result.
     */
    detail?: uri;
    /**
     * Extension for detail
     **/
    _detail?: Element;
    /**
     * pass | skip | fail | warning | error
     * The result of this operation.
     */
    result: TestReportActionResult;
}
/**
 * Links or references to the testing requirements
 * Links or references providing traceability to the testing requirements for this assert.
 * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
 */
export interface TestReportSetupActionAssertRequirement extends BackboneElement {
    /**
     * Link or reference to the testing requirement
     * Link or reference providing traceability to the testing requirement for this test.
     */
    linkUri?: uri;
    /**
     * Extension for linkUri
     **/
    _linkUri?: Element;
    /**
     * Link or reference to the testing requirement
     * Link or reference providing traceability to the testing requirement for this test.
     */
    linkCanonical?: canonical;
    /**
     * Extension for linkCanonical
     **/
    _linkCanonical?: Element;
}
/**
 * The assertion to perform
 * The results of the assertion performed on the previous operations.
 */
export interface TestReportSetupActionAssert extends BackboneElement {
    /**
     * A message associated with the result
     * An explanatory message associated with the result.
     */
    message?: markdown;
    /**
     * Extension for message
     **/
    _message?: Element;
    /**
     * A link to further details on the result
     * A link to further details on the result.
     */
    detail?: string;
    /**
     * Extension for detail
     **/
    _detail?: Element;
    /**
     * Links or references to the testing requirements
     * Links or references providing traceability to the testing requirements for this assert.
     * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
     */
    requirement?: TestReportSetupActionAssertRequirement[];
    /**
     * pass | skip | fail | warning | error
     * The result of this assertion.
     */
    result: TestReportActionResult;
}
/**
 * A setup operation or assert that was executed
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportSetupAction extends BackboneElement {
    /**
     * The operation to perform
     * The operation performed.
     */
    operation?: TestReportSetupActionOperation;
    /**
     * The assertion to perform
     * The results of the assertion performed on the previous operations.
     */
    assert?: TestReportSetupActionAssert;
}
/**
 * The results of the series of required setup operations before the tests were executed
 * The results of the series of required setup operations before the tests were executed.
 */
export interface TestReportSetup extends BackboneElement {
    /**
     * A setup operation or assert that was executed
     * Action would contain either an operation or an assertion.
     * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
     */
    action: TestReportSetupAction[];
}
/**
 * A test operation or assert that was performed
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTestAction extends BackboneElement {
    /**
     * The operation performed
     * An operation would involve a REST request to a server.
     */
    operation?: TestReportSetupActionOperation;
    /**
     * The assertion performed
     * The results of the assertion performed on the previous operations.
     */
    assert?: TestReportSetupActionAssert;
}
/**
 * A test executed from the test script
 * A test executed from the test script.
 */
export interface TestReportTest extends BackboneElement {
    /**
     * Tracking/logging name of this test
     * The name of this test used for tracking/logging purposes by test engines.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Tracking/reporting short description of the test
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * A test operation or assert that was performed
     * Action would contain either an operation or an assertion.
     * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
     */
    action: TestReportTestAction[];
}
/**
 * One or more teardown operations performed
 * The teardown action will only contain an operation.
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTeardownAction extends BackboneElement {
    /**
     * The teardown operation performed
     * An operation would involve a REST request to a server.
     */
    operation: TestReportSetupActionOperation;
}
/**
 * The results of running the series of required clean up steps
 * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
 */
export interface TestReportTeardown extends BackboneElement {
    /**
     * One or more teardown operations performed
     * The teardown action will only contain an operation.
     * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
     */
    action: TestReportTeardownAction[];
}
/**
 * Describes the results of a TestScript execution
 * A summary of information based on the results of executing a TestScript.
 */
export interface TestReport extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'TestReport';
    /**
     * External identifier
     * Identifier for the TestReport assigned for external purposes outside the context of FHIR.
     */
    identifier?: Identifier;
    /**
     * Informal name of the executed TestReport
     * A free text natural language name identifying the executed TestReport.
     * Not expected to be globally unique.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Canonical URL to the  version-specific TestScript that was executed to produce this TestReport
     * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
     */
    testScript: canonical;
    /**
     * Extension for testScript
     **/
    _testScript?: Element;
    /**
     * The final score (percentage of tests passed) resulting from the execution of the TestScript
     * The final score (percentage of tests passed) resulting from the execution of the TestScript.
     */
    score?: decimal;
    /**
     * Extension for score
     **/
    _score?: Element;
    /**
     * Name of the tester producing this report (Organization or individual)
     * Name of the tester producing this report (Organization or individual).
     * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
     */
    tester?: string;
    /**
     * Extension for tester
     **/
    _tester?: Element;
    /**
     * When the TestScript was executed and this TestReport was generated
     * When the TestScript was executed and this TestReport was generated.
     * Additional specific dates may be added as extensions.
     */
    issued?: dateTime;
    /**
     * Extension for issued
     **/
    _issued?: Element;
    /**
     * A participant in the test execution, either the execution engine, a client, or a server
     * A participant in the test execution, either the execution engine, a client, or a server.
     */
    participant?: TestReportParticipant[];
    /**
     * The results of the series of required setup operations before the tests were executed
     * The results of the series of required setup operations before the tests were executed.
     */
    setup?: TestReportSetup;
    /**
     * A test executed from the test script
     * A test executed from the test script.
     */
    test?: TestReportTest[];
    /**
     * The results of running the series of required clean up steps
     * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
     */
    teardown?: TestReportTeardown;
    /**
     * completed | in-progress | waiting | stopped | entered-in-error
     * The current state of this test report.
     * The status represents where the execution is currently within the test script execution life cycle.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: TestReportStatus;
    /**
     * pass | fail | pending
     * The overall result from the execution of the TestScript.
     * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
     */
    result: TestReportResult;
}
/**
 * An abstract server representing a client or sender in a message exchange
 * An abstract server used in operations within this test script in the origin element.
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export interface TestScriptOrigin extends BackboneElement {
    /**
     * The index of the abstract origin server starting at 1
     * Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
     * A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and again as FormProcessor within the same script as that could get confusing during test configuration).

Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).

The origin indices provided elsewhere in the test script must be one of these origin indices.
     */
    index: integer;
    /**
     * Extension for index
     **/
    _index?: Element;
    /**
     * FHIR-Client | FHIR-SDC-FormFiller
     * The type of origin profile the test system supports.
     * Must be a "sender"/"client" profile.
     */
    profile: Coding;
    /**
     * The url path of the origin server
     * The explicit url path of the origin server used in this test script.
     * If provided, the test engine is not expected to prompt for or accept external input of this value.
     */
    url?: url;
    /**
     * Extension for url
     **/
    _url?: Element;
}
/**
 * An abstract server representing a destination or receiver in a message exchange
 * An abstract server used in operations within this test script in the destination element.
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export interface TestScriptDestination extends BackboneElement {
    /**
     * The index of the abstract destination server starting at 1
     * Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
     * A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration).

Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).

The destination indices provided elsewhere in the test script must be one of these destination indices.
     */
    index: integer;
    /**
     * Extension for index
     **/
    _index?: Element;
    /**
     * FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-SDC-FormProcessor
     * The type of destination profile the test system supports.
     * Must be a "receiver"/"server" profile.
     */
    profile: Coding;
    /**
     * The url path of the destination server
     * The explicit url path of the destination server used in this test script.
     * If provided, the test engine is not expected to prompt for or accept external input of this value.
     */
    url?: url;
    /**
     * Extension for url
     **/
    _url?: Element;
}
/**
 * Links to the FHIR specification
 * A link to the FHIR specification that this test is covering.
 */
export interface TestScriptMetadataLink extends BackboneElement {
    /**
     * URL to the specification
     * URL to a particular requirement or feature within the FHIR specification.
     */
    url: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Short description
     * Short description of the link.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
}
/**
 * Capabilities  that are assumed to function correctly on the FHIR server being tested
 * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export interface TestScriptMetadataCapability extends BackboneElement {
    /**
     * Are the capabilities required?
     * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
     */
    required: boolean;
    /**
     * Extension for required
     **/
    _required?: Element;
    /**
     * Are the capabilities validated?
     * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
     */
    validated: boolean;
    /**
     * Extension for validated
     **/
    _validated?: Element;
    /**
     * The expected capabilities of the server
     * Description of the capabilities that this test script is requiring the server to support.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Which origin server these requirements apply to
     * Which origin server these requirements apply to.
     */
    origin?: integer[];
    /**
     * Extension for origin
     **/
    _origin?: Element[];
    /**
     * Which server these requirements apply to
     * Which server these requirements apply to.
     */
    destination?: integer;
    /**
     * Extension for destination
     **/
    _destination?: Element;
    /**
     * Links to the FHIR specification
     * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
     */
    link?: uri[];
    /**
     * Extension for link
     **/
    _link?: Element[];
    /**
     * Required Capability Statement
     * Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
     * The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.
     */
    capabilities: canonical;
    /**
     * Extension for capabilities
     **/
    _capabilities?: Element;
}
/**
 * Required capability that is assumed to function correctly on the FHIR server being tested
 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
 */
export interface TestScriptMetadata extends BackboneElement {
    /**
     * Links to the FHIR specification
     * A link to the FHIR specification that this test is covering.
     */
    link?: TestScriptMetadataLink[];
    /**
     * Capabilities  that are assumed to function correctly on the FHIR server being tested
     * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
     * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
     */
    capability: TestScriptMetadataCapability[];
}
/**
 * Indication of the artifact(s) that are tested by this test case
 * The scope indicates a conformance artifact that is tested by the test(s) within this test case and the expectation of the test outcome(s) as well as the intended test phase inclusion.
 */
export interface TestScriptScope extends BackboneElement {
    /**
     * The specific conformance artifact being tested
     * The specific conformance artifact being tested. The canonical reference can be version-specific.
     */
    artifact: canonical;
    /**
     * Extension for artifact
     **/
    _artifact?: Element;
    /**
     * required | optional | strict
     * The expectation of whether the test must pass for the system to be considered conformant with the artifact: required - all tests are expected to pass, optional - all test are expected to pass but non-pass status may be allowed, strict - all tests are expected to pass and warnings are treated as a failure.
     */
    conformance?: CodeableConcept;
    /**
     * unit | integration | production
     * The phase of testing for this artifact: unit - development / implementation phase, integration - internal system to system phase, production - live system to system phase (Note, this may involve pii/phi data).
     */
    phase?: CodeableConcept;
}
/**
 * Fixture in the test script - by reference (uri)
 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
 */
export interface TestScriptFixture extends BackboneElement {
    /**
     * Whether or not to implicitly create the fixture during setup
     * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
     */
    autocreate: boolean;
    /**
     * Extension for autocreate
     **/
    _autocreate?: Element;
    /**
     * Whether or not to implicitly delete the fixture during teardown
     * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
     */
    autodelete: boolean;
    /**
     * Extension for autodelete
     **/
    _autodelete?: Element;
    /**
     * Reference of the resource
     * Reference to the resource (containing the contents of the resource needed for operations). This is allowed to be a Parameters resource.
     * See the [Resource List](resourcelist.html) for complete list of resource types.
     */
    resource?: Reference;
}
/**
 * Placeholder for evaluated elements
 * Variable is set based either on element value in response body or on header field value in the response headers.
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export interface TestScriptVariable extends BackboneElement {
    /**
     * Descriptive name for this variable
     * Descriptive name for this variable.
     * Placeholders would contain the variable name wrapped in ${} in "operation.params", "operation.requestHeader.value", and "operation.url" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Default, hard-coded, or user-defined value for this variable
     * A default, hard-coded, or user-defined value for this variable.
     * The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.
     */
    defaultValue?: string;
    /**
     * Extension for defaultValue
     **/
    _defaultValue?: Element;
    /**
     * Natural language description of the variable
     * A free text natural language description of the variable and its purpose.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The FHIRPath expression against the fixture body
     * The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
     * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
     */
    expression?: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * HTTP header field name for source
     * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
     * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.
     */
    headerField?: string;
    /**
     * Extension for headerField
     **/
    _headerField?: Element;
    /**
     * Hint help text for default value to enter
     * Displayable text string with hint help information to the user when entering a default value.
     */
    hint?: string;
    /**
     * Extension for hint
     **/
    _hint?: Element;
    /**
     * XPath or JSONPath against the fixture body
     * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
     * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * Fixture Id of source expression or headerField within this variable
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
     * This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.
     */
    sourceId?: id;
    /**
     * Extension for sourceId
     **/
    _sourceId?: Element;
}
/**
 * Each operation can have one or more header elements
 * Header elements would be used to set HTTP headers.
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  ["If-Match" header](http.html#2.1.0.5.1).  See [Conditional Create using "If-None-Exist"](http.html#2.1.0.11).  See [Invalid "Content-Type" header](http.html#2.1.0.13.1) for negative testing. - etc.
 */
export interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {
    /**
     * HTTP header field name
     * The HTTP header field e.g. "Accept".
     * If header element is specified, then field is required.
     */
    field: string;
    /**
     * Extension for field
     **/
    _field?: Element;
    /**
     * HTTP headerfield value
     * The value of the header e.g. "application/fhir+xml".
     * If header element is specified, then value is required.  No conversions will be done by the test engine e.g. "xml" to "application/fhir+xml".  The values will be set in HTTP headers "as-is".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * The setup operation to perform
 * The operation to perform.
 */
export interface TestScriptSetupActionOperation extends BackboneElement {
    /**
     * The operation code type that will be executed
     * Server interaction or operation type.
     * See the list of [server interactions](http.html).
     */
    type?: Coding;
    /**
     * Resource type
     * The type of the FHIR resource. See the [resource list](resourcelist.html). Data type of uri is needed when non-HL7 artifacts are identified.
     * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored. For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present. For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url. For "vread" and "history" operations, the versionId value will also be used.
     */
    resource?: uri;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * Tracking/logging operation label
     * The label would be used for tracking/logging purposes by test engines.
     * This has no impact on the verification itself.
     */
    label?: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Tracking/reporting operation description
     * The description would be used by test engines for tracking and reporting purposes.
     * This has no impact on the verification itself.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Mime type to accept in the payload of the response, with charset etc
     * The mime-type to use for RESTful operation in the 'Accept' header.
     * If this is specified, then test engine shall set the 'Accept' header to the corresponding value.  If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
     */
    accept?: code;
    /**
     * Extension for accept
     **/
    _accept?: Element;
    /**
     * Mime type of the request payload contents, with charset etc
     * The mime-type to use for RESTful operation in the 'Content-Type' header.
     * If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.  If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.
     */
    contentType?: code;
    /**
     * Extension for contentType
     **/
    _contentType?: Element;
    /**
     * Server responding to the request
     * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
     * If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.
     */
    destination?: integer;
    /**
     * Extension for destination
     **/
    _destination?: Element;
    /**
     * Whether or not to send the request url in encoded format
     * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
     */
    encodeRequestUrl: boolean;
    /**
     * Extension for encodeRequestUrl
     **/
    _encodeRequestUrl?: Element;
    /**
     * Server initiating the request
     * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
     * If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.
     */
    origin?: integer;
    /**
     * Extension for origin
     **/
    _origin?: Element;
    /**
     * Explicitly defined path parameters
     * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
     * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.   Test engines would append whatever is specified for "params" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The "params" element does not correspond exactly to "search parameters".  Nor is it the "path".  It corresponds to the part of the URL that comes after the [type] (when "resource" element is specified); e.g. It corresponds to "/[id]/_history/[vid] {?_format=[mime-type]}" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
     */
    params?: string;
    /**
     * Extension for params
     **/
    _params?: Element;
    /**
     * Each operation can have one or more header elements
     * Header elements would be used to set HTTP headers.
     * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  ["If-Match" header](http.html#2.1.0.5.1).  See [Conditional Create using "If-None-Exist"](http.html#2.1.0.11).  See [Invalid "Content-Type" header](http.html#2.1.0.13.1) for negative testing. - etc.
     */
    requestHeader?: TestScriptSetupActionOperationRequestHeader[];
    /**
     * Fixture Id of mapped request
     * The fixture id (maybe new) to map to the request.
     * If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "requestId".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.
     */
    requestId?: id;
    /**
     * Extension for requestId
     **/
    _requestId?: Element;
    /**
     * Fixture Id of mapped response
     * The fixture id (maybe new) to map to the response.
     * If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "responseId".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.
     */
    responseId?: id;
    /**
     * Extension for responseId
     **/
    _responseId?: Element;
    /**
     * Fixture Id of body for PUT and POST requests
     * The id of the fixture used as the body of a PUT or POST request.
     */
    sourceId?: id;
    /**
     * Extension for sourceId
     **/
    _sourceId?: Element;
    /**
     * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
     * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
     * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.
     */
    targetId?: id;
    /**
     * Extension for targetId
     **/
    _targetId?: Element;
    /**
     * Request URL
     * Complete request URL.
     * Used to set the request URL explicitly.  If "url" element is defined, then "targetId", "resource", and "params" elements will be ignored.  Test engines would use whatever is specified in "url" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
     */
    url?: string;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * delete | get | options | patch | post | put | head
     * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
     * The primary purpose of the explicit HTTP method is support of  HTTP POST method invocation of the FHIR search. Other uses will include support of negative testing.
     */
    method?: TestScriptRequestMethodCode;
}
/**
 * Links or references to the testing requirements
 * Links or references providing traceability to the testing requirements for this assert.
 * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
 */
export interface TestScriptSetupActionAssertRequirement extends BackboneElement {
    /**
     * Link or reference to the testing requirement
     * Link or reference providing traceability to the testing requirement for this test.
     */
    linkUri?: uri;
    /**
     * Extension for linkUri
     **/
    _linkUri?: Element;
    /**
     * Link or reference to the testing requirement
     * Link or reference providing traceability to the testing requirement for this test.
     */
    linkCanonical?: canonical;
    /**
     * Extension for linkCanonical
     **/
    _linkCanonical?: Element;
}
/**
 * The assertion to perform
 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export interface TestScriptSetupActionAssert extends BackboneElement {
    /**
     * Tracking/logging assertion label
     * The label would be used for tracking/logging purposes by test engines.
     * This has no impact on the verification itself.
     */
    label?: string;
    /**
     * Extension for label
     **/
    _label?: Element;
    /**
     * Tracking/reporting assertion description
     * The description would be used by test engines for tracking and reporting purposes.
     * This has no impact on the verification itself.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * Id of the source fixture to be evaluated
     * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
     */
    compareToSourceId?: string;
    /**
     * Extension for compareToSourceId
     **/
    _compareToSourceId?: Element;
    /**
     * The FHIRPath expression to evaluate against the source fixture
     * The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     * Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
     */
    compareToSourceExpression?: string;
    /**
     * Extension for compareToSourceExpression
     **/
    _compareToSourceExpression?: Element;
    /**
     * XPath or JSONPath expression to evaluate against the source fixture
     * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     * The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
     */
    compareToSourcePath?: string;
    /**
     * Extension for compareToSourcePath
     **/
    _compareToSourcePath?: Element;
    /**
     * Mime type to compare against the 'Content-Type' header
     * The mime-type contents to compare against the request or response message 'Content-Type' header.
     * If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.
     */
    contentType?: code;
    /**
     * Extension for contentType
     **/
    _contentType?: Element;
    /**
     * The FHIRPath expression to be evaluated
     * The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
     * If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId. If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation. Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.

The FHIRPath expression can be evaluated as either a path to a specific value or as a boolean expression against the given FHIR resource. When the FHIRPath is a boolean expression, the assert.value element is not used. See [Testing FHIR Use Expressions](testing.html#expressions).
     */
    expression?: string;
    /**
     * Extension for expression
     **/
    _expression?: Element;
    /**
     * HTTP header field name
     * The HTTP header field name e.g. 'Location'.
     * If "headerField" is specified then "value" must be specified.  If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.
     */
    headerField?: string;
    /**
     * Extension for headerField
     **/
    _headerField?: Element;
    /**
     * Fixture Id of minimum content resource
     * The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.
     * Asserts that the response contains all the element/content in another fixture pointed to by minimumId. This can be a statically defined fixture or one that is dynamically set via responseId.

See [Testing FHIR Use minimumId](testing.html##minimumId) for a more complete description of the test engine's comparison logic.
     */
    minimumId?: string;
    /**
     * Extension for minimumId
     **/
    _minimumId?: Element;
    /**
     * Perform validation on navigation links?
     * Whether or not the test execution performs validation on the bundle navigation links.
     * Asserts that the Bundle contains first, last, and next links.
     */
    navigationLinks?: boolean;
    /**
     * Extension for navigationLinks
     **/
    _navigationLinks?: Element;
    /**
     * XPath or JSONPath expression
     * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
     * If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
     */
    path?: string;
    /**
     * Extension for path
     **/
    _path?: Element;
    /**
     * Request URL comparison value
     * The value to use in a comparison against the request URL path string.
     * If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.
     */
    requestURL?: string;
    /**
     * Extension for requestURL
     **/
    _requestURL?: Element;
    /**
     * Resource type
     * The type of the resource.  See the [resource list](resourcelist.html).
     * This will be expected resource type in response body e.g. in read, vread, search, etc.  See the [Resource List](resourcelist.html) for complete list of resource types; e.g. <assert > <resourceType value="Patient" </assert>.
     */
    resource?: uri;
    /**
     * Extension for resource
     **/
    _resource?: Element;
    /**
     * HTTP response code to test
     * The value of the HTTP response code to be tested.
     * To be used with "operator" attribute value. Asserts that the response code equals this value if "operator" is not specified.   If the operator is "in" or "notIn" then the responseCode would be a comma-separated list of values e.g. "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not specified, then the "responseBodyId" value of the last operation is assumed.
     */
    responseCode?: string;
    /**
     * Extension for responseCode
     **/
    _responseCode?: Element;
    /**
     * Fixture Id of source expression or headerField
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
     * This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.
     */
    sourceId?: id;
    /**
     * Extension for sourceId
     **/
    _sourceId?: Element;
    /**
     * If this assert fails, will the current test execution stop?
     * Whether or not the current test execution will stop on failure for this assert.
     * If this element is specified and it is true, then assertion failures should not stop the current test execution from proceeding.
     */
    stopTestOnFail: boolean;
    /**
     * Extension for stopTestOnFail
     **/
    _stopTestOnFail?: Element;
    /**
     * Profile Id of validation profile reference
     * The ID of the Profile to validate against.
     * The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.
     */
    validateProfileId?: id;
    /**
     * Extension for validateProfileId
     **/
    _validateProfileId?: Element;
    /**
     * The value to compare to
     * The value to compare to.
     * The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.
     */
    value?: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * Will this assert produce a warning only on error?
     * Whether or not the test execution will produce a warning only on error for this assert.
     * If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
     */
    warningOnly: boolean;
    /**
     * Extension for warningOnly
     **/
    _warningOnly?: Element;
    /**
     * Links or references to the testing requirements
     * Links or references providing traceability to the testing requirements for this assert.
     * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
     */
    requirement?: TestScriptSetupActionAssertRequirement[];
    /**
     * response | request
     * The direction to use for the assertion.
     * If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
     */
    direction?: TestScriptAssertionDirectionType;
    /**
     * fail | pass | skip | stop
     * The default manual completion outcome applied to this assertion.
     * Manual completion is used to pause the test engine execution and evaluation allowing an external review of the defined assert condition. The defaultManualCompletion defines the default manual completion outcome applied if one of the enumerated values is not applied.
     */
    defaultManualCompletion?: TestScriptAssertionManualCompletionType;
    /**
     * equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval | manualEval
     * The operator type defines the conditional behavior of the assert.
     * Operators are useful for both positive and negative testing. If operator is not specified, then the default conditional behavior is implemented as defined in [Testing FHIR Assertions](testing.html#assertion-table).
     */
    operator?: TestScriptAssertionOperatorType;
    /**
     * delete | get | options | patch | post | put | head
     * The request method or HTTP operation code to compare against that used by the client system under test.
     * If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
     */
    requestMethod?: TestScriptRequestMethodCode;
    /**
     * continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported
     * continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported.
     * This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
     */
    response?: TestScriptAssertionResponseTypes;
}
/**
 * A setup operation or assert to perform
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptSetupAction extends BackboneElement {
    /**
     * The setup operation to perform
     * The operation to perform.
     */
    operation?: TestScriptSetupActionOperation;
    /**
     * The assertion to perform
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
     */
    assert?: TestScriptSetupActionAssert;
}
/**
 * A series of required setup operations before tests are executed
 * A series of required setup operations before tests are executed.
 */
export interface TestScriptSetup extends BackboneElement {
    /**
     * A setup operation or assert to perform
     * Action would contain either an operation or an assertion.
     * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
     */
    action: TestScriptSetupAction[];
}
/**
 * A test operation or assert to perform
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTestAction extends BackboneElement {
    /**
     * The setup operation to perform
     * An operation would involve a REST request to a server.
     */
    operation?: TestScriptSetupActionOperation;
    /**
     * The setup assertion to perform
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
     */
    assert?: TestScriptSetupActionAssert;
}
/**
 * A test in this script
 * A test in this script.
 */
export interface TestScriptTest extends BackboneElement {
    /**
     * Tracking/logging name of this test
     * The name of this test used for tracking/logging purposes by test engines.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Tracking/reporting short description of the test
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * A test operation or assert to perform
     * Action would contain either an operation or an assertion.
     * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
     */
    action: TestScriptTestAction[];
}
/**
 * One or more teardown operations to perform
 * The teardown action will only contain an operation.
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTeardownAction extends BackboneElement {
    /**
     * The teardown operation to perform
     * An operation would involve a REST request to a server.
     */
    operation: TestScriptSetupActionOperation;
}
/**
 * A series of required clean up steps
 * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
 */
export interface TestScriptTeardown extends BackboneElement {
    /**
     * One or more teardown operations to perform
     * The teardown action will only contain an operation.
     * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
     */
    action: TestScriptTeardownAction[];
}
/**
 * Describes a set of tests
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
export interface TestScript extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'TestScript';
    /**
     * Canonical identifier for this test script, represented as a URI (globally unique)
     * An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the test script
     * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test script outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the test script
     * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test script with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this test script (computer friendly)
     * A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this test script (human friendly)
     * A short, descriptive, user-friendly title for the test script.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of test scripts that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date (and optionally time) when the test script was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
     * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the test script.
     * Usually an organization but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the test script
     * A free text natural language description of the test script from a consumer's perspective.
     * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test script is presumed to be the predominant language in the place the test script was created).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for test script (if applicable)
     * A legal or geographic region in which the test script is intended to be used.
     * It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Why this test script is defined
     * Explanation of why this test script is needed and why it has been designed as it has.
     * This element does not describe the usage of the test script. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * An abstract server representing a client or sender in a message exchange
     * An abstract server used in operations within this test script in the origin element.
     * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
     */
    origin?: TestScriptOrigin[];
    /**
     * An abstract server representing a destination or receiver in a message exchange
     * An abstract server used in operations within this test script in the destination element.
     * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
     */
    destination?: TestScriptDestination[];
    /**
     * Required capability that is assumed to function correctly on the FHIR server being tested
     * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
     */
    metadata?: TestScriptMetadata;
    /**
     * Indication of the artifact(s) that are tested by this test case
     * The scope indicates a conformance artifact that is tested by the test(s) within this test case and the expectation of the test outcome(s) as well as the intended test phase inclusion.
     */
    scope?: TestScriptScope[];
    /**
     * Fixture in the test script - by reference (uri)
     * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
     */
    fixture?: TestScriptFixture[];
    /**
     * Reference of the validation profile
     * Reference to the profile to be used for validation.
     * See the [Resource List](resourcelist.html) for complete list of resource types.
     */
    profile?: canonical[];
    /**
     * Extension for profile
     **/
    _profile?: Element[];
    /**
     * Placeholder for evaluated elements
     * Variable is set based either on element value in response body or on header field value in the response headers.
     * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
     */
    variable?: TestScriptVariable[];
    /**
     * A series of required setup operations before tests are executed
     * A series of required setup operations before tests are executed.
     */
    setup?: TestScriptSetup;
    /**
     * A test in this script
     * A test in this script.
     */
    test?: TestScriptTest[];
    /**
     * A series of required clean up steps
     * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
     */
    teardown?: TestScriptTeardown;
    /**
     * draft | active | retired | unknown
     * The status of this test script. Enables tracking the life-cycle of the content.
     * Allows filtering of test scripts that are appropriate for use versus not.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: TestScriptPublicationStatus;
}
/**
 * Constraints on fulfillment transports
 * If the Transport.focus is a request resource and the transport is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
 */
export interface TransportRestriction extends BackboneElement {
    /**
     * How many times to repeat
     * Indicates the number of times the requested action should occur.
     */
    repetitions?: positiveInt;
    /**
     * Extension for repetitions
     **/
    _repetitions?: Element;
    /**
     * When fulfillment sought
     * Over what time-period is fulfillment sought.
     * Note that period.high is the due date representing the time by which the transport should be completed.
     */
    period?: Period;
    /**
     * For whom is fulfillment sought?
     * For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
     */
    recipient?: Reference[];
}
/**
 * Information used to perform transport
 * Additional information that may be needed in the execution of the transport.
 */
export interface TransportInput extends BackboneElement {
    /**
     * Label for the input
     * A code or description indicating how the input is intended to be used as part of the transport execution.
     * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
     */
    type: CodeableConcept;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueAddress?: Address;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueAge?: Age;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueAnnotation?: Annotation;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueAttachment?: Attachment;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueCoding?: Coding;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueCount?: Count;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDistance?: Distance;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDuration?: Duration;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueHumanName?: HumanName;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueIdentifier?: Identifier;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueMoney?: Money;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valuePeriod?: Period;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueQuantity?: Quantity;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueRange?: Range;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueRatio?: Ratio;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueRatioRange?: RatioRange;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueReference?: Reference;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueSampledData?: SampledData;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueSignature?: Signature;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueTiming?: Timing;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueExpression?: Expression;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueUsageContext?: UsageContext;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueAvailability?: Availability;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueDosage?: Dosage;
    /**
     * Content to use in performing the transport
     * The value of the input parameter as a basic type.
     */
    valueMeta?: Meta;
}
/**
 * Information produced as part of transport
 * Outputs produced by the Transport.
 */
export interface TransportOutput extends BackboneElement {
    /**
     * Label for output
     * The name of the Output parameter.
     */
    type: CodeableConcept;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueBase64Binary?: base64Binary;
    /**
     * Extension for valueBase64Binary
     **/
    _valueBase64Binary?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCanonical?: canonical;
    /**
     * Extension for valueCanonical
     **/
    _valueCanonical?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDate?: date;
    /**
     * Extension for valueDate
     **/
    _valueDate?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueId?: id;
    /**
     * Extension for valueId
     **/
    _valueId?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueInstant?: instant;
    /**
     * Extension for valueInstant
     **/
    _valueInstant?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueInteger64?: integer64;
    /**
     * Extension for valueInteger64
     **/
    _valueInteger64?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueMarkdown?: markdown;
    /**
     * Extension for valueMarkdown
     **/
    _valueMarkdown?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueOid?: oid;
    /**
     * Extension for valueOid
     **/
    _valueOid?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valuePositiveInt?: positiveInt;
    /**
     * Extension for valuePositiveInt
     **/
    _valuePositiveInt?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueTime?: time;
    /**
     * Extension for valueTime
     **/
    _valueTime?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUnsignedInt?: unsignedInt;
    /**
     * Extension for valueUnsignedInt
     **/
    _valueUnsignedInt?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUrl?: url;
    /**
     * Extension for valueUrl
     **/
    _valueUrl?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUuid?: uuid;
    /**
     * Extension for valueUuid
     **/
    _valueUuid?: Element;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAddress?: Address;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAge?: Age;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAnnotation?: Annotation;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAttachment?: Attachment;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCoding?: Coding;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueCount?: Count;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDistance?: Distance;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDuration?: Duration;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueHumanName?: HumanName;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueIdentifier?: Identifier;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueMoney?: Money;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valuePeriod?: Period;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueQuantity?: Quantity;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRange?: Range;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRatio?: Ratio;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRatioRange?: RatioRange;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueReference?: Reference;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueSampledData?: SampledData;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueSignature?: Signature;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueTiming?: Timing;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDataRequirement?: DataRequirement;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueExpression?: Expression;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueParameterDefinition?: ParameterDefinition;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueTriggerDefinition?: TriggerDefinition;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueUsageContext?: UsageContext;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueAvailability?: Availability;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueExtendedContactDetail?: ExtendedContactDetail;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueDosage?: Dosage;
    /**
     * Result of output
     * The value of the Output parameter as a basic type.
     */
    valueMeta?: Meta;
}
/**
 * Delivery of item
 * Record of transport of item.
 */
export interface Transport extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'Transport';
    /**
     * External identifier
     * Identifier for the transport event that is used to identify it across multiple disparate systems.
     * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
     */
    identifier?: Identifier[];
    /**
     * Formal definition of transport
     * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
     */
    instantiatesCanonical?: canonical;
    /**
     * Extension for instantiatesCanonical
     **/
    _instantiatesCanonical?: Element;
    /**
     * Formal definition of transport
     * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
     */
    instantiatesUri?: uri;
    /**
     * Extension for instantiatesUri
     **/
    _instantiatesUri?: Element;
    /**
     * Request fulfilled by this transport
     * BasedOn refers to a higher-level authorization that triggered the creation of the transport.  It references a "request" resource such as a ServiceRequest or Transport, which is distinct from the "request" resource the Transport is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a transport is created to fulfill a procedureRequest ( = FocusOn ) to transport a specimen to the lab.
     */
    basedOn?: Reference[];
    /**
     * Requisition or grouper id
     * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
     */
    groupIdentifier?: Identifier;
    /**
     * Part of referenced event
     * A larger event of which this particular event is a component or step.
     * Not to be used to link an event to an Encounter - use Event.context for that.

[The allowed reference resources may be adjusted as appropriate for the event resource].
     */
    partOf?: Reference[];
    /**
     * Reason for current status
     * An explanation as to why this transport is held, failed, was refused, etc.
     * This applies to the current status.  Look at the history of the transport to see reasons for past statuses.
     */
    statusReason?: CodeableConcept;
    /**
     * Transport Type
     * A name or code (or both) briefly describing what the transport involves.
     * The title (eg "My Transports", "Outstanding Transports for Patient X") should go into the code.
     */
    code?: CodeableConcept;
    /**
     * Human-readable explanation of transport
     * A free-text description of what is to be performed.
     */
    description?: string;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * What transport is acting on
     * The request being actioned or the resource being manipulated by this transport.
     * If multiple resources need to be manipulated, use sub-transports.  (This ensures that status can be tracked independently for each referenced resource.).
     */
    focus?: Reference;
    /**
     * Beneficiary of the Transport
     * The entity who benefits from the performance of the service specified in the transport (e.g., the patient).
     */
    for?: Reference;
    /**
     * Healthcare event during which this transport originated
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this transport was created.
     */
    encounter?: Reference;
    /**
     * Completion time of the event (the occurrence)
     * Identifies the completion time of the event (the occurrence).
     */
    completionTime?: dateTime;
    /**
     * Extension for completionTime
     **/
    _completionTime?: Element;
    /**
     * Transport Creation Date
     * The date and time this transport was created.
     */
    authoredOn?: dateTime;
    /**
     * Extension for authoredOn
     **/
    _authoredOn?: Element;
    /**
     * Transport Last Modified Date
     * The date and time of last modification to this transport.
     */
    lastModified?: dateTime;
    /**
     * Extension for lastModified
     **/
    _lastModified?: Element;
    /**
     * Who is asking for transport to be done
     * The creator of the transport.
     */
    requester?: Reference;
    /**
     * Requested performer
     * The kind of participant that should perform the transport.
     */
    performerType?: CodeableConcept[];
    /**
     * Responsible individual
     * Individual organization or Device currently responsible for transport execution.
     * Transports may be created with an owner not yet identified.
     */
    owner?: Reference;
    /**
     * Where transport occurs
     * Principal physical location where this transport is performed.
     */
    location?: Reference;
    /**
     * Associated insurance coverage
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Transport.
     */
    insurance?: Reference[];
    /**
     * Comments made about the transport
     * Free-text information captured about the transport as it progresses.
     */
    note?: Annotation[];
    /**
     * Key events in history of the Transport
     * Links to Provenance records for past versions of this Transport that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the transport.
     * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
     */
    relevantHistory?: Reference[];
    /**
     * Constraints on fulfillment transports
     * If the Transport.focus is a request resource and the transport is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
     */
    restriction?: TransportRestriction;
    /**
     * Information used to perform transport
     * Additional information that may be needed in the execution of the transport.
     */
    input?: TransportInput[];
    /**
     * Information produced as part of transport
     * Outputs produced by the Transport.
     */
    output?: TransportOutput[];
    /**
     * The desired location
     * The desired or final location for the transport.
     */
    requestedLocation: Reference;
    /**
     * The entity current location
     * The current location for the entity to be transported.
     */
    currentLocation: Reference;
    /**
     * Why transport is needed
     * A resource reference indicating why this transport needs to be performed.
     * Transports might be justified based on an Observation, a Condition, a past or planned procedure, etc. This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Transport.reasonCode` if the data is free (uncoded) text.
     */
    reason?: CodeableReference;
    /**
     * Parent (or preceding) transport
     * The transport event prior to this one.
     */
    history?: Reference;
    /**
     * in-progress | completed | abandoned | cancelled | planned | entered-in-error
     * A code specifying the state of the transport event.
     */
    status?: TransportStatus;
    /**
     * unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
     * Indicates the "level" of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc.
     * This element is immutable.  Proposed transports, planned transports, etc. must be distinct instances.

In most cases, Transports will have an intent of "order".
     */
    intent: TransportIntent;
    /**
     * routine | urgent | asap | stat
     * Indicates how quickly the Transport should be addressed with respect to other requests.
     */
    priority?: TransportPriority;
}
/**
 * Additional representations for this concept
 * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export interface ValueSetComposeIncludeConceptDesignation extends BackboneElement {
    /**
     * Human language of the designation
     * The language this designation is defined for.
     * In the absence of a language, the resource language applies.
     */
    language?: code;
    /**
     * Extension for language
     **/
    _language?: Element;
    /**
     * Types of uses of designations
     * A code that represents types of uses of designations.
     * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
     */
    use?: Coding;
    /**
     * Additional ways how this designation would be used
     * Additional codes that detail how this designation would be used, if there is more than one use.
     * This was added rather than increasing the cardinality of .use to 0..* in order to maintain backward compatibility.
     */
    additionalUse?: Coding[];
    /**
     * The text value for this designation
     * The text value for this designation.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
}
/**
 * A concept defined in the system
 * Specifies a concept to be included or excluded.
 * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
 */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
    /**
     * Code or expression from system
     * Specifies a code for the concept to be included or excluded.
     * Expressions are allowed if defined by the underlying code system.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Text to display for this code for this value set in this valueset
     * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
     * The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Additional representations for this concept
     * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
     * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
     */
    designation?: ValueSetComposeIncludeConceptDesignation[];
}
/**
 * Select codes/concepts by their properties (including relationships)
 * Select concepts by specifying a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified within the include, they SHALL all be true.
 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
 */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
    /**
     * A property/filter defined by the code system
     * A code that identifies a property or a filter defined in the code system.
     */
    property: code;
    /**
     * Extension for property
     **/
    _property?: Element;
    /**
     * Code from the system, or regex criteria, or boolean value for exists
     * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
     * Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example.
     */
    value: string;
    /**
     * Extension for value
     **/
    _value?: Element;
    /**
     * = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | child-of | descendent-leaf | exists
     * The kind of operation to perform as a part of the filter criteria.
     * In case filter.property represents a property of the system, the operation applies to the selected property. In case filter.property represents a filter of the system, the operation SHALL match one of the CodeSystem.filter.operator values.
     */
    op: ValueSetFilterOperator;
}
/**
 * Include one or more codes from a code system or other value set(s)
 * Include one or more codes from a code system or other value set(s).
 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
 */
export interface ValueSetComposeInclude extends BackboneElement {
    /**
     * The system the codes come from
     * An absolute URI which is the code system from which the selected codes come from.
     * If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See ''Coding.system'' for further documentation about the correct value for the system element.
     */
    system?: uri;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * Specific version of the code system referred to
     * The version of the code system that the codes are selected from, or the special version '*' for all versions.
     * This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set might not be known until a context of use binds it to a particular version. The special value '*' means all versions; It is at server discretion regarding expansions and which versions must be supported.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * A concept defined in the system
     * Specifies a concept to be included or excluded.
     * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
     */
    concept?: ValueSetComposeIncludeConcept[];
    /**
     * Select codes/concepts by their properties (including relationships)
     * Select concepts by specifying a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified within the include, they SHALL all be true.
     * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
     */
    filter?: ValueSetComposeIncludeFilter[];
    /**
     * Select the contents included in this value set
     * Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the intersection of the contents of all of the referenced value sets.
     * The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set](https://terminology.hl7.org/SNOMEDCT.html), or a direct reference to a value set definition using ValueSet.url. The reference might not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved.
     */
    valueSet?: canonical[];
    /**
     * Extension for valueSet
     **/
    _valueSet?: Element[];
    /**
     * A copyright statement for the specific code system included in the value set
     * A copyright statement for the specific code system asserted by the containing ValueSet.compose.include element's system value (if the associated ValueSet.compose.include.version element is not present); or the code system and version combination (if the associated ValueSet.compose.include.version element is present).
     */
    copyright?: string;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
}
/**
 * Content logical definition of the value set (CLD)
 * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
 */
export interface ValueSetCompose extends BackboneElement {
    /**
     * Fixed date for references with no specified version (transitive)
     * The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
     * With a defined lockedDate the value set is considered "Locked". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable.
     */
    lockedDate?: date;
    /**
     * Extension for lockedDate
     **/
    _lockedDate?: Element;
    /**
     * Whether inactive codes are in the value set
     * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
     * Note that in the FHIR terminology framework, "deprecated" does not mean inactive, but in some code systems, e.g. LOINC, "deprecated" does mean inactive. Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active.

The Value Set Definition specification defines an ActiveOnly element, which is the reverse of this element e.g. (ValueSet.compose.inactive=FALSE) is the same as (VSD.ActiveOnly=TRUE).
     */
    inactive?: boolean;
    /**
     * Extension for inactive
     **/
    _inactive?: Element;
    /**
     * Include one or more codes from a code system or other value set(s)
     * Include one or more codes from a code system or other value set(s).
     * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
     */
    include: ValueSetComposeInclude[];
    /**
     * Explicitly exclude codes from a code system or other value sets
     * Exclude one or more codes from the value set based on code system filters and/or other value sets.
     * Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored.
     */
    exclude?: ValueSetComposeInclude[];
    /**
     * Property to return if client doesn't override
     * A property to return in the expansion, if the client doesn't ask for any particular properties. May be either a code from the code system definition (convenient) or a the formal URI that refers to the property. The special value '*' means all properties known to the server.
     * Note that property names can clash, so using a URI is recommended.
     */
    property?: string[];
    /**
     * Extension for property
     **/
    _property?: Element[];
}
/**
 * Parameter that controlled the expansion process
 * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
 * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
 */
export interface ValueSetExpansionParameter extends BackboneElement {
    /**
     * Name as assigned by the client or server
     * Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.
     * The names are assigned at the discretion of the server.
     */
    name: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueUri?: uri;
    /**
     * Extension for valueUri
     **/
    _valueUri?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of the named parameter
     * The value of the parameter.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
}
/**
 * Additional information supplied about each concept
 * A property defines an additional slot through which additional information can be provided about a concept.
 */
export interface ValueSetExpansionProperty extends BackboneElement {
    /**
     * Identifies the property on the concepts, and when referred to in operations
     * A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Formal identifier for the property
     * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
     */
    uri?: uri;
    /**
     * Extension for uri
     **/
    _uri?: Element;
}
/**
 * SubProperty value for the concept
 * A subproperty value for this concept.
 */
export interface ValueSetExpansionContainsPropertySubProperty extends BackboneElement {
    /**
     * Reference to ValueSet.expansion.property.code
     * A code that is a reference to ValueSet.expansion.property.code.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueCoding?: Coding;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Value of the subproperty for this concept
     * The value of this subproperty.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
}
/**
 * Property value for the concept
 * A property value for this concept.
 */
export interface ValueSetExpansionContainsProperty extends BackboneElement {
    /**
     * Reference to ValueSet.expansion.property.code
     * A code that is a reference to ValueSet.expansion.property.code.
     */
    code: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueCode?: code;
    /**
     * Extension for valueCode
     **/
    _valueCode?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueCoding?: Coding;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueString?: string;
    /**
     * Extension for valueString
     **/
    _valueString?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueInteger?: integer;
    /**
     * Extension for valueInteger
     **/
    _valueInteger?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueBoolean?: boolean;
    /**
     * Extension for valueBoolean
     **/
    _valueBoolean?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueDateTime?: dateTime;
    /**
     * Extension for valueDateTime
     **/
    _valueDateTime?: Element;
    /**
     * Value of the property for this concept
     * The value of this property.
     */
    valueDecimal?: decimal;
    /**
     * Extension for valueDecimal
     **/
    _valueDecimal?: Element;
    /**
     * SubProperty value for the concept
     * A subproperty value for this concept.
     */
    subProperty?: ValueSetExpansionContainsPropertySubProperty[];
}
/**
 * Codes in the value set
 * The codes that are contained in the value set expansion.
 */
export interface ValueSetExpansionContains extends BackboneElement {
    /**
     * System value for the code
     * An absolute URI which is the code system in which the code for this item in the expansion is defined.
     */
    system?: uri;
    /**
     * Extension for system
     **/
    _system?: Element;
    /**
     * If user cannot select this entry
     * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
     * This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not.
     */
    abstract?: boolean;
    /**
     * Extension for abstract
     **/
    _abstract?: Element;
    /**
     * If concept is inactive in the code system
     * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether a concept is inactive (and it may depend on the context of use).
     * This should only have a value if the concept is inactive.
     */
    inactive?: boolean;
    /**
     * Extension for inactive
     **/
    _inactive?: Element;
    /**
     * Version in which this code/display is defined
     * The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     * The exact value of the version string is specified by the system from which the code is derived.
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * Code - if blank, this is not a selectable code
     * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
     */
    code?: code;
    /**
     * Extension for code
     **/
    _code?: Element;
    /**
     * User display for the concept
     * The recommended display for this item in the expansion.
     */
    display?: string;
    /**
     * Extension for display
     **/
    _display?: Element;
    /**
     * Additional representations for this item
     * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
     * The designations provided must be based on the value set and code system definitions.
     */
    designation?: ValueSetComposeIncludeConceptDesignation[];
    /**
     * Property value for the concept
     * A property value for this concept.
     */
    property?: ValueSetExpansionContainsProperty[];
    /**
     * Codes contained under this entry
     * Other codes and entries contained under this entry in the hierarchy.
     * If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.
     */
    contains?: ValueSetExpansionContains[];
}
/**
 * Used when the value set is "expanded"
 * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.

Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
 */
export interface ValueSetExpansion extends BackboneElement {
    /**
     * Identifies the value set expansion (business identifier)
     * An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
     * Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).
     */
    identifier?: uri;
    /**
     * Extension for identifier
     **/
    _identifier?: Element;
    /**
     * Opaque urls for paging through expansion results
     * As per paging Search results, the next URLs are opaque to the client, have no dictated structure, and only the server understands them.
     * Clients SHOULD use the next link, if present, to page through expansion results in preference to using the offset and count parameters. Due to the optional nature of the next link, its absence does not necessarily indicate that it is the last page of results. Instead, as the offset and count parameters SHALL be populated when paging, clients can reliably use the count/offset parameters to determine whether the whole expansion is returned.
     */
    next?: uri;
    /**
     * Extension for next
     **/
    _next?: Element;
    /**
     * Time ValueSet expansion happened
     * The time at which the expansion was produced by the expanding system.
     * This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision.
     */
    timestamp: dateTime;
    /**
     * Extension for timestamp
     **/
    _timestamp?: Element;
    /**
     * Total number of codes in the expansion
     * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
     * Paging only applies to flat expansions.
     */
    total?: integer;
    /**
     * Extension for total
     **/
    _total?: Element;
    /**
     * Offset at which this resource starts
     * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
     * Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion.
     */
    offset?: integer;
    /**
     * Extension for offset
     **/
    _offset?: Element;
    /**
     * Parameter that controlled the expansion process
     * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
     * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
     */
    parameter?: ValueSetExpansionParameter[];
    /**
     * Additional information supplied about each concept
     * A property defines an additional slot through which additional information can be provided about a concept.
     */
    property?: ValueSetExpansionProperty[];
    /**
     * Codes in the value set
     * The codes that are contained in the value set expansion.
     */
    contains?: ValueSetExpansionContains[];
}
/**
 * Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description
 * Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description.
 */
export interface ValueSetScope extends BackboneElement {
    /**
     * Criteria describing which concepts or codes should be included and why
     * Criteria describing which concepts or codes should be included and why.
     */
    inclusionCriteria?: string;
    /**
     * Extension for inclusionCriteria
     **/
    _inclusionCriteria?: Element;
    /**
     * Criteria describing which concepts or codes should be excluded and why
     * Criteria describing which concepts or codes should be excluded and why.
     */
    exclusionCriteria?: string;
    /**
     * Extension for exclusionCriteria
     **/
    _exclusionCriteria?: Element;
}
/**
 * A set of codes drawn from one or more code systems
 * A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).
 */
export interface ValueSet extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'ValueSet';
    /**
     * Canonical identifier for this value set, represented as a URI (globally unique)
     * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
     * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.

The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).

In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
     */
    url?: uri;
    /**
     * Extension for url
     **/
    _url?: Element;
    /**
     * Additional identifier for the value set (business identifier)
     * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
     * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this value set outside of FHIR, where it is not possible to use the logical URI.
     */
    identifier?: Identifier[];
    /**
     * Business version of the value set
     * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     * There may be different value set instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the value set with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
     */
    version?: string;
    /**
     * Extension for version
     **/
    _version?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which ValueSet is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmString?: string;
    /**
     * Extension for versionAlgorithmString
     **/
    _versionAlgorithmString?: Element;
    /**
     * How to compare versions
     * Indicates the mechanism used to compare versions to determine which ValueSet is more current.
     * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
     */
    versionAlgorithmCoding?: Coding;
    /**
     * Name for this value set (computer friendly)
     * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name.
     */
    name?: string;
    /**
     * Extension for name
     **/
    _name?: Element;
    /**
     * Name for this value set (human friendly)
     * A short, descriptive, user-friendly title for the value set.
     * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
     */
    title?: string;
    /**
     * Extension for title
     **/
    _title?: Element;
    /**
     * For testing purposes, not real usage
     * A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     * Allows filtering of value sets that are appropriate for use versus not.
     */
    experimental?: boolean;
    /**
     * Extension for experimental
     **/
    _experimental?: Element;
    /**
     * Date last changed
     * The date (and optionally time) when the value set metadata or content logical definition (.compose) was created or revised.
     * Note that this is not the same as the meta.lastUpdated which is specific to an instance of a value set resource on a server.  Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    date?: dateTime;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * Name of the publisher/steward (organization or individual)
     * The name of the organization or individual responsible for the release and ongoing maintenance of the value set.
     * Usually an organization but may be an individual. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the value set. This item SHOULD be populated unless the information is available from context.
     */
    publisher?: string;
    /**
     * Extension for publisher
     **/
    _publisher?: Element;
    /**
     * Contact details for the publisher
     * Contact details to assist a user in finding and communicating with the publisher.
     * May be a web site, an email address, a telephone number, etc.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    contact?: ContactDetail[];
    /**
     * Natural language description of the value set
     * A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
     * Description SHOULD contain instructions for clinical or administrative use and interpretation and information about misuse. Description SHOULD be populated unless the information is available from context. Description SHOULD be populated unless the value set is a contained resource (e.g. a value set defined solely in the context of a profile).
     */
    description?: markdown;
    /**
     * Extension for description
     **/
    _description?: Element;
    /**
     * The context that the content is intended to support
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
     * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
     */
    useContext?: UsageContext[];
    /**
     * Intended jurisdiction for value set (if applicable)
     * A legal or geographic region in which the value set is intended to be used.
     * It may be possible for the value set to be used in jurisdictions other than those for which it was originally designed or intended.

DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
     */
    jurisdiction?: CodeableConcept[];
    /**
     * Indicates whether or not any change to the content logical definition may occur
     * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
     * Normally immutability is set to 'false', which is the default assumption if it is not populated.  Note that the implication is that if this is set to 'true', there may be only one ValueSet version for this definition. Immutability tends to be set to 'true' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example "All specializations of ACT in ActClassCode" - Where there's no safe way to express the "Purpose" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition.
     */
    immutable?: boolean;
    /**
     * Extension for immutable
     **/
    _immutable?: Element;
    /**
     * Why this value set is defined
     * Explanation of why this value set is needed and why it has been designed as it has.
     * This element does not describe the usage of the value set. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this value set.
     */
    purpose?: markdown;
    /**
     * Extension for purpose
     **/
    _purpose?: Element;
    /**
     * Use and/or publishing restrictions
     * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
     * Frequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
     */
    copyright?: markdown;
    /**
     * Extension for copyright
     **/
    _copyright?: Element;
    /**
     * Copyright holder and year(s)
     * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
     * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
     */
    copyrightLabel?: string;
    /**
     * Extension for copyrightLabel
     **/
    _copyrightLabel?: Element;
    /**
     * When the ValueSet was approved by publisher
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    approvalDate?: date;
    /**
     * Extension for approvalDate
     **/
    _approvalDate?: Element;
    /**
     * When the ValueSet was last reviewed by the publisher
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     * If specified, this date follows the original approval date.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    lastReviewDate?: date;
    /**
     * Extension for lastReviewDate
     **/
    _lastReviewDate?: Element;
    /**
     * When the ValueSet is expected to be used
     * The period during which the ValueSet content was or is planned to be in active use.
     * The effective period for a ValueSet determines when the content is applicable for usage and is independent of publication and review dates. For example, a valueset intended to be used for the year 2016 might be published in 2015.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    effectivePeriod?: Period;
    /**
     * E.g. Education, Treatment, Assessment, etc
     * Descriptions related to the content of the ValueSet. Topics provide a high-level categorization as well as keywords for the ValueSet that can be useful for filtering and searching.
     * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
     */
    topic?: CodeableConcept[];
    /**
     * Who authored the ValueSet
     * An individiual or organization primarily involved in the creation and maintenance of the ValueSet.
     */
    author?: ContactDetail[];
    /**
     * Who edited the ValueSet
     * An individual or organization primarily responsible for internal coherence of the ValueSet.
     */
    editor?: ContactDetail[];
    /**
     * Who reviewed the ValueSet
     * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ValueSet.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    reviewer?: ContactDetail[];
    /**
     * Who endorsed the ValueSet
     * An individual or organization asserted by the publisher to be responsible for officially endorsing the ValueSet for use in some setting.
     * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    endorser?: ContactDetail[];
    /**
     * Additional documentation, citations, etc
     * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
     * Each related artifact is either an attachment, or a reference to another resource, but not both.
     */
    relatedArtifact?: RelatedArtifact[];
    /**
     * Content logical definition of the value set (CLD)
     * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
     */
    compose?: ValueSetCompose;
    /**
     * Used when the value set is "expanded"
     * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
     * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.

Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
     */
    expansion?: ValueSetExpansion;
    /**
     * Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description
     * Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description.
     */
    scope?: ValueSetScope;
    /**
     * draft | active | retired | unknown
     * The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
     * Allows filtering of value sets that are appropriate for use versus not.See also the [http://hl7.org/fhir/StructureDefinition/valueset-workflowStatusDescription](http://hl7.org/fhir/extensions/StructureDefinition-valueset-workflowStatusDescription.html) extension for additional status information related to the editorial process.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
     */
    status: ValueSetPublicationStatus;
}
/**
 * Information about the primary source(s) involved in validation
 * Information about the primary source(s) involved in validation.
 */
export interface VerificationResultPrimarySource extends BackboneElement {
    /**
     * Reference to the primary source
     * Reference to the primary source.
     */
    who?: Reference;
    /**
     * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source)
     * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
     */
    type?: CodeableConcept[];
    /**
     * Method for exchanging information with the primary source
     * Method for communicating with the primary source (manual; API; Push).
     */
    communicationMethod?: CodeableConcept[];
    /**
     * successful | failed | unknown
     * Status of the validation of the target against the primary source (successful; failed; unknown).
     */
    validationStatus?: CodeableConcept;
    /**
     * When the target was validated against the primary source
     * When the target was validated against the primary source.
     */
    validationDate?: dateTime;
    /**
     * Extension for validationDate
     **/
    _validationDate?: Element;
    /**
     * yes | no | undetermined
     * Ability of the primary source to push updates/alerts (yes; no; undetermined).
     */
    canPushUpdates?: CodeableConcept;
    /**
     * specific | any | source
     * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
     */
    pushTypeAvailable?: CodeableConcept[];
}
/**
 * Information about the entity attesting to information
 * Information about the entity attesting to information.
 */
export interface VerificationResultAttestation extends BackboneElement {
    /**
     * The individual or organization attesting to information
     * The individual or organization attesting to information.
     */
    who?: Reference;
    /**
     * When the who is asserting on behalf of another (organization or individual)
     * When the who is asserting on behalf of another (organization or individual).
     */
    onBehalfOf?: Reference;
    /**
     * The method by which attested information was submitted/retrieved
     * The method by which attested information was submitted/retrieved (manual; API; Push).
     */
    communicationMethod?: CodeableConcept;
    /**
     * The date the information was attested to
     * The date the information was attested to.
     */
    date?: date;
    /**
     * Extension for date
     **/
    _date?: Element;
    /**
     * A digital identity certificate associated with the attestation source
     * A digital identity certificate associated with the attestation source.
     */
    sourceIdentityCertificate?: string;
    /**
     * Extension for sourceIdentityCertificate
     **/
    _sourceIdentityCertificate?: Element;
    /**
     * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source
     * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
     */
    proxyIdentityCertificate?: string;
    /**
     * Extension for proxyIdentityCertificate
     **/
    _proxyIdentityCertificate?: Element;
    /**
     * Proxy signature (digital or image)
     * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
     */
    proxySignature?: Signature;
    /**
     * Attester signature (digital or image)
     * Signed assertion by the attestation source that they have attested to the information.
     */
    sourceSignature?: Signature;
}
/**
 * Information about the entity validating information
 * Information about the entity validating information.
 */
export interface VerificationResultValidator extends BackboneElement {
    /**
     * Reference to the organization validating information
     * Reference to the organization validating information.
     */
    organization: Reference;
    /**
     * A digital identity certificate associated with the validator
     * A digital identity certificate associated with the validator.
     */
    identityCertificate?: string;
    /**
     * Extension for identityCertificate
     **/
    _identityCertificate?: Element;
    /**
     * Validator signature (digital or image)
     * Signed assertion by the validator that they have validated the information.
     */
    attestationSignature?: Signature;
}
/**
 * Describes validation requirements, source(s), status and dates for one or more elements
 * Describes validation requirements, source(s), status and dates for one or more elements.
 */
export interface VerificationResult extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'VerificationResult';
    /**
     * A resource that was validated
     * A resource that was validated.
     */
    target?: Reference[];
    /**
     * The fhirpath location(s) within the resource that was validated
     * The fhirpath location(s) within the resource that was validated.
     */
    targetLocation?: string[];
    /**
     * Extension for targetLocation
     **/
    _targetLocation?: Element[];
    /**
     * none | initial | periodic
     * The frequency with which the target must be validated (none; initial; periodic).
     */
    need?: CodeableConcept;
    /**
     * When the validation status was updated
     * When the validation status was updated.
     */
    statusDate?: dateTime;
    /**
     * Extension for statusDate
     **/
    _statusDate?: Element;
    /**
     * nothing | primary | multiple
     * What the target is validated against (nothing; primary source; multiple sources).
     */
    validationType?: CodeableConcept;
    /**
     * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context)
     * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
     */
    validationProcess?: CodeableConcept[];
    /**
     * Frequency of revalidation
     * Frequency of revalidation.
     */
    frequency?: Timing;
    /**
     * The date/time validation was last completed (including failed validations)
     * The date/time validation was last completed (including failed validations).
     */
    lastPerformed?: dateTime;
    /**
     * Extension for lastPerformed
     **/
    _lastPerformed?: Element;
    /**
     * The date when target is next validated, if appropriate
     * The date when target is next validated, if appropriate.
     */
    nextScheduled?: date;
    /**
     * Extension for nextScheduled
     **/
    _nextScheduled?: Element;
    /**
     * fatal | warn | rec-only | none
     * The result if validation fails (fatal; warning; record only; none).
     */
    failureAction?: CodeableConcept;
    /**
     * Information about the primary source(s) involved in validation
     * Information about the primary source(s) involved in validation.
     */
    primarySource?: VerificationResultPrimarySource[];
    /**
     * Information about the entity attesting to information
     * Information about the entity attesting to information.
     */
    attestation?: VerificationResultAttestation;
    /**
     * Information about the entity validating information
     * Information about the entity validating information.
     */
    validator?: VerificationResultValidator[];
    /**
     * attested | validated | in-process | req-revalid | val-fail | reval-fail | entered-in-error
     * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
     */
    status: VerificationResultstatus;
}
/**
 * Eye alignment compensation
 * Allows for adjustment on two axis.
 */
export interface VisionPrescriptionLensSpecificationPrism extends BackboneElement {
    /**
     * Amount of adjustment
     * Amount of prism to compensate for eye alignment in fractional units.
     */
    amount: decimal;
    /**
     * Extension for amount
     **/
    _amount?: Element;
    /**
     * up | down | in | out
     * The relative base, or reference lens edge, for the prism.
     */
    base: VisionPrescriptionVisionBase;
}
/**
 * Vision lens authorization
 * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
 */
export interface VisionPrescriptionLensSpecification extends BackboneElement {
    /**
     * Product to be supplied
     * Identifies the type of vision correction product which is required for the patient.
     */
    product: CodeableConcept;
    /**
     * Power of the lens
     * Lens power measured in dioptres (0.25 units).
     * The value is negative for near-sighted and positive for far sighted.
Often insurance will not cover a lens with power between +75 and -75.
     */
    sphere?: decimal;
    /**
     * Extension for sphere
     **/
    _sphere?: Element;
    /**
     * Lens power for astigmatism
     * Power adjustment for astigmatism measured in dioptres (0.25 units).
     */
    cylinder?: decimal;
    /**
     * Extension for cylinder
     **/
    _cylinder?: Element;
    /**
     * Lens meridian which contain no power for astigmatism
     * Adjustment for astigmatism measured in integer degrees.
     * The limits are +180 and -180 degrees.
     */
    axis?: integer;
    /**
     * Extension for axis
     **/
    _axis?: Element;
    /**
     * Eye alignment compensation
     * Allows for adjustment on two axis.
     */
    prism?: VisionPrescriptionLensSpecificationPrism[];
    /**
     * Added power for multifocal levels
     * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
     */
    add?: decimal;
    /**
     * Extension for add
     **/
    _add?: Element;
    /**
     * Contact lens power
     * Contact lens power measured in dioptres (0.25 units).
     */
    power?: decimal;
    /**
     * Extension for power
     **/
    _power?: Element;
    /**
     * Contact lens back curvature
     * Back curvature measured in millimetres.
     */
    backCurve?: decimal;
    /**
     * Extension for backCurve
     **/
    _backCurve?: Element;
    /**
     * Contact lens diameter
     * Contact lens diameter measured in millimetres.
     */
    diameter?: decimal;
    /**
     * Extension for diameter
     **/
    _diameter?: Element;
    /**
     * Lens wear duration
     * The recommended maximum wear period for the lens.
     */
    duration?: Quantity;
    /**
     * Color required
     * Special color or pattern.
     */
    color?: string;
    /**
     * Extension for color
     **/
    _color?: Element;
    /**
     * Brand required
     * Brand recommendations or restrictions.
     */
    brand?: string;
    /**
     * Extension for brand
     **/
    _brand?: Element;
    /**
     * Notes for coatings
     * Notes for special requirements such as coatings and lens materials.
     */
    note?: Annotation[];
    /**
     * right | left
     * The eye for which the lens specification applies.
     * May also appear on the paper claim form or in the Medical Records as as OD (oculus dexter) for the right eye and OS (oculus sinister) for the left eye.
     */
    eye: VisionPrescriptionVisionEyes;
}
/**
 * Prescription for vision correction products for a patient
 * An authorization for the provision of glasses and/or contact lenses to a patient.
 */
export interface VisionPrescription extends DomainResource {
    /**
     * The type of the resource.
     */
    resourceType: 'VisionPrescription';
    /**
     * Business Identifier for vision prescription
     * A unique identifier assigned to this vision prescription.
     */
    identifier?: Identifier[];
    /**
     * Response creation date
     * The date this resource was created.
     */
    created: dateTime;
    /**
     * Extension for created
     **/
    _created?: Element;
    /**
     * Who prescription is for
     * A resource reference to the person to whom the vision prescription applies.
     */
    patient: Reference;
    /**
     * Created during encounter / admission / stay
     * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
     */
    encounter?: Reference;
    /**
     * When prescription was authorized
     * The date (and perhaps time) when the prescription was written.
     * Jurisdictions determine the valid lifetime of a prescription. Typically vision prescriptions are valid for two years from the date written.
     */
    dateWritten: dateTime;
    /**
     * Extension for dateWritten
     **/
    _dateWritten?: Element;
    /**
     * Who authorized the vision prescription
     * The healthcare professional responsible for authorizing the prescription.
     */
    prescriber: Reference;
    /**
     * Vision lens authorization
     * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
     */
    lensSpecification: VisionPrescriptionLensSpecification[];
    /**
     * active | cancelled | draft | entered-in-error
     * The status of the resource instance.
     * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
     */
    status: VisionPrescriptionVisionStatus;
}
