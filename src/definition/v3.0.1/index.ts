/**
 * Created by Insitut for Medical Informatics (I4MI) - Department of Engineering and Information Technology - Bern University of Applied Science (BFH)
 * https://www.i4mi.ti.bfh.ch
 */

export = fhir;

declare module fhir {

	/**
	 * Primitive Type base64Binary
	 * A stream of bytes, base64 encoded
	 * A stream of bytes
	 */
	type base64Binary = string;

	/**
	 * Primitive Type code
	 * A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
	 */
	type code = string;

	/**
	 * Primitive Type date
	 * A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
	 */
	type date = string;

	/**
	 * Primitive Type dateTime
	 * A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
	 */
	type dateTime = string;

	/**
	 * Primitive Type decimal
	 * Do not use a IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
	 * A rational number with implicit precision
	 */
	type decimal = number;

	/**
	 * Primitive Type id
	 * RFC 4122
	 * Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
	 */
	type id = string;

	/**
	 * Primitive Type instant
	 * Note: This is intended for precisely observed times, typically system logs etc., and not human-reported times - for them, see date and dateTime below. Time zone is always required
	 * An instant in time - known at least to the second
	 */
	type instant = string;

	/**
	 * Primitive Type integer
	 * 32 bit number; for values larger than this, use decimal
	 * A whole number
	 */
	type integer = number;

	/**
	 * Primitive Type markdown
	 * Systems are not required to have markdown support, and there is considerable variation in markdown syntax, so the text should be readable without markdown processing. The preferred markdown syntax is described here: http://daringfireball.net/projects/markdown/syntax (and tests here: http://daringfireball.net/projects/downloads/MarkdownTest_1.0.zip)
	 * A string that may contain markdown syntax for optional processing by a mark down presentation engine
	 */
	type markdown = string;

	/**
	 * Primitive Type oid
	 * RFC 3001. See also ISO/IEC 8824:1990 €
	 * An OID represented as a URI
	 */
	type oid = string;

	/**
	 * Primitive Type positiveInt
	 * An integer with a value that is positive (e.g. >0)
	 */
	type positiveInt = number;

	/**
	 * Primitive Type time
	 * A time during the day, with no date specified
	 */
	type time = string;

	/**
	 * Primitive Type unsignedInt
	 * An integer with a value that is not negative (e.g. >= 0)
	 */
	type unsignedInt = number;

	/**
	 * Primitive Type uri
	 * see http://en.wikipedia.org/wiki/Uniform_resource_identifier
	 * String of characters used to identify a name or a resource
	 */
	type uri = string;

	/**
	 * Primitive Type uuid
	 * See The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
	 * A UUID, represented as a URI
	 */
	type uuid = string;

	/**
	 * Primitive Type xhtml
	 * XHTML
	 */
	type xhtml = string;

	/**
	 * home | work | temp | old - purpose of this address
	 * The purpose of this address.
	 * This is labeled as "Is Modifier" because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.
	 */
	enum AddressAddressUse {
		HOME = 'home',
		WORK = 'work',
		TEMP = 'temp',
		OLD = 'old'
	}

	/**
	 * postal | physical | both
	 * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
	 */
	enum AddressAddressType {
		POSTAL = 'postal',
		PHYSICAL = 'physical',
		BOTH = 'both'
	}

	/**
	 * phone | fax | email | pager | url | sms | other
	 * Telecommunications form for contact point - what communications system is required to make use of the contact.
	 */
	enum ContactPointContactPointSystem {
		PHONE = 'phone',
		FAX = 'fax',
		EMAIL = 'email',
		PAGER = 'pager',
		URL = 'url',
		SMS = 'sms',
		OTHER = 'other'
	}

	/**
	 * home | work | temp | old | mobile - purpose of this contact point
	 * Identifies the purpose for the contact point.
	 * This is labeled as "Is Modifier" because applications should not mistake a temporary or old contact etc.for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
	 */
	enum ContactPointContactPointUse {
		HOME = 'home',
		WORK = 'work',
		TEMP = 'temp',
		OLD = 'old',
		MOBILE = 'mobile'
	}

	/**
	 * author | editor | reviewer | endorser
	 * The type of contributor.
	 */
	enum ContributorContributorType {
		AUTHOR = 'author',
		EDITOR = 'editor',
		REVIEWER = 'reviewer',
		ENDORSER = 'endorser'
	}

	/**
	 * xmlAttr | xmlText | typeAttr | cdaText | xhtml
	 * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
	 * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc).
	 */
	enum ElementDefinitionPropertyRepresentation {
		XMLATTR = 'xmlAttr',
		XMLTEXT = 'xmlText',
		TYPEATTR = 'typeAttr',
		CDATEXT = 'cdaText',
		XHTML = 'xhtml'
	}

	/**
	 * value | exists | pattern | type | profile
	 * How the element value is interpreted when discrimination is evaluated.
	 */
	enum ElementDefinitionDiscriminatorType {
		VALUE = 'value',
		EXISTS = 'exists',
		PATTERN = 'pattern',
		TYPE = 'type',
		PROFILE = 'profile'
	}

	/**
	 * closed | open | openAtEnd
	 * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
	 * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
	 */
	enum ElementDefinitionSlicingRules {
		CLOSED = 'closed',
		OPEN = 'open',
		OPENATEND = 'openAtEnd'
	}

	/**
	 * contained | referenced | bundled - how aggregated
	 * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
	 */
	enum ElementDefinitionAggregationMode {
		CONTAINED = 'contained',
		REFERENCED = 'referenced',
		BUNDLED = 'bundled'
	}

	/**
	 * either | independent | specific
	 * Whether this reference needs to be version specific or version independent, or whether either can be used.
	 * The base specification never makes a rule as to which form is allowed, but implementation guides may do this.
	 */
	enum ElementDefinitionReferenceVersionRules {
		EITHER = 'either',
		INDEPENDENT = 'independent',
		SPECIFIC = 'specific'
	}

	/**
	 * error | warning
	 * Identifies the impact constraint violation has on the conformance of the instance.
	 * This allows constraints to be asserted as "shall" (error) and "should" (warning).
	 */
	enum ElementDefinitionConstraintSeverity {
		ERROR = 'error',
		WARNING = 'warning'
	}

	/**
	 * required | extensible | preferred | example
	 * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
	 * For further discussion, see [Using Terminologies](terminologies.html).
	 */
	enum ElementDefinitionBindingStrength {
		REQUIRED = 'required',
		EXTENSIBLE = 'extensible',
		PREFERRED = 'preferred',
		EXAMPLE = 'example'
	}

	/**
	 * usual | official | temp | nickname | anonymous | old | maiden
	 * Identifies the purpose for this name.
	 * This is labeled as "Is Modifier" because applications should not mistake a temporary or old name etc.for a current/permanent one. Applications can assume that a name is current unless it explicitly says that it is temporary or old.
	 */
	enum HumanNameNameUse {
		USUAL = 'usual',
		OFFICIAL = 'official',
		TEMP = 'temp',
		NICKNAME = 'nickname',
		ANONYMOUS = 'anonymous',
		OLD = 'old',
		MAIDEN = 'maiden'
	}

	/**
	 * usual | official | temp | secondary (If known)
	 * The purpose of this identifier.
	 * This is labeled as "Is Modifier" because applications should not mistake a temporary id for a permanent one. Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
	 */
	enum IdentifierIdentifierUse {
		USUAL = 'usual',
		OFFICIAL = 'official',
		TEMP = 'temp',
		SECONDARY = 'secondary'
	}

	/**
	 * generated | extensions | additional | empty
	 * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
	 */
	enum NarrativeNarrativeStatus {
		GENERATED = 'generated',
		EXTENSIONS = 'extensions',
		ADDITIONAL = 'additional',
		EMPTY = 'empty'
	}

	/**
	 * in | out
	 * Whether the parameter is input or output for the module.
	 */
	enum ParameterDefinitionParameterUse {
		IN = 'in',
		OUT = 'out'
	}

	/**
	 * < | <= | >= | > - how to understand the value
	 * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	 * This is labeled as "Is Modifier" because the comparator modifies the interpretation of the value significantly. If there is no comparator, then there is no modification of the value.
	 */
	enum QuantityQuantityComparator {
		LT = '<',
		LE = '<=',
		GE = '>=',
		GT = '>'
	}

	/**
	 * documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of
	 * The type of relationship to the related artifact.
	 */
	enum RelatedArtifactRelatedArtifactType {
		DOCUMENTATION = 'documentation',
		JUSTIFICATION = 'justification',
		CITATION = 'citation',
		PREDECESSOR = 'predecessor',
		SUCCESSOR = 'successor',
		DERIVED_FROM = 'derived-from',
		DEPENDS_ON = 'depends-on',
		COMPOSED_OF = 'composed-of'
	}

	/**
	 * s | min | h | d | wk | mo | a - unit of time (UCUM)
	 * The units of time for the duration, in UCUM units.
	 */
	enum TimingUnitsOfTime {
		S = 's',
		MIN = 'min',
		H = 'h',
		D = 'd',
		WK = 'wk',
		MO = 'mo',
		A = 'a'
	}

	/**
	 * mon | tue | wed | thu | fri | sat | sun
	 * If one or more days of week is provided, then the action happens only on the specified day(s).
	 * If no days are specified, the action is assumed to happen every day as otherwise specified. The elements frequency and period cannot be used as well as dayOfWeek.
	 */
	enum TimingDayOfWeek {
		MON = 'mon',
		TUE = 'tue',
		WED = 'wed',
		THU = 'thu',
		FRI = 'fri',
		SAT = 'sat',
		SUN = 'sun'
	}

	/**
	 * named-event | periodic | data-added | data-modified | data-removed | data-accessed | data-access-ended
	 * The type of triggering event.
	 */
	enum TriggerDefinitionTriggerType {
		NAMED_EVENT = 'named-event',
		PERIODIC = 'periodic',
		DATA_ADDED = 'data-added',
		DATA_MODIFIED = 'data-modified',
		DATA_REMOVED = 'data-removed',
		DATA_ACCESSED = 'data-accessed',
		DATA_ACCESS_ENDED = 'data-access-ended'
	}

	/**
	 * active | inactive | entered-in-error
	 * Indicates whether the account is presently used/usable or not.
	 * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
	 */
	enum AccountAccountStatus {
		ACTIVE = 'active',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this activity definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of activity definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired activity definition without due consideration.
	 */
	enum ActivityDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * patient | practitioner | related-person
	 * The type of participant in the action.
	 */
	enum ActivityDefinitionActivityParticipantType {
		PATIENT = 'patient',
		PRACTITIONER = 'practitioner',
		RELATED_PERSON = 'related-person'
	}

	/**
	 * causality1 | causality2
	 * causality1 | causality2.
	 */
	enum AdverseEventAdverseEventCausality {
		CAUSALITY1 = 'causality1',
		CAUSALITY2 = 'causality2'
	}

	/**
	 * active | inactive | resolved
	 * The clinical status of the allergy or intolerance.
	 * This element is labeled as a modifier because the status contains the codes inactive and resolved that mark the AllergyIntolerance as not currently valid.
	 */
	enum AllergyIntoleranceAllergyIntoleranceClinicalStatus {
		ACTIVE = 'active',
		INACTIVE = 'inactive',
		RESOLVED = 'resolved'
	}

	/**
	 * unconfirmed | confirmed | refuted | entered-in-error
	 * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
	 * This element is labeled as a modifier because the status contains the codes refuted and entered-in-error that mark the AllergyIntolerance as not currently valid.
	 */
	enum AllergyIntoleranceAllergyIntoleranceVerificationStatus {
		UNCONFIRMED = 'unconfirmed',
		CONFIRMED = 'confirmed',
		REFUTED = 'refuted',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * allergy | intolerance - Underlying mechanism (if known)
	 * Identification of the underlying physiological mechanism for the reaction risk.
	 * Allergic (typically immune-mediated) reactions have been traditionally regarded as an indicator for potential escalation to significant future risk. Contemporary knowledge suggests that some reactions previously thought to be immune-mediated are, in fact, non-immune, but in some cases can still pose a life threatening risk. It is acknowledged that many clinicians may not be in a position to distinguish the mechanism of a particular reaction. Often the term "allergy" is used rather generically and may overlap with the use of "intolerance" - in practice the boundaries between these two concepts may not be well-defined or understood. This data element is included nevertheless, because many legacy systems have captured this attribute. Immunologic testing may provide supporting evidence for the basis of the reaction and the causative substance, but no tests are 100% sensitive or specific for sensitivity to a particular substance. If, as is commonly the case, it is unclear whether the reaction is due to an allergy or an intolerance, then the type element should be omitted from the resource.
	 */
	enum AllergyIntoleranceAllergyIntoleranceType {
		ALLERGY = 'allergy',
		INTOLERANCE = 'intolerance'
	}

	/**
	 * food | medication | environment | biologic
	 * Category of the identified substance.
	 * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
	 */
	enum AllergyIntoleranceAllergyIntoleranceCategory {
		FOOD = 'food',
		MEDICATION = 'medication',
		ENVIRONMENT = 'environment',
		BIOLOGIC = 'biologic'
	}

	/**
	 * low | high | unable-to-assess
	 * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
	 * The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).

Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
	 */
	enum AllergyIntoleranceAllergyIntoleranceCriticality {
		LOW = 'low',
		HIGH = 'high',
		UNABLE_TO_ASSESS = 'unable-to-assess'
	}

	/**
	 * mild | moderate | severe (of event as a whole)
	 * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
	 * It is acknowledged that this assessment is very subjective. There may be some some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
	 */
	enum AllergyIntoleranceAllergyIntoleranceSeverity {
		MILD = 'mild',
		MODERATE = 'moderate',
		SEVERE = 'severe'
	}

	/**
	 * proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error
	 * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
	 * If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.

This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
	 */
	enum AppointmentAppointmentStatus {
		PROPOSED = 'proposed',
		PENDING = 'pending',
		BOOKED = 'booked',
		ARRIVED = 'arrived',
		FULFILLED = 'fulfilled',
		CANCELLED = 'cancelled',
		NOSHOW = 'noshow',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * required | optional | information-only
	 * Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
	 */
	enum AppointmentParticipantRequired {
		REQUIRED = 'required',
		OPTIONAL = 'optional',
		INFORMATION_ONLY = 'information-only'
	}

	/**
	 * accepted | declined | tentative | needs-action
	 * Participation status of the actor.
	 */
	enum AppointmentParticipationStatus {
		ACCEPTED = 'accepted',
		DECLINED = 'declined',
		TENTATIVE = 'tentative',
		NEEDS_ACTION = 'needs-action'
	}

	/**
	 * accepted | declined | tentative | in-process | completed | needs-action | entered-in-error
	 * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
	 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
	 */
	enum AppointmentResponseParticipantStatus {
		ACCEPTED = 'accepted',
		DECLINED = 'declined',
		TENTATIVE = 'tentative',
		IN_PROCESS = 'in-process',
		COMPLETED = 'completed',
		NEEDS_ACTION = 'needs-action',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection
	 * Indicates the purpose of this bundle - how it was intended to be used.
	 * It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
	 */
	enum BundleBundleType {
		DOCUMENT = 'document',
		MESSAGE = 'message',
		TRANSACTION = 'transaction',
		TRANSACTION_RESPONSE = 'transaction-response',
		BATCH = 'batch',
		BATCH_RESPONSE = 'batch-response',
		HISTORY = 'history',
		SEARCHSET = 'searchset',
		COLLECTION = 'collection'
	}

	/**
	 * match | include | outcome - why this is in the result set
	 * Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
	 * There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
	 */
	enum BundleSearchEntryMode {
		MATCH = 'match',
		INCLUDE = 'include',
		OUTCOME = 'outcome'
	}

	/**
	 * GET | POST | PUT | DELETE
	 * The HTTP verb for this entry in either a change history, or a transaction/ transaction response.
	 */
	enum BundleHTTPVerb {
		GET = 'GET',
		POST = 'POST',
		PUT = 'PUT',
		DELETE = 'DELETE'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this capability statement. Enables tracking the life-cycle of the content.
	 * Allows filtering of capability statements that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired capability statement without due consideration. This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
	 */
	enum CapabilityStatementPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * instance | capability | requirements
	 * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase).
	 */
	enum CapabilityStatementCapabilityStatementKind {
		INSTANCE = 'instance',
		CAPABILITY = 'capability',
		REQUIREMENTS = 'requirements'
	}

	/**
	 * no | extensions | elements | both
	 * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
	 * Unknown elements in a resource can only arise as later versions of the specification are published, because this is the only place where such elements can be defined. Hence accepting unknown elements is about inter-version compatibility.

Applications are recommended to accept unknown extensions and elements ('both'), but this is not always possible.
	 */
	enum CapabilityStatementUnknownContentCode {
		NO = 'no',
		EXTENSIONS = 'extensions',
		ELEMENTS = 'elements',
		BOTH = 'both'
	}

	/**
	 * client | server
	 * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
	 */
	enum CapabilityStatementRestfulCapabilityMode {
		CLIENT = 'client',
		SERVER = 'server'
	}

	/**
	 * read | vread | update | patch | delete | history-instance | history-type | create | search-type
	 * Coded identifier of the operation, supported by the system resource.
	 */
	enum CapabilityStatementTypeRestfulInteraction {
		READ = 'read',
		VREAD = 'vread',
		UPDATE = 'update',
		PATCH = 'patch',
		DELETE = 'delete',
		HISTORY_INSTANCE = 'history-instance',
		HISTORY_TYPE = 'history-type',
		CREATE = 'create',
		SEARCH_TYPE = 'search-type'
	}

	/**
	 * no-version | versioned | versioned-update
	 * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
	 * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
	 */
	enum CapabilityStatementResourceVersionPolicy {
		NO_VERSION = 'no-version',
		VERSIONED = 'versioned',
		VERSIONED_UPDATE = 'versioned-update'
	}

	/**
	 * not-supported | modified-since | not-match | full-support
	 * A code that indicates how the server supports conditional read.
	 * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
	 */
	enum CapabilityStatementConditionalReadStatus {
		NOT_SUPPORTED = 'not-supported',
		MODIFIED_SINCE = 'modified-since',
		NOT_MATCH = 'not-match',
		FULL_SUPPORT = 'full-support'
	}

	/**
	 * not-supported | single | multiple - how conditional delete is supported
	 * A code that indicates how the server supports conditional delete.
	 * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
	 */
	enum CapabilityStatementConditionalDeleteStatus {
		NOT_SUPPORTED = 'not-supported',
		SINGLE = 'single',
		MULTIPLE = 'multiple'
	}

	/**
	 * literal | logical | resolves | enforced | local
	 * A set of flags that defines how references are supported.
	 */
	enum CapabilityStatementReferenceHandlingPolicy {
		LITERAL = 'literal',
		LOGICAL = 'logical',
		RESOLVES = 'resolves',
		ENFORCED = 'enforced',
		LOCAL = 'local'
	}

	/**
	 * number | date | string | token | reference | composite | quantity | uri
	 * The type of value a search parameter refers to, and how the content is interpreted.
	 * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
	 */
	enum CapabilityStatementSearchParamType {
		NUMBER = 'number',
		DATE = 'date',
		STRING = 'string',
		TOKEN = 'token',
		REFERENCE = 'reference',
		COMPOSITE = 'composite',
		QUANTITY = 'quantity',
		URI = 'uri'
	}

	/**
	 * transaction | batch | search-system | history-system
	 * A coded identifier of the operation, supported by the system.
	 */
	enum CapabilityStatementSystemRestfulInteraction {
		TRANSACTION = 'transaction',
		BATCH = 'batch',
		SEARCH_SYSTEM = 'search-system',
		HISTORY_SYSTEM = 'history-system'
	}

	/**
	 * sender | receiver
	 * The mode of this event declaration - whether application is sender or receiver.
	 */
	enum CapabilityStatementEventCapabilityMode {
		SENDER = 'sender',
		RECEIVER = 'receiver'
	}

	/**
	 * Consequence | Currency | Notification
	 * The impact of the content of the message.
	 */
	enum CapabilityStatementMessageSignificanceCategory {
		CONSEQUENCE = 'Consequence',
		CURRENCY = 'Currency',
		NOTIFICATION = 'Notification'
	}

	/**
	 * producer | consumer
	 * Mode of this document declaration - whether an application is a producer or consumer.
	 */
	enum CapabilityStatementDocumentMode {
		PRODUCER = 'producer',
		CONSUMER = 'consumer'
	}

	/**
	 * draft | active | suspended | completed | entered-in-error | cancelled | unknown
	 * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
	 * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.

This element is labeled as a modifier because the status contains the code entered-in-error] that marks the plan as not currently valid.
	 */
	enum CarePlanCarePlanStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		CANCELLED = 'cancelled',
		UNKNOWN = 'unknown'
	}

	/**
	 * proposal | plan | order | option
	 * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
	 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
	 */
	enum CarePlanCarePlanIntent {
		PROPOSAL = 'proposal',
		PLAN = 'plan',
		ORDER = 'order',
		OPTION = 'option'
	}

	/**
	 * not-started | scheduled | in-progress | on-hold | completed | cancelled | unknown
	 * Identifies what progress is being made for the specific activity.
	 * Some aspects of status can be inferred based on the resources linked in actionTaken.  Note that "status" is only as current as the plan was most recently updated.  
The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the activity.
	 */
	enum CarePlanCarePlanActivityStatus {
		NOT_STARTED = 'not-started',
		SCHEDULED = 'scheduled',
		IN_PROGRESS = 'in-progress',
		ON_HOLD = 'on-hold',
		COMPLETED = 'completed',
		CANCELLED = 'cancelled',
		UNKNOWN = 'unknown'
	}

	/**
	 * proposed | active | suspended | inactive | entered-in-error
	 * Indicates the current state of the care team.
	 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
	 */
	enum CareTeamCareTeamStatus {
		PROPOSED = 'proposed',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * planned | billable | not-billable | aborted | billed | entered-in-error | unknown
	 * The current state of the ChargeItem.
	 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
	 */
	enum ChargeItemChargeItemStatus {
		PLANNED = 'planned',
		BILLABLE = 'billable',
		NOT_BILLABLE = 'not-billable',
		ABORTED = 'aborted',
		BILLED = 'billed',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the claim as not currently valid.
	 */
	enum ClaimClaimStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * complete | proposed | exploratory | other
	 * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
	 */
	enum ClaimUse {
		COMPLETE = 'complete',
		PROPOSED = 'proposed',
		EXPLORATORY = 'exploratory',
		OTHER = 'other'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains the code cancelled and entered-in-error that mark the response as not currently valid.
	 */
	enum ClaimResponseClaimResponseStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | completed | entered-in-error
	 * Identifies the workflow status of the assessment.
	 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
	 */
	enum ClinicalImpressionClinicalImpressionStatus {
		DRAFT = 'draft',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this code system. Enables tracking the life-cycle of the content.
	 * Allows filtering of code systems that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired code system without due consideration.
	 */
	enum CodeSystemPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * grouped-by | is-a | part-of | classified-with
	 * The meaning of the hierarchy of concepts.
	 */
	enum CodeSystemCodeSystemHierarchyMeaning {
		GROUPED_BY = 'grouped-by',
		IS_A = 'is-a',
		PART_OF = 'part-of',
		CLASSIFIED_WITH = 'classified-with'
	}

	/**
	 * not-present | example | fragment | complete
	 * How much of the content of the code system - the concepts and codes it defines - are represented in this resource.
	 */
	enum CodeSystemCodeSystemContentMode {
		NOT_PRESENT = 'not-present',
		EXAMPLE = 'example',
		FRAGMENT = 'fragment',
		COMPLETE = 'complete'
	}

	/**
	 * code | Coding | string | integer | boolean | dateTime
	 * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to anotherr defined concept).
	 */
	enum CodeSystemPropertyType {
		CODE = 'code',
		CODING = 'Coding',
		STRING = 'string',
		INTEGER = 'integer',
		BOOLEAN = 'boolean',
		DATETIME = 'dateTime'
	}

	/**
	 * preparation | in-progress | suspended | aborted | completed | entered-in-error
	 * The status of the transmission.
	 * This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
	 */
	enum CommunicationCommunicationStatus {
		PREPARATION = 'preparation',
		IN_PROGRESS = 'in-progress',
		SUSPENDED = 'suspended',
		ABORTED = 'aborted',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
	 * The status of the proposal or order.
	 * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
	 */
	enum CommunicationRequestCommunicationRequestStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		CANCELLED = 'cancelled',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this compartment definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of compartment definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired compartment definition without due consideration.
	 */
	enum CompartmentDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * Patient | Encounter | RelatedPerson | Practitioner | Device
	 * Which compartment this definition describes.
	 * Only the specification can define the compartments that can exist. Servers can choose to support them.
	 */
	enum CompartmentDefinitionCompartmentType {
		PATIENT = 'Patient',
		ENCOUNTER = 'Encounter',
		RELATEDPERSON = 'RelatedPerson',
		PRACTITIONER = 'Practitioner',
		DEVICE = 'Device'
	}

	/**
	 * preliminary | final | amended | entered-in-error
	 * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
	 * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements. 

Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
	 */
	enum CompositionCompositionStatus {
		PRELIMINARY = 'preliminary',
		FINAL = 'final',
		AMENDED = 'amended',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * personal | professional | legal | official
	 * The type of attestation the authenticator offers.
	 * Use more than one code where a single attester has more than one mode (professional and legal are often paired).
	 */
	enum CompositionCompositionAttestationMode {
		PERSONAL = 'personal',
		PROFESSIONAL = 'professional',
		LEGAL = 'legal',
		OFFICIAL = 'official'
	}

	/**
	 * replaces | transforms | signs | appends
	 * The type of relationship that this composition has with anther composition or document.
	 * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
	 */
	enum CompositionDocumentRelationshipType {
		REPLACES = 'replaces',
		TRANSFORMS = 'transforms',
		SIGNS = 'signs',
		APPENDS = 'appends'
	}

	/**
	 * working | snapshot | changes
	 * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
	 * This element is labeled as a modifier because a change list must not be mis-understood as a complete list.
	 */
	enum CompositionSectionMode {
		WORKING = 'working',
		SNAPSHOT = 'snapshot',
		CHANGES = 'changes'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this concept map. Enables tracking the life-cycle of the content.
	 * Allows filtering of concept maps that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired concept map without due consideration.
	 */
	enum ConceptMapPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * relatedto | equivalent | equal | wider | subsumes | narrower | specializes | inexact | unmatched | disjoint
	 * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
	 * This element is labeled as a modifier because it may indicate that a target does not apply.
	 */
	enum ConceptMapConceptMapEquivalence {
		RELATEDTO = 'relatedto',
		EQUIVALENT = 'equivalent',
		EQUAL = 'equal',
		WIDER = 'wider',
		SUBSUMES = 'subsumes',
		NARROWER = 'narrower',
		SPECIALIZES = 'specializes',
		INEXACT = 'inexact',
		UNMATCHED = 'unmatched',
		DISJOINT = 'disjoint'
	}

	/**
	 * provided | fixed | other-map
	 * Defines which action to take if there is no match in the group. One of 3 actions is possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
	 */
	enum ConceptMapConceptMapGroupUnmappedMode {
		PROVIDED = 'provided',
		FIXED = 'fixed',
		OTHER_MAP = 'other-map'
	}

	/**
	 * active | recurrence | inactive | remission | resolved
	 * The clinical status of the condition.
	 * This element is labeled as a modifier because the status contains codes that mark the condition as not currently valid or of concern.
	 */
	enum ConditionConditionClinicalStatus {
		ACTIVE = 'active',
		RECURRENCE = 'recurrence',
		INACTIVE = 'inactive',
		REMISSION = 'remission',
		RESOLVED = 'resolved'
	}

	/**
	 * provisional | differential | confirmed | refuted | entered-in-error | unknown
	 * The verification status to support the clinical status of the condition.
	 * verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.

This element is labeled as a modifier because the status contains the code refuted and entered-in-error that mark the Condition as not currently valid.
	 */
	enum ConditionConditionVerificationStatus {
		PROVISIONAL = 'provisional',
		DIFFERENTIAL = 'differential',
		CONFIRMED = 'confirmed',
		REFUTED = 'refuted',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * draft | proposed | active | rejected | inactive | entered-in-error
	 * Indicates the current state of this consent.
	 * This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
	 */
	enum ConsentConsentState {
		DRAFT = 'draft',
		PROPOSED = 'proposed',
		ACTIVE = 'active',
		REJECTED = 'rejected',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * instance | related | dependents | authoredby
	 * How the resource reference is interpreted when testing consent restrictions.
	 */
	enum ConsentConsentDataMeaning {
		INSTANCE = 'instance',
		RELATED = 'related',
		DEPENDENTS = 'dependents',
		AUTHOREDBY = 'authoredby'
	}

	/**
	 * deny | permit
	 * Action  to take - permit or deny - when the exception conditions are met.
	 */
	enum ConsentConsentExceptType {
		DENY = 'deny',
		PERMIT = 'permit'
	}

	/**
	 * amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
	 */
	enum ContractContractStatus {
		AMENDED = 'amended',
		APPENDED = 'appended',
		CANCELLED = 'cancelled',
		DISPUTED = 'disputed',
		ENTERED_IN_ERROR = 'entered-in-error',
		EXECUTABLE = 'executable',
		EXECUTED = 'executed',
		NEGOTIABLE = 'negotiable',
		OFFERED = 'offered',
		POLICY = 'policy',
		REJECTED = 'rejected',
		RENEWED = 'renewed',
		REVOKED = 'revoked',
		RESOLVED = 'resolved',
		TERMINATED = 'terminated'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
	 */
	enum CoverageCoverageStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this data element. Enables tracking the life-cycle of the content.
	 * Allows filtering of data elements that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired data element without due consideration.
	 */
	enum DataElementPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * comparable | fully-specified | equivalent | convertable | scaleable | flexible
	 * Identifies how precise the data element is in its definition.
	 */
	enum DataElementDataElementStringency {
		COMPARABLE = 'comparable',
		FULLY_SPECIFIED = 'fully-specified',
		EQUIVALENT = 'equivalent',
		CONVERTABLE = 'convertable',
		SCALEABLE = 'scaleable',
		FLEXIBLE = 'flexible'
	}

	/**
	 * registered | preliminary | final | amended +
	 * Indicates the status of the detected issue.
	 * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the issue as not currently valid.
	 */
	enum DetectedIssueDetectedIssueStatus {
		REGISTERED = 'registered',
		PRELIMINARY = 'preliminary',
		FINAL = 'final',
		AMENDED = 'amended',
		CORRECTED = 'corrected',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * high | moderate | low
	 * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
	 */
	enum DetectedIssueDetectedIssueSeverity {
		HIGH = 'high',
		MODERATE = 'moderate',
		LOW = 'low'
	}

	/**
	 * barcode | rfid | manual +
	 * A coded entry to indicate how the data was entered.
	 */
	enum DeviceUDIEntryType {
		BARCODE = 'barcode',
		RFID = 'rfid',
		MANUAL = 'manual',
		CARD = 'card',
		SELF_REPORTED = 'self-reported',
		UNKNOWN = 'unknown'
	}

	/**
	 * active | inactive | entered-in-error | unknown
	 * Status of the Device availability.
	 * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
	 */
	enum DeviceFHIRDeviceStatus {
		ACTIVE = 'active',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * other | chemical | electrical | impedance | nuclear | optical | thermal | biological | mechanical | acoustical | manual+
	 * The physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
	 */
	enum DeviceComponentMeasmntPrinciple {
		OTHER = 'other',
		CHEMICAL = 'chemical',
		ELECTRICAL = 'electrical',
		IMPEDANCE = 'impedance',
		NUCLEAR = 'nuclear',
		OPTICAL = 'optical',
		THERMAL = 'thermal',
		BIOLOGICAL = 'biological',
		MECHANICAL = 'mechanical',
		ACOUSTICAL = 'acoustical',
		MANUAL = 'manual'
	}

	/**
	 * on | off | standby | entered-in-error
	 * Indicates current operational state of the device. For example: On, Off, Standby, etc.
	 */
	enum DeviceMetricDeviceMetricOperationalStatus {
		ON = 'on',
		OFF = 'off',
		STANDBY = 'standby',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * black | red | green | yellow | blue | magenta | cyan | white
	 * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
	 */
	enum DeviceMetricDeviceMetricColor {
		BLACK = 'black',
		RED = 'red',
		GREEN = 'green',
		YELLOW = 'yellow',
		BLUE = 'blue',
		MAGENTA = 'magenta',
		CYAN = 'cyan',
		WHITE = 'white'
	}

	/**
	 * measurement | setting | calculation | unspecified
	 * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
	 */
	enum DeviceMetricDeviceMetricCategory {
		MEASUREMENT = 'measurement',
		SETTING = 'setting',
		CALCULATION = 'calculation',
		UNSPECIFIED = 'unspecified'
	}

	/**
	 * unspecified | offset | gain | two-point
	 * Describes the type of the calibration method.
	 */
	enum DeviceMetricDeviceMetricCalibrationType {
		UNSPECIFIED = 'unspecified',
		OFFSET = 'offset',
		GAIN = 'gain',
		TWO_POINT = 'two-point'
	}

	/**
	 * not-calibrated | calibration-required | calibrated | unspecified
	 * Describes the state of the calibration.
	 */
	enum DeviceMetricDeviceMetricCalibrationState {
		NOT_CALIBRATED = 'not-calibrated',
		CALIBRATION_REQUIRED = 'calibration-required',
		CALIBRATED = 'calibrated',
		UNSPECIFIED = 'unspecified'
	}

	/**
	 * draft | active | suspended | completed | entered-in-error | cancelled
	 * The status of the request.
	 * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
	 */
	enum DeviceRequestDeviceRequestStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		CANCELLED = 'cancelled'
	}

	/**
	 * active | completed | entered-in-error +
	 * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
	 * DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).

This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
	 */
	enum DeviceUseStatementDeviceUseStatementStatus {
		ACTIVE = 'active',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		INTENDED = 'intended',
		STOPPED = 'stopped',
		ON_HOLD = 'on-hold'
	}

	/**
	 * registered | partial | preliminary | final +
	 * The status of the diagnostic report as a whole.
	 * This is labeled as "Is Modifier" because applications need to take appropriate action if a report is withdrawn.
	 */
	enum DiagnosticReportDiagnosticReportStatus {
		REGISTERED = 'registered',
		PARTIAL = 'partial',
		PRELIMINARY = 'preliminary',
		FINAL = 'final',
		amended = 'amended',
		COORECTED = 'corrected',
		APPENDED = 'appended',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * current | superseded | entered-in-error
	 * The status of this document manifest.
	 * This element is labeled as a modifier because the status contains the codes that mark the manifest as not currently valid.
	 */
	enum DocumentManifestDocumentReferenceStatus {
		CURRENT = 'current',
		SUPERSEDED = 'superseded',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * current | superseded | entered-in-error
	 * The status of this document reference.
	 * This is the status of the DocumentReference object, which might be independent from the docStatus element.

This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
	 */
	enum DocumentReferenceDocumentReferenceStatus {
		CURRENT = 'current',
		SUPERSEDED = 'superseded',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * preliminary | final | appended | amended | entered-in-error
	 * The status of the underlying document.
	 * The document that is pointed to might be in various lifecycle states.
	 */
	enum DocumentReferenceReferredDocumentStatus {
		PRELIMINARY = 'preliminary',
		FINAL = 'final',
		APPENDED = 'appended',
		AMENDED = 'amended',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * replaces | transforms | signs | appends
	 * The type of relationship that this document has with anther document.
	 * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
	 */
	enum DocumentReferenceDocumentRelationshipType {
		REPLACES = 'replaces',
		TRANSFORMS = 'transforms',
		SIGNS = 'signs',
		APPENDS = 'appends'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 */
	enum EligibilityRequestEligibilityRequestStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
	 */
	enum EligibilityResponseEligibilityResponseStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +
	 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	 * Note that internal business rules will detemine the appropraite transitions that may occur between statuses (and also classes).

This element is labeled as a modifier because the status contains codes that mark the encounter as not currently valid.
	 */
	enum EncounterEncounterStatus {
		PLANNED = 'planned',
		ARRIVED = 'arrived',
		TRIAGED = 'triaged',
		IN_PROGRESS = 'in-progress',
		ONLEAVE = 'onleave',
		FINISHED = 'finished',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * planned | active | reserved | completed
	 * The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
	 * When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
	 */
	enum EncounterEncounterLocationStatus {
		PLANNED = 'planned',
		ACTIVE = 'active',
		RESERVED = 'reserved',
		COMPLETED = 'completed'
	}

	/**
	 * active | suspended | error | off | entered-in-error | test
	 * active | suspended | error | off | test.
	 * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid.
	 */
	enum EndpointEndpointStatus {
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		ERROR = 'error',
		OFF = 'off',
		ENTERED_IN_ERROR = 'entered-in-error',
		TEST = 'test'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
	 */
	enum EnrollmentRequestEnrollmentRequestStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
	 */
	enum EnrollmentResponseEnrollmentResponseStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * planned | waitlist | active | onhold | finished | cancelled | entered-in-error
	 * planned | waitlist | active | onhold | finished | cancelled.
	 * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
	 */
	enum EpisodeOfCareEpisodeOfCareStatus {
		PLANNED = 'planned',
		WAITLIST = 'waitlist',
		ACTIVE = 'active',
		ONHOLD = 'onhold',
		FINISHED = 'finished',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this expansion profile. Enables tracking the life-cycle of the content.
	 * Allows filtering of expansion profiles that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired expansion profile without due consideration.
	 */
	enum ExpansionProfilePublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * default | check | override
	 * How to manage the intersection between a fixed version in a value set, and this fixed version of the system in the expansion profile.
	 */
	enum ExpansionProfileSystemVersionProcessingMode {
		DEFAULT = 'default',
		CHECK = 'check',
		OVERRIDE = 'override'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ExplanationOfBenefitExplanationOfBenefitStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * partial | completed | entered-in-error | health-unknown
	 * A code specifying the status of the record of the family history of a specific family member.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum FamilyMemberHistoryFamilyHistoryStatus {
		PARTIAL = 'partial',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		HEALTH_UNKNOWN = 'health-unknown'
	}

	/**
	 * male | female | other | unknown
	 * Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes.
	 */
	enum FamilyMemberHistoryAdministrativeGender {
		MALE = 'male',
		FEMALE = 'female',
		OTHER = 'other',
		UNKNOWN = 'unknown'
	}

	/**
	 * active | inactive | entered-in-error
	 * Supports basic workflow.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum FlagFlagStatus {
		ACTIVE = 'active',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * proposed | accepted | planned | in-progress | on-target | ahead-of-target | behind-target | sustaining | achieved | on-hold | cancelled | entered-in-error | rejected
	 * Indicates whether the goal has been reached and is still considered relevant.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum GoalGoalStatus {
		PROPOSED = 'proposed',
		ACCEPTED = 'accepted',
		PLANNED = 'planned',
		IN_PROGRESS = 'in-progress',
		ON_TARGET = 'on-target',
		AHEAD_OF_TARGET = 'ahead-of-target',
		BEHIND_TARGET = 'behind-target',
		SUSTAINING = 'sustaining',
		ACHIEVED = 'achieved',
		ON_HOLD = 'on-hold',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error',
		REJECTED = 'rejected'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this graph definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of graph definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired graph definition without due consideration.
	 */
	enum GraphDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * identical | matching | different | custom
	 * identical | matching | different | no-rule | custom.
	 */
	enum GraphDefinitionGraphCompartmentRule {
		IDENTICAL = 'identical',
		MATCHING = 'matching',
		DIFFERENT = 'different',
		CUSTOM = 'custom'
	}

	/**
	 * person | animal | practitioner | device | medication | substance
	 * Identifies the broad classification of the kind of resources the group includes.
	 * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medicaiton or Substance for the other types.).
	 */
	enum GroupGroupType {
		PERSON = 'person',
		ANIMAL = 'animal',
		PRACTITIONER = 'practitioner',
		DEVICE = 'device',
		MEDICATION = 'medication',
		SUBSTANCE = 'substance'
	}

	/**
	 * success | data-requested | data-required | in-progress | failure | entered-in-error
	 * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum GuidanceResponseGuidanceResponseStatus {
		SUCCESS = 'success',
		DATA_REQUESTED = 'data-requested',
		DATA_REQUIRED = 'data-required',
		IN_PROGRESS = 'in-progress',
		FAILURE = 'failure',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * mon | tue | wed | thu | fri | sat | sun
	 * Indicates which days of the week are available between the start and end Times.
	 */
	enum HealthcareServiceDaysOfWeek {
		MON = 'mon',
		TUE = 'tue',
		WED = 'wed',
		THU = 'thu',
		FRI = 'fri',
		SAT = 'sat',
		SUN = 'sun'
	}

	/**
	 * ONLINE | OFFLINE | NEARLINE | UNAVAILABLE
	 * Availability of study (online, offline, or nearline).
	 */
	enum ImagingStudyInstanceAvailability {
		ONLINE = 'ONLINE',
		OFFLINE = 'OFFLINE',
		NEARLINE = 'NEARLINE',
		UNAVAILABLE = 'UNAVAILABLE'
	}

	/**
	 * completed | entered-in-error
	 * Indicates the current status of the vaccination event.
	 * Will generally be set to show that the immunization has been completed.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ImmunizationImmunizationStatus {
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this implementation guide. Enables tracking the life-cycle of the content.
	 * Allows filtering of implementation guides that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired implementation guide without due consideration.
	 */
	enum ImplementationGuidePublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * reference | inclusion
	 * How the dependency is represented when the guide is published.
	 * For information about processing included guides, see [Including Guides]{implementationguide.html#include}.
	 */
	enum ImplementationGuideGuideDependencyType {
		REFERENCE = 'reference',
		INCLUSION = 'inclusion'
	}

	/**
	 * page | example | list | include | directory | dictionary | toc | resource
	 * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
	 */
	enum ImplementationGuideGuidePageKind {
		PAGE = 'page',
		EXAMPLE = 'example',
		LIST = 'list',
		INCLUDE = 'include',
		DIRECTORY = 'directory',
		DICTIONARY = 'dictionary',
		TOC = 'toc',
		RESOURCE = 'resource'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this library. Enables tracking the life-cycle of the content.
	 * Allows filtering of librarys that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired library without due consideration.
	 */
	enum LibraryPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * source | alternate | historical
	 * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
	 */
	enum LinkageLinkageType {
		SOURCE = 'source',
		ALTERNATE = 'alternate',
		HISTORICAL = 'historical'
	}

	/**
	 * current | retired | entered-in-error
	 * Indicates the current state of this list.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ListListStatus {
		CURRENT = 'current',
		RETIRED = 'retired',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * working | snapshot | changes
	 * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
	 * This element is labeled as a modifier because a change list must not be mis-understood as a complete list.
	 */
	enum ListListMode {
		WORKING = 'working',
		SNAPSHOT = 'snapshot',
		CHANGES = 'changes'
	}

	/**
	 * active | suspended | inactive
	 * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum LocationLocationStatus {
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		INACTIVE = 'inactive'
	}

	/**
	 * instance | kind
	 * Indicates whether a resource instance represents a specific location or a class of locations.
	 * This is labeled as a modifer because whether or not the location is a class of locations changes how it can be used and understood.
	 */
	enum LocationLocationMode {
		INSTANCE = 'instance',
		KIND = 'kind'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this measure. Enables tracking the life-cycle of the content.
	 * Allows filtering of measures that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired measure without due consideration.
	 */
	enum MeasurePublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * complete | pending | error
	 * The report status. No data will be available until the report status is complete.
	 */
	enum MeasureReportMeasureReportStatus {
		COMPLETE = 'complete',
		PENDING = 'pending',
		ERROR = 'error'
	}

	/**
	 * individual | patient-list | summary
	 * The type of measure report. This may be an individual report, which provides a single patient's score for the measure; a patient listing, which returns the list of patients that meet the various criteria in the measure; or a summary report, which returns a population count for each of the criteria in the measure.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum MeasureReportMeasureReportType {
		INDIVIDUAL = 'individual',
		PATIENT_LIST = 'patient-list',
		SUMMARY = 'summary'
	}

	/**
	 * photo | video | audio
	 * Whether the media is a photo (still image), an audio recording, or a video recording.
	 */
	enum MediaDigitalMediaType {
		PHOTO = 'photo',
		VIDEO = 'video',
		AUDIO = 'audio'
	}

	/**
	 * active | inactive | entered-in-error
	 * A code to indicate if the medication is in active use.
	 * This status is not intended to specify if a medication is part of a formulary.
	 */
	enum MedicationMedicationStatus {
		ACTIVE = 'active',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * in-progress | on-hold | completed | entered-in-error | stopped | unknown
	 * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum MedicationAdministrationMedicationAdministrationStatus {
		IN_PROGRESS = 'in-progress',
		ON_HOLD = 'on-hold',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		STOPPED = 'stopped',
		UNKNOWN = 'unknown'
	}

	/**
	 * preparation | in-progress | on-hold | completed | entered-in-error | stopped
	 * A code specifying the state of the set of dispense events.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum MedicationDispenseMedicationDispenseStatus {
		PREPARATION = 'preparation',
		IN_PROGRESS = 'in-progress',
		ON_HOLD = 'on-hold',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		STOPPED = 'stopped'
	}

	/**
	 * active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown
	 * A code specifying the current state of the order.  Generally this will be active or completed state.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum MedicationRequestMedicationRequestStatus {
		ACTIVE = 'active',
		ON_HOLD = 'on-hold',
		CANCELLED = 'cancelled',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		STOPPED = 'stopped',
		DRAFT = 'draft',
		UNKNOWN = 'unknown'
	}

	/**
	 * proposal | plan | order | instance-order
	 * Whether the request is a proposal, plan, or an original order.
	 * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.

An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.

This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
	 */
	enum MedicationRequestMedicationRequestIntent {
		PROPOSAL = 'proposal',
		PLAN = 'plan',
		ORDER = 'order',
		INSTANCE_ORDER = 'instance-order'
	}

	/**
	 * routine | urgent | stat | asap
	 * Indicates how quickly the Medication Request should be addressed with respect to other requests.
	 */
	enum MedicationRequestMedicationRequestPriority {
		ROUTINE = 'routine',
		URGENT = 'urgent',
		STAT = 'stat',
		ASAP = 'asap'
	}

	/**
	 * active | completed | entered-in-error | intended | stopped | on-hold
	 * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
	 * MedicationStatement is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for MedicationStatement.status contains codes that assert the status of the use of the medication by the patient (for example, stopped or on hold) as well as codes that assert the status of the medication statement itself (for example, entered in error).

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum MedicationStatementMedicationStatementStatus {
		ACTIVE = 'active',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		INTENDED = 'intended',
		STOPPED = 'stopped',
		ON_HOLD = 'on-hold'
	}

	/**
	 * y | n | unk | na
	 * Indicator of the certainty of whether the medication was taken by the patient.
	 * This element is labeled as a modifier because it indicates that the medication was not taken.
	 */
	enum MedicationStatementMedicationStatementTaken {
		Y = 'y',
		N = 'n',
		UNK = 'unk',
		NA = 'na'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this message definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of message definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired message definition without due consideration.
	 */
	enum MessageDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * Consequence | Currency | Notification
	 * The impact of the content of the message.
	 */
	enum MessageDefinitionMessageSignificanceCategory {
		CONSEQUENCE = 'Consequence',
		CURRENCY = 'Currency',
		NOTIFICATION = 'Notification'
	}

	/**
	 * ok | transient-error | fatal-error
	 * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
	 * This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
	 */
	enum MessageHeaderResponseType {
		OK = 'ok',
		TRANSIENT_ERROR = 'transient-error',
		FATAL_ERROR = 'fatal-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this naming system. Enables tracking the life-cycle of the content.
	 * Allows filtering of naming systems that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired naming system without due consideration.
	 */
	enum NamingSystemPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * codesystem | identifier | root
	 * Indicates the purpose for the naming system - what kinds of things does it make unique?
	 */
	enum NamingSystemNamingSystemType {
		CODESYSTEM = 'codesystem',
		IDENTIFIER = 'identifier',
		ROOT = 'root'
	}

	/**
	 * oid | uuid | uri | other
	 * Identifies the unique identifier scheme used for this particular identifier.
	 * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.
	 */
	enum NamingSystemNamingSystemIdentifierType {
		OID = 'oid',
		UUID = 'uuid',
		URI = 'uri',
		OTHER = 'other'
	}

	/**
	 * proposed | draft | planned | requested | active | on-hold | completed | cancelled | entered-in-error
	 * The workflow status of the nutrition order/request.
	 * Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum NutritionOrderNutritionOrderStatus {
		PROPOSED = 'proposed',
		DRAFT = 'draft',
		PLANNED = 'planned',
		REQUESTED = 'requested',
		ACTIVE = 'active',
		ON_HOLD = 'on-hold',
		COMPLETED = 'completed',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * registered | preliminary | final | amended +
	 * The status of the result value.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ObservationObservationStatus {
		REGISTERED = 'registered',
		PRELIMINARY = 'preliminary',
		FINAL = 'final',
		AMENDED = 'amended',
		CORRECTED = 'corrected',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * has-member | derived-from | sequel-to | replaces | qualified-by | interfered-by
	 * A code specifying the kind of relationship that exists with the target resource.
	 * The "derived-from" type is the only logical choice when referencing the QuestionnaireAnswer resource.
	 */
	enum ObservationObservationRelationshipType {
		HAS_MEMBER = 'has-member',
		DERIVED_FROM = 'derived-from',
		SEQUEL_TO = 'sequel-to',
		REPLACES = 'replaces',
		QUALIFIED_BY = 'qualified-by',
		INTERFERED_BY = 'interfered-by'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this operation definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of operation definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired operation definition without due consideration.
	 */
	enum OperationDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * operation | query
	 * Whether this is an operation or a named query.
	 * Named queries are invoked differently, and have different capabilities.
	 */
	enum OperationDefinitionOperationKind {
		OPERATION = 'operation',
		QUERY = 'query'
	}

	/**
	 * in | out
	 * Whether this is an input or an output parameter.
	 * If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
	 */
	enum OperationDefinitionOperationParameterUse {
		IN = 'in',
		OUT = 'out'
	}

	/**
	 * number | date | string | token | reference | composite | quantity | uri
	 * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
	 */
	enum OperationDefinitionSearchParamType {
		NUMBER = 'number',
		DATE = 'date',
		STRING = 'string',
		TOKEN = 'token',
		REFERENCE = 'reference',
		COMPOSITE = 'composite',
		QUANTITY = 'quantity',
		URI = 'uri'
	}

	/**
	 * required | extensible | preferred | example
	 * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
	 * For further discussion, see [Using Terminologies](terminologies.html).
	 */
	enum OperationDefinitionBindingStrength {
		REQUIRED = 'required',
		EXTENSIBLE = 'extensible',
		PREFERRED = 'preferred',
		EXAMPLE = 'example'
	}

	/**
	 * fatal | error | warning | information
	 * Indicates whether the issue indicates a variation from successful processing.
	 * This is labeled as "Is Modifier" because applications should not confuse hints and warnings with errors.
	 */
	enum OperationOutcomeIssueSeverity {
		FATAL = 'fatal',
		ERROR = 'error',
		WARNING = 'warning',
		INFORMATION = 'information'
	}

	/**
	 * male | female | other | unknown
	 * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
	 * The gender may not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though the vast majority of systems and contexts only support M and F.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific gender aspect of interest (anatomical, chromosonal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosonal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overrideable error, not a "hard" error.
	 */
	enum PatientAdministrativeGender {
		MALE = 'male',
		FEMALE = 'female',
		OTHER = 'other',
		UNKNOWN = 'unknown'
	}

	/**
	 * replaced-by | replaces | refer | seealso - type of link
	 * The type of link between this patient resource and another patient resource.
	 */
	enum PatientLinkType {
		REPLACED_BY = 'replaced-by',
		REPLACES = 'replaces',
		REFER = 'refer',
		SEEALSO = 'seealso'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum PaymentNoticePaymentNoticeStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum PaymentReconciliationPaymentReconciliationStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * male | female | other | unknown
	 * Administrative Gender.
	 * The gender may not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though the vast majority of systems and contexts only support M and F.
	 */
	enum PersonAdministrativeGender {
		MALE = 'male',
		FEMALE = 'female',
		OTHER = 'other',
		UNKNOWN = 'unknown'
	}

	/**
	 * level1 | level2 | level3 | level4
	 * Level of assurance that this link is actually associated with the target resource.
	 */
	enum PersonIdentityAssuranceLevel {
		LEVEL1 = 'level1',
		LEVEL2 = 'level2',
		LEVEL3 = 'level3',
		LEVEL4 = 'level4'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this plan definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of plan definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired plan definition without due consideration.
	 */
	enum PlanDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * applicability | start | stop
	 * The kind of condition.
	 * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
	 */
	enum PlanDefinitionActionConditionKind {
		APPLICABILITY = 'applicability',
		START = 'start',
		STOP = 'stop'
	}

	/**
	 * before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end
	 * The relationship of this action to the related action.
	 */
	enum PlanDefinitionActionRelationshipType {
		BEFORE_START = 'before-start',
		BEFORE = 'before',
		BEFORE_END = 'before-end',
		CONCURRENT_WITH_START = 'concurrent-with-start',
		CONCURRENT = 'concurrent',
		CONCURRENT_WITH_END = 'concurrent-with-end',
		AFTER_START = 'after-start',
		AFTER = 'after',
		AFTER_END = 'after-end'
	}

	/**
	 * patient | practitioner | related-person
	 * The type of participant in the action.
	 */
	enum PlanDefinitionActionParticipantType {
		PATIENT = 'patient',
		PRACTITIONER = 'practitioner',
		RELATED_PERSON = 'related-person'
	}

	/**
	 * visual-group | logical-group | sentence-group
	 * Defines the grouping behavior for the action and its children.
	 */
	enum PlanDefinitionActionGroupingBehavior {
		VISUAL_GROUP = 'visual-group',
		LOGICAL_GROUP = 'logical-group',
		SENTENCE_GROUP = 'sentence-group'
	}

	/**
	 * any | all | all-or-none | exactly-one | at-most-one | one-or-more
	 * Defines the selection behavior for the action and its children.
	 */
	enum PlanDefinitionActionSelectionBehavior {
		ANY = 'any',
		ALL = 'all',
		ALL_OR_NONE = 'all-or-none',
		EXACTLY_ONE = 'exactly-one',
		AT_MOST_ONE = 'at-most-one',
		ONE_OR_MORE = 'one-or-more'
	}

	/**
	 * must | could | must-unless-documented
	 * Defines the requiredness behavior for the action.
	 */
	enum PlanDefinitionActionRequiredBehavior {
		MUST = 'must',
		COULD = 'could',
		MUST_UNLESS_DOCUMENTED = 'must-unless-documented'
	}

	/**
	 * yes | no
	 * Defines whether the action should usually be preselected.
	 */
	enum PlanDefinitionActionPrecheckBehavior {
		YES = 'yes',
		NO = 'no'
	}

	/**
	 * single | multiple
	 * Defines whether the action can be selected multiple times.
	 */
	enum PlanDefinitionActionCardinalityBehavior {
		SINGLE = 'single',
		MULTIPLE = 'multiple'
	}

	/**
	 * male | female | other | unknown
	 * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
	 */
	enum PractitionerAdministrativeGender {
		MALE = 'male',
		FEMALE = 'female',
		OTHER = 'other',
		UNKNOWN = 'unknown'
	}

	/**
	 * mon | tue | wed | thu | fri | sat | sun
	 * Indicates which days of the week are available between the start and end Times.
	 */
	enum PractitionerRoleDaysOfWeek {
		MON = 'mon',
		TUE = 'tue',
		WED = 'wed',
		THU = 'thu',
		FRI = 'fri',
		SAT = 'sat',
		SUN = 'sun'
	}

	/**
	 * preparation | in-progress | suspended | aborted | completed | entered-in-error | unknown
	 * A code specifying the state of the procedure. Generally this will be in-progress or completed state.
	 * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ProcedureProcedureStatus {
		PREPARATION = 'preparation',
		IN_PROGRESS = 'in-progress',
		SUSPENDED = 'suspended',
		ABORTED = 'aborted',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * draft | active | suspended | completed | entered-in-error | cancelled
	 * The status of the order.
	 * The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, cancelled or suspended. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ProcedureRequestProcedureRequestStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		CANCELLED = 'cancelled'
	}

	/**
	 * proposal | plan | order +
	 * Whether the request is a proposal, plan, an original order or a reflex order.
	 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
	 */
	enum ProcedureRequestProcedureRequestIntent {
		PROPOSAL = 'proposal',
		PLAN = 'plan',
		ORDER = 'order',
		ORIGINAL_ORDER = 'original-order',
		REFLEX_ORDER = 'reflex-order',
		FILLER_ORDER = 'filler-order',
		INSTANCE_ORDER = 'instance-order',
		OPTION = 'option'
	}

	/**
	 * routine | urgent | asap | stat
	 * Indicates how quickly the ProcedureRequest should be addressed with respect to other requests.
	 */
	enum ProcedureRequestProcedureRequestPriority {
		ROUTINE = 'routine',
		URGENT = 'urgent',
		ASAP = 'asap',
		STAT = 'stat'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ProcessRequestProcessRequestStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * cancel | poll | reprocess | status
	 * The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.
	 */
	enum ProcessRequestActionList {
		CANCEL = 'cancel',
		POLL = 'poll',
		REPROCESS = 'reprocess',
		STATUS = 'status'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ProcessResponseProcessResponseStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * derivation | revision | quotation | source | removal
	 * How the entity was used during the activity.
	 */
	enum ProvenanceProvenanceEntityRole {
		DERIVATION = 'derivation',
		REVISION = 'revision',
		QUOTATION = 'quotation',
		SOURCE = 'source',
		REMOVAL = 'removal'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this questionnaire. Enables tracking the life-cycle of the content.
	 * Allows filtering of questionnaires that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired questionnaire without due consideration.
	 */
	enum QuestionnairePublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * group | display | boolean | decimal | integer | date | dateTime +
	 * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
	 * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
	 */
	enum QuestionnaireQuestionnaireItemType {
		GROUP = 'group',
		DISPLAY = 'display',
		QUESTION = 'question',
		BOOLEAN = 'boolean',
		DECIMAL = 'decimal',
		INTEGER = 'integer',
		DATE = 'date',
		DATETIME = 'dateTime',
		TIME = 'time',
		STRING = 'string',
		TEXT = 'text',
		URL = 'url',
		CHOICE = 'choice',
		OPEN_CHOICE = 'open-choice',
		ATTACHMENT = 'attachment',
		REFERENCE = 'reference',
		QUANTITY = 'quantity'
	}

	/**
	 * in-progress | completed | amended | entered-in-error | stopped
	 * The position of the questionnaire response within its overall lifecycle.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum QuestionnaireResponseQuestionnaireResponseStatus {
		IN_PROGRESS = 'in-progress',
		COMPLETED = 'completed',
		AMENDED = 'amended',
		ENTERED_IN_ERROR = 'entered-in-error',
		STOPPED = 'stopped'
	}

	/**
	 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
	 * The status of the authorization/intention reflected by the referral request record.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ReferralRequestReferralRequestStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		CANCELLED = 'cancelled',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * proposal | plan | order
	 * Distinguishes the "level" of authorization/demand implicit in this request.
	 */
	enum ReferralRequestReferralCategory {
		PROPOSAL = 'proposal',
		PLAN = 'plan',
		ORDER = 'order'
	}

	/**
	 * male | female | other | unknown
	 * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
	 */
	enum RelatedPersonAdministrativeGender {
		MALE = 'male',
		FEMALE = 'female',
		OTHER = 'other',
		UNKNOWN = 'unknown'
	}

	/**
	 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
	 * The current state of the request. For request groups, the status reflects the status of all the requests in the group.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum RequestGroupRequestStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		CANCELLED = 'cancelled',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * proposal | plan | order
	 * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
	 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
	 */
	enum RequestGroupRequestIntent {
		PROPOSAL = 'proposal',
		PLAN = 'plan',
		ORDER = 'order'
	}

	/**
	 * routine | urgent | asap | stat
	 * Indicates how quickly the request should be addressed with respect to other requests.
	 */
	enum RequestGroupRequestPriority {
		ROUTINE = 'routine',
		URGENT = 'urgent',
		ASAP = 'asap',
		STAT = 'stat'
	}

	/**
	 * applicability | start | stop
	 * The kind of condition.
	 * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
	 */
	enum RequestGroupActionConditionKind {
		APPLICABILITY = 'applicability',
		START = 'start',
		STOP = 'stop'
	}

	/**
	 * before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end
	 * The relationship of this action to the related action.
	 */
	enum RequestGroupActionRelationshipType {
		BEFORE_START = 'before-start',
		BEFORE = 'before',
		BEFORE_END = 'before-end',
		CONCURRENT_WITH_START = 'concurrent-with-start',
		CONCURRENT = 'concurrent',
		CONCURRENT_WITH_END = 'concurrent-with-end',
		AFTER_START = 'after-start',
		AFTER = 'after',
		AFTER_END = 'after-end'
	}

	/**
	 * visual-group | logical-group | sentence-group
	 * Defines the grouping behavior for the action and its children.
	 */
	enum RequestGroupActionGroupingBehavior {
		VISUAL_GROUP = 'visual-group',
		LOGICAL_GROUP = 'logical-group',
		SENTENCE_GROUP = 'sentence-group'
	}

	/**
	 * any | all | all-or-none | exactly-one | at-most-one | one-or-more
	 * Defines the selection behavior for the action and its children.
	 */
	enum RequestGroupActionSelectionBehavior {
		ANY = 'any',
		ALL = 'all',
		ALL_OR_NONE = 'all-or-none',
		EXACTLY_ONE = 'exactly-one',
		AT_MOST_ONE = 'at-most-one',
		ONE_OR_MORE = 'one-or-more'
	}

	/**
	 * must | could | must-unless-documented
	 * Defines the requiredness behavior for the action.
	 */
	enum RequestGroupActionRequiredBehavior {
		MUST = 'must',
		COULD = 'could',
		MUST_UNLESS_DOCUMENTED = 'must-unless-documented'
	}

	/**
	 * yes | no
	 * Defines whether the action should usually be preselected.
	 */
	enum RequestGroupActionPrecheckBehavior {
		YES = 'yes',
		NO = 'no'
	}

	/**
	 * single | multiple
	 * Defines whether the action can be selected multiple times.
	 */
	enum RequestGroupActionCardinalityBehavior {
		SINGLE = 'single',
		MULTIPLE = 'multiple'
	}

	/**
	 * draft | in-progress | suspended | stopped | completed | entered-in-error
	 * The current state of the study.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ResearchStudyResearchStudyStatus {
		DRAFT = 'draft',
		IN_PROGRESS = 'in-progress',
		SUSPENDED = 'suspended',
		STOPPED = 'stopped',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * candidate | enrolled | active | suspended | withdrawn | completed
	 * The current state of the subject.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum ResearchSubjectResearchSubjectStatus {
		CANDIDATE = 'candidate',
		ENROLLED = 'enrolled',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		WITHDRAWN = 'withdrawn',
		COMPLETED = 'completed'
	}

	/**
	 * registered | preliminary | final | amended +
	 * The status of the RiskAssessment, using the same statuses as an Observation.
	 */
	enum RiskAssessmentRiskAssessmentStatus {			
		REGISTERED = 'registered',
		PRELIMINARY = 'preliminary',
		FINAL = 'final',
		AMENDED = 'amended',
		CORRECTED = 'corrected',
		CANCELLED = 'cancelled',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this search parameter. Enables tracking the life-cycle of the content.
	 * Allows filtering of search parameters that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired search parameter without due consideration.
	 */
	enum SearchParameterPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * number | date | string | token | reference | composite | quantity | uri
	 * The type of value a search parameter refers to, and how the content is interpreted.
	 */
	enum SearchParameterSearchParamType {
		NUMBER = 'number',
		DATE = 'date',
		STRING = 'string',
		TOKEN = 'token',
		REFERENCE = 'reference',
		COMPOSITE = 'composite',
		QUANTITY = 'quantity',
		URI = 'uri'
	}

	/**
	 * normal | phonetic | nearby | distance | other
	 * How the search parameter relates to the set of elements returned by evaluating the xpath query.
	 */
	enum SearchParameterXPathUsageType {
		NORMAL = 'normal',
		PHONETIC = 'phonetic',
		NEARBY = 'nearby',
		DISTANCE = 'distance',
		OTHER = 'other'
	}

	/**
	 * eq | ne | gt | lt | ge | le | sa | eb | ap
	 * Comparators supported for the search parameter.
	 * If no comparators are listed, clients should not expect servers to support any comparators.
	 */
	enum SearchParameterSearchComparator {
		EQ = 'eq',
		NE = 'ne',
		GT = 'gt',
		LT = 'lt',
		GE = 'ge',
		LE = 'le',
		SA = 'sa',
		EB = 'eb',
		AP = 'ap'
	}

	/**
	 * missing | exact | contains | not | text | in | not-in | below | above | type
	 * A modifier supported for the search parameter.
	 */
	enum SearchParameterSearchModifierCode {
		MISSING = 'missing',
		EXACT = 'exact',
		CONTAINS = 'contains',
		NOT = 'not',
		TEXT = 'text',
		IN = 'in',
		NOT_IN = 'not-in',
		BELOW = 'below',
		ABOVE = 'above',
		TYPE = 'type'
	}

	/**
	 * aa | dna | rna
	 * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
	 */
	enum SequencesequenceType {
		AA = 'aa',
		DNA = 'dna',
		RNA = 'rna'
	}

	/**
	 * indel | snp | unknown
	 * INDEL / SNP / Undefined variant.
	 */
	enum SequencequalityType {
		INDEL = 'indel',
		SNP = 'snp',
		UNKNOWN = 'unknown'
	}

	/**
	 * directlink | openapi | login | oauth | other
	 * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
	 */
	enum SequencerepositoryType {
		DIRECTLINK = 'directlink',
		OPENAPI = 'openapi',
		LOGIN = 'login',
		OAUTH = 'oauth',
		OTHER = 'other'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this service definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of service definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired service definition without due consideration.
	 */
	enum ServiceDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * busy | free | busy-unavailable | busy-tentative | entered-in-error
	 * busy | free | busy-unavailable | busy-tentative | entered-in-error.
	 */
	enum SlotSlotStatus {
		BUSY = 'busy',
		FREE = 'free',
		BUSY_UNAVAILABLE = 'busy-unavailable',
		BUSY_TENTATIVE = 'busy-tentative',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * available | unavailable | unsatisfactory | entered-in-error
	 * The availability of the specimen.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum SpecimenSpecimenStatus {
		AVAILABLE = 'available',
		UNAVAILABLE = 'unavailable',
		UNSATISFACTORY = 'unsatisfactory',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this structure definition. Enables tracking the life-cycle of the content.
	 * Allows filtering of structure definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired structure definition without due consideration.
	 */
	enum StructureDefinitionPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * primitive-type | complex-type | resource | logical
	 * Defines the kind of structure that this definition is describing.
	 */
	enum StructureDefinitionStructureDefinitionKind {
		PRIMITIVE_TYPE = 'primitive-type',
		COMPLEX_TYPE = 'complex-type',
		RESOURCE = 'resource',
		LOGICAL = 'logical'
	}

	/**
	 * resource | datatype | extension
	 * If this is an extension, Identifies the context within FHIR resources where the extension can be used.
	 */
	enum StructureDefinitionExtensionContext {
		RESOURCE = 'resource',
		DATATYPE = 'datatype',
		EXTENSION = 'extension'
	}

	/**
	 * specialization | constraint - How relates to base definition
	 * How the type relates to the baseDefinition.
	 * If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.

If the definition is a constraint, then it can not define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
	 */
	enum StructureDefinitionTypeDerivationRule {
		SPECIALIZATION = 'specialization',
		CONSTRAINT = 'constraint'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this structure map. Enables tracking the life-cycle of the content.
	 * Allows filtering of structure maps that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired structure map without due consideration.
	 */
	enum StructureMapPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * source | queried | target | produced
	 * How the referenced structure is used in this mapping.
	 */
	enum StructureMapStructureMapModelMode {
		SOURCE = 'source',
		QUERIED = 'queried',
		TARGET = 'target',
		PRODUCED = 'produced'
	}

	/**
	 * none | types | type-and-types
	 * If this is the default rule set to apply for thie source type, or this combination of types.
	 * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
	 */
	enum StructureMapStructureMapGroupTypeMode {
		NONE = 'none',
		TYPES = 'types',
		TYPE_AND_TYPES = 'type-and-types'
	}

	/**
	 * source | target
	 * Mode for this instance of data.
	 */
	enum StructureMapStructureMapInputMode {
		SOURCE = 'source',
		TARGET = 'target'
	}

	/**
	 * first | not_first | last | not_last | only_one
	 * How to handle the list mode for this element.
	 */
	enum StructureMapStructureMapSourceListMode {
		FIRST = 'first',
		NOT_FIRST = 'not_first',
		LAST = 'last',
		NOT_LAST = 'not_last',
		ONLY_ONE = 'only_one'
	}

	/**
	 * type | variable
	 * How to interpret the context.
	 */
	enum StructureMapStructureMapContextType {
		TYPE = 'type',
		VARIABLE = 'variable'
	}

	/**
	 * first | share | last | collate
	 * If field is a list, how to manage the list.
	 */
	enum StructureMapStructureMapTargetListMode {
		FIRST = 'first',
		SHARE = 'share',
		LAST = 'last',
		COLLATE = 'collate'
	}

	/**
	 * create | copy +
	 * How the data is copied / created.
	 */
	enum StructureMapStructureMapTransform {
		CREATE = 'create',
		COPY = 'copy',
		TRUNCATE = 'truncate',
		ESCAPE = 'escape',
		CAST = 'cast', 
		APPEND = 'append', 
		TRANSLATE = 'translate', 
		REFERENCE = 'reference',
		DATEOP = 'dateOp',
		UUID = 'uuid',
		POINTER = 'pointer',
		EVALUATE = 'evaluate',
		CC = 'cc', 
		C = 'c', 
		QTY = 'qty', 
		ID = 'id', 
		CP = 'cp'
	}

	/**
	 * requested | active | error | off
	 * The status of the subscription, which marks the server state for managing the subscription.
	 * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum SubscriptionSubscriptionStatus {
		REQUESTED = 'requested',
		ACTIVE = 'active',
		ERROR = 'error',
		OFF = 'off'
	}

	/**
	 * rest-hook | websocket | email | sms | message
	 * The type of channel to send notifications on.
	 */
	enum SubscriptionSubscriptionChannelType {
		REST_HOOK = 'rest-hook',
		WEBSOCKET = 'websocket',
		EMAIL = 'email',
		SMS = 'sms',
		MESSAGE = 'message'
	}

	/**
	 * active | inactive | entered-in-error
	 * A code to indicate if the substance is actively used.
	 */
	enum SubstanceFHIRSubstanceStatus {
		ACTIVE = 'active',
		INACTIVE = 'inactive',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * in-progress | completed | abandoned | entered-in-error
	 * A code specifying the state of the dispense event.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum SupplyDeliverySupplyDeliveryStatus {
		IN_PROGRESS = 'in-progress',
		COMPLETED = 'completed',
		ABANDONED = 'abandoned',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * draft | active | suspended +
	 * Status of the supply request.
	 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum SupplyRequestSupplyRequestStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		SUSPENDED = 'suspended',
		CANCELLED = 'cancelled',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error',
		UNKNOWN = 'unknown'
	}

	/**
	 * routine | urgent | asap | stat
	 * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
	 */
	enum SupplyRequestRequestPriority {
		ROUTINE = 'routine',
		URGENT = 'urgent',
		ASAP = 'asap',
		STAT = 'stat'
	}

	/**
	 * draft | requested | received | accepted | +
	 * The current status of the task.
	 */
	enum TaskTaskStatus {
		DRAFT = 'draft',
		REQUESTED = 'requested',
		RECEIVED = 'received',
		ACCEPTED = 'accepted',
		REJECTED = 'rejected',
		READY = 'ready',
		CANCELLED = 'cancelled',
		IN_PROGRESS = 'in-progress',
		ON_HOLD = 'on-hold',
		FAILED = 'failed',
		COMPLETED = 'completed',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * proposal | plan | order +
	 * Indicates the "level" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc.
	 * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.

In most cases, Tasks will have an intent of "order".
	 */
	enum TaskTaskIntent {
		PROPOSAL = 'proposal',
		PLAN = 'plan',
		ORDER = 'order',
		ORIGINAL_ORDER = 'original-order',
		REFLEX_ORDER = 'reflex-order',
		FILLER_ORDER = 'filler-order',
		INSTANCE_ORDER = 'instance-order',
		OPTION = 'option'
	}

	/**
	 * normal | urgent | asap | stat
	 * Indicates how quickly the Task should be addressed with respect to other requests.
	 */
	enum TaskTaskPriority {
		NORMAL = 'normal',
		URGENT = 'urgent',
		ASAP = 'asap',
		STAT = 'stat'
	}

	/**
	 * completed | in-progress | waiting | stopped | entered-in-error
	 * The current state of this test report.
	 * The status represents where the execution is currently within the test script execution life cycle.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
	 */
	enum TestReportTestReportStatus {
		COMPLETED = 'completed',
		IN_PROGRESS = 'in-progress',
		WAITING = 'waiting',
		STOPPED = 'stopped',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * pass | fail | pending
	 * The overall result from the execution of the TestScript.
	 * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
	 */
	enum TestReportTestReportResult {
		PASS = 'pass',
		FAIL = 'fail',
		PENDING = 'pending'
	}

	/**
	 * test-engine | client | server
	 * The type of participant.
	 */
	enum TestReportTestReportParticipantType {
		TEST_ENGINE = 'test-engine',
		CLIENT = 'client',
		SERVER = 'server'
	}

	/**
	 * pass | skip | fail | warning | error
	 * The result of this operation.
	 */
	enum TestReportTestReportActionResult {
		PASS = 'pass',
		SKIP = 'skip',
		FAIL = 'fail',
		WARNING = 'warning',
		ERROR = 'error'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this test script. Enables tracking the life-cycle of the content.
	 * Allows filtering of test scripts that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired test script without due consideration.
	 */
	enum TestScriptPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * xml | json | ttl | none
	 * The content-type or mime-type to use for RESTful operation in the 'Accept' header.
	 * If this is specified, then test engine shall set the 'Accept' header to the corresponding value.    If 'xml' is specified, then 'Accept' header of 'application/fhir+xml' will be set.  If 'json' is specified, then 'application/fhir+json' will be used.    If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
	 */
	enum TestScriptContentType {
		XML = 'xml',
		JSON = 'json',
		TTL = 'ttl',
		NONE = 'none'
	}

	/**
	 * response | request
	 * The direction to use for the assertion.
	 * If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
	 */
	enum TestScriptAssertionDirectionType {
		RESPONSE = 'response',
		REQUEST = 'request'
	}

	/**
	 * equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval
	 * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
	 * Operators are useful especially for negative testing.  If operator is not specified, then the "equals" operator is assumed; e.g. <code>   <assert>  <operator value="in" />  <responseCode value="200,201,204" />    </assert>    <assert>  <operator value="notEquals" />  <response value="okay"/>   </assert>    <assert>  <operator value="greaterThan" />    <responseHeader>     <field value="Content-Length" />     <value value="0" />    <responseHeader/>   </assert> </code>.
	 */
	enum TestScriptAssertionOperatorType {
		EQUALS = 'equals',
		NOTEQUALS = 'notEquals',
		IN = 'in',
		NOTIN = 'notIn',
		GREATERTHAN = 'greaterThan',
		LESSTHAN = 'lessThan',
		EMPTY = 'empty',
		NOTEMPTY = 'notEmpty',
		CONTAINS = 'contains',
		NOTCONTAINS = 'notContains',
		EVAL = 'eval'
	}

	/**
	 * delete | get | options | patch | post | put
	 * The request method or HTTP operation code to compare against that used by the client system under test.
	 * If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
	 */
	enum TestScriptTestScriptRequestMethodCode {
		DELETE = 'delete',
		GET = 'get',
		OPTIONS = 'options',
		PATCH = 'patch',
		POST = 'post',
		PUT = 'put'
	}

	/**
	 * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
	 * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
	 * This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
	 */
	enum TestScriptAssertionResponseTypes {
		OKAY = 'okay',
		CREATED = 'created',
		NOCONTENT = 'noContent',
		NOTMODIFIED = 'notModified',
		BAD = 'bad',
		FORBIDDEN = 'forbidden',
		NOTFOUND = 'notFound',
		METHODNOTALLOWED = 'methodNotAllowed',
		CONFLICT = 'conflict',
		GONE = 'gone',
		PRECONDITIONFAILED = 'preconditionFailed',
		UNPROCESSABLE = 'unprocessable'
	}

	/**
	 * draft | active | retired | unknown
	 * The status of this value set. Enables tracking the life-cycle of the content.
	 * Allows filtering of value sets that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired value set without due consideration.
	 */
	enum ValueSetPublicationStatus {
		DRAFT = 'draft',
		ACTIVE = 'active',
		RETIRED = 'retired',
		UNKNOWN = 'unknown'
	}

	/**
	 * = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists
	 * The kind of operation to perform as a part of the filter criteria.
	 */
	enum ValueSetFilterOperator {
		E = '=',
		IS_A = 'is-a',
		DESCENDENT_OF = 'descendent-of',
		IS_NOT_A = 'is-not-a',
		REGEX = 'regex',
		IN = 'in',
		NOT_IN = 'not-in',
		GENERALIZES = 'generalizes',
		EXISTS = 'exists'
	}

	/**
	 * active | cancelled | draft | entered-in-error
	 * The status of the resource instance.
	 */
	enum VisionPrescriptionVisionStatus {
		ACTIVE = 'active',
		CANCELLED = 'cancelled',
		DRAFT = 'draft',
		ENTERED_IN_ERROR = 'entered-in-error'
	}

	/**
	 * right | left
	 * The eye for which the lens applies.
	 */
	enum VisionPrescriptionVisionEyes {
		RIGHT = 'right',
		LEFT = 'left'
	}

	/**
	 * up | down | in | out
	 * The relative base, or reference lens edge, for the prism.
	 */
	enum VisionPrescriptionVisionBase {
		UP = 'up',
		DOWN = 'down',
		IN = 'in',
		OUT = 'out'
	}

	/**
	 * An address expressed using postal conventions (as opposed to GPS or other location definition formats)
	 * An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
	 * Note: address is for postal addresses, not physical locations.
	 */
	interface Address extends Element {

		/**
		 * home | work | temp | old - purpose of this address
		 * The purpose of this address.
		 * This is labeled as "Is Modifier" because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.
		 */
		use?: AddressAddressUse;

		/**
		 * postal | physical | both
		 * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
		 */
		type?: AddressAddressType;

		/**
		 * Text representation of the address
		 * A full text representation of the address.
		 * Can provide both a text representation and parts.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Street name, number, direction & P.O. Box etc.
		 * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
		 */
		line?: string[];

		/**
		 * Extension for line
		 **/
		_line?: Element[];

		/**
		 * Name of city, town etc.
		 * The name of the city, town, village or other community or delivery center.
		 */
		city?: string;

		/**
		 * Extension for city
		 **/
		_city?: Element;

		/**
		 * District name (aka county)
		 * The name of the administrative area (county).
		 * District is sometimes known as county, but in some regions 'county' is used in place of city (municipality), so county name should be conveyed in city instead.
		 */
		district?: string;

		/**
		 * Extension for district
		 **/
		_district?: Element;

		/**
		 * Sub-unit of country (abbreviations ok)
		 * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
		 */
		state?: string;

		/**
		 * Extension for state
		 **/
		_state?: Element;

		/**
		 * Postal code for area
		 * A postal code designating a region defined by the postal service.
		 */
		postalCode?: string;

		/**
		 * Extension for postalCode
		 **/
		_postalCode?: Element;

		/**
		 * Country (e.g. can be ISO 3166 2 or 3 letter code)
		 * Country - a nation as commonly understood or generally accepted.
		 * ISO 3166 3 letter codes can be used in place of a full country name.
		 */
		country?: string;

		/**
		 * Extension for country
		 **/
		_country?: Element;

		/**
		 * Time period when address was/is in use
		 * Time period when address was/is in use.
		 */
		period?: Period;
	}

	/**
	 * A duration of time during which an organism (or a process) has existed
	 * A duration of time during which an organism (or a process) has existed.
	 */
	interface Age extends Quantity {
	}

	/**
	 * Text node with attribution
	 * A  text note which also  contains information about who made the statement and when.
	 * For systems that do not have structured annotations, they can simply communicate a single annotation with no author or time.  This element may need to be included in narrative because of the potential for modifying information.  *Annotations SHOULD NOT* be used to communicate "modifying" information that could be computable. (This is a SHOULD because enforcing user behavior is nearly impossible).
	 */
	interface Annotation extends Element {

		/**
		 * Individual responsible for the annotation
		 * The individual responsible for making the annotation.
		 */
		authorReference?: Reference;

		/**
		 * Individual responsible for the annotation
		 * The individual responsible for making the annotation.
		 */
		authorString?: string;

		/**
		 * Extension for authorString
		 **/
		_authorString?: Element;

		/**
		 * When the annotation was made
		 * Indicates when this particular annotation was made.
		 */
		time?: dateTime;

		/**
		 * Extension for time
		 **/
		_time?: Element;

		/**
		 * The annotation  - text content
		 * The text of the annotation.
		 */
		text: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;
	}

	/**
	 * Content in a format defined elsewhere
	 * For referring to data content defined in other formats.
	 * When providing a summary view (for example with Observation.value[x]) Attachment should be represented with a brief display text such as "Attachment".
	 */
	interface Attachment extends Element {

		/**
		 * Mime type of the content, with charset etc.
		 * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
		 */
		contentType?: code;

		/**
		 * Extension for contentType
		 **/
		_contentType?: Element;

		/**
		 * Human language of the content (BCP-47)
		 * The human language of the content. The value can be any valid value according to BCP 47.
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * Data inline, base64ed
		 * The actual data of the attachment - a sequence of bytes. In XML, represented using base64.
		 * The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
		 */
		data?: base64Binary;

		/**
		 * Extension for data
		 **/
		_data?: Element;

		/**
		 * Uri where the data can be found
		 * An alternative location where the data can be accessed.
		 * If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Number of bytes of content (if url provided)
		 * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
		 * The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
		 */
		size?: unsignedInt;

		/**
		 * Extension for size
		 **/
		_size?: Element;

		/**
		 * Hash of the data (sha-1, base64ed)
		 * The calculated hash of the data using SHA-1. Represented using base64.
		 * The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded.
		 */
		hash?: base64Binary;

		/**
		 * Extension for hash
		 **/
		_hash?: Element;

		/**
		 * Label to display in place of the data
		 * A label or set of text to display in place of the data.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Date attachment was first created
		 * The date that the attachment was first created.
		 */
		creation?: dateTime;

		/**
		 * Extension for creation
		 **/
		_creation?: Element;
	}

	/**
	 * Base for elements defined inside a resource
	 * Base definition for all elements that are defined inside a resource - but not those in a data type.
	 */
	interface BackboneElement extends Element {

		/**
		 * Extensions that cannot be ignored
		 * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
		 * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
		 */
		modifierExtension?: Extension[];
	}

	/**
	 * Concept - reference to a terminology or just  text
	 * A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
	 * Not all terminology uses fit this general pattern. In some cases, models should not use CodeableConcept and use Coding directly and provide their own structure for managing text, codings, translations and the relationship between elements and pre- and post-coordination.
	 */
	interface CodeableConcept extends Element {

		/**
		 * Code defined by a terminology system
		 * A reference to a code defined by a terminology system.
		 * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
		 */
		coding?: Coding[];

		/**
		 * Plain text representation of the concept
		 * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
		 * Very often the text is the same as a displayName of one of the codings.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;
	}

	/**
	 * A reference to a code defined by a terminology system
	 * A reference to a code defined by a terminology system.
	 * Codes may be defined very casually in enumerations or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.
	 */
	interface Coding extends Element {

		/**
		 * Identity of the terminology system
		 * The identification of the code system that defines the meaning of the symbol in the code.
		 * The URI may be an OID (urn:oid:...) or a UUID (urn:uuid:...).  OIDs and UUIDs SHALL be references to the HL7 OID registry. Otherwise, the URI should come from HL7's list of FHIR defined special URIs or it should de-reference to some definition that establish the system clearly and unambiguously.
		 */
		system?: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Version of the system - if relevant
		 * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
		 * Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use the date (expressed in FHIR date format) on which that version was officially published as the version date.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Symbol in syntax defined by the system
		 * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
		 */
		code?: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Representation defined by the system
		 * A representation of the meaning of the code in the system, following the rules of the system.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * If this coding was chosen directly by the user
		 * Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays).
		 * Amongst a set of alternatives, a directly chosen code is the most appropriate starting point for new translations. There is some ambiguity about what exactly 'directly chosen' implies, and trading partner agreement may be needed to clarify the use of this element and its consequences more completely.
		 */
		userSelected?: boolean;

		/**
		 * Extension for userSelected
		 **/
		_userSelected?: Element;
	}

	/**
	 * Contact information
	 * Specifies contact information for a person or organization.
	 */
	interface ContactDetail extends Element {

		/**
		 * Name of an individual to contact
		 * The name of an individual to contact.
		 * If there is no named individual, the telecom information is for the organization as a whole.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Contact details for individual or organization
		 * The contact details for the individual (if a name was provided) or the organization.
		 */
		telecom?: ContactPoint[];
	}

	/**
	 * Details of a Technology mediated contact point (phone, fax, email, etc.)
	 * Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
	 */
	interface ContactPoint extends Element {

		/**
		 * phone | fax | email | pager | url | sms | other
		 * Telecommunications form for contact point - what communications system is required to make use of the contact.
		 */
		system?: ContactPointContactPointSystem;

		/**
		 * The actual contact point details
		 * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
		 * Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
		 */
		value?: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;

		/**
		 * home | work | temp | old | mobile - purpose of this contact point
		 * Identifies the purpose for the contact point.
		 * This is labeled as "Is Modifier" because applications should not mistake a temporary or old contact etc.for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
		 */
		use?: ContactPointContactPointUse;

		/**
		 * Specify preferred order of use (1 = highest)
		 * Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.
		 * Note that rank does not necessarily follow the order in which the contacts are represented in the instance.
		 */
		rank?: positiveInt;

		/**
		 * Extension for rank
		 **/
		_rank?: Element;

		/**
		 * Time period when the contact point was/is in use
		 * Time period when the contact point was/is in use.
		 */
		period?: Period;
	}

	/**
	 * Contributor information
	 * A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
	 */
	interface Contributor extends Element {

		/**
		 * author | editor | reviewer | endorser
		 * The type of contributor.
		 */
		type: ContributorContributorType;

		/**
		 * Who contributed the content
		 * The name of the individual or organization responsible for the contribution.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Contact details of the contributor
		 * Contact details to assist a user in finding and communicating with the contributor.
		 */
		contact?: ContactDetail[];
	}

	/**
	 * A measured or measurable amount
	 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
	 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
	 */
	interface Count extends Quantity {
	}

	/**
	 * What codes are expected
	 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
	 */
	interface DataRequirementCodeFilter extends Element {

		/**
		 * The code-valued attribute of the filter
		 * The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
		 */
		path: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * Valueset for the filter
		 * The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
		 */
		valueSetString?: string;

		/**
		 * Extension for valueSetString
		 **/
		_valueSetString?: Element;

		/**
		 * Valueset for the filter
		 * The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
		 */
		valueSetReference?: Reference;

		/**
		 * What code is expected
		 * The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.
		 */
		valueCode?: code[];

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element[];

		/**
		 * What Coding is expected
		 * The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.
		 */
		valueCoding?: Coding[];

		/**
		 * What CodeableConcept is expected
		 * The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.
		 */
		valueCodeableConcept?: CodeableConcept[];
	}

	/**
	 * What dates/date ranges are expected
	 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.
	 */
	interface DataRequirementDateFilter extends Element {

		/**
		 * The date-valued attribute of the filter
		 * The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.
		 */
		path: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * The value of the filter, as a Period, DateTime, or Duration value
		 * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
		 */
		valueDateTime?: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * The value of the filter, as a Period, DateTime, or Duration value
		 * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
		 */
		valuePeriod?: Period;

		/**
		 * The value of the filter, as a Period, DateTime, or Duration value
		 * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
		 */
		valueDuration?: Duration;
	}

	/**
	 * Describes a required data item
	 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
	 */
	interface DataRequirement extends Element {

		/**
		 * The type of the required data
		 * The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
		 */
		type: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * The profile of the required data
		 * The profile of the required data, specified as the uri of the profile definition.
		 */
		profile?: uri[];

		/**
		 * Extension for profile
		 **/
		_profile?: Element[];

		/**
		 * Indicates that specific structure elements are referenced by the knowledge module
		 * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported.
		 */
		mustSupport?: string[];

		/**
		 * Extension for mustSupport
		 **/
		_mustSupport?: Element[];

		/**
		 * What codes are expected
		 * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
		 */
		codeFilter?: DataRequirementCodeFilter[];

		/**
		 * What dates/date ranges are expected
		 * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.
		 */
		dateFilter?: DataRequirementDateFilter[];
	}

	/**
	 * A length - a value with a unit that is a physical distance
	 * A length - a value with a unit that is a physical distance.
	 */
	interface Distance extends Quantity {
	}

	/**
	 * How the medication is/was taken or should be taken
	 * Indicates how the medication is/was taken or should be taken by the patient.
	 */
	interface Dosage extends Element {

		/**
		 * The order of the dosage instructions
		 * Indicates the order in which the dosage instructions should be applied or interpreted.
		 */
		sequence?: integer;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Free text dosage instructions e.g. SIG
		 * Free text dosage instructions e.g. SIG.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Supplemental instruction - e.g. "with meals"
		 * Supplemental instruction - e.g. "with meals".
		 */
		additionalInstruction?: CodeableConcept[];

		/**
		 * Patient or consumer oriented instructions
		 * Instructions in terms that are understood by the patient or consumer.
		 */
		patientInstruction?: string;

		/**
		 * Extension for patientInstruction
		 **/
		_patientInstruction?: Element;

		/**
		 * When medication should be administered
		 * When medication should be administered.
		 * This attribute may not always be populated while the Dosage.text is expected to be populated.  If both are populated, then the Dosage.text should reflect the content of the Dosage.timing.
		 */
		timing?: Timing;

		/**
		 * Take "as needed" (for x)
		 * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
		 * Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".
		 */
		asNeededBoolean?: boolean;

		/**
		 * Extension for asNeededBoolean
		 **/
		_asNeededBoolean?: Element;

		/**
		 * Take "as needed" (for x)
		 * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
		 * Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".
		 */
		asNeededCodeableConcept?: CodeableConcept;

		/**
		 * Body site to administer to
		 * Body site to administer to.
		 * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
		 */
		site?: CodeableConcept;

		/**
		 * How drug should enter body
		 * How drug should enter body.
		 */
		route?: CodeableConcept;

		/**
		 * Technique for administering medication
		 * Technique for administering medication.
		 * Terminologies used often pre-coordinate this term with the route and or form of administration.
		 */
		method?: CodeableConcept;

		/**
		 * Amount of medication per dose
		 * Amount of medication per dose.
		 * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
		 */
		doseRange?: Range;

		/**
		 * Amount of medication per dose
		 * Amount of medication per dose.
		 * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
		 */
		doseQuantity?: SimpleQuantity;

		/**
		 * Upper limit on medication per unit of time
		 * Upper limit on medication per unit of time.
		 * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example "2 tablets every 4 hours to a maximum of 8/day".
		 */
		maxDosePerPeriod?: Ratio;

		/**
		 * Upper limit on medication per administration
		 * Upper limit on medication per administration.
		 * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example, a body surface area related dose with a maximum amount, such as 1.5 mg/m2 (maximum 2 mg) IV over 5 – 10 minutes would have doseQuantity of 1.5 mg/m2 and maxDosePerAdministration of 2 mg.
		 */
		maxDosePerAdministration?: SimpleQuantity;

		/**
		 * Upper limit on medication per lifetime of the patient
		 * Upper limit on medication per lifetime of the patient.
		 */
		maxDosePerLifetime?: SimpleQuantity;

		/**
		 * Amount of medication per unit of time
		 * Amount of medication per unit of time.
		 * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
		 */
		rateRatio?: Ratio;

		/**
		 * Amount of medication per unit of time
		 * Amount of medication per unit of time.
		 * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
		 */
		rateRange?: Range;

		/**
		 * Amount of medication per unit of time
		 * Amount of medication per unit of time.
		 * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
		 */
		rateQuantity?: SimpleQuantity;
	}

	/**
	 * A length of time
	 * A length of time.
	 */
	interface Duration extends Quantity {
	}

	/**
	 * Base for all elements
	 * Base definition for all elements in a resource.
	 */
	interface Element {

		/**
		 * xml:id (or equivalent in JSON)
		 * unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
		 */
		id?: string;

		/**
		 * Extension for id
		 **/
		_id?: Element;

		/**
		 * Additional Content defined by implementations
		 * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
		 * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
		 */
		extension?: Extension[];
	}

	/**
	 * Element values that are used to distinguish the slices
	 * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
	 * If there is no discriminator, the content is hard to process, so this should be avoided. If the base element has a cardinality of ..1, and there is a choice of types, the discriminator must be "@type".
	 */
	interface ElementDefinitionSlicingDiscriminator extends Element {

		/**
		 * value | exists | pattern | type | profile
		 * How the element value is interpreted when discrimination is evaluated.
		 */
		type: ElementDefinitionDiscriminatorType;

		/**
		 * Path to element value
		 * A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based.
		 * The only FHIRPath functions that are allowed are resolve(), and extension(url).
		 */
		path: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;
	}

	/**
	 * This element is sliced - slices follow
	 * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
	 */
	interface ElementDefinitionSlicing extends Element {

		/**
		 * Element values that are used to distinguish the slices
		 * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
		 * If there is no discriminator, the content is hard to process, so this should be avoided. If the base element has a cardinality of ..1, and there is a choice of types, the discriminator must be "@type".
		 */
		discriminator?: ElementDefinitionSlicingDiscriminator[];

		/**
		 * Text description of how slicing works (or not)
		 * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
		 * If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * If elements must be in same order as slices
		 * If the matching elements have to occur in the same order as defined in the profile.
		 * Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.
		 */
		ordered?: boolean;

		/**
		 * Extension for ordered
		 **/
		_ordered?: Element;

		/**
		 * closed | open | openAtEnd
		 * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
		 * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
		 */
		rules: ElementDefinitionSlicingRules;
	}

	/**
	 * Base definition information for tools
	 * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.
	 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. So they are deformalised into this location for tooling convenience, and to ensure that the base information is available without dependencies.
	 */
	interface ElementDefinitionBase extends Element {

		/**
		 * Path that identifies the base element
		 * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
		 */
		path: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * Min cardinality of the base element
		 * Minimum cardinality of the base element identified by the path.
		 * This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).
		 */
		min: unsignedInt;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Max cardinality of the base element
		 * Maximum cardinality of the base element identified by the path.
		 * This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max > 1. Also, some forms of code generation may differ.
		 */
		max: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;
	}

	/**
	 * Data type and Profile for this element
	 * The data type or resource that the value of this element is permitted to be.
	 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
	 */
	interface ElementDefinitionType extends Element {

		/**
		 * Data type or Resource (reference to definition)
		 * URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
		 * If the element is a reference to another resource, this element contains "Reference", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient). There would be one pair of type/code for each allowed target resource type.
		 */
		code: uri;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Profile (StructureDefinition) to apply (or IG)
		 * Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
		 */
		profile?: uri;

		/**
		 * Extension for profile
		 **/
		_profile?: Element;

		/**
		 * Profile (StructureDefinition) to apply to reference target (or IG)
		 * Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
		 */
		targetProfile?: uri;

		/**
		 * Extension for targetProfile
		 **/
		_targetProfile?: Element;

		/**
		 * contained | referenced | bundled - how aggregated
		 * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
		 */
		aggregation?: ElementDefinitionAggregationMode[];

		/**
		 * either | independent | specific
		 * Whether this reference needs to be version specific or version independent, or whether either can be used.
		 * The base specification never makes a rule as to which form is allowed, but implementation guides may do this.
		 */
		versioning?: ElementDefinitionReferenceVersionRules;
	}

	/**
	 * Example value (as defined for type)
	 * A sample value for this element demonstrating the type of information that would typically be found in the element.
	 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
	 */
	interface ElementDefinitionExample extends Element {

		/**
		 * Describes the purpose of this example
		 * Describes the purpose of this example amoung the set of examples.
		 */
		label: string;

		/**
		 * Extension for label
		 **/
		_label?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueBase64Binary: base64Binary;

		/**
		 * Extension for valueBase64Binary
		 **/
		_valueBase64Binary?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueBoolean: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueCode: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueDate: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueDateTime: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueDecimal: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueId: id;

		/**
		 * Extension for valueId
		 **/
		_valueId?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueInstant: instant;

		/**
		 * Extension for valueInstant
		 **/
		_valueInstant?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueInteger: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueMarkdown: markdown;

		/**
		 * Extension for valueMarkdown
		 **/
		_valueMarkdown?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueOid: oid;

		/**
		 * Extension for valueOid
		 **/
		_valueOid?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valuePositiveInt: positiveInt;

		/**
		 * Extension for valuePositiveInt
		 **/
		_valuePositiveInt?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueString: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueTime: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueUnsignedInt: unsignedInt;

		/**
		 * Extension for valueUnsignedInt
		 **/
		_valueUnsignedInt?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueUri: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueAddress: Address;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueAge: Age;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueAnnotation: Annotation;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueAttachment: Attachment;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueCodeableConcept: CodeableConcept;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueCoding: Coding;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueContactPoint: ContactPoint;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueCount: Count;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueDistance: Distance;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueDuration: Duration;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueHumanName: HumanName;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueIdentifier: Identifier;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueMoney: Money;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valuePeriod: Period;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueQuantity: Quantity;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueRange: Range;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueRatio: Ratio;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueReference: Reference;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueSampledData: SampledData;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueSignature: Signature;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueTiming: Timing;

		/**
		 * Value of Example (one of allowed types)
		 * The actual value for the element, which must be one of the types allowed for this element.
		 */
		valueMeta: Meta;
	}

	/**
	 * Condition that must evaluate to true
	 * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
	 */
	interface ElementDefinitionConstraint extends Element {

		/**
		 * Target of 'condition' reference above
		 * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
		 */
		key: id;

		/**
		 * Extension for key
		 **/
		_key?: Element;

		/**
		 * Why this constraint is necessary or appropriate
		 * Description of why this constraint is necessary or appropriate.
		 * To be used if the reason for the constraint may not be intuitive to all implementers.
		 */
		requirements?: string;

		/**
		 * Extension for requirements
		 **/
		_requirements?: Element;

		/**
		 * error | warning
		 * Identifies the impact constraint violation has on the conformance of the instance.
		 * This allows constraints to be asserted as "shall" (error) and "should" (warning).
		 */
		severity: ElementDefinitionConstraintSeverity;

		/**
		 * Human description of constraint
		 * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
		 * Should be expressed in business terms as much as possible.
		 */
		human: string;

		/**
		 * Extension for human
		 **/
		_human?: Element;

		/**
		 * FHIRPath expression of constraint
		 * A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met.
		 */
		expression: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;

		/**
		 * XPath expression of constraint
		 * An XPath expression of constraint that can be executed to see if this constraint is met.
		 * Elements SHALL use "f" as the namespace prefix for the FHIR namespace, and "x" for the xhtml namespace, and SHALL NOT use any other prefixes. 

Note: we are considering deprecating the xpath element. Implementer feedback is welcome.
		 */
		xpath?: string;

		/**
		 * Extension for xpath
		 **/
		_xpath?: Element;

		/**
		 * Reference to original source of constraint
		 * A reference to the original source of the constraint, for traceability purposes.
		 * This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.
		 */
		source?: uri;

		/**
		 * Extension for source
		 **/
		_source?: Element;
	}

	/**
	 * ValueSet details if this is coded
	 * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
	 */
	interface ElementDefinitionBinding extends Element {

		/**
		 * required | extensible | preferred | example
		 * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
		 * For further discussion, see [Using Terminologies](terminologies.html).
		 */
		strength: ElementDefinitionBindingStrength;

		/**
		 * Human explanation of the value set
		 * Describes the intended use of this particular set of codes.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Source of value set
		 * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.
		 * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
		 */
		valueSetUri?: uri;

		/**
		 * Extension for valueSetUri
		 **/
		_valueSetUri?: Element;

		/**
		 * Source of value set
		 * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.
		 * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
		 */
		valueSetReference?: Reference;
	}

	/**
	 * Map element to another set of definitions
	 * Identifies a concept from an external specification that roughly corresponds to this element.
	 * Mappings are not necessarily specific enough for safe translation.
	 */
	interface ElementDefinitionMapping extends Element {

		/**
		 * Reference to mapping declaration
		 * An internal reference to the definition of a mapping.
		 */
		identity: id;

		/**
		 * Extension for identity
		 **/
		_identity?: Element;

		/**
		 * Computable language of mapping
		 * Identifies the computable language in which mapping.map is expressed.
		 * If omitted, then there can be no expectation of computational interpretation of the mapping.
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * Details of the mapping
		 * Expresses what part of the target specification corresponds to this element.
		 * For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.
		 */
		map: string;

		/**
		 * Extension for map
		 **/
		_map?: Element;

		/**
		 * Comments about the mapping or its use
		 * Comments that provide information about the mapping or its use.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * Definition of an element in a resource or extension
	 * Captures constraints on each element within the resource, profile, or extension.
	 */
	interface ElementDefinition extends Element {

		/**
		 * Path of the element in the hierarchy of elements
		 * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
		 */
		path: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * xmlAttr | xmlText | typeAttr | cdaText | xhtml
		 * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
		 * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc).
		 */
		representation?: ElementDefinitionPropertyRepresentation[];

		/**
		 * Name for this particular element (in a set of slices)
		 * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
		 * The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).
		 */
		sliceName?: string;

		/**
		 * Extension for sliceName
		 **/
		_sliceName?: Element;

		/**
		 * Name for element to display with or prompt for element
		 * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
		 * See also the extension (http://hl7.org/fhir/StructureDefinition/elementdefinition-question)[extension-elementdefinition-question.html].
		 */
		label?: string;

		/**
		 * Extension for label
		 **/
		_label?: Element;

		/**
		 * Corresponding codes in terminologies
		 * A code that has the same meaning as the element in a particular terminology.
		 * The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.
		 */
		code?: Coding[];

		/**
		 * This element is sliced - slices follow
		 * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
		 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
		 */
		slicing?: ElementDefinitionSlicing;

		/**
		 * Concise definition for space-constrained presentation
		 * A concise description of what this element means (e.g. for use in autogenerated summaries).
		 * May change the term to provide language more appropriate to the context of the profile or to reflect slicing.
		 */
		short?: string;

		/**
		 * Extension for short
		 **/
		_short?: Element;

		/**
		 * Full formal definition as narrative text
		 * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
		 * It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions.
		 */
		definition?: markdown;

		/**
		 * Extension for definition
		 **/
		_definition?: Element;

		/**
		 * Comments about the use of this element
		 * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
		 * If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.
		 */
		comment?: markdown;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * Why this resource has been created
		 * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
		 * This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.
		 */
		requirements?: markdown;

		/**
		 * Extension for requirements
		 **/
		_requirements?: Element;

		/**
		 * Other names
		 * Identifies additional names by which this element might also be known.
		 */
		alias?: string[];

		/**
		 * Extension for alias
		 **/
		_alias?: Element[];

		/**
		 * Minimum Cardinality
		 * The minimum number of times this element SHALL appear in the instance.
		 */
		min?: unsignedInt;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Maximum Cardinality (a number or *)
		 * The maximum number of times this element is permitted to appear in the instance.
		 */
		max?: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;

		/**
		 * Base definition information for tools
		 * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.
		 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. So they are deformalised into this location for tooling convenience, and to ensure that the base information is available without dependencies.
		 */
		base?: ElementDefinitionBase;

		/**
		 * Reference to definition of content for the element
		 * Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.
		 */
		contentReference?: uri;

		/**
		 * Extension for contentReference
		 **/
		_contentReference?: Element;

		/**
		 * Data type and Profile for this element
		 * The data type or resource that the value of this element is permitted to be.
		 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
		 */
		type?: ElementDefinitionType[];

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueBase64Binary?: base64Binary;

		/**
		 * Extension for defaultValueBase64Binary
		 **/
		_defaultValueBase64Binary?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueBoolean?: boolean;

		/**
		 * Extension for defaultValueBoolean
		 **/
		_defaultValueBoolean?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueCode?: code;

		/**
		 * Extension for defaultValueCode
		 **/
		_defaultValueCode?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueDate?: date;

		/**
		 * Extension for defaultValueDate
		 **/
		_defaultValueDate?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueDateTime?: dateTime;

		/**
		 * Extension for defaultValueDateTime
		 **/
		_defaultValueDateTime?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueDecimal?: decimal;

		/**
		 * Extension for defaultValueDecimal
		 **/
		_defaultValueDecimal?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueId?: id;

		/**
		 * Extension for defaultValueId
		 **/
		_defaultValueId?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueInstant?: instant;

		/**
		 * Extension for defaultValueInstant
		 **/
		_defaultValueInstant?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueInteger?: integer;

		/**
		 * Extension for defaultValueInteger
		 **/
		_defaultValueInteger?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueMarkdown?: markdown;

		/**
		 * Extension for defaultValueMarkdown
		 **/
		_defaultValueMarkdown?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueOid?: oid;

		/**
		 * Extension for defaultValueOid
		 **/
		_defaultValueOid?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValuePositiveInt?: positiveInt;

		/**
		 * Extension for defaultValuePositiveInt
		 **/
		_defaultValuePositiveInt?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueString?: string;

		/**
		 * Extension for defaultValueString
		 **/
		_defaultValueString?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueTime?: time;

		/**
		 * Extension for defaultValueTime
		 **/
		_defaultValueTime?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueUnsignedInt?: unsignedInt;

		/**
		 * Extension for defaultValueUnsignedInt
		 **/
		_defaultValueUnsignedInt?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueUri?: uri;

		/**
		 * Extension for defaultValueUri
		 **/
		_defaultValueUri?: Element;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueAddress?: Address;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueAge?: Age;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueAnnotation?: Annotation;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueAttachment?: Attachment;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueCodeableConcept?: CodeableConcept;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueCoding?: Coding;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueContactPoint?: ContactPoint;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueCount?: Count;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueDistance?: Distance;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueDuration?: Duration;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueHumanName?: HumanName;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueIdentifier?: Identifier;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueMoney?: Money;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValuePeriod?: Period;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueQuantity?: Quantity;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueRange?: Range;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueRatio?: Ratio;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueReference?: Reference;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueSampledData?: SampledData;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueSignature?: Signature;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueTiming?: Timing;

		/**
		 * Specified value if missing from instance
		 * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
		 * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
		 */
		defaultValueMeta?: Meta;

		/**
		 * Implicit meaning when this element is missing
		 * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
		 * Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.
		 */
		meaningWhenMissing?: markdown;

		/**
		 * Extension for meaningWhenMissing
		 **/
		_meaningWhenMissing?: Element;

		/**
		 * What the order of the elements means
		 * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
		 * This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.
		 */
		orderMeaning?: string;

		/**
		 * Extension for orderMeaning
		 **/
		_orderMeaning?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedBase64Binary?: base64Binary;

		/**
		 * Extension for fixedBase64Binary
		 **/
		_fixedBase64Binary?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedBoolean?: boolean;

		/**
		 * Extension for fixedBoolean
		 **/
		_fixedBoolean?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedCode?: code;

		/**
		 * Extension for fixedCode
		 **/
		_fixedCode?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedDate?: date;

		/**
		 * Extension for fixedDate
		 **/
		_fixedDate?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedDateTime?: dateTime;

		/**
		 * Extension for fixedDateTime
		 **/
		_fixedDateTime?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedDecimal?: decimal;

		/**
		 * Extension for fixedDecimal
		 **/
		_fixedDecimal?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedId?: id;

		/**
		 * Extension for fixedId
		 **/
		_fixedId?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedInstant?: instant;

		/**
		 * Extension for fixedInstant
		 **/
		_fixedInstant?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedInteger?: integer;

		/**
		 * Extension for fixedInteger
		 **/
		_fixedInteger?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedMarkdown?: markdown;

		/**
		 * Extension for fixedMarkdown
		 **/
		_fixedMarkdown?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedOid?: oid;

		/**
		 * Extension for fixedOid
		 **/
		_fixedOid?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedPositiveInt?: positiveInt;

		/**
		 * Extension for fixedPositiveInt
		 **/
		_fixedPositiveInt?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedString?: string;

		/**
		 * Extension for fixedString
		 **/
		_fixedString?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedTime?: time;

		/**
		 * Extension for fixedTime
		 **/
		_fixedTime?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedUnsignedInt?: unsignedInt;

		/**
		 * Extension for fixedUnsignedInt
		 **/
		_fixedUnsignedInt?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedUri?: uri;

		/**
		 * Extension for fixedUri
		 **/
		_fixedUri?: Element;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedAddress?: Address;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedAge?: Age;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedAnnotation?: Annotation;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedAttachment?: Attachment;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedCodeableConcept?: CodeableConcept;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedCoding?: Coding;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedContactPoint?: ContactPoint;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedCount?: Count;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedDistance?: Distance;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedDuration?: Duration;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedHumanName?: HumanName;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedIdentifier?: Identifier;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedMoney?: Money;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedPeriod?: Period;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedQuantity?: Quantity;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedRange?: Range;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedRatio?: Ratio;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedReference?: Reference;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedSampledData?: SampledData;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedSignature?: Signature;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedTiming?: Timing;

		/**
		 * Value must be exactly this
		 * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
		 * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
		 */
		fixedMeta?: Meta;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternBase64Binary?: base64Binary;

		/**
		 * Extension for patternBase64Binary
		 **/
		_patternBase64Binary?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternBoolean?: boolean;

		/**
		 * Extension for patternBoolean
		 **/
		_patternBoolean?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternCode?: code;

		/**
		 * Extension for patternCode
		 **/
		_patternCode?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternDate?: date;

		/**
		 * Extension for patternDate
		 **/
		_patternDate?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternDateTime?: dateTime;

		/**
		 * Extension for patternDateTime
		 **/
		_patternDateTime?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternDecimal?: decimal;

		/**
		 * Extension for patternDecimal
		 **/
		_patternDecimal?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternId?: id;

		/**
		 * Extension for patternId
		 **/
		_patternId?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternInstant?: instant;

		/**
		 * Extension for patternInstant
		 **/
		_patternInstant?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternInteger?: integer;

		/**
		 * Extension for patternInteger
		 **/
		_patternInteger?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternMarkdown?: markdown;

		/**
		 * Extension for patternMarkdown
		 **/
		_patternMarkdown?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternOid?: oid;

		/**
		 * Extension for patternOid
		 **/
		_patternOid?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternPositiveInt?: positiveInt;

		/**
		 * Extension for patternPositiveInt
		 **/
		_patternPositiveInt?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternString?: string;

		/**
		 * Extension for patternString
		 **/
		_patternString?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternTime?: time;

		/**
		 * Extension for patternTime
		 **/
		_patternTime?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternUnsignedInt?: unsignedInt;

		/**
		 * Extension for patternUnsignedInt
		 **/
		_patternUnsignedInt?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternUri?: uri;

		/**
		 * Extension for patternUri
		 **/
		_patternUri?: Element;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternAddress?: Address;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternAge?: Age;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternAnnotation?: Annotation;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternAttachment?: Attachment;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternCodeableConcept?: CodeableConcept;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternCoding?: Coding;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternContactPoint?: ContactPoint;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternCount?: Count;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternDistance?: Distance;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternDuration?: Duration;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternHumanName?: HumanName;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternIdentifier?: Identifier;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternMoney?: Money;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternPeriod?: Period;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternQuantity?: Quantity;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternRange?: Range;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternRatio?: Ratio;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternReference?: Reference;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternSampledData?: SampledData;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternSignature?: Signature;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternTiming?: Timing;

		/**
		 * Value must have at least these property values
		 * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
		 * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
		 */
		patternMeta?: Meta;

		/**
		 * Example value (as defined for type)
		 * A sample value for this element demonstrating the type of information that would typically be found in the element.
		 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
		 */
		example?: ElementDefinitionExample[];

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueDate?: date;

		/**
		 * Extension for minValueDate
		 **/
		_minValueDate?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueDateTime?: dateTime;

		/**
		 * Extension for minValueDateTime
		 **/
		_minValueDateTime?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueInstant?: instant;

		/**
		 * Extension for minValueInstant
		 **/
		_minValueInstant?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueTime?: time;

		/**
		 * Extension for minValueTime
		 **/
		_minValueTime?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueDecimal?: decimal;

		/**
		 * Extension for minValueDecimal
		 **/
		_minValueDecimal?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueInteger?: integer;

		/**
		 * Extension for minValueInteger
		 **/
		_minValueInteger?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValuePositiveInt?: positiveInt;

		/**
		 * Extension for minValuePositiveInt
		 **/
		_minValuePositiveInt?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueUnsignedInt?: unsignedInt;

		/**
		 * Extension for minValueUnsignedInt
		 **/
		_minValueUnsignedInt?: Element;

		/**
		 * Minimum Allowed Value (for some types)
		 * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
		 */
		minValueQuantity?: Quantity;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueDate?: date;

		/**
		 * Extension for maxValueDate
		 **/
		_maxValueDate?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueDateTime?: dateTime;

		/**
		 * Extension for maxValueDateTime
		 **/
		_maxValueDateTime?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueInstant?: instant;

		/**
		 * Extension for maxValueInstant
		 **/
		_maxValueInstant?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueTime?: time;

		/**
		 * Extension for maxValueTime
		 **/
		_maxValueTime?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueDecimal?: decimal;

		/**
		 * Extension for maxValueDecimal
		 **/
		_maxValueDecimal?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueInteger?: integer;

		/**
		 * Extension for maxValueInteger
		 **/
		_maxValueInteger?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValuePositiveInt?: positiveInt;

		/**
		 * Extension for maxValuePositiveInt
		 **/
		_maxValuePositiveInt?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueUnsignedInt?: unsignedInt;

		/**
		 * Extension for maxValueUnsignedInt
		 **/
		_maxValueUnsignedInt?: Element;

		/**
		 * Maximum Allowed Value (for some types)
		 * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
		 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
		 */
		maxValueQuantity?: Quantity;

		/**
		 * Max length for strings
		 * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
		 * Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.
		 */
		maxLength?: integer;

		/**
		 * Extension for maxLength
		 **/
		_maxLength?: Element;

		/**
		 * Reference to invariant about presence
		 * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
		 */
		condition?: id[];

		/**
		 * Extension for condition
		 **/
		_condition?: Element[];

		/**
		 * Condition that must evaluate to true
		 * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
		 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
		 */
		constraint?: ElementDefinitionConstraint[];

		/**
		 * If the element must supported
		 * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported.
		 * "Something useful" is context dependent and impossible to describe in the base FHIR specification. For this reason, tue mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles. 

This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of "support" is required, as this can mean many things.

Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.
		 */
		mustSupport?: boolean;

		/**
		 * Extension for mustSupport
		 **/
		_mustSupport?: Element;

		/**
		 * If this modifies the meaning of other elements
		 * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
		 * Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles. An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.
		 */
		isModifier?: boolean;

		/**
		 * Extension for isModifier
		 **/
		_isModifier?: Element;

		/**
		 * Include when _summary = true?
		 * Whether the element should be included if a client requests a search with the parameter _summary=true.
		 * Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance, so servers may not support per-profile use of the isSummary flag. When a request is made with _summary=true, serailisers only include elements marked as 'isSummary = true'. Other than Attachment.data, all data type properties are included in the summary form. Modifier elements or elements with minimum cardinality = 1 must be marked as summary elements.
		 */
		isSummary?: boolean;

		/**
		 * Extension for isSummary
		 **/
		_isSummary?: Element;

		/**
		 * ValueSet details if this is coded
		 * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
		 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
		 */
		binding?: ElementDefinitionBinding;

		/**
		 * Map element to another set of definitions
		 * Identifies a concept from an external specification that roughly corresponds to this element.
		 * Mappings are not necessarily specific enough for safe translation.
		 */
		mapping?: ElementDefinitionMapping[];
	}

	/**
	 * Optional Extensions Element
	 * Optional Extension Element - found in all resources.
	 */
	interface Extension extends Element {

		/**
		 * identifies the meaning of the extension
		 * Source of the definition for the extension code - a logical name or a URL.
		 * The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueBase64Binary?: base64Binary;

		/**
		 * Extension for valueBase64Binary
		 **/
		_valueBase64Binary?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueBoolean?: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueCode?: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueDate?: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueDateTime?: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueDecimal?: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueId?: id;

		/**
		 * Extension for valueId
		 **/
		_valueId?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueInstant?: instant;

		/**
		 * Extension for valueInstant
		 **/
		_valueInstant?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueInteger?: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueMarkdown?: markdown;

		/**
		 * Extension for valueMarkdown
		 **/
		_valueMarkdown?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueOid?: oid;

		/**
		 * Extension for valueOid
		 **/
		_valueOid?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valuePositiveInt?: positiveInt;

		/**
		 * Extension for valuePositiveInt
		 **/
		_valuePositiveInt?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueTime?: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueUnsignedInt?: unsignedInt;

		/**
		 * Extension for valueUnsignedInt
		 **/
		_valueUnsignedInt?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueUri?: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueAddress?: Address;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueAge?: Age;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueAnnotation?: Annotation;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueAttachment?: Attachment;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueCodeableConcept?: CodeableConcept;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueCoding?: Coding;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueContactPoint?: ContactPoint;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueCount?: Count;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueDistance?: Distance;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueDuration?: Duration;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueHumanName?: HumanName;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueIdentifier?: Identifier;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueMoney?: Money;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valuePeriod?: Period;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueQuantity?: Quantity;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueRange?: Range;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueRatio?: Ratio;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueReference?: Reference;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueSampledData?: SampledData;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueSignature?: Signature;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueTiming?: Timing;

		/**
		 * Value of extension
		 * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
		 */
		valueMeta?: Meta;
	}

	/**
	 * Name of a human - parts and usage
	 * A human's name with the ability to identify parts and usage.
	 * Names may be changed, or repudiated, or people may have different names in different contexts. Names may be divided into parts of different type that have variable significance depending on context, though the division into parts does not always matter. With personal names, the different parts may or may not be imbued with some implicit meaning; various cultures associate different importance with the name parts and the degree to which systems must care about name parts around the world varies widely.
	 */
	interface HumanName extends Element {

		/**
		 * usual | official | temp | nickname | anonymous | old | maiden
		 * Identifies the purpose for this name.
		 * This is labeled as "Is Modifier" because applications should not mistake a temporary or old name etc.for a current/permanent one. Applications can assume that a name is current unless it explicitly says that it is temporary or old.
		 */
		use?: HumanNameNameUse;

		/**
		 * Text representation of the full name
		 * A full text representation of the name.
		 * Can provide both a text representation and structured parts.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Family name (often called 'Surname')
		 * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
		 * Family Name may be decomposed into specific parts using extensions (de, nl, es related cultures).
		 */
		family?: string;

		/**
		 * Extension for family
		 **/
		_family?: Element;

		/**
		 * Given names (not always 'first'). Includes middle names
		 * Given name.
		 * If only initials are recorded, they may be used in place of the full name.  Not called "first name" since given names do not always come first.
		 */
		given?: string[];

		/**
		 * Extension for given
		 **/
		_given?: Element[];

		/**
		 * Parts that come before the name
		 * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
		 */
		prefix?: string[];

		/**
		 * Extension for prefix
		 **/
		_prefix?: Element[];

		/**
		 * Parts that come after the name
		 * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
		 */
		suffix?: string[];

		/**
		 * Extension for suffix
		 **/
		_suffix?: Element[];

		/**
		 * Time period when name was/is in use
		 * Indicates the period of time when this name was valid for the named person.
		 */
		period?: Period;
	}

	/**
	 * An identifier intended for computation
	 * A technical identifier - identifies some entity uniquely and unambiguously.
	 */
	interface Identifier extends Element {

		/**
		 * usual | official | temp | secondary (If known)
		 * The purpose of this identifier.
		 * This is labeled as "Is Modifier" because applications should not mistake a temporary id for a permanent one. Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
		 */
		use?: IdentifierIdentifierUse;

		/**
		 * Description of identifier
		 * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
		 * This element deals only with general categories of identifiers.  It SHOULD not be used for codes that correspond 1..1 with the Identifier.system. Some identifiers may fall into multiple categories due to common usage. 

Where the system is known, a type is unnecessary because the type is always part of the system definition. However systems often need to handle identifiers where the system is not known. There is not a 1:1 relationship between type and system, since many different systems have the same type.
		 */
		type?: CodeableConcept;

		/**
		 * The namespace for the identifier value
		 * Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
		 */
		system?: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * The value that is unique
		 * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
		 * If the value is a full URI, then the system SHALL be urn:ietf:rfc:3986.  The value's primary purpose is computational mapping.  As a result, it may be normalized for comparison purposes (e.g. removing non-significant whitespace, dashes, etc.)  A value formatted for human display can be conveyed using the [Rendered Value extension](extension-rendered-value.html).
		 */
		value?: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;

		/**
		 * Time period when id is/was valid for use
		 * Time period during which identifier is/was valid for use.
		 */
		period?: Period;

		/**
		 * Organization that issued id (may be just text)
		 * Organization that issued/manages the identifier.
		 * The Identifier.assigner may omit the .reference element and only contain a .display element reflecting the name or other textual information about the assigning organization.
		 */
		assigner?: Reference;
	}

	/**
	 * Metadata about a resource
	 * The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
	 */
	interface Meta extends Element {

		/**
		 * Version specific identifier
		 * The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
		 * The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
		 */
		versionId?: id;

		/**
		 * Extension for versionId
		 **/
		_versionId?: Element;

		/**
		 * When the resource version last changed
		 * When the resource last changed - e.g. when the version changed.
		 * This value is always populated except when the resource is first being created. The server / resource manager sets this value; what a client provides is irrelevant.
		 */
		lastUpdated?: instant;

		/**
		 * Extension for lastUpdated
		 **/
		_lastUpdated?: Element;

		/**
		 * Profiles this resource claims to conform to
		 * A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url]().
		 * It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
		 */
		profile?: uri[];

		/**
		 * Extension for profile
		 **/
		_profile?: Element[];

		/**
		 * Security Labels applied to this resource
		 * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
		 * The security labels can be updated without changing the stated version of the resource  The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
		 */
		security?: Coding[];

		/**
		 * Tags applied to this resource
		 * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
		 * The tags can be updated without changing the stated version of the resource.  The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
		 */
		tag?: Coding[];
	}

	/**
	 * An amount of economic utility in some recognized currency
	 * An amount of economic utility in some recognized currency.
	 */
	interface Money extends Quantity {
	}

	/**
	 * A human-readable formatted text, including images
	 * A human-readable formatted text, including images.
	 */
	interface Narrative extends Element {

		/**
		 * generated | extensions | additional | empty
		 * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
		 */
		status: NarrativeNarrativeStatus;

		/**
		 * Limited xhtml content
		 * The actual narrative content, a stripped down version of XHTML.
		 * The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, <a> elements (either name or href), images and internally contained stylesheets. The XHTML content may not contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.
		 */
		div: xhtml;

		/**
		 * Extension for div
		 **/
		_div?: Element;
	}

	/**
	 * Definition of a parameter to a module
	 * The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
	 */
	interface ParameterDefinition extends Element {

		/**
		 * Name used to access the parameter value
		 * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
		 */
		name?: code;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * in | out
		 * Whether the parameter is input or output for the module.
		 */
		use: ParameterDefinitionParameterUse;

		/**
		 * Minimum cardinality
		 * The minimum number of times this parameter SHALL appear in the request or response.
		 */
		min?: integer;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Maximum cardinality (a number of *)
		 * The maximum number of times this element is permitted to appear in the request or response.
		 */
		max?: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;

		/**
		 * A brief description of the parameter
		 * A brief discussion of what the parameter is for and how it is used by the module.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * What type of value
		 * The type of the parameter.
		 */
		type: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * What profile the value is expected to be
		 * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
		 */
		profile?: Reference;
	}

	/**
	 * Time range defined by start and end date/time
	 * A time period defined by a start and end date and optionally time.
	 * This is not a duration - that's a measure of time (a separate type), but a duration that occurs at a fixed value of time. A Period specifies a range of time; the context of use will specify whether the entire range applies (e.g. "the patient was an inpatient of the hospital for this time range") or one value from the range applies (e.g. "give to the patient between these two times"). If duration is required, specify the type as Interval|Duration.
	 */
	interface Period extends Element {

		/**
		 * Starting time with inclusive boundary
		 * The start of the period. The boundary is inclusive.
		 * If the low element is missing, the meaning is that the low boundary is not known.
		 */
		start?: dateTime;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * End time with inclusive boundary, if not ongoing
		 * The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
		 * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has a end value of 2012-02-03.
		 */
		end?: dateTime;

		/**
		 * Extension for end
		 **/
		_end?: Element;
	}

	/**
	 * A measured or measurable amount
	 * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
	 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
	 */
	interface Quantity extends Element {

		/**
		 * Numerical value (with implicit precision)
		 * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
		 * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
		 */
		value?: decimal;

		/**
		 * Extension for value
		 **/
		_value?: Element;

		/**
		 * < | <= | >= | > - how to understand the value
		 * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
		 * This is labeled as "Is Modifier" because the comparator modifies the interpretation of the value significantly. If there is no comparator, then there is no modification of the value.
		 */
		comparator?: QuantityQuantityComparator;

		/**
		 * Unit representation
		 * A human-readable form of the unit.
		 */
		unit?: string;

		/**
		 * Extension for unit
		 **/
		_unit?: Element;

		/**
		 * System that defines coded unit form
		 * The identification of the system that provides the coded form of the unit.
		 */
		system?: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Coded form of the unit
		 * A computer processable form of the unit in some unit representation system.
		 * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
		 */
		code?: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;
	}

	/**
	 * Set of values bounded by low and high
	 * A set of ordered Quantities defined by a low and high limit.
	 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
	 */
	interface Range extends Element {

		/**
		 * Low limit
		 * The low limit. The boundary is inclusive.
		 * If the low element is missing, the low boundary is not known.
		 */
		low?: SimpleQuantity;

		/**
		 * High limit
		 * The high limit. The boundary is inclusive.
		 * If the high element is missing, the high boundary is not known.
		 */
		high?: SimpleQuantity;
	}

	/**
	 * A ratio of two Quantity values - a numerator and a denominator
	 * A relationship of two Quantity values - expressed as a numerator and a denominator.
	 */
	interface Ratio extends Element {

		/**
		 * Numerator value
		 * The value of the numerator.
		 */
		numerator?: Quantity;

		/**
		 * Denominator value
		 * The value of the denominator.
		 */
		denominator?: Quantity;
	}

	/**
	 * A reference from one resource to another
	 * A reference from one resource to another.
	 * References SHALL be a reference to an actual FHIR resource, and SHALL be resolveable (allowing for access control, temporary unavailability, etc). Resolution can be either by retrieval from the URL, or, where applicable by resource type, by treating an absolute reference as a canonical URL and looking it up in a local registry/repository.
	 */
	interface Reference extends Element {

		/**
		 * Literal reference, Relative, internal or absolute URL
		 * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
		 * Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a flexible approach suitable for use when trading across closed eco-system boundaries.   Absolute URLs do not need to point to a FHIR RESTful server, though this is the preferred approach. If the URL conforms to the structure "/[type]/[id]" then it should be assumed that the reference is to a FHIR RESTful server.
		 */
		reference?: string;

		/**
		 * Extension for reference
		 **/
		_reference?: Element;

		/**
		 * Logical reference, when literal reference is not known
		 * An identifier for the other resource. This is used when there is no way to reference the other resource directly, either because the entity is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
		 * When an identifier is provided in place of a reference, any system processing the reference will only be able to resolve the identifier to a reference if it understands the business context in which the identifier is used. Sometimes this is global (e.g. a national identifier) but often it is not. For this reason, none of the useful mechanisms described for working with references (e.g. chaining, includes) are possible, nor should servers be expected to be able resolve the reference. Servers may accept an identifier based reference untouched, resolve it, and/or reject it - see CapabilityStatement.rest.resource.referencePolicy. 

When both an identifier and a literal reference are provided, the literal reference is preferred. Applications processing the resource are allowed - but not required - to check that the identifier matches the literal reference

Applications converting a logical reference to a literal reference may choose to leave the logical reference present, or remove it.
		 */
		identifier?: Identifier;

		/**
		 * Text alternative for the resource
		 * Plain text narrative that identifies the resource in addition to the resource reference.
		 * This is generally not the same as the Resource.text of the referenced resource.  The purpose is to identify what's being referenced, not to fully describe it.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;
	}

	/**
	 * Related artifacts for a knowledge resource
	 * Related artifacts such as additional documentation, justification, or bibliographic references.
	 * Each related artifact is either an attachment, or a reference to another knowledge resource, but not both.
	 */
	interface RelatedArtifact extends Element {

		/**
		 * documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of
		 * The type of relationship to the related artifact.
		 */
		type: RelatedArtifactRelatedArtifactType;

		/**
		 * Brief description of the related artifact
		 * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * Bibliographic citation for the artifact
		 * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
		 * Additional structured information about citations should be captured as extensions.
		 */
		citation?: string;

		/**
		 * Extension for citation
		 **/
		_citation?: Element;

		/**
		 * Where the artifact can be accessed
		 * A url for the artifact that can be followed to access the actual content.
		 * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * What document is being referenced
		 * The document being referenced, represented as an attachment. This is exclusive with the resource element.
		 */
		document?: Attachment;

		/**
		 * What resource is being referenced
		 * The related resource, such as a library, value set, profile, or other knowledge resource.
		 * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
		 */
		resource?: Reference;
	}

	/**
	 * A series of measurements taken by a device
	 * A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
	 * The data is not interpretable without at least origin, period, and dimensions, but these are optional to allow a separation between the template of measurement and the actual measurement, such as between DeviceCapabilities and DeviceLog.  When providing a summary view (for example with Observation.value[x]) SampledData should be represented with a brief display text such as "Sampled Data".
	 */
	interface SampledData extends Element {

		/**
		 * Zero value and units
		 * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
		 */
		origin: SimpleQuantity;

		/**
		 * Number of milliseconds between samples
		 * The length of time between sampling times, measured in milliseconds.
		 * This is usually a whole number.
		 */
		period: decimal;

		/**
		 * Extension for period
		 **/
		_period?: Element;

		/**
		 * Multiply data by this before adding to origin
		 * A correction factor that is applied to the sampled data points before they are added to the origin.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Lower limit of detection
		 * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
		 */
		lowerLimit?: decimal;

		/**
		 * Extension for lowerLimit
		 **/
		_lowerLimit?: Element;

		/**
		 * Upper limit of detection
		 * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
		 */
		upperLimit?: decimal;

		/**
		 * Extension for upperLimit
		 **/
		_upperLimit?: Element;

		/**
		 * Number of sample points at each time point
		 * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
		 * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
		 */
		dimensions: positiveInt;

		/**
		 * Extension for dimensions
		 **/
		_dimensions?: Element;

		/**
		 * Decimal values with spaces, or "E" | "U" | "L"
		 * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
		 */
		data: string;

		/**
		 * Extension for data
		 **/
		_data?: Element;
	}

	/**
	 * A digital Signature - XML DigSig, JWT, Graphical image of signature, etc.
	 * A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different signature approaches have different utilities.
	 * The elements of the Signature Resource are for ease of access of these elements. Foro digital signatures (Xml DigSig, JWT), the non-repudiation proof comes from the Signature  validation, which includes validation of the referenced objects (e.g. Resources) (a.k.a., Content) in the XML-Signature Detached form.
	 */
	interface Signature extends Element {

		/**
		 * Indication of the reason the entity signed the object(s)
		 * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
		 * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &quot;Commitment Type Indication&quot;.
		 */
		type: Coding[];

		/**
		 * When the signature was created
		 * When the digital signature was signed.
		 * This should agree with the information in the signature.
		 */
		when: instant;

		/**
		 * Extension for when
		 **/
		_when?: Element;

		/**
		 * Who signed
		 * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
		 * This should agree with the information in the signature.
		 */
		whoUri: uri;

		/**
		 * Extension for whoUri
		 **/
		_whoUri?: Element;

		/**
		 * Who signed
		 * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
		 * This should agree with the information in the signature.
		 */
		whoReference: Reference;

		/**
		 * The party represented
		 * A reference to an application-usable description of the identity that is represented by the signature.
		 * The party that can't sign. For example a child.
		 */
		onBehalfOfUri?: uri;

		/**
		 * Extension for onBehalfOfUri
		 **/
		_onBehalfOfUri?: Element;

		/**
		 * The party represented
		 * A reference to an application-usable description of the identity that is represented by the signature.
		 * The party that can't sign. For example a child.
		 */
		onBehalfOfReference?: Reference;

		/**
		 * The technical format of the signature
		 * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc.
		 */
		contentType?: code;

		/**
		 * Extension for contentType
		 **/
		_contentType?: Element;

		/**
		 * The actual signature content (XML DigSig. JWT, picture, etc.)
		 * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
		 * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
		 */
		blob?: base64Binary;

		/**
		 * Extension for blob
		 **/
		_blob?: Element;
	}

	/**
	 * A fixed quantity (no comparator)
	 * The comparator is not used on a SimpleQuantity
	 */
	interface SimpleQuantity extends Quantity {

		/**
		 * Not allowed to be used in this context
		 */
		comparator?: undefined;
	}

	/**
	 * When the event is to occur
	 * A set of rules that describe when the event is scheduled.
	 */
	interface TimingRepeat extends Element {

		/**
		 * Length/Range of lengths, or (Start and/or end) limits
		 * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
		 */
		boundsDuration?: Duration;

		/**
		 * Length/Range of lengths, or (Start and/or end) limits
		 * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
		 */
		boundsRange?: Range;

		/**
		 * Length/Range of lengths, or (Start and/or end) limits
		 * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
		 */
		boundsPeriod?: Period;

		/**
		 * Number of times to repeat
		 * A total count of the desired number of repetitions.
		 * If you have both bounds and count, then this should be understood as within the bounds period, until count times happens.
		 */
		count?: integer;

		/**
		 * Extension for count
		 **/
		_count?: Element;

		/**
		 * Maximum number of times to repeat
		 * A maximum value for the count of the desired repetitions (e.g. do something 6-8 times).
		 */
		countMax?: integer;

		/**
		 * Extension for countMax
		 **/
		_countMax?: Element;

		/**
		 * How long when it happens
		 * How long this thing happens for when it happens.
		 * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
		 */
		duration?: decimal;

		/**
		 * Extension for duration
		 **/
		_duration?: Element;

		/**
		 * How long when it happens (Max)
		 * The upper limit of how long this thing happens for when it happens.
		 * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
		 */
		durationMax?: decimal;

		/**
		 * Extension for durationMax
		 **/
		_durationMax?: Element;

		/**
		 * s | min | h | d | wk | mo | a - unit of time (UCUM)
		 * The units of time for the duration, in UCUM units.
		 */
		durationUnit?: TimingUnitsOfTime;

		/**
		 * Event occurs frequency times per period
		 * The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).
		 */
		frequency?: integer;

		/**
		 * Extension for frequency
		 **/
		_frequency?: Element;

		/**
		 * Event occurs up to frequencyMax times per period
		 * If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
		 */
		frequencyMax?: integer;

		/**
		 * Extension for frequencyMax
		 **/
		_frequencyMax?: Element;

		/**
		 * Event occurs frequency times per period
		 * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period.
		 */
		period?: decimal;

		/**
		 * Extension for period
		 **/
		_period?: Element;

		/**
		 * Upper limit of period (3-4 hours)
		 * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
		 */
		periodMax?: decimal;

		/**
		 * Extension for periodMax
		 **/
		_periodMax?: Element;

		/**
		 * s | min | h | d | wk | mo | a - unit of time (UCUM)
		 * The units of time for the period in UCUM units.
		 */
		periodUnit?: TimingUnitsOfTime;

		/**
		 * mon | tue | wed | thu | fri | sat | sun
		 * If one or more days of week is provided, then the action happens only on the specified day(s).
		 * If no days are specified, the action is assumed to happen every day as otherwise specified. The elements frequency and period cannot be used as well as dayOfWeek.
		 */
		dayOfWeek?: TimingDayOfWeek[];

		/**
		 * Time of day for action
		 * Specified time of day for action to take place.
		 * When time of day is specified, it is inferred that the action happens every day (as filtered by dayofWeek) on the specified times. The elements when, frequency and period cannot be used as well as timeOfDay.
		 */
		timeOfDay?: time[];

		/**
		 * Extension for timeOfDay
		 **/
		_timeOfDay?: Element[];

		/**
		 * Regular life events the event is tied to
		 * Real world events that the occurrence of the event should be tied to.
		 * When more than one event is listed, the event is tied to the union of the specified events.
		 */
		when?: code[];

		/**
		 * Extension for when
		 **/
		_when?: Element[];

		/**
		 * Minutes from event (before or after)
		 * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
		 */
		offset?: unsignedInt;

		/**
		 * Extension for offset
		 **/
		_offset?: Element;
	}

	/**
	 * A timing schedule that specifies an event that may occur multiple times
	 * Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
	 * A timing schedule can be either a list of events - intervals on which the event occurs, or a single event with repeating criteria or just repeating criteria with no actual event.  When both event and a repeating specification are provided, the list of events should be understood as an interpretation of the information in the repeat structure.
	 */
	interface Timing extends Element {

		/**
		 * When the event occurs
		 * Identifies specific times when the event occurs.
		 */
		event?: dateTime[];

		/**
		 * Extension for event
		 **/
		_event?: Element[];

		/**
		 * When the event is to occur
		 * A set of rules that describe when the event is scheduled.
		 */
		repeat?: TimingRepeat;

		/**
		 * BID | TID | QID | AM | PM | QD | QOD | Q4H | Q6H +
		 * A code for the timing schedule. Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
		 * BID etc are defined as 'at institutionally specified times'. For example, an institution may choose that BID is "always at 7am and 6pm".  If it is inappropriate for this choice to be made, the code BID should not be used. Instead, a distinct organization-specific code should be used in place of the HL7-defined BID code and/or the a structured representation should be used (in this case, specifying the two event times).
		 */
		code?: CodeableConcept;
	}

	/**
	 * Defines an expected trigger for a module
	 * A description of a triggering event.
	 */
	interface TriggerDefinition extends Element {

		/**
		 * named-event | periodic | data-added | data-modified | data-removed | data-accessed | data-access-ended
		 * The type of triggering event.
		 */
		type: TriggerDefinitionTriggerType;

		/**
		 * Triggering event name
		 * The name of the event (if this is a named-event trigger).
		 */
		eventName?: string;

		/**
		 * Extension for eventName
		 **/
		_eventName?: Element;

		/**
		 * Timing of the event
		 * The timing of the event (if this is a period trigger).
		 */
		eventTimingTiming?: Timing;

		/**
		 * Timing of the event
		 * The timing of the event (if this is a period trigger).
		 */
		eventTimingReference?: Reference;

		/**
		 * Timing of the event
		 * The timing of the event (if this is a period trigger).
		 */
		eventTimingDate?: date;

		/**
		 * Extension for eventTimingDate
		 **/
		_eventTimingDate?: Element;

		/**
		 * Timing of the event
		 * The timing of the event (if this is a period trigger).
		 */
		eventTimingDateTime?: dateTime;

		/**
		 * Extension for eventTimingDateTime
		 **/
		_eventTimingDateTime?: Element;

		/**
		 * Triggering data of the event
		 * The triggering data of the event (if this is a data trigger).
		 */
		eventData?: DataRequirement;
	}

	/**
	 * Describes the context of use for a conformance or knowledge resource
	 * Specifies clinical/business/etc metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
	 */
	interface UsageContext extends Element {

		/**
		 * Type of context being specified
		 * A code that identifies the type of context being specified by this usage context.
		 */
		code: Coding;

		/**
		 * Value that defines the context
		 * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
		 */
		valueCodeableConcept: CodeableConcept;

		/**
		 * Value that defines the context
		 * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
		 */
		valueQuantity: Quantity;

		/**
		 * Value that defines the context
		 * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
		 */
		valueRange: Range;
	}

	/**
	 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
	 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
	 * Typically this may be some form of insurance, internal charges, or self-pay.

Local or jurisdicational business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
Where the order is important, a local/jurisdicational extension may be defined to specify the order for the type of charge.
	 */
	interface AccountCoverage extends BackboneElement {

		/**
		 * The party(s) that are responsible for covering the payment of this account
		 * The party(s) that are responsible for payment (or part of) of charges applied to this account (including self-pay).

A coverage may only be resposible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
		 */
		coverage: Reference;

		/**
		 * The priority of the coverage in the context of this account
		 * The priority of the coverage in the context of this account.
		 * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
		 */
		priority?: positiveInt;

		/**
		 * Extension for priority
		 **/
		_priority?: Element;
	}

	/**
	 * Responsible for the account
	 * Parties financially responsible for the account.
	 */
	interface AccountGuarantor extends BackboneElement {

		/**
		 * Responsible entity
		 * The entity who is responsible.
		 */
		party: Reference;

		/**
		 * Credit or other hold applied
		 * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
		 */
		onHold?: boolean;

		/**
		 * Extension for onHold
		 **/
		_onHold?: Element;

		/**
		 * Guarrantee account during
		 * The timeframe during which the guarantor accepts responsibility for the account.
		 */
		period?: Period;
	}

	/**
	 * Tracks balance, charges, for patient or cost center
	 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
	 */
	interface Account extends DomainResource {

		/**
		 * Account number
		 * Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
		 */
		identifier?: Identifier[];

		/**
		 * active | inactive | entered-in-error
		 * Indicates whether the account is presently used/usable or not.
		 * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
		 */
		status?: AccountAccountStatus;

		/**
		 * E.g. patient, expense, depreciation
		 * Categorizes the account for reporting and searching purposes.
		 */
		type?: CodeableConcept;

		/**
		 * Human-readable label
		 * Name used for the account when displaying it to humans in reports, etc.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * What is account tied to?
		 * Identifies the patient, device, practitioner, location or other object the account is associated with.
		 * Accounts can be applied to non patients for tracking other non patient related activities, such as group services (patients not tracked, and costs charged to another body), or may not be allocated.
		 */
		subject?: Reference;

		/**
		 * Transaction window
		 * Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
		 * It is possible for transactions relevant to a coverage period to be posted to the account before or after the coverage period, however the services that are being charged for must be within this period.
		 */
		period?: Period;

		/**
		 * Time window that transactions may be posted to this account
		 * Indicates the period of time over which the account is allowed to have transactions posted to it.
This period may be different to the coveragePeriod which is the duration of time that services may occur.
		 */
		active?: Period;

		/**
		 * How much is in account?
		 * Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
		 */
		balance?: Money;

		/**
		 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
		 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
		 * Typically this may be some form of insurance, internal charges, or self-pay.

Local or jurisdicational business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
Where the order is important, a local/jurisdicational extension may be defined to specify the order for the type of charge.
		 */
		coverage?: AccountCoverage[];

		/**
		 * Who is responsible?
		 * Indicates the organization, department, etc. with responsibility for the account.
		 */
		owner?: Reference;

		/**
		 * Explanation of purpose/use
		 * Provides additional information about what the account tracks and how it is used.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Responsible for the account
		 * Parties financially responsible for the account.
		 */
		guarantor?: AccountGuarantor[];
	}

	/**
	 * Who should participate in the action
	 * Indicates who should participate in performing the action described.
	 */
	interface ActivityDefinitionParticipant extends BackboneElement {

		/**
		 * patient | practitioner | related-person
		 * The type of participant in the action.
		 */
		type: ActivityDefinitionActivityParticipantType;

		/**
		 * E.g. Nurse, Surgeon, Parent, etc
		 * The role the participant should play in performing the described action.
		 */
		role?: CodeableConcept;
	}

	/**
	 * Dynamic aspects of the definition
	 * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the intent resource that would contain the result.
	 */
	interface ActivityDefinitionDynamicValue extends BackboneElement {

		/**
		 * Natural language description of the dynamic value
		 * A brief, natural language description of the intended semantics of the dynamic value.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * The path to the element to be set dynamically
		 * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression.
		 */
		path?: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * Language of the expression
		 * The media type of the language for the expression.
		 */
		language?: string;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * An expression that provides the dynamic value for the customization
		 * An expression specifying the value of the customized element.
		 * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;
	}

	/**
	 * The definition of a specific activity to be taken, independent of any particular patient or context
	 * This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
	 */
	interface ActivityDefinition extends DomainResource {

		/**
		 * Logical URI to reference this activity definition (globally unique)
		 * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this activity definition is (or will be) published. The URL SHOULD include the major version of the activity definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the activity definition
		 * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the activity definition
		 * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
		 * There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the activity definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this activity definition (computer friendly)
		 * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this activity definition (human friendly)
		 * A short, descriptive, user-friendly title for the activity definition.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this activity definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of activity definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired activity definition without due consideration.
		 */
		status: ActivityDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of activity definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental activity definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the activity definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the activity definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Natural language description of the activity definition
		 * A free text natural language description of the activity definition from a consumer's perspective.
		 * This description can be used to capture details such as why the activity definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this activity definition is defined
		 * Explaination of why this activity definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the activity definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Describes the clinical usage of the asset
		 * A detailed description of how the asset is used from a clinical perspective.
		 */
		usage?: string;

		/**
		 * Extension for usage
		 **/
		_usage?: Element;

		/**
		 * When the activity definition was approved by publisher
		 * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
		 * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
		 */
		approvalDate?: date;

		/**
		 * Extension for approvalDate
		 **/
		_approvalDate?: Element;

		/**
		 * When the activity definition was last reviewed
		 * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
		 * If specified, this is usually after the approval date.
		 */
		lastReviewDate?: date;

		/**
		 * Extension for lastReviewDate
		 **/
		_lastReviewDate?: Element;

		/**
		 * When the activity definition is expected to be used
		 * The period during which the activity definition content was or is planned to be in active use.
		 * The effective period for a activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
		 */
		effectivePeriod?: Period;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate activity definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for activity definition (if applicable)
		 * A legal or geographic region in which the activity definition is intended to be used.
		 * It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * E.g. Education, Treatment, Assessment, etc
		 * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
		 */
		topic?: CodeableConcept[];

		/**
		 * A content contributor
		 * A contributor to the content of the asset, including authors, editors, reviewers, and endorsers.
		 */
		contributor?: Contributor[];

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Additional documentation, citations, etc
		 * Related artifacts such as additional documentation, justification, or bibliographic references.
		 * Each related artifact is either an attachment, or a reference to another resource, but not both.
		 */
		relatedArtifact?: RelatedArtifact[];

		/**
		 * Logic used by the asset
		 * A reference to a Library resource containing any formal logic used by the asset.
		 */
		library?: Reference[];

		/**
		 * Kind of resource
		 * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ProcedureRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource.
		 * May determine what types of extensions are permitted.
		 */
		kind?: code;

		/**
		 * Extension for kind
		 **/
		_kind?: Element;

		/**
		 * Detail type of activity
		 * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
		 * Tends to be less relevant for activities involving particular products.
		 */
		code?: CodeableConcept;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		timingTiming?: Timing;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		timingDateTime?: dateTime;

		/**
		 * Extension for timingDateTime
		 **/
		_timingDateTime?: Element;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		timingPeriod?: Period;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		timingRange?: Range;

		/**
		 * Where it should happen
		 * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
		 * May reference a specific clinical location or may just identify a type of location.
		 */
		location?: Reference;

		/**
		 * Who should participate in the action
		 * Indicates who should participate in performing the action described.
		 */
		participant?: ActivityDefinitionParticipant[];

		/**
		 * What's administered/supplied
		 * Identifies the food, drug or other product being consumed or supplied in the activity.
		 */
		productReference?: Reference;

		/**
		 * What's administered/supplied
		 * Identifies the food, drug or other product being consumed or supplied in the activity.
		 */
		productCodeableConcept?: CodeableConcept;

		/**
		 * How much is administered/consumed/supplied
		 * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
		 */
		quantity?: SimpleQuantity;

		/**
		 * Detailed dosage instructions
		 * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
		 * If a dosage instruction is used, the definition should not specify timing or quantity.
		 */
		dosage?: Dosage[];

		/**
		 * What part of body to perform on
		 * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
		 * Only used if not implicit in the code found in ProcedureRequest.type.
		 */
		bodySite?: CodeableConcept[];

		/**
		 * Transform to apply the template
		 * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
		 */
		transform?: Reference;

		/**
		 * Dynamic aspects of the definition
		 * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the intent resource that would contain the result.
		 */
		dynamicValue?: ActivityDefinitionDynamicValue[];
	}

	/**
	 * The suspected agent causing the adverse event
	 * Describes the entity that is suspected to have caused the adverse event.
	 */
	interface AdverseEventSuspectEntity extends BackboneElement {

		/**
		 * Refers to the specific entity that caused the adverse event
		 * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
		 */
		instance: Reference;

		/**
		 * causality1 | causality2
		 * causality1 | causality2.
		 */
		causality?: AdverseEventAdverseEventCausality;

		/**
		 * assess1 | assess2
		 * assess1 | assess2.
		 */
		causalityAssessment?: CodeableConcept;

		/**
		 * AdverseEvent.suspectEntity.causalityProductRelatedness
		 * AdverseEvent.suspectEntity.causalityProductRelatedness.
		 */
		causalityProductRelatedness?: string;

		/**
		 * Extension for causalityProductRelatedness
		 **/
		_causalityProductRelatedness?: Element;

		/**
		 * method1 | method2
		 * method1 | method2.
		 */
		causalityMethod?: CodeableConcept;

		/**
		 * AdverseEvent.suspectEntity.causalityAuthor
		 * AdverseEvent.suspectEntity.causalityAuthor.
		 */
		causalityAuthor?: Reference;

		/**
		 * result1 | result2
		 * result1 | result2.
		 */
		causalityResult?: CodeableConcept;
	}

	/**
	 * Medical care, research study or other healthcare event causing physical injury
	 * Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
	 */
	interface AdverseEvent extends DomainResource {

		/**
		 * Business identifier for the event
		 * The identifier(s) of this adverse event that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itsefl is not appropriate.
		 */
		identifier?: Identifier;

		/**
		 * AE | PAE 
An adverse event is an event that caused harm to a patient,  an adverse reaction is a something that is a subject-specific event that is a result of an exposure to a medication, food, device or environmental substance, a potential adverse event is something that occurred and that could have caused harm to a patient but did not
		 * The type of event which is important to characterize what occurred and caused harm to the subject, or had the potential to cause harm to the subject.
		 */
		category?: code;

		/**
		 * Extension for category
		 **/
		_category?: Element;

		/**
		 * actual | potential
		 * This element defines the specific type of event that occurred or that was prevented from occurring.
		 */
		type?: CodeableConcept;

		/**
		 * Subject or group impacted by event
		 * This subject or group impacted by the event.  With a prospective adverse event, there will be no subject as the adverse event was prevented.
		 */
		subject?: Reference;

		/**
		 * When the event occurred
		 * The date (and perhaps time) when the adverse event occurred.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Adverse Reaction Events linked to exposure to substance
		 * Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
		 */
		reaction?: Reference[];

		/**
		 * Location where adverse event occurred
		 * The information about where the adverse event occurred.
		 */
		location?: Reference;

		/**
		 * Mild | Moderate | Severe
		 * Describes the seriousness or severity of the adverse event.
		 */
		seriousness?: CodeableConcept;

		/**
		 * resolved | recovering | ongoing | resolvedWithSequelae | fatal | unknown
		 * Describes the type of outcome from the adverse event.
		 */
		outcome?: CodeableConcept;

		/**
		 * Who recorded the adverse event
		 * Information on who recorded the adverse event.  May be the patient or a practitioner.
		 */
		recorder?: Reference;

		/**
		 * Who  was involved in the adverse event or the potential adverse event
		 * Parties that may or should contribute or have contributed information to the Act. Such information includes information leading to the decision to perform the Act and how to perform the Act (e.g. consultant), information that the Act itself seeks to reveal (e.g. informant of clinical history), or information about what Act was performed (e.g. informant witness).
		 */
		eventParticipant?: Reference;

		/**
		 * Description of the adverse event
		 * Describes the adverse event in text.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * The suspected agent causing the adverse event
		 * Describes the entity that is suspected to have caused the adverse event.
		 */
		suspectEntity?: AdverseEventSuspectEntity[];

		/**
		 * AdverseEvent.subjectMedicalHistory
		 * AdverseEvent.subjectMedicalHistory.
		 */
		subjectMedicalHistory?: Reference[];

		/**
		 * AdverseEvent.referenceDocument
		 * AdverseEvent.referenceDocument.
		 */
		referenceDocument?: Reference[];

		/**
		 * AdverseEvent.study
		 * AdverseEvent.study.
		 */
		study?: Reference[];
	}

	/**
	 * Adverse Reaction Events linked to exposure to substance
	 * Details about each adverse reaction event linked to exposure to the identified substance.
	 */
	interface AllergyIntoleranceReaction extends BackboneElement {

		/**
		 * Specific substance or pharmaceutical product considered to be responsible for event
		 * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.
		 * Coding of the specific substance (or pharmaceutical product) with a terminology capable of triggering decision support should be used wherever possible.  The 'code' element allows for the use of a specific substance or pharmaceutical product, or a group or class of substances. In the case of an allergy or intolerance to a class of substances, (for example, "penicillins"), the 'reaction.substance' element could be used to code the specific substance that was identifed as having caused the reaction (for example, "amoxycillin"). Duplication of the value in the 'code' and 'reaction.substance' elements is acceptable when a specific substance has been recorded in 'code'.
		 */
		substance?: CodeableConcept;

		/**
		 * Clinical symptoms/signs associated with the Event
		 * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
		 * Manifestation can be expressed as a single word, phrase or brief description. For example: nausea, rash or no reaction. It is preferable that manifestation should be coded with a terminology, where possible. The values entered here may be used to display on an application screen as part of a list of adverse reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly used include, but are not limited to, SNOMED CT or ICD10.
		 */
		manifestation: CodeableConcept[];

		/**
		 * Description of the event as a whole
		 * Text description about the reaction as a whole, including details of the manifestation if required.
		 * Use the description to provide any details of a particular event of the occurred reaction such as circumstances, reaction specifics, what happened before/after. Information, related to the event, but not describing a particular care should be captured in the comment field. For example: at the age of four, the patient was given penicillin for strep throat and subsequently developed severe hives.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Date(/time) when manifestations showed
		 * Record of the date and/or time of the onset of the Reaction.
		 */
		onset?: dateTime;

		/**
		 * Extension for onset
		 **/
		_onset?: Element;

		/**
		 * mild | moderate | severe (of event as a whole)
		 * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
		 * It is acknowledged that this assessment is very subjective. There may be some some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
		 */
		severity?: AllergyIntoleranceAllergyIntoleranceSeverity;

		/**
		 * How the subject was exposed to the substance
		 * Identification of the route by which the subject was exposed to the substance.
		 * Coding of the route of exposure with a terminology should be used wherever possible.
		 */
		exposureRoute?: CodeableConcept;

		/**
		 * Text about event not captured in other fields
		 * Additional text about the adverse reaction event not captured in other fields.
		 * Use this field to record information indirectly related to a particular event and not captured in the description. For example: Clinical records are no longer available, recorded based on information provided to the patient by her mother and her mother is deceased.
		 */
		note?: Annotation[];
	}

	/**
	 * Allergy or Intolerance (generally: Risk of adverse reaction to a substance)
	 * Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
	 * Substances include, but are not limited to: a therapeutic substance administered correctly at an appropriate dosage for the individual; food; material derived from plants or animals; or venom from insect stings.
	 */
	interface AllergyIntolerance extends DomainResource {

		/**
		 * External ids for this item
		 * This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * active | inactive | resolved
		 * The clinical status of the allergy or intolerance.
		 * This element is labeled as a modifier because the status contains the codes inactive and resolved that mark the AllergyIntolerance as not currently valid.
		 */
		clinicalStatus?: AllergyIntoleranceAllergyIntoleranceClinicalStatus;

		/**
		 * unconfirmed | confirmed | refuted | entered-in-error
		 * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
		 * This element is labeled as a modifier because the status contains the codes refuted and entered-in-error that mark the AllergyIntolerance as not currently valid.
		 */
		verificationStatus: AllergyIntoleranceAllergyIntoleranceVerificationStatus;

		/**
		 * allergy | intolerance - Underlying mechanism (if known)
		 * Identification of the underlying physiological mechanism for the reaction risk.
		 * Allergic (typically immune-mediated) reactions have been traditionally regarded as an indicator for potential escalation to significant future risk. Contemporary knowledge suggests that some reactions previously thought to be immune-mediated are, in fact, non-immune, but in some cases can still pose a life threatening risk. It is acknowledged that many clinicians may not be in a position to distinguish the mechanism of a particular reaction. Often the term "allergy" is used rather generically and may overlap with the use of "intolerance" - in practice the boundaries between these two concepts may not be well-defined or understood. This data element is included nevertheless, because many legacy systems have captured this attribute. Immunologic testing may provide supporting evidence for the basis of the reaction and the causative substance, but no tests are 100% sensitive or specific for sensitivity to a particular substance. If, as is commonly the case, it is unclear whether the reaction is due to an allergy or an intolerance, then the type element should be omitted from the resource.
		 */
		type?: AllergyIntoleranceAllergyIntoleranceType;

		/**
		 * food | medication | environment | biologic
		 * Category of the identified substance.
		 * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
		 */
		category?: AllergyIntoleranceAllergyIntoleranceCategory[];

		/**
		 * low | high | unable-to-assess
		 * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
		 * The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).

Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
		 */
		criticality?: AllergyIntoleranceAllergyIntoleranceCriticality;

		/**
		 * Code that identifies the allergy or intolerance
		 * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").
		 * It is strongly recommended that this element be populated using a terminology, where possible. For example, some terminologies used include RxNorm, SNOMED CT, DM+D, NDFRT, ICD-9, IDC-10, UNI, ATC and CPT. Plain text should only be used if there is no appropriate terminology available. Additional details can be specified in the text.

When a substance or product code is specified for the 'code' element, the "default" semantic context is that this is a positive statement of an allergy or intolerance (depending on the value of the 'type' element, if present) condition to the specified substance/product.  In the corresponding SNOMED CT allergy model, the specified substance/product is the target (destination) of the "Causative agent" relationship.

The 'substanceExposureRisk' extension is available as a structured and more flexible alternative to the 'code' element for making positive or negative allergy or intolerance statements.  This extension provides the capability to make "no known allergy" (or "no risk of adverse reaction") statements regarding any coded substance/product (including cases when a pre-coordinated "no allergy to x" concept for that substance/product does not exist).  If the 'substanceExposureRisk' extension is present, the AllergyIntolerance.code element SHALL be omitted.
		 */
		code?: CodeableConcept;

		/**
		 * Who the sensitivity is for
		 * The patient who has the allergy or intolerance.
		 */
		patient: Reference;

		/**
		 * When allergy or intolerance was identified
		 * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
		 */
		onsetDateTime?: dateTime;

		/**
		 * Extension for onsetDateTime
		 **/
		_onsetDateTime?: Element;

		/**
		 * When allergy or intolerance was identified
		 * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
		 */
		onsetAge?: Age;

		/**
		 * When allergy or intolerance was identified
		 * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
		 */
		onsetPeriod?: Period;

		/**
		 * When allergy or intolerance was identified
		 * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
		 */
		onsetRange?: Range;

		/**
		 * When allergy or intolerance was identified
		 * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
		 */
		onsetString?: string;

		/**
		 * Extension for onsetString
		 **/
		_onsetString?: Element;

		/**
		 * Date record was believed accurate
		 * The date on which the existance of the AllergyIntolerance was first asserted or acknowledged.
		 */
		assertedDate?: dateTime;

		/**
		 * Extension for assertedDate
		 **/
		_assertedDate?: Element;

		/**
		 * Who recorded the sensitivity
		 * Individual who recorded the record and takes responsibility for its content.
		 */
		recorder?: Reference;

		/**
		 * Source of the information about the allergy
		 * The source of the information about the allergy that is recorded.
		 * The recorder takes repsonsibility for the content, but can reference the source from where they got it.
		 */
		asserter?: Reference;

		/**
		 * Date(/time) of last known occurrence of a reaction
		 * Represents the date and/or time of the last known occurrence of a reaction event.
		 * This date may be replicated by one of the Onset of Reaction dates. Where a textual representation of the date of last occurrence is required e.g. 'In Childhood, '10 years ago' the Comment element should be used.
		 */
		lastOccurrence?: dateTime;

		/**
		 * Extension for lastOccurrence
		 **/
		_lastOccurrence?: Element;

		/**
		 * Additional text not captured in other fields
		 * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
		 * For example: including reason for flagging a seriousness of 'High Risk'; and instructions related to future exposure or administration of the substance, such as administration within an Intensive Care Unit or under corticosteroid cover. The notes should be related to an allergy or intolerance as a condition in general and not related to any particular episode of it. For episode notes and descriptions, use AllergyIntolerance.event.description and  AllergyIntolerance.event.notes.
		 */
		note?: Annotation[];

		/**
		 * Adverse Reaction Events linked to exposure to substance
		 * Details about each adverse reaction event linked to exposure to the identified substance.
		 */
		reaction?: AllergyIntoleranceReaction[];
	}

	/**
	 * Participants involved in appointment
	 * List of participants involved in the appointment.
	 */
	interface AppointmentParticipant extends BackboneElement {

		/**
		 * Role of participant in the appointment
		 * Role of participant in the appointment.
		 * The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.

If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.

This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
		 */
		type?: CodeableConcept[];

		/**
		 * Person, Location/HealthcareService or Device
		 * A Person, Location/HealthcareService or Device that is participating in the appointment.
		 */
		actor?: Reference;

		/**
		 * required | optional | information-only
		 * Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
		 */
		required?: AppointmentParticipantRequired;

		/**
		 * accepted | declined | tentative | needs-action
		 * Participation status of the actor.
		 */
		status: AppointmentParticipationStatus;
	}

	/**
	 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s)
	 * A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
	 */
	interface Appointment extends DomainResource {

		/**
		 * External Ids for this item
		 * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error
		 * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
		 * If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.

This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
		 */
		status: AppointmentAppointmentStatus;

		/**
		 * A broad categorisation of the service that is to be performed during this appointment
		 * A broad categorisation of the service that is to be performed during this appointment.
		 */
		serviceCategory?: CodeableConcept;

		/**
		 * The specific service that is to be performed during this appointment
		 * The specific service that is to be performed during this appointment.
		 */
		serviceType?: CodeableConcept[];

		/**
		 * The specialty of a practitioner that would be required to perform the service requested in this appointment
		 * The specialty of a practitioner that would be required to perform the service requested in this appointment.
		 */
		specialty?: CodeableConcept[];

		/**
		 * The style of appointment or patient that has been booked in the slot (not service type)
		 * The style of appointment or patient that has been booked in the slot (not service type).
		 */
		appointmentType?: CodeableConcept;

		/**
		 * Reason this appointment is scheduled
		 * The reason that this appointment is being scheduled. This is more clinical than administrative.
		 */
		reason?: CodeableConcept[];

		/**
		 * Reason the appointment is to takes place (resource)
		 * Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
		 */
		indication?: Reference[];

		/**
		 * Used to make informed decisions if needing to re-prioritize
		 * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
		 * Seeking implementer feedback on this property and how interoperable it is.

Using an extension to record a codeableconcept for named values may be tested at a future connectathon.
		 */
		priority?: unsignedInt;

		/**
		 * Extension for priority
		 **/
		_priority?: Element;

		/**
		 * Shown on a subject line in a meeting request, or appointment list
		 * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Additional information to support the appointment
		 * Additional information to support the appointment provided when making the appointment.
		 */
		supportingInformation?: Reference[];

		/**
		 * When appointment is to take place
		 * Date/Time that the appointment is to take place.
		 */
		start?: instant;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * When appointment is to conclude
		 * Date/Time that the appointment is to conclude.
		 */
		end?: instant;

		/**
		 * Extension for end
		 **/
		_end?: Element;

		/**
		 * Can be less than start/end (e.g. estimate)
		 * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
		 */
		minutesDuration?: positiveInt;

		/**
		 * Extension for minutesDuration
		 **/
		_minutesDuration?: Element;

		/**
		 * The slots that this appointment is filling
		 * The slots from the participants' schedules that will be filled by the appointment.
		 */
		slot?: Reference[];

		/**
		 * The date that this appointment was initially created
		 * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
		 * This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Additional comments
		 * Additional comments about the appointment.
		 * Additional text to aid in facilitating the appointment. For instance, a comment might be, "patient should proceed immediately to infusion room upon arrival"

Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * The ReferralRequest provided as information to allocate to the Encounter
		 * The referral request this appointment is allocated to assess (incoming referral).
		 */
		incomingReferral?: Reference[];

		/**
		 * Participants involved in appointment
		 * List of participants involved in the appointment.
		 */
		participant: AppointmentParticipant[];

		/**
		 * Potential date/time interval(s) requested to allocate the appointment within
		 * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within. When using these values, the minutes duration should be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time.
		 * This does not introduce a capacity for recurring appointments.
		 */
		requestedPeriod?: Period[];
	}

	/**
	 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection
	 * A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
	 */
	interface AppointmentResponse extends DomainResource {

		/**
		 * External Ids for this item
		 * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
		 */
		identifier?: Identifier[];

		/**
		 * Appointment this response relates to
		 * Appointment that this response is replying to.
		 */
		appointment: Reference;

		/**
		 * Time from appointment, or requested new start time
		 * Date/Time that the appointment is to take place, or requested new start time.
		 * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
		 */
		start?: instant;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * Time from appointment, or requested new end time
		 * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
		 */
		end?: instant;

		/**
		 * Extension for end
		 **/
		_end?: Element;

		/**
		 * Role of participant in the appointment
		 * Role of participant in the appointment.
		 * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.

If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.

This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
		 */
		participantType?: CodeableConcept[];

		/**
		 * Person, Location/HealthcareService or Device
		 * A Person, Location/HealthcareService or Device that is participating in the appointment.
		 */
		actor?: Reference;

		/**
		 * accepted | declined | tentative | in-process | completed | needs-action | entered-in-error
		 * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
		 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
		 */
		participantStatus: AppointmentResponseParticipantStatus;

		/**
		 * Additional comments
		 * Additional comments about the appointment.
		 * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * Logical network location for application activity
	 * Logical network location for application activity, if the activity has a network location.
	 */
	interface AuditEventAgentNetwork extends BackboneElement {

		/**
		 * Identifier for the network access point of the user device
		 * An identifier for the network access point of the user device for the audit event.
		 * This could be a device id, IP address or some other identifier associated with a device.
		 */
		address?: string;

		/**
		 * Extension for address
		 **/
		_address?: Element;

		/**
		 * The type of network access point
		 * An identifier for the type of network access point that originated the audit event.
		 */
		type?: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;
	}

	/**
	 * Actor involved in the event
	 * An actor taking an active role in the event or activity that is logged.
	 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.

For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
	 */
	interface AuditEventAgent extends BackboneElement {

		/**
		 * Agent role in the event
		 * The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
		 * Should be roles relevant to the event. Should  not be an exhaustive list of roles.
		 */
		role?: CodeableConcept[];

		/**
		 * Direct reference to resource
		 * Direct reference to a resource that identifies the agent.
		 */
		reference?: Reference;

		/**
		 * Unique identifier for the user
		 * Unique identifier for the user actively participating in the event.
		 * A unique value within the Audit Source ID. For node-based authentication -- where only the system hardware or process, but not a human user, is identified -- User ID would be the node name.
		 */
		userId?: Identifier;

		/**
		 * Alternative User id e.g. authentication
		 * Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
		 */
		altId?: string;

		/**
		 * Extension for altId
		 **/
		_altId?: Element;

		/**
		 * Human-meaningful name for the agent
		 * Human-meaningful name for the agent.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Whether user is initiator
		 * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
		 * There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
		 */
		requestor: boolean;

		/**
		 * Extension for requestor
		 **/
		_requestor?: Element;

		/**
		 * Where
		 * Where the event occurred.
		 */
		location?: Reference;

		/**
		 * Policy that authorized event
		 * The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
		 * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
		 */
		policy?: uri[];

		/**
		 * Extension for policy
		 **/
		_policy?: Element[];

		/**
		 * Type of media
		 * Type of media involved. Used when the event is about exporting/importing onto media.
		 */
		media?: Coding;

		/**
		 * Logical network location for application activity
		 * Logical network location for application activity, if the activity has a network location.
		 */
		network?: AuditEventAgentNetwork;

		/**
		 * Reason given for this user
		 * The reason (purpose of use), specific to this agent, that was used during the event being recorded.
		 * Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
		 */
		purposeOfUse?: CodeableConcept[];
	}

	/**
	 * Audit Event Reporter
	 * The system that is reporting the event.
	 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
	 */
	interface AuditEventSource extends BackboneElement {

		/**
		 * Logical source location within the enterprise
		 * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
		 */
		site?: string;

		/**
		 * Extension for site
		 **/
		_site?: Element;

		/**
		 * The identity of source detecting the event
		 * Identifier of the source where the event was detected.
		 */
		identifier: Identifier;

		/**
		 * The type of source where event originated
		 * Code specifying the type of source where event originated.
		 */
		type?: Coding[];
	}

	/**
	 * Additional Information about the entity
	 * Tagged value pairs for conveying additional information about the entity.
	 */
	interface AuditEventEntityDetail extends BackboneElement {

		/**
		 * Name of the property
		 * The type of extra detail provided in the value.
		 */
		type: string;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Property value
		 * The details, base64 encoded. Used to carry bulk information.
		 * The value is base64 encoded to enable various encodings or binary content.
		 */
		value: base64Binary;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Data or objects used
	 * Specific instances of data or objects that have been accessed.
	 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
	 */
	interface AuditEventEntity extends BackboneElement {

		/**
		 * Specific instance of object
		 * Identifies a specific instance of the entity. The reference should always be version specific.
		 * Identifier detail depends on entity type.
		 */
		identifier?: Identifier;

		/**
		 * Specific instance of resource
		 * Identifies a specific instance of the entity. The reference should be version specific.
		 */
		reference?: Reference;

		/**
		 * Type of entity involved
		 * The type of the object that was involved in this audit event.
		 * This value is distinct from the user's role or any user relationship to the entity.
		 */
		type?: Coding;

		/**
		 * What role the entity played
		 * Code representing the role the entity played in the event being audited.
		 */
		role?: Coding;

		/**
		 * Life-cycle stage for the entity
		 * Identifier for the data life-cycle stage for the entity.
		 * This can be used to provide an audit trail for data, over time, as it passes through the system.
		 */
		lifecycle?: Coding;

		/**
		 * Security labels on the entity
		 * Security labels for the identified entity.
		 * Copied from entity meta security tags.
		 */
		securityLabel?: Coding[];

		/**
		 * Descriptor for entity
		 * A name of the entity in the audit event.
		 * This field may be used in a query/report to identify audit events for a specific person.  For example, where multiple synonymous entity identifiers (patient number, medical record number, encounter number, etc.) have been used.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Descriptive text
		 * Text that describes the entity in more detail.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Query parameters
		 * The query parameters for a query-type entities.
		 */
		query?: base64Binary;

		/**
		 * Extension for query
		 **/
		_query?: Element;

		/**
		 * Additional Information about the entity
		 * Tagged value pairs for conveying additional information about the entity.
		 */
		detail?: AuditEventEntityDetail[];
	}

	/**
	 * Event record kept for security purposes
	 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
	 * Based on ATNA (RFC 3881).
	 */
	interface AuditEvent extends DomainResource {

		/**
		 * Type/identifier of event
		 * Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
		 */
		type: Coding;

		/**
		 * More specific type/id for the event
		 * Identifier for the category of event.
		 */
		subtype?: Coding[];

		/**
		 * Type of action performed during the event
		 * Indicator for type of action performed during the event that generated the audit.
		 */
		action?: code;

		/**
		 * Extension for action
		 **/
		_action?: Element;

		/**
		 * Time when the event occurred on source
		 * The time when the event occurred on the source.
		 * In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
		 */
		recorded: instant;

		/**
		 * Extension for recorded
		 **/
		_recorded?: Element;

		/**
		 * Whether the event succeeded or failed
		 * Indicates whether the event succeeded or failed.
		 * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
		 */
		outcome?: code;

		/**
		 * Extension for outcome
		 **/
		_outcome?: Element;

		/**
		 * Description of the event outcome
		 * A free text description of the outcome of the event.
		 */
		outcomeDesc?: string;

		/**
		 * Extension for outcomeDesc
		 **/
		_outcomeDesc?: Element;

		/**
		 * The purposeOfUse of the event
		 * The purposeOfUse (reason) that was used during the event being recorded.
		 * Use AuditEvent.agent.purposeOfUse when you know that it is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
		 */
		purposeOfEvent?: CodeableConcept[];

		/**
		 * Actor involved in the event
		 * An actor taking an active role in the event or activity that is logged.
		 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.

For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
		 */
		agent: AuditEventAgent[];

		/**
		 * Audit Event Reporter
		 * The system that is reporting the event.
		 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
		 */
		source: AuditEventSource;

		/**
		 * Data or objects used
		 * Specific instances of data or objects that have been accessed.
		 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
		 */
		entity?: AuditEventEntity[];
	}

	/**
	 * Resource for non-supported content
	 * Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
	 */
	interface Basic extends DomainResource {

		/**
		 * Business identifier
		 * Identifier assigned to the resource for business purposes, outside the context of FHIR.
		 */
		identifier?: Identifier[];

		/**
		 * Kind of Resource
		 * Identifies the 'type' of resource - equivalent to the resource name for other resources.
		 * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.

This element is labeled as a modifier because the it defines the meaning of the resource and cannot be ignored.
		 */
		code: CodeableConcept;

		/**
		 * Identifies the focus of this resource
		 * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
		 * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
		 */
		subject?: Reference;

		/**
		 * When created
		 * Identifies when the resource was first created.
		 */
		created?: date;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Who created
		 * Indicates who was responsible for creating the resource instance.
		 */
		author?: Reference;
	}

	/**
	 * Pure binary content defined by a format other than FHIR
	 * A binary resource can contain any content, whether text, image, pdf, zip archive, etc.
	 * Typically, Binary resources are used for handling content such as:  * CDA Documents (i.e. with XDS) * PDF Documents * Images (the Media resource is preferred for handling images, but not possible when the content is already binary - e.g. XDS).
	 */
	interface Binary extends Resource {

		/**
		 * MimeType of the binary content
		 * MimeType of the binary content represented as a standard MimeType (BCP 13).
		 */
		contentType: code;

		/**
		 * Extension for contentType
		 **/
		_contentType?: Element;

		/**
		 * Access Control Management
		 * Treat this binary as if it was this other resource for access control purposes.
		 */
		securityContext?: Reference;

		/**
		 * The actual content
		 * The actual content, base64 encoded.
		 * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
		 */
		content: base64Binary;

		/**
		 * Extension for content
		 **/
		_content?: Element;
	}

	/**
	 * Specific and identified anatomical location
	 * Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
	 */
	interface BodySite extends DomainResource {

		/**
		 * Bodysite identifier
		 * Identifier for this instance of the anatomical location.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this body site record is in active use
		 * Whether this body site is in active use.
		 * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * Named anatomical location
		 * Named anatomical location - ideally coded where possible.
		 */
		code?: CodeableConcept;

		/**
		 * Modification to location code
		 * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
		 */
		qualifier?: CodeableConcept[];

		/**
		 * Anatomical location description
		 * A summary, charactarization or explanation of the anatomic location.
		 * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Attached images
		 * Image or images used to identify a location.
		 */
		image?: Attachment[];

		/**
		 * Who this is about
		 * The person to which the body site belongs.
		 */
		patient: Reference;
	}

	/**
	 * Links related to this Bundle
	 * A series of links that provide context to this bundle.
	 */
	interface BundleLink extends BackboneElement {

		/**
		 * See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
		 * A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
		 */
		relation: string;

		/**
		 * Extension for relation
		 **/
		_relation?: Element;

		/**
		 * Reference details for the link
		 * The reference details for the link.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;
	}

	/**
	 * Search related information
	 * Information about the search process that lead to the creation of this entry.
	 */
	interface BundleEntrySearch extends BackboneElement {

		/**
		 * match | include | outcome - why this is in the result set
		 * Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
		 * There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
		 */
		mode?: BundleSearchEntryMode;

		/**
		 * Search ranking (between 0 and 1)
		 * When searching, the server's search ranking score for the entry.
		 * Servers are not required to return a ranking score. 1 is most relevant, and 0 is least relevant. Often, search results are sorted by score, but the client may specify a different sort order.
		 */
		score?: decimal;

		/**
		 * Extension for score
		 **/
		_score?: Element;
	}

	/**
	 * Transaction Related Information
	 * Additional information about how this entry should be processed as part of a transaction.
	 */
	interface BundleEntryRequest extends BackboneElement {

		/**
		 * GET | POST | PUT | DELETE
		 * The HTTP verb for this entry in either a change history, or a transaction/ transaction response.
		 */
		method: BundleHTTPVerb;

		/**
		 * URL for HTTP equivalent of this entry
		 * The URL for this entry, relative to the root (the address to which the request is posted).
		 * E.g. for a Patient Create, the method would be "POST" and the URL would be "Patient". For a Patient Update, the method would be PUT, and the URL would be "Patient/[id]".
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * For managing cache currency
		 * If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
		 */
		ifNoneMatch?: string;

		/**
		 * Extension for ifNoneMatch
		 **/
		_ifNoneMatch?: Element;

		/**
		 * For managing update contention
		 * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
		 */
		ifModifiedSince?: instant;

		/**
		 * Extension for ifModifiedSince
		 **/
		_ifModifiedSince?: Element;

		/**
		 * For managing update contention
		 * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
		 */
		ifMatch?: string;

		/**
		 * Extension for ifMatch
		 **/
		_ifMatch?: Element;

		/**
		 * For conditional creates
		 * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
		 */
		ifNoneExist?: string;

		/**
		 * Extension for ifNoneExist
		 **/
		_ifNoneExist?: Element;
	}

	/**
	 * Transaction Related Information
	 * Additional information about how this entry should be processed as part of a transaction.
	 */
	interface BundleEntryResponse extends BackboneElement {

		/**
		 * Status response code (text optional)
		 * The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
		 */
		status: string;

		/**
		 * Extension for status
		 **/
		_status?: Element;

		/**
		 * The location, if the operation returns a location
		 * The location header created by processing this operation.
		 */
		location?: uri;

		/**
		 * Extension for location
		 **/
		_location?: Element;

		/**
		 * The etag for the resource (if relevant)
		 * The etag for the resource, it the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
		 * Etags match the Resource.meta.versionId. The ETag has to match the version id in the header if a resource is included.
		 */
		etag?: string;

		/**
		 * Extension for etag
		 **/
		_etag?: Element;

		/**
		 * Server's date time modified
		 * The date/time that the resource was modified on the server.
		 * This has to match the same time in the meta header if a resource is included.
		 */
		lastModified?: instant;

		/**
		 * Extension for lastModified
		 **/
		_lastModified?: Element;

		/**
		 * OperationOutcome with hints and warnings (for batch/transaction)
		 * An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
		 * For a POST/PUT operation, this is the equivalent outcome that would be returned for prefer = operationoutcome - except that the resource is always returned whether or not the outcome is returned.
		 */
		outcome?: Resource;
	}

	/**
	 * Entry in the bundle - will have a resource, or information
	 * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
	 */
	interface BundleEntry extends BackboneElement {

		/**
		 * Links related to this entry
		 * A series of links that provide context to this entry.
		 */
		link?: BundleLink[];

		/**
		 * Absolute URL for resource (server address, or UUID/OID)
		 * The Absolute URL for the resource.  The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that: 
* fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)
* Results from operations might involve resources that are not identified.
		 * fullUrl may not be [unique in the context of a resource](bundle.html#bundle-unique). Note that since [FHIR resources do not need to be served through the FHIR API](references.html), the absolute URL may not end with the logical id of the resource (Resource.id), but if the fullUrl does look like a RESTful server URL (e.g. meets the [regex](references.html#regex), then it SHALL end with the Resource.id.
		 */
		fullUrl?: uri;

		/**
		 * Extension for fullUrl
		 **/
		_fullUrl?: Element;

		/**
		 * A resource in the bundle
		 * The Resources for the entry.
		 */
		resource?: Resource;

		/**
		 * Search related information
		 * Information about the search process that lead to the creation of this entry.
		 */
		search?: BundleEntrySearch;

		/**
		 * Transaction Related Information
		 * Additional information about how this entry should be processed as part of a transaction.
		 */
		request?: BundleEntryRequest;

		/**
		 * Transaction Related Information
		 * Additional information about how this entry should be processed as part of a transaction.
		 */
		response?: BundleEntryResponse;
	}

	/**
	 * Contains a collection of resources
	 * A container for a collection of resources.
	 */
	interface Bundle extends Resource {

		/**
		 * Persistent identifier for the bundle
		 * A persistent identifier for the batch that won't change as a batch is copied from server to server.
		 * Persistent identity generally only matters for batches of type Document, Message, and Collection. It would not normally be populated for search and history results, and servers ignore Bundle.identifier when processing batches and transactions. For Documents  the .identifier SHALL be populated such that the .identifier is globally unique.
		 */
		identifier?: Identifier;

		/**
		 * document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection
		 * Indicates the purpose of this bundle - how it was intended to be used.
		 * It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
		 */
		type: BundleBundleType;

		/**
		 * If search, the total number of matches
		 * If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
		 * Only used if the bundle is a search result set. The total does not include resources such as OperationOutcome and included resources, only the total number of matching resources.
		 */
		total?: unsignedInt;

		/**
		 * Extension for total
		 **/
		_total?: Element;

		/**
		 * Links related to this Bundle
		 * A series of links that provide context to this bundle.
		 */
		link?: BundleLink[];

		/**
		 * Entry in the bundle - will have a resource, or information
		 * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
		 */
		entry?: BundleEntry[];

		/**
		 * Digital Signature
		 * Digital Signature - base64 encoded. XML-DSIg or a JWT.
		 * The signature could be created by the "author" of the bundle or by the originating device.   Requirements around inclusion of a signature, verification of signatures and treatment of signed/non-signed bundles is implementation-environment specific.
		 */
		signature?: Signature;
	}

	/**
	 * Software that is covered by this capability statement
	 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
	 */
	interface CapabilityStatementSoftware extends BackboneElement {

		/**
		 * A name the software is known by
		 * Name software is known by.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Version covered by this statement
		 * The version identifier for the software covered by this statement.
		 * If possible, a version should be specified, as statements are likely to be different for different versions of software.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Date this version released
		 * Date this version of the software was released.
		 */
		releaseDate?: dateTime;

		/**
		 * Extension for releaseDate
		 **/
		_releaseDate?: Element;
	}

	/**
	 * If this describes a specific instance
	 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
	 */
	interface CapabilityStatementImplementation extends BackboneElement {

		/**
		 * Describes this specific instance
		 * Information about the specific installation that this capability statement relates to.
		 */
		description: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Base URL for the installation
		 * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;
	}

	/**
	 * Certificates associated with security profiles
	 * Certificates associated with security profiles.
	 */
	interface CapabilityStatementRestSecurityCertificate extends BackboneElement {

		/**
		 * Mime type for certificates
		 * Mime type for a certificate.
		 */
		type?: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Actual certificate
		 * Actual certificate.
		 */
		blob?: base64Binary;

		/**
		 * Extension for blob
		 **/
		_blob?: Element;
	}

	/**
	 * Information about security of implementation
	 * Information about security implementation from an interface perspective - what a client needs to know.
	 */
	interface CapabilityStatementRestSecurity extends BackboneElement {

		/**
		 * Adds CORS Headers (http://enable-cors.org/)
		 * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
		 * The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.
		 */
		cors?: boolean;

		/**
		 * Extension for cors
		 **/
		_cors?: Element;

		/**
		 * OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
		 * Types of security services that are supported/required by the system.
		 */
		service?: CodeableConcept[];

		/**
		 * General description of how security works
		 * General description of how security works.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Certificates associated with security profiles
		 * Certificates associated with security profiles.
		 */
		certificate?: CapabilityStatementRestSecurityCertificate[];
	}

	/**
	 * What operations are supported?
	 * Identifies a restful operation supported by the solution.
	 */
	interface CapabilityStatementRestResourceInteraction extends BackboneElement {

		/**
		 * read | vread | update | patch | delete | history-instance | history-type | create | search-type
		 * Coded identifier of the operation, supported by the system resource.
		 */
		code: CapabilityStatementTypeRestfulInteraction;

		/**
		 * Anything special about operation behavior
		 * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Search parameters supported by implementation
	 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
	 */
	interface CapabilityStatementRestResourceSearchParam extends BackboneElement {

		/**
		 * Name of search parameter
		 * The name of the search parameter used in the interface.
		 * Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Source of definition for parameter
		 * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url]()).
		 * This SHOULD be present, and matches refers to a SearchParameter by its canonical url. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource.
		 */
		definition?: uri;

		/**
		 * Extension for definition
		 **/
		_definition?: Element;

		/**
		 * number | date | string | token | reference | composite | quantity | uri
		 * The type of value a search parameter refers to, and how the content is interpreted.
		 * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
		 */
		type: CapabilityStatementSearchParamType;

		/**
		 * Server-specific usage
		 * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Resource served on the REST interface
	 * A specification of the restful capabilities of the solution for a specific resource type.
	 * Max of one repetition per resource type.
	 */
	interface CapabilityStatementRestResource extends BackboneElement {

		/**
		 * A resource type that is supported
		 * A type of resource exposed via the restful interface.
		 */
		type: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Base System profile for all uses of resource
		 * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
		 * The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.
		 */
		profile?: Reference;

		/**
		 * Additional information about the use of the resource type
		 * Additional information about the resource type used by the system.
		 */
		documentation?: markdown;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * What operations are supported?
		 * Identifies a restful operation supported by the solution.
		 */
		interaction: CapabilityStatementRestResourceInteraction[];

		/**
		 * no-version | versioned | versioned-update
		 * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
		 * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
		 */
		versioning?: CapabilityStatementResourceVersionPolicy;

		/**
		 * Whether vRead can return past versions
		 * A flag for whether the server is able to return past versions as part of the vRead operation.
		 * It is useful to support the vRead operation for current operations, even if past versions aren't available.
		 */
		readHistory?: boolean;

		/**
		 * Extension for readHistory
		 **/
		_readHistory?: Element;

		/**
		 * If update can commit to a new identity
		 * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
		 * Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.
		 */
		updateCreate?: boolean;

		/**
		 * Extension for updateCreate
		 **/
		_updateCreate?: Element;

		/**
		 * If allows/uses conditional create
		 * A flag that indicates that the server supports conditional create.
		 * Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.
		 */
		conditionalCreate?: boolean;

		/**
		 * Extension for conditionalCreate
		 **/
		_conditionalCreate?: Element;

		/**
		 * not-supported | modified-since | not-match | full-support
		 * A code that indicates how the server supports conditional read.
		 * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
		 */
		conditionalRead?: CapabilityStatementConditionalReadStatus;

		/**
		 * If allows/uses conditional update
		 * A flag that indicates that the server supports conditional update.
		 * Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.
		 */
		conditionalUpdate?: boolean;

		/**
		 * Extension for conditionalUpdate
		 **/
		_conditionalUpdate?: Element;

		/**
		 * not-supported | single | multiple - how conditional delete is supported
		 * A code that indicates how the server supports conditional delete.
		 * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
		 */
		conditionalDelete?: CapabilityStatementConditionalDeleteStatus;

		/**
		 * literal | logical | resolves | enforced | local
		 * A set of flags that defines how references are supported.
		 */
		referencePolicy?: CapabilityStatementReferenceHandlingPolicy[];

		/**
		 * _include values supported by the server
		 * A list of _include values supported by the server.
		 * If this list is empty, the server does not support includes.
		 */
		searchInclude?: string[];

		/**
		 * Extension for searchInclude
		 **/
		_searchInclude?: Element[];

		/**
		 * _revinclude values supported by the server
		 * A list of _revinclude (reverse include) values supported by the server.
		 * If this list is empty, the server does not support reverse includes.
		 */
		searchRevInclude?: string[];

		/**
		 * Extension for searchRevInclude
		 **/
		_searchRevInclude?: Element[];

		/**
		 * Search parameters supported by implementation
		 * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
		 */
		searchParam?: CapabilityStatementRestResourceSearchParam[];
	}

	/**
	 * What operations are supported?
	 * A specification of restful operations supported by the system.
	 */
	interface CapabilityStatementRestInteraction extends BackboneElement {

		/**
		 * transaction | batch | search-system | history-system
		 * A coded identifier of the operation, supported by the system.
		 */
		code: CapabilityStatementSystemRestfulInteraction;

		/**
		 * Anything special about operation behavior
		 * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Definition of an operation or a custom query
	 * Definition of an operation or a named query together with its parameters and their meaning and type.
	 */
	interface CapabilityStatementRestOperation extends BackboneElement {

		/**
		 * Name by which the operation/query is invoked
		 * The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.
		 * The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the "$" portion that is always included in the URL.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * The defined operation/query
		 * Where the formal definition can be found.
		 * This can be used to build an HTML form to invoke the operation, for instance.
		 */
		definition: Reference;
	}

	/**
	 * If the endpoint is a RESTful one
	 * A definition of the restful capabilities of the solution, if any.
	 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
	 */
	interface CapabilityStatementRest extends BackboneElement {

		/**
		 * client | server
		 * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
		 */
		mode: CapabilityStatementRestfulCapabilityMode;

		/**
		 * General description of implementation
		 * Information about the system's restful capabilities that apply across all applications, such as security.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * Information about security of implementation
		 * Information about security implementation from an interface perspective - what a client needs to know.
		 */
		security?: CapabilityStatementRestSecurity;

		/**
		 * Resource served on the REST interface
		 * A specification of the restful capabilities of the solution for a specific resource type.
		 * Max of one repetition per resource type.
		 */
		resource?: CapabilityStatementRestResource[];

		/**
		 * What operations are supported?
		 * A specification of restful operations supported by the system.
		 */
		interaction?: CapabilityStatementRestInteraction[];

		/**
		 * Search parameters for searching all resources
		 * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
		 * Typically, the only search parameters supported for all searchse are those that apply to all resources - tags, profiles, text search etc.
		 */
		searchParam?: CapabilityStatementRestResourceSearchParam[];

		/**
		 * Definition of an operation or a custom query
		 * Definition of an operation or a named query together with its parameters and their meaning and type.
		 */
		operation?: CapabilityStatementRestOperation[];

		/**
		 * Compartments served/used by system
		 * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
		 * At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
		 */
		compartment?: uri[];

		/**
		 * Extension for compartment
		 **/
		_compartment?: Element[];
	}

	/**
	 * Where messages should be sent
	 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
	 */
	interface CapabilityStatementMessagingEndpoint extends BackboneElement {

		/**
		 * http | ftp | mllp +
		 * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
		 */
		protocol: Coding;

		/**
		 * Network address or identifier of the end-point
		 * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
		 */
		address: uri;

		/**
		 * Extension for address
		 **/
		_address?: Element;
	}

	/**
	 * Messages supported by this system
	 * References to message definitions for messages this system can send or receive.
	 * This is a proposed alternative to the messaging.event structure.
	 */
	interface CapabilityStatementMessagingSupportedMessage extends BackboneElement {

		/**
		 * sender | receiver
		 * The mode of this event declaration - whether application is sender or receiver.
		 */
		mode: CapabilityStatementEventCapabilityMode;

		/**
		 * Message supported by this system
		 * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
		 */
		definition: Reference;
	}

	/**
	 * Declare support for this event
	 * A description of the solution's support for an event at this end-point.
	 * The same event may be listed up to two times - once as sender and once as receiver.
	 */
	interface CapabilityStatementMessagingEvent extends BackboneElement {

		/**
		 * Event type
		 * A coded identifier of a supported messaging event.
		 */
		code: Coding;

		/**
		 * Consequence | Currency | Notification
		 * The impact of the content of the message.
		 */
		category?: CapabilityStatementMessageSignificanceCategory;

		/**
		 * sender | receiver
		 * The mode of this event declaration - whether an application is a sender or receiver.
		 */
		mode: CapabilityStatementEventCapabilityMode;

		/**
		 * Resource that's focus of message
		 * A resource associated with the event.  This is the resource that defines the event.
		 * This SHALL be provided if the event type supports multiple different resource types.
		 */
		focus: code;

		/**
		 * Extension for focus
		 **/
		_focus?: Element;

		/**
		 * Profile that describes the request
		 * Information about the request for this event.
		 */
		request: Reference;

		/**
		 * Profile that describes the response
		 * Information about the response for this event.
		 */
		response: Reference;

		/**
		 * Endpoint-specific event documentation
		 * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * If messaging is supported
	 * A description of the messaging capabilities of the solution.
	 * Multiple repetitions allow the documentation of multiple endpoints per solution.
	 */
	interface CapabilityStatementMessaging extends BackboneElement {

		/**
		 * Where messages should be sent
		 * An endpoint (network accessible address) to which messages and/or replies are to be sent.
		 */
		endpoint?: CapabilityStatementMessagingEndpoint[];

		/**
		 * Reliable Message Cache Length (min)
		 * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
		 * If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.
		 */
		reliableCache?: unsignedInt;

		/**
		 * Extension for reliableCache
		 **/
		_reliableCache?: Element;

		/**
		 * Messaging interface behavior details
		 * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * Messages supported by this system
		 * References to message definitions for messages this system can send or receive.
		 * This is a proposed alternative to the messaging.event structure.
		 */
		supportedMessage?: CapabilityStatementMessagingSupportedMessage[];

		/**
		 * Declare support for this event
		 * A description of the solution's support for an event at this end-point.
		 * The same event may be listed up to two times - once as sender and once as receiver.
		 */
		event?: CapabilityStatementMessagingEvent[];
	}

	/**
	 * Document definition
	 * A document definition.
	 */
	interface CapabilityStatementDocument extends BackboneElement {

		/**
		 * producer | consumer
		 * Mode of this document declaration - whether an application is a producer or consumer.
		 */
		mode: CapabilityStatementDocumentMode;

		/**
		 * Description of document support
		 * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * Constraint on a resource used in the document
		 * A constraint on a resource used in the document.
		 * The first resource is the document resource.
		 */
		profile: Reference;
	}

	/**
	 * A statement of system capabilities
	 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
	 */
	interface CapabilityStatement extends DomainResource {

		/**
		 * Logical URI to reference this capability statement (globally unique)
		 * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this capability statement is (or will be) published. The URL SHOULD include the major version of the capability statement. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Business version of the capability statement
		 * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the capability statement with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this capability statement (computer friendly)
		 * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this capability statement (human friendly)
		 * A short, descriptive, user-friendly title for the capability statement.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this capability statement. Enables tracking the life-cycle of the content.
		 * Allows filtering of capability statements that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired capability statement without due consideration. This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
		 */
		status: CapabilityStatementPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of capability statement that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental capability statement in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the capability statement was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the capability statement.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the capability statement
		 * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
		 * This description can be used to capture details such as why the capability statement was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created). This does not need to be populated if the description is adequately implied by the software or implementation details.
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate capability statement instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for capability statement (if applicable)
		 * A legal or geographic region in which the capability statement is intended to be used.
		 * It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this capability statement is defined
		 * Explaination of why this capability statement is needed and why it has been designed as it has.
		 * This element does not describe the usage of the capability statement Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * instance | capability | requirements
		 * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase).
		 */
		kind: CapabilityStatementCapabilityStatementKind;

		/**
		 * Canonical URL of another capability statement this implements
		 * Reference to a canonical URL of another CapabilityStatement that this software implements or uses. This capability statement is a published API description that corresponds to a business service. The rest of the capability statement does not need to repeat the details of the referenced resource, but can do so.
		 * HL7 defines the following Services: [Terminology Service](terminology-service.html).

Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
		 */
		instantiates?: uri[];

		/**
		 * Extension for instantiates
		 **/
		_instantiates?: Element[];

		/**
		 * Software that is covered by this capability statement
		 * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
		 */
		software?: CapabilityStatementSoftware;

		/**
		 * If this describes a specific instance
		 * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
		 */
		implementation?: CapabilityStatementImplementation;

		/**
		 * FHIR Version the system uses
		 * The version of the FHIR specification on which this capability statement is based.
		 */
		fhirVersion: id;

		/**
		 * Extension for fhirVersion
		 **/
		_fhirVersion?: Element;

		/**
		 * no | extensions | elements | both
		 * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
		 * Unknown elements in a resource can only arise as later versions of the specification are published, because this is the only place where such elements can be defined. Hence accepting unknown elements is about inter-version compatibility.

Applications are recommended to accept unknown extensions and elements ('both'), but this is not always possible.
		 */
		acceptUnknown: CapabilityStatementUnknownContentCode;

		/**
		 * formats supported (xml | json | ttl | mime type)
		 * A list of the formats supported by this implementation using their content types.
		 * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
		 */
		format: code[];

		/**
		 * Extension for format
		 **/
		_format?: Element[];

		/**
		 * Patch formats supported
		 * A list of the patch formats supported by this implementation using their content types.
		 * At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
		 */
		patchFormat?: code[];

		/**
		 * Extension for patchFormat
		 **/
		_patchFormat?: Element[];

		/**
		 * Implementation guides supported
		 * A list of implementation guides that the server does (or should) support in their entirety.
		 */
		implementationGuide?: uri[];

		/**
		 * Extension for implementationGuide
		 **/
		_implementationGuide?: Element[];

		/**
		 * Profiles for use cases supported
		 * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
		 * Supported profiles are different than the profiles that apply to a particular resource in rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that does? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).  Typically, supported profiles cross resource types to describe a network of related resources, so they are listed here rather than by resource. However, they do not need to describe more than one resource.
		 */
		profile?: Reference[];

		/**
		 * If the endpoint is a RESTful one
		 * A definition of the restful capabilities of the solution, if any.
		 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
		 */
		rest?: CapabilityStatementRest[];

		/**
		 * If messaging is supported
		 * A description of the messaging capabilities of the solution.
		 * Multiple repetitions allow the documentation of multiple endpoints per solution.
		 */
		messaging?: CapabilityStatementMessaging[];

		/**
		 * Document definition
		 * A document definition.
		 */
		document?: CapabilityStatementDocument[];
	}

	/**
	 * In-line definition of activity
	 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
	 */
	interface CarePlanActivityDetail extends BackboneElement {

		/**
		 * diet | drug | encounter | observation | procedure | supply | other
		 * High-level categorization of the type of activity in a care plan.
		 */
		category?: CodeableConcept;

		/**
		 * Protocol or definition
		 * Identifies the protocol, questionnaire, guideline or other specification the planned activity should be conducted in accordance with.
		 */
		definition?: Reference;

		/**
		 * Detail type of activity
		 * Detailed description of the type of planned activity; e.g. What lab test, what procedure, what kind of encounter.
		 * Tends to be less relevant for activities involving particular products.  Codes should not convey negation - use "prohibited" instead.
		 */
		code?: CodeableConcept;

		/**
		 * Why activity should be done or why activity was prohibited
		 * Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
		 * This could be a diagnosis code.  If a full condition record exists or additional detail is needed, use reasonCondition instead.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Condition triggering need for activity
		 * Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.
		 * Conditions can be identified at the activity level that are not identified as reasons for the overall plan.
		 */
		reasonReference?: Reference[];

		/**
		 * Goals this activity relates to
		 * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
		 */
		goal?: Reference[];

		/**
		 * not-started | scheduled | in-progress | on-hold | completed | cancelled | unknown
		 * Identifies what progress is being made for the specific activity.
		 * Some aspects of status can be inferred based on the resources linked in actionTaken.  Note that "status" is only as current as the plan was most recently updated.  
The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the activity.
		 */
		status: CarePlanCarePlanActivityStatus;

		/**
		 * Reason for current status
		 * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
		 * Will generally not be present if status is "complete".  Be sure to prompt to update this (or at least remove the existing value) if the status is changed.
		 */
		statusReason?: string;

		/**
		 * Extension for statusReason
		 **/
		_statusReason?: Element;

		/**
		 * Do NOT do
		 * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, indicates that the described activity is one that should be engaged in when following the plan.
		 * This element is labeled as a modifier because it marks an activity as an activity that is not to be performed.
		 */
		prohibited?: boolean;

		/**
		 * Extension for prohibited
		 **/
		_prohibited?: Element;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		scheduledTiming?: Timing;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		scheduledPeriod?: Period;

		/**
		 * When activity is to occur
		 * The period, timing or frequency upon which the described activity is to occur.
		 */
		scheduledString?: string;

		/**
		 * Extension for scheduledString
		 **/
		_scheduledString?: Element;

		/**
		 * Where it should happen
		 * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
		 * May reference a specific clinical location or may identify a type of location.
		 */
		location?: Reference;

		/**
		 * Who will be responsible?
		 * Identifies who's expected to be involved in the activity.
		 * A performer MAY also be a participant in the care plan.
		 */
		performer?: Reference[];

		/**
		 * What is to be administered/supplied
		 * Identifies the food, drug or other product to be consumed or supplied in the activity.
		 */
		productCodeableConcept?: CodeableConcept;

		/**
		 * What is to be administered/supplied
		 * Identifies the food, drug or other product to be consumed or supplied in the activity.
		 */
		productReference?: Reference;

		/**
		 * How to consume/day?
		 * Identifies the quantity expected to be consumed in a given day.
		 */
		dailyAmount?: SimpleQuantity;

		/**
		 * How much to administer/supply/consume
		 * Identifies the quantity expected to be supplied, administered or consumed by the subject.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Extra info describing activity to perform
		 * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;
	}

	/**
	 * Action to occur as part of plan
	 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
	 */
	interface CarePlanActivity extends BackboneElement {

		/**
		 * Results of the activity
		 * Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
		 * Note that this should not duplicate the activity status (e.g. completed or in progress).
		 */
		outcomeCodeableConcept?: CodeableConcept[];

		/**
		 * Appointment, Encounter, Procedure, etc.
		 * Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
		 * The activity outcome is independent of the outcome of the related goal(s).  For example, if the goal is to achieve a target body weight of 150 lb and an activity is defined to diet, then the activity outcome could be calories consumed whereas the goal outcome is an observation for the actual body weight measured.
		 */
		outcomeReference?: Reference[];

		/**
		 * Comments about the activity status/progress
		 * Notes about the adherence/status/progress of the activity.
		 * This element should NOT be used to describe the activity to be performed - that occurs either within the resource pointed to by activity.detail.reference or in activity.detail.description.
		 */
		progress?: Annotation[];

		/**
		 * Activity details defined in specific resource
		 * The details of the proposed activity represented in a specific resource.
		 * Standard extension exists ([goal-pertainstogoal](extension-goal-pertainstogoal.html)) that allows goals to be referenced from any of the referenced resources in CarePlan.activity.reference.  
The goal should be visible when the resource referenced by CarePlan.activity.reference is viewed indepedently from the CarePlan.  Requests that are pointed to by a CarePlan using this element should *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that are part of a CarePlan are not "based on" the CarePlan.
		 */
		reference?: Reference;

		/**
		 * In-line definition of activity
		 * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
		 */
		detail?: CarePlanActivityDetail;
	}

	/**
	 * Healthcare plan for patient or group
	 * Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
	 */
	interface CarePlan extends DomainResource {

		/**
		 * External Ids for this plan
		 * This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * Protocol or definition
		 * Identifies the protocol, questionnaire, guideline or other specification the care plan should be conducted in accordance with.
		 */
		definition?: Reference[];

		/**
		 * Fulfills care plan
		 * A care plan that is fulfilled in whole or in part by this care plan.
		 */
		basedOn?: Reference[];

		/**
		 * CarePlan replaced by this CarePlan
		 * Completed or terminated care plan whose function is taken by this new care plan.
		 * The replacement could be because the initial care plan was immediately rejected (due to an issue) or because the previous care plan was completed, but the need for the action described by the care plan remains ongoing.
		 */
		replaces?: Reference[];

		/**
		 * Part of referenced CarePlan
		 * A larger care plan of which this particular care plan is a component or step.
		 * Each care plan is an independent request, such that having a care plan be part of another care plan can cause issues with cascading statuses.  As such, this element is still being discussed.
		 */
		partOf?: Reference[];

		/**
		 * draft | active | suspended | completed | entered-in-error | cancelled | unknown
		 * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
		 * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.

This element is labeled as a modifier because the status contains the code entered-in-error] that marks the plan as not currently valid.
		 */
		status: CarePlanCarePlanStatus;

		/**
		 * proposal | plan | order | option
		 * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
		 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
		 */
		intent: CarePlanCarePlanIntent;

		/**
		 * Type of plan
		 * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
		 * There may be multiple axis of categorization and one plan may serve multiple purposes.  In some cases, this may be redundant with references to CarePlan.concern.
		 */
		category?: CodeableConcept[];

		/**
		 * Human-friendly name for the CarePlan
		 * Human-friendly name for the CarePlan.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Summary of nature of plan
		 * A description of the scope and nature of the plan.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Who care plan is for
		 * Identifies the patient or group whose intended care is described by the plan.
		 */
		subject: Reference;

		/**
		 * Created in context of
		 * Identifies the original context in which this particular CarePlan was created.
		 * Activities conducted as a result of the care plan may well occur as part of other encounters/episodes.
		 */
		context?: Reference;

		/**
		 * Time period plan covers
		 * Indicates when the plan did (or is intended to) come into effect and end.
		 * Any activities scheduled as part of the plan should be constrained to the specified period regardless of whether the activities are planned within a single encounter/episode or across multiple encounters/episodes (e.g. the longitudinal management of a chronic condition).
		 */
		period?: Period;

		/**
		 * Who is responsible for contents of the plan
		 * Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
		 * Collaborative care plans may have multiple authors.
		 */
		author?: Reference[];

		/**
		 * Who's involved in plan?
		 * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
		 */
		careTeam?: Reference[];

		/**
		 * Health issues this plan addresses
		 * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
		 */
		addresses?: Reference[];

		/**
		 * Information considered as part of plan
		 * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include co-morbidities, recent procedures, limitations, recent assessments, etc.
		 * Use "concern" to identify specific conditions addressed by the care plan.
		 */
		supportingInfo?: Reference[];

		/**
		 * Desired outcome of plan
		 * Describes the intended objective(s) of carrying out the care plan.
		 * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
		 */
		goal?: Reference[];

		/**
		 * Action to occur as part of plan
		 * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
		 */
		activity?: CarePlanActivity[];

		/**
		 * Comments about the plan
		 * General notes about the care plan not covered elsewhere.
		 */
		note?: Annotation[];
	}

	/**
	 * Members of the team
	 * Identifies all people and organizations who are expected to be involved in the care team.
	 */
	interface CareTeamParticipant extends BackboneElement {

		/**
		 * Type of involvement
		 * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
		 * Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.
		 */
		role?: CodeableConcept;

		/**
		 * Who is involved
		 * The specific person or organization who is participating/expected to participate in the care team.
		 * Patient only needs to be listed if they have a role other than "subject of care".

Member is optional because some participants may be known only by their role, particularly in draft plans.
		 */
		member?: Reference;

		/**
		 * Organization of the practitioner
		 * The organization of the practitioner.
		 */
		onBehalfOf?: Reference;

		/**
		 * Time period of participant
		 * Indicates when the specific member or organization did (or is intended to) come into effect and end.
		 */
		period?: Period;
	}

	/**
	 * Planned participants in the coordination and delivery of care for a patient or group
	 * The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
	 */
	interface CareTeam extends DomainResource {

		/**
		 * External Ids for this team
		 * This records identifiers associated with this care team that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
		 */
		identifier?: Identifier[];

		/**
		 * proposed | active | suspended | inactive | entered-in-error
		 * Indicates the current state of the care team.
		 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
		 */
		status?: CareTeamCareTeamStatus;

		/**
		 * Type of team
		 * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
		 * There may be multiple axis of categorization and one team may serve multiple purposes.
		 */
		category?: CodeableConcept[];

		/**
		 * Name of the team, such as crisis assessment team
		 * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
		 * The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly . ).
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Who care team is for
		 * Identifies the patient or group whose intended care is handled by the team.
		 */
		subject?: Reference;

		/**
		 * Encounter or episode associated with CareTeam
		 * The encounter or episode of care that establishes the context for this care team.
		 */
		context?: Reference;

		/**
		 * Time period team covers
		 * Indicates when the team did (or is intended to) come into effect and end.
		 */
		period?: Period;

		/**
		 * Members of the team
		 * Identifies all people and organizations who are expected to be involved in the care team.
		 */
		participant?: CareTeamParticipant[];

		/**
		 * Why the care team exists
		 * Describes why the care team exists.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Why the care team exists
		 * Condition(s) that this care team addresses.
		 */
		reasonReference?: Reference[];

		/**
		 * Organization responsible for the care team
		 * The organization responsible for the care team.
		 */
		managingOrganization?: Reference[];

		/**
		 * Comments made about the CareTeam
		 * Comments made about the CareTeam.
		 */
		note?: Annotation[];
	}

	/**
	 * Who performed charged service
	 * Indicates who or what performed or participated in the charged service.
	 */
	interface ChargeItemParticipant extends BackboneElement {

		/**
		 * What type of performance was done
		 * Describes the type of performance or participation(e.g. primary surgeon, anaesthesiologiest, etc.).
		 */
		role?: CodeableConcept;

		/**
		 * Individual who was performing
		 * The device, practitioner, etc. who performed or participated in the service.
		 */
		actor: Reference;
	}

	/**
	 * Item containing charge code(s) associated with the provision of healthcare provider products
	 * The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
	 */
	interface ChargeItem extends DomainResource {

		/**
		 * Business Identifier for item
		 * Identifiers assigned to this event performer or other systems.
		 */
		identifier?: Identifier;

		/**
		 * Defining information about the code of this charge item
		 * References the source of pricing information, rules of application for the code this ChargeItem uses.
		 * Target Resource is yet to be defined as a container that holds information about list prices and rules applicable to the charge item code. Once defined, change type back to Reference(Definition Type).
		 */
		definition?: uri[];

		/**
		 * Extension for definition
		 **/
		_definition?: Element[];

		/**
		 * planned | billable | not-billable | aborted | billed | entered-in-error | unknown
		 * The current state of the ChargeItem.
		 * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.

This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
		 */
		status: ChargeItemChargeItemStatus;

		/**
		 * Part of referenced ChargeItem
		 * ChargeItems can be grouped to larger ChargeItems covering the whole set.
		 */
		partOf?: Reference[];

		/**
		 * A code that identifies the charge, like a billing code
		 * A code that identifies the charge, like a billing code.
		 */
		code: CodeableConcept;

		/**
		 * Individual service was done for/to
		 * The individual or set of individuals the action is being or was performed on.
		 */
		subject: Reference;

		/**
		 * Encounter / Episode associated with event
		 * The encounter or episode of care that establishes the context for this event.
		 */
		context?: Reference;

		/**
		 * When the charged service was applied
		 * Date/time(s) or duration when the charged service was applied.
		 * The list of types may be constrained as appropriate for the type of charge item.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When the charged service was applied
		 * Date/time(s) or duration when the charged service was applied.
		 * The list of types may be constrained as appropriate for the type of charge item.
		 */
		occurrencePeriod?: Period;

		/**
		 * When the charged service was applied
		 * Date/time(s) or duration when the charged service was applied.
		 * The list of types may be constrained as appropriate for the type of charge item.
		 */
		occurrenceTiming?: Timing;

		/**
		 * Who performed charged service
		 * Indicates who or what performed or participated in the charged service.
		 */
		participant?: ChargeItemParticipant[];

		/**
		 * Organization providing the charged sevice
		 * The organization requesting the service.
		 * Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
		 */
		performingOrganization?: Reference;

		/**
		 * Organization requesting the charged service
		 * The organization performing the service.
		 * The rendered Service may not be associated with a Request. It has to be made clear, ob which Organization's Request, the services have been rendered. (In many cases, this may just be the Department associated with the Encounter.location).
		 */
		requestingOrganization?: Reference;

		/**
		 * Quantity of which the charge item has been serviced
		 * Quantity of which the charge item has been serviced.
		 * In many cases this may just be a value, if the underlying units are implicit in the definition of the charge item code.
		 */
		quantity?: Quantity;

		/**
		 * Anatomical location, if relevant
		 * The anatomical location where the related service has been applied.
		 * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
		 */
		bodysite?: CodeableConcept[];

		/**
		 * Factor overriding the associated rules
		 * Factor overriding the factor determined by the rules associated with the code.
		 * There is no reason to carry the factor in the instance of a ChargeItem unless special circumstances require a manual override. The factors are usually defined by a set of rules in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overriden.
		 */
		factorOverride?: decimal;

		/**
		 * Extension for factorOverride
		 **/
		_factorOverride?: Element;

		/**
		 * Price overriding the associated rules
		 * Total price of the charge overriding the list price associated with the code.
		 * There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overriden.
		 */
		priceOverride?: Money;

		/**
		 * Reason for overriding the list price/factor
		 * If the list price or the rule based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
		 * Derived Profiles may chose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
		 */
		overrideReason?: string;

		/**
		 * Extension for overrideReason
		 **/
		_overrideReason?: Element;

		/**
		 * Individual who was entering
		 * The device, practitioner, etc. who entered the charge item.
		 * The enterer is also te person considered responsible for factor/priceOverrides if applicable.
		 */
		enterer?: Reference;

		/**
		 * Date the charge item was entered
		 * Date the charge item was entered.
		 * The actual date when the service associated with the charge has been rendered is captured in occurrence[x].
		 */
		enteredDate?: dateTime;

		/**
		 * Extension for enteredDate
		 **/
		_enteredDate?: Element;

		/**
		 * Why was the charged  service rendered?
		 * Describes why the event occurred in coded or textual form.
		 * If the application of the charge item requires a reason to be given, it can be captured here. Textual reasons can be captured using reasonCode.text.
		 */
		reason?: CodeableConcept[];

		/**
		 * Which rendered service is being charged?
		 * Indicated the rendered service that caused this charge.
		 */
		service?: Reference[];

		/**
		 * Account to place this charge
		 * Account into which this ChargeItems belongs.
		 * Systems posting the ChargeItems may not always be able to determine, which accounts the Items need to be places into. It is up to the potprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
		 */
		account?: Reference[];

		/**
		 * Comments made about the ChargeItem
		 * Comments made about the event by the performer, subject or other participants.
		 */
		note?: Annotation[];

		/**
		 * Further information supporting the this charge
		 * Further information supporting the this charge.
		 */
		supportingInformation?: Reference[];
	}

	/**
	 * Related Claims which may be revelant to processing this claimn
	 * Other claims which are related to this claim such as prior claim versions or for related services.
	 */
	interface ClaimRelated extends BackboneElement {

		/**
		 * Reference to the related claim
		 * Other claims which are related to this claim such as prior claim versions or for related services.
		 * Do we need a relationship code?
		 */
		claim?: Reference;

		/**
		 * How the reference claim is related
		 * For example prior or umbrella.
		 */
		relationship?: CodeableConcept;

		/**
		 * Related file or case reference
		 * An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .
		 */
		reference?: Identifier;
	}

	/**
	 * Party to be paid any benefits payable
	 * The party to be reimbursed for the services.
	 */
	interface ClaimPayee extends BackboneElement {

		/**
		 * Type of party: Subscriber, Provider, other
		 * Type of Party to be reimbursed: Subscriber, provider, other.
		 */
		type: CodeableConcept;

		/**
		 * organization | patient | practitioner | relatedperson
		 * organization | patient | practitioner | relatedperson.
		 */
		resourceType?: Coding;

		/**
		 * Party to receive the payable
		 * Party to be reimbursed: Subscriber, provider, other.
		 */
		party?: Reference;
	}

	/**
	 * Members of the care team
	 * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
	 */
	interface ClaimCareTeam extends BackboneElement {

		/**
		 * Number to covey order of careTeam
		 * Sequence of the careTeam which serves to order and provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Provider individual or organization
		 * Member of the team who provided the overall service.
		 */
		provider: Reference;

		/**
		 * Billing provider
		 * The party who is billing and responsible for the claimed good or service rendered to the patient.
		 */
		responsible?: boolean;

		/**
		 * Extension for responsible
		 **/
		_responsible?: Element;

		/**
		 * Role on the team
		 * The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.
		 */
		role?: CodeableConcept;

		/**
		 * Type, classification or Specialization
		 * The qualification which is applicable for this service.
		 */
		qualification?: CodeableConcept;
	}

	/**
	 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
	 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
	 */
	interface ClaimInformation extends BackboneElement {

		/**
		 * Information instance identifier
		 * Sequence of the information element which serves to provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * General class of information
		 * The general class of the information supplied: information; exception; accident, employment; onset, etc.
		 * This may contain the local bill type codes such as the US UB-04 bill type code.
		 */
		category: CodeableConcept;

		/**
		 * Type of information
		 * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.
		 * This may contain the local bill type codes such as the US UB-04 bill type code.
		 */
		code?: CodeableConcept;

		/**
		 * When it occurred
		 * The date when or period to which this information refers.
		 */
		timingDate?: date;

		/**
		 * Extension for timingDate
		 **/
		_timingDate?: Element;

		/**
		 * When it occurred
		 * The date when or period to which this information refers.
		 */
		timingPeriod?: Period;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueQuantity?: Quantity;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueAttachment?: Attachment;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueReference?: Reference;

		/**
		 * Reason associated with the information
		 * For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content.
		 */
		reason?: CodeableConcept;
	}

	/**
	 * List of Diagnosis
	 * List of patient diagnosis for which care is sought.
	 */
	interface ClaimDiagnosis extends BackboneElement {

		/**
		 * Number to covey order of diagnosis
		 * Sequence of diagnosis which serves to provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Patient's diagnosis
		 * The diagnosis.
		 */
		diagnosisCodeableConcept: CodeableConcept;

		/**
		 * Patient's diagnosis
		 * The diagnosis.
		 */
		diagnosisReference: Reference;

		/**
		 * Timing or nature of the diagnosis
		 * The type of the Diagnosis, for example: admitting, primary, secondary, discharge.
		 * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
		 */
		type?: CodeableConcept[];

		/**
		 * Package billing code
		 * The package billing code, for example DRG, based on the assigned grouping code system.
		 */
		packageCode?: CodeableConcept;
	}

	/**
	 * Procedures performed
	 * Ordered list of patient procedures performed to support the adjudication.
	 */
	interface ClaimProcedure extends BackboneElement {

		/**
		 * Procedure sequence for reference
		 * Sequence of procedures which serves to order and provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * When the procedure was performed
		 * Date and optionally time the procedure was performed .
		 * SB DateTime??
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Patient's list of procedures performed
		 * The procedure code.
		 */
		procedureCodeableConcept: CodeableConcept;

		/**
		 * Patient's list of procedures performed
		 * The procedure code.
		 */
		procedureReference: Reference;
	}

	/**
	 * Insurance or medical plan
	 * Financial instrument by which payment information for health care.
	 */
	interface ClaimInsurance extends BackboneElement {

		/**
		 * Service instance identifier
		 * Sequence of coverage which serves to provide a link and convey coordination of benefit order.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Is the focal Coverage
		 * A flag to indicate that this Coverage is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
		 */
		focal: boolean;

		/**
		 * Extension for focal
		 **/
		_focal?: Element;

		/**
		 * Insurance information
		 * Reference to the program or plan identification, underwriter or payor.
		 */
		coverage: Reference;

		/**
		 * Business agreement
		 * The contract number of a business agreement which describes the terms and conditions.
		 */
		businessArrangement?: string;

		/**
		 * Extension for businessArrangement
		 **/
		_businessArrangement?: Element;

		/**
		 * Pre-Authorization/Determination Reference
		 * A list of references from the Insurer to which these services pertain.
		 */
		preAuthRef?: string[];

		/**
		 * Extension for preAuthRef
		 **/
		_preAuthRef?: Element[];

		/**
		 * Adjudication results
		 * The Coverages adjudication details.
		 */
		claimResponse?: Reference;
	}

	/**
	 * Details about an accident
	 * An accident which resulted in the need for healthcare services.
	 */
	interface ClaimAccident extends BackboneElement {

		/**
		 * When the accident occurred
see information codes
see information codes
		 * Date of an accident which these services are addressing.
		 */
		date: date;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * The nature of the accident
		 * Type of accident: work, auto, etc.
		 */
		type?: CodeableConcept;

		/**
		 * Accident Place
		 * Accident Place.
		 */
		locationAddress?: Address;

		/**
		 * Accident Place
		 * Accident Place.
		 */
		locationReference?: Reference;
	}

	/**
	 * Additional items
	 * Third tier of goods and services.
	 */
	interface ClaimItemDetailSubDetail extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Program specific reason for item inclusion
		 * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
		 */
		programCode?: CodeableConcept[];

		/**
		 * Count of Products or Services
		 * The number of repetitions of a service or product.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Fee, charge or cost per point
		 * The fee for an addittional service or product or charge.
		 */
		unitPrice?: Money;

		/**
		 * Price scaling factor
		 * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Net additional item cost
		 * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;

		/**
		 * Unique Device Identifier
		 * List of Unique Device Identifiers associated with this line item.
		 */
		udi?: Reference[];
	}

	/**
	 * Additional items
	 * Second tier of goods and services.
	 */
	interface ClaimItemDetail extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Program specific reason for item inclusion
		 * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
		 */
		programCode?: CodeableConcept[];

		/**
		 * Count of Products or Services
		 * The number of repetitions of a service or product.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Fee, charge or cost per point
		 * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
		 */
		unitPrice?: Money;

		/**
		 * Price scaling factor
		 * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Total additional item cost
		 * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;

		/**
		 * Unique Device Identifier
		 * List of Unique Device Identifiers associated with this line item.
		 */
		udi?: Reference[];

		/**
		 * Additional items
		 * Third tier of goods and services.
		 */
		subDetail?: ClaimItemDetailSubDetail[];
	}

	/**
	 * Goods and Services
	 * First tier of goods and services.
	 */
	interface ClaimItem extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Applicable careTeam members
		 * CareTeam applicable for this service or product line.
		 */
		careTeamLinkId?: positiveInt[];

		/**
		 * Extension for careTeamLinkId
		 **/
		_careTeamLinkId?: Element[];

		/**
		 * Applicable diagnoses
		 * Diagnosis applicable for this service or product line.
		 */
		diagnosisLinkId?: positiveInt[];

		/**
		 * Extension for diagnosisLinkId
		 **/
		_diagnosisLinkId?: Element[];

		/**
		 * Applicable procedures
		 * Procedures applicable for this service or product line.
		 */
		procedureLinkId?: positiveInt[];

		/**
		 * Extension for procedureLinkId
		 **/
		_procedureLinkId?: Element[];

		/**
		 * Applicable exception and supporting information
		 * Exceptions, special conditions and supporting information pplicable for this service or product line.
		 */
		informationLinkId?: positiveInt[];

		/**
		 * Extension for informationLinkId
		 **/
		_informationLinkId?: Element[];

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,RXNorm,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Program specific reason for item inclusion
		 * For programs which require reason codes for the inclusion or covering of this billed item under the program or sub-program.
		 */
		programCode?: CodeableConcept[];

		/**
		 * Date or dates of Service
		 * The date or dates when the enclosed suite of services were performed or completed.
		 */
		servicedDate?: date;

		/**
		 * Extension for servicedDate
		 **/
		_servicedDate?: Element;

		/**
		 * Date or dates of Service
		 * The date or dates when the enclosed suite of services were performed or completed.
		 */
		servicedPeriod?: Period;

		/**
		 * Place of service
		 * Where the service was provided.
		 */
		locationCodeableConcept?: CodeableConcept;

		/**
		 * Place of service
		 * Where the service was provided.
		 */
		locationAddress?: Address;

		/**
		 * Place of service
		 * Where the service was provided.
		 */
		locationReference?: Reference;

		/**
		 * Count of Products or Services
		 * The number of repetitions of a service or product.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Fee, charge or cost per point
		 * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
		 */
		unitPrice?: Money;

		/**
		 * Price scaling factor
		 * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Total item cost
		 * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;

		/**
		 * Unique Device Identifier
		 * List of Unique Device Identifiers associated with this line item.
		 */
		udi?: Reference[];

		/**
		 * Service Location
		 * Physical service site on the patient (limb, tooth, etc).
		 */
		bodySite?: CodeableConcept;

		/**
		 * Service Sub-location
		 * A region or surface of the site, eg. limb region or tooth surface(s).
		 */
		subSite?: CodeableConcept[];

		/**
		 * Encounters related to this billed item
		 * A billed item may include goods or services provided in multiple encounters.
		 */
		encounter?: Reference[];

		/**
		 * Additional items
		 * Second tier of goods and services.
		 */
		detail?: ClaimItemDetail[];
	}

	/**
	 * Claim, Pre-determination or Pre-authorization
	 * A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
	 */
	interface Claim extends DomainResource {

		/**
		 * Claim number
		 * The business identifier for the instance: claim number, pre-determination or pre-authorization number.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the claim as not currently valid.
		 */
		status?: ClaimClaimStatus;

		/**
		 * Type or discipline
		 * The category of claim, eg, oral, pharmacy, vision, insitutional, professional.
		 * Affects which fields and value sets are used.
		 */
		type?: CodeableConcept;

		/**
		 * Finer grained claim type information
		 * A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.
		 * This may contain the local bill type codes such as the US UB-04 bill type code.
		 */
		subType?: CodeableConcept[];

		/**
		 * complete | proposed | exploratory | other
		 * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
		 */
		use?: ClaimUse;

		/**
		 * The subject of the Products and Services
		 * Patient Resource.
		 */
		patient?: Reference;

		/**
		 * Period for charge submission
		 * The billable period for which charges are being submitted.
		 */
		billablePeriod?: Period;

		/**
		 * Creation date
		 * The date when the enclosed suite of services were performed or completed.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Author
		 * Person who created the invoice/claim/pre-determination or pre-authorization.
		 */
		enterer?: Reference;

		/**
		 * Target
		 * The Insurer who is target of the request.
		 */
		insurer?: Reference;

		/**
		 * Responsible provider
		 * The provider which is responsible for the bill, claim pre-determination, pre-authorization.
		 */
		provider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the bill, claim pre-determination, pre-authorization.
		 */
		organization?: Reference;

		/**
		 * Desired processing priority
		 * Immediate (STAT), best effort (NORMAL), deferred (DEFER).
		 */
		priority?: CodeableConcept;

		/**
		 * Funds requested to be reserved
		 * In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
		 */
		fundsReserve?: CodeableConcept;

		/**
		 * Related Claims which may be revelant to processing this claimn
		 * Other claims which are related to this claim such as prior claim versions or for related services.
		 */
		related?: ClaimRelated[];

		/**
		 * Prescription authorizing services or products
		 * Prescription to support the dispensing of Pharmacy or Vision products.
		 * Should we create a group to hold multiple prescriptions and add a sequence number and on the line items a link to the sequence.
		 */
		prescription?: Reference;

		/**
		 * Original prescription if superceded by fulfiller
		 * Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
		 * as above.
		 */
		originalPrescription?: Reference;

		/**
		 * Party to be paid any benefits payable
		 * The party to be reimbursed for the services.
		 */
		payee?: ClaimPayee;

		/**
		 * Treatment Referral
		 * The referral resource which lists the date, practitioner, reason and other supporting information.
		 */
		referral?: Reference;

		/**
		 * Servicing Facility
		 * Facility where the services were provided.
		 */
		facility?: Reference;

		/**
		 * Members of the care team
		 * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
		 */
		careTeam?: ClaimCareTeam[];

		/**
		 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
		 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
		 */
		information?: ClaimInformation[];

		/**
		 * List of Diagnosis
		 * List of patient diagnosis for which care is sought.
		 */
		diagnosis?: ClaimDiagnosis[];

		/**
		 * Procedures performed
		 * Ordered list of patient procedures performed to support the adjudication.
		 */
		procedure?: ClaimProcedure[];

		/**
		 * Insurance or medical plan
		 * Financial instrument by which payment information for health care.
		 */
		insurance?: ClaimInsurance[];

		/**
		 * Details about an accident
		 * An accident which resulted in the need for healthcare services.
		 */
		accident?: ClaimAccident;

		/**
		 * Period unable to work
		 * The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
		 */
		employmentImpacted?: Period;

		/**
		 * Period in hospital
		 * The start and optional end dates of when the patient was confined to a treatment center.
		 */
		hospitalization?: Period;

		/**
		 * Goods and Services
		 * First tier of goods and services.
		 */
		item?: ClaimItem[];

		/**
		 * Total claim cost
		 * The total value of the claim.
		 */
		total?: Money;
	}

	/**
	 * Adjudication details
	 * The adjudication results.
	 */
	interface ClaimResponseItemAdjudication extends BackboneElement {

		/**
		 * Adjudication category such as co-pay, eligible, benefit, etc.
		 * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
		 */
		category: CodeableConcept;

		/**
		 * Explanation of Adjudication outcome
		 * Adjudication reason such as limit reached.
		 */
		reason?: CodeableConcept;

		/**
		 * Monetary amount
		 * Monetary amount associated with the code.
		 */
		amount?: Money;

		/**
		 * Non-monetary value
		 * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
		 */
		value?: decimal;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Subdetail line items
	 * The third tier service adjudications for submitted services.
	 */
	interface ClaimResponseItemDetailSubDetail extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequenceLinkId: positiveInt;

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Subdetail level adjudication details
		 * The adjudications results.
		 */
		adjudication?: ClaimResponseItemAdjudication[];
	}

	/**
	 * Detail line items
	 * The second tier service adjudications for submitted services.
	 */
	interface ClaimResponseItemDetail extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequenceLinkId: positiveInt;

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Detail level adjudication details
		 * The adjudications results.
		 */
		adjudication?: ClaimResponseItemAdjudication[];

		/**
		 * Subdetail line items
		 * The third tier service adjudications for submitted services.
		 */
		subDetail?: ClaimResponseItemDetailSubDetail[];
	}

	/**
	 * Line items
	 * The first tier service adjudications for submitted services.
	 */
	interface ClaimResponseItem extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequenceLinkId: positiveInt;

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Adjudication details
		 * The adjudication results.
		 */
		adjudication?: ClaimResponseItemAdjudication[];

		/**
		 * Detail line items
		 * The second tier service adjudications for submitted services.
		 */
		detail?: ClaimResponseItemDetail[];
	}

	/**
	 * Added items details
	 * The second tier service adjudications for payor added services.
	 */
	interface ClaimResponseAddItemDetail extends BackboneElement {

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Service or Product
		 * A code to indicate the Professional Service or Product supplied.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Professional fee or Product charge
		 * The fee charged for the professional service or product..
		 */
		fee?: Money;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Added items detail adjudication
		 * The adjudications results.
		 */
		adjudication?: ClaimResponseItemAdjudication[];
	}

	/**
	 * Insurer added line items
	 * The first tier service adjudications for payor added services.
	 */
	interface ClaimResponseAddItem extends BackboneElement {

		/**
		 * Service instances
		 * List of input service items which this service line is intended to replace.
		 */
		sequenceLinkId?: positiveInt[];

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element[];

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Group, Service or Product
		 * A code to indicate the Professional Service or Product supplied.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Professional fee or Product charge
		 * The fee charged for the professional service or product..
		 */
		fee?: Money;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Added items adjudication
		 * The adjudications results.
		 */
		adjudication?: ClaimResponseItemAdjudication[];

		/**
		 * Added items details
		 * The second tier service adjudications for payor added services.
		 */
		detail?: ClaimResponseAddItemDetail[];
	}

	/**
	 * Processing errors
	 * Mutually exclusive with Services Provided (Item).
	 */
	interface ClaimResponseError extends BackboneElement {

		/**
		 * Item sequence number
		 * The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
		 */
		sequenceLinkId?: positiveInt;

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element;

		/**
		 * Detail sequence number
		 * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
		 */
		detailSequenceLinkId?: positiveInt;

		/**
		 * Extension for detailSequenceLinkId
		 **/
		_detailSequenceLinkId?: Element;

		/**
		 * Subdetail sequence number
		 * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
		 */
		subdetailSequenceLinkId?: positiveInt;

		/**
		 * Extension for subdetailSequenceLinkId
		 **/
		_subdetailSequenceLinkId?: Element;

		/**
		 * Error code detailing processing issues
		 * An error code,from a specified code system, which details why the claim could not be adjudicated.
		 */
		code: CodeableConcept;
	}

	/**
	 * Payment details, if paid
	 * Payment details for the claim if the claim has been paid.
	 */
	interface ClaimResponsePayment extends BackboneElement {

		/**
		 * Partial or Complete
		 * Whether this represents partial or complete payment of the claim.
		 */
		type?: CodeableConcept;

		/**
		 * Payment adjustment for non-Claim issues
		 * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
		 */
		adjustment?: Money;

		/**
		 * Explanation for the non-claim adjustment
		 * Reason for the payment adjustment.
		 */
		adjustmentReason?: CodeableConcept;

		/**
		 * Expected data of Payment
		 * Estimated payment data.
		 */
		date?: date;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Payable amount after adjustment
		 * Payable less any payment adjustment.
		 */
		amount?: Money;

		/**
		 * Identifier of the payment instrument
		 * Payment identifier.
		 */
		identifier?: Identifier;
	}

	/**
	 * Processing notes
	 * Note text.
	 */
	interface ClaimResponseProcessNote extends BackboneElement {

		/**
		 * Sequence Number for this note
		 * An integer associated with each note which may be referred to from each service line item.
		 */
		number?: positiveInt;

		/**
		 * Extension for number
		 **/
		_number?: Element;

		/**
		 * display | print | printoper
		 * The note purpose: Print/Display.
		 */
		type?: CodeableConcept;

		/**
		 * Note explanatory text
		 * The note text.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Language if different from the resource
		 * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
		 */
		language?: CodeableConcept;
	}

	/**
	 * Insurance or medical plan
	 * Financial instrument by which payment information for health care.
	 */
	interface ClaimResponseInsurance extends BackboneElement {

		/**
		 * Service instance identifier
		 * A service line item.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Is the focal Coverage
		 * The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
		 */
		focal: boolean;

		/**
		 * Extension for focal
		 **/
		_focal?: Element;

		/**
		 * Insurance information
		 * Reference to the program or plan identification, underwriter or payor.
		 */
		coverage: Reference;

		/**
		 * Business agreement
		 * The contract number of a business agreement which describes the terms and conditions.
		 */
		businessArrangement?: string;

		/**
		 * Extension for businessArrangement
		 **/
		_businessArrangement?: Element;

		/**
		 * Pre-Authorization/Determination Reference
		 * A list of references from the Insurer to which these services pertain.
		 */
		preAuthRef?: string[];

		/**
		 * Extension for preAuthRef
		 **/
		_preAuthRef?: Element[];

		/**
		 * Adjudication results
		 * The Coverages adjudication details.
		 */
		claimResponse?: Reference;
	}

	/**
	 * Remittance resource
	 * This resource provides the adjudication details from the processing of a Claim resource.
	 */
	interface ClaimResponse extends DomainResource {

		/**
		 * Response  number
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains the code cancelled and entered-in-error that mark the response as not currently valid.
		 */
		status?: ClaimResponseClaimResponseStatus;

		/**
		 * The subject of the Products and Services
		 * Patient Resource.
		 */
		patient?: Reference;

		/**
		 * Creation date
		 * The date when the enclosed suite of services were performed or completed.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Insurance issuing organization
		 * The Insurer who produced this adjudicated response.
		 */
		insurer?: Reference;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		requestProvider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		requestOrganization?: Reference;

		/**
		 * Id of resource triggering adjudication
		 * Original request resource referrence.
		 */
		request?: Reference;

		/**
		 * complete | error | partial
		 * Processing outcome errror, partial or complete processing.
		 */
		outcome?: CodeableConcept;

		/**
		 * Disposition Message
		 * A description of the status of the adjudication.
		 */
		disposition?: string;

		/**
		 * Extension for disposition
		 **/
		_disposition?: Element;

		/**
		 * Party to be paid any benefits payable
		 * Party to be reimbursed: Subscriber, provider, other.
		 */
		payeeType?: CodeableConcept;

		/**
		 * Line items
		 * The first tier service adjudications for submitted services.
		 */
		item?: ClaimResponseItem[];

		/**
		 * Insurer added line items
		 * The first tier service adjudications for payor added services.
		 */
		addItem?: ClaimResponseAddItem[];

		/**
		 * Processing errors
		 * Mutually exclusive with Services Provided (Item).
		 */
		error?: ClaimResponseError[];

		/**
		 * Total Cost of service from the Claim
		 * The total cost of the services reported.
		 */
		totalCost?: Money;

		/**
		 * Unallocated deductible
		 * The amount of deductible applied which was not allocated to any particular service line.
		 */
		unallocDeductable?: Money;

		/**
		 * Total benefit payable for the Claim
		 * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
		 */
		totalBenefit?: Money;

		/**
		 * Payment details, if paid
		 * Payment details for the claim if the claim has been paid.
		 */
		payment?: ClaimResponsePayment;

		/**
		 * Funds reserved status
		 * Status of funds reservation (For provider, for Patient, None).
		 */
		reserved?: Coding;

		/**
		 * Printed Form Identifier
		 * The form to be used for printing the content.
		 */
		form?: CodeableConcept;

		/**
		 * Processing notes
		 * Note text.
		 */
		processNote?: ClaimResponseProcessNote[];

		/**
		 * Request for additional information
		 * Request for additional supporting or authorizing information, such as: documents, images or resources.
		 */
		communicationRequest?: Reference[];

		/**
		 * Insurance or medical plan
		 * Financial instrument by which payment information for health care.
		 */
		insurance?: ClaimResponseInsurance[];
	}

	/**
	 * One or more sets of investigations (signs, symptions, etc.)
	 * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
	 */
	interface ClinicalImpressionInvestigation extends BackboneElement {

		/**
		 * A name/code for the set
		 * A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used.
		 */
		code: CodeableConcept;

		/**
		 * Record of a specific investigation
		 * A record of a specific investigation that was undertaken.
		 * Most investigations are observations of one kind of or another but some other specific types of data collection resources can also be used.
		 */
		item?: Reference[];
	}

	/**
	 * Possible or likely findings and diagnoses
	 * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
	 */
	interface ClinicalImpressionFinding extends BackboneElement {

		/**
		 * What was found
		 * Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
		 */
		itemCodeableConcept: CodeableConcept;

		/**
		 * What was found
		 * Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
		 */
		itemReference: Reference;

		/**
		 * Which investigations support finding
		 * Which investigations support finding or diagnosis.
		 */
		basis?: string;

		/**
		 * Extension for basis
		 **/
		_basis?: Element;
	}

	/**
	 * A clinical assessment performed when planning treatments and management strategies for a patient
	 * A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score.
	 */
	interface ClinicalImpression extends DomainResource {

		/**
		 * Business identifier
		 * A unique identifier assigned to the clinical impression that remains consistent regardless of what server the impression is stored on.
		 */
		identifier?: Identifier[];

		/**
		 * draft | completed | entered-in-error
		 * Identifies the workflow status of the assessment.
		 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
		 */
		status: ClinicalImpressionClinicalImpressionStatus;

		/**
		 * Kind of assessment performed
		 * Categorizes the type of clinical assessment performed.
		 * This is present as a place-holder only and may be removed based on feedback/work group opinion.
		 */
		code?: CodeableConcept;

		/**
		 * Why/how the assessment was performed
		 * A summary of the context and/or cause of the assessment - why / where was it performed, and what patient events/status prompted it.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Patient or group assessed
		 * The patient or group of individuals assessed as part of this record.
		 */
		subject: Reference;

		/**
		 * Encounter or Episode created from
		 * The encounter or episode of care this impression was created as part of.
		 */
		context?: Reference;

		/**
		 * Time of assessment
		 * The point in time or period over which the subject was assessed.
		 * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
		 */
		effectiveDateTime?: dateTime;

		/**
		 * Extension for effectiveDateTime
		 **/
		_effectiveDateTime?: Element;

		/**
		 * Time of assessment
		 * The point in time or period over which the subject was assessed.
		 * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
		 */
		effectivePeriod?: Period;

		/**
		 * When the assessment was documented
		 * Indicates when the documentation of the assessment was complete.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * The clinician performing the assessment
		 * The clinician performing the assessment.
		 */
		assessor?: Reference;

		/**
		 * Reference to last assessment
		 * A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
		 * It is always likely that multiple previous assessments exist for a patient. The point of quoting a previous assessment is that this assessment is relative to it (see resolved).
		 */
		previous?: Reference;

		/**
		 * Relevant impressions of patient state
		 * This a list of the relevant problems/conditions for a patient.
		 * e.g. The patient is a pregnant, and cardiac congestive failure, ‎Adenocarcinoma, and is allergic to penicillin.
		 */
		problem?: Reference[];

		/**
		 * One or more sets of investigations (signs, symptions, etc.)
		 * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
		 */
		investigation?: ClinicalImpressionInvestigation[];

		/**
		 * Clinical Protocol followed
		 * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
		 */
		protocol?: uri[];

		/**
		 * Extension for protocol
		 **/
		_protocol?: Element[];

		/**
		 * Summary of the assessment
		 * A text summary of the investigations and the diagnosis.
		 */
		summary?: string;

		/**
		 * Extension for summary
		 **/
		_summary?: Element;

		/**
		 * Possible or likely findings and diagnoses
		 * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
		 */
		finding?: ClinicalImpressionFinding[];

		/**
		 * Estimate of likely outcome
		 * Estimate of likely outcome.
		 */
		prognosisCodeableConcept?: CodeableConcept[];

		/**
		 * RiskAssessment expressing likely outcome
		 * RiskAssessment expressing likely outcome.
		 */
		prognosisReference?: Reference[];

		/**
		 * Action taken as part of assessment procedure
		 * Action taken as part of assessment procedure.
		 * Actions recommended as a result of the impression should not be captured using the 'action' element.
		 */
		action?: Reference[];

		/**
		 * Comments made about the ClinicalImpression
		 * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
		 * Don't use this element for content that should more properly appear as one of the specific elements of the impression.
		 */
		note?: Annotation[];
	}

	/**
	 * Filter that can be used in a value set
	 * A filter that can be used in a value set compose statement when selecting concepts using a filter.
	 */
	interface CodeSystemFilter extends BackboneElement {

		/**
		 * Code that identifies the filter
		 * The code that identifies this filter when it is used in the instance.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * How or why the filter is used
		 * A description of how or why the filter is used.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Operators that can be used with filter
		 * A list of operators that can be used with the filter.
		 */
		operator: code[];

		/**
		 * Extension for operator
		 **/
		_operator?: Element[];

		/**
		 * What to use for the value
		 * A description of what the value for the filter should be.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Additional information supplied about each concept
	 * A property defines an additional slot through which additional information can be provided about a concept.
	 */
	interface CodeSystemProperty extends BackboneElement {

		/**
		 * Identifies the property on the concepts, and when referred to in operations
		 * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Formal identifier for the property
		 * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
		 */
		uri?: uri;

		/**
		 * Extension for uri
		 **/
		_uri?: Element;

		/**
		 * Why the property is defined, and/or what it conveys
		 * A description of the property- why it is defined, and how its value might be used.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * code | Coding | string | integer | boolean | dateTime
		 * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to anotherr defined concept).
		 */
		type: CodeSystemPropertyType;
	}

	/**
	 * Additional representations for the concept
	 * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
	 */
	interface CodeSystemConceptDesignation extends BackboneElement {

		/**
		 * Human language of the designation
		 * The language this designation is defined for.
		 * In the absence of a language, the resource language applies.
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * Details how this designation would be used
		 * A code that details how this designation would be used.
		 * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
		 */
		use?: Coding;

		/**
		 * The text value for this designation
		 * The text value for this designation.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Property value for the concept
	 * A property value for this concept.
	 */
	interface CodeSystemConceptProperty extends BackboneElement {

		/**
		 * Reference to CodeSystem.property.code
		 * A code that is a reference to CodeSystem.property.code.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Value of the property for this concept
		 * The value of this property.
		 */
		valueCode: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;

		/**
		 * Value of the property for this concept
		 * The value of this property.
		 */
		valueCoding: Coding;

		/**
		 * Value of the property for this concept
		 * The value of this property.
		 */
		valueString: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Value of the property for this concept
		 * The value of this property.
		 */
		valueInteger: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Value of the property for this concept
		 * The value of this property.
		 */
		valueBoolean: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Value of the property for this concept
		 * The value of this property.
		 */
		valueDateTime: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;
	}

	/**
	 * Concepts in the code system
	 * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
	 * If this is empty, it means that the code system resource does not represent the content of the code system.
	 */
	interface CodeSystemConcept extends BackboneElement {

		/**
		 * Code that identifies concept
		 * A code - a text symbol - that uniquely identifies the concept within the code system.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Text to display to the user
		 * A human readable string that is the recommended default way to present this concept to a user.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * Formal definition
		 * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
		 */
		definition?: string;

		/**
		 * Extension for definition
		 **/
		_definition?: Element;

		/**
		 * Additional representations for the concept
		 * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
		 */
		designation?: CodeSystemConceptDesignation[];

		/**
		 * Property value for the concept
		 * A property value for this concept.
		 */
		property?: CodeSystemConceptProperty[];

		/**
		 * Child Concepts (is-a/contains/categorizes)
		 * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
		 */
		concept?: CodeSystemConcept[];
	}

	/**
	 * A set of codes drawn from one or more code systems
	 * A code system resource specifies a set of codes drawn from one or more code systems.
	 */
	interface CodeSystem extends DomainResource {

		/**
		 * Logical URI to reference this code system (globally unique) (Coding.system)
		 * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this code system is (or will be) published. The URL SHOULD include the major version of the code system. For more information see [Technical and Business Versions](resource.html#versions). This is used in [Coding]{datatypes.html#Coding}.system.
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the code system
		 * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this code system outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier;

		/**
		 * Business version of the code system (Coding.version)
		 * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding]{datatypes.html#Coding}.version.
		 * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the code system with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this code system (computer friendly)
		 * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this code system (human friendly)
		 * A short, descriptive, user-friendly title for the code system.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this code system. Enables tracking the life-cycle of the content.
		 * Allows filtering of code systems that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired code system without due consideration.
		 */
		status: CodeSystemPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of code system that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental code system in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the code system was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the code system.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the code system
		 * A free text natural language description of the code system from a consumer's perspective.
		 * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate code system instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for code system (if applicable)
		 * A legal or geographic region in which the code system is intended to be used.
		 * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this code system is defined
		 * Explaination of why this code system is needed and why it has been designed as it has.
		 * This element does not describe the usage of the code system Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
		 * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * If code comparison is case sensitive
		 * If code comparison is case sensitive when codes within this system are compared to each other.
		 * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
		 */
		caseSensitive?: boolean;

		/**
		 * Extension for caseSensitive
		 **/
		_caseSensitive?: Element;

		/**
		 * Canonical URL for value set with entire code system
		 * Canonical URL of value set that contains the entire code system.
		 * The definition of the value set SHALL include all codes from this code system, and it SHALL be immutable.
		 */
		valueSet?: uri;

		/**
		 * Extension for valueSet
		 **/
		_valueSet?: Element;

		/**
		 * grouped-by | is-a | part-of | classified-with
		 * The meaning of the hierarchy of concepts.
		 */
		hierarchyMeaning?: CodeSystemCodeSystemHierarchyMeaning;

		/**
		 * If code system defines a post-composition grammar
		 * True If code system defines a post-composition grammar.
		 * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
		 */
		compositional?: boolean;

		/**
		 * Extension for compositional
		 **/
		_compositional?: Element;

		/**
		 * If definitions are not stable
		 * This flag is used to signify that the code system has not (or does not) maintain the definitions, and a version must be specified when referencing this code system.
		 * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
		 */
		versionNeeded?: boolean;

		/**
		 * Extension for versionNeeded
		 **/
		_versionNeeded?: Element;

		/**
		 * not-present | example | fragment | complete
		 * How much of the content of the code system - the concepts and codes it defines - are represented in this resource.
		 */
		content: CodeSystemCodeSystemContentMode;

		/**
		 * Total concepts in the code system
		 * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the count refers to the number of base (primitive) concepts.
		 * The count of concepts defined in this resource cannot be more than this value, but may be less for several reasons - see the content value.
		 */
		count?: unsignedInt;

		/**
		 * Extension for count
		 **/
		_count?: Element;

		/**
		 * Filter that can be used in a value set
		 * A filter that can be used in a value set compose statement when selecting concepts using a filter.
		 */
		filter?: CodeSystemFilter[];

		/**
		 * Additional information supplied about each concept
		 * A property defines an additional slot through which additional information can be provided about a concept.
		 */
		property?: CodeSystemProperty[];

		/**
		 * Concepts in the code system
		 * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
		 * If this is empty, it means that the code system resource does not represent the content of the code system.
		 */
		concept?: CodeSystemConcept[];
	}

	/**
	 * Message payload
	 * Text, attachment(s), or resource(s) that was communicated to the recipient.
	 */
	interface CommunicationPayload extends BackboneElement {

		/**
		 * Message part content
		 * A communicated content (or for multi-part communications, one portion of the communication).
		 */
		contentString: string;

		/**
		 * Extension for contentString
		 **/
		_contentString?: Element;

		/**
		 * Message part content
		 * A communicated content (or for multi-part communications, one portion of the communication).
		 */
		contentAttachment: Attachment;

		/**
		 * Message part content
		 * A communicated content (or for multi-part communications, one portion of the communication).
		 */
		contentReference: Reference;
	}

	/**
	 * A record of information transmitted from a sender to a receiver
	 * An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.
	 */
	interface Communication extends DomainResource {

		/**
		 * Unique identifier
		 * Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * Instantiates protocol or definition
		 * A protocol, guideline, or other definition that was adhered to in whole or in part by this communication event.
		 */
		definition?: Reference[];

		/**
		 * Request fulfilled by this communication
		 * An order, proposal or plan fulfilled in whole or in part by this Communication.
		 * This must point to some sort of a 'Request' resource, such as CarePlan, CommunicationRequest, ReferralRequest, MedicationRequest, etc.
		 */
		basedOn?: Reference[];

		/**
		 * Part of this action
		 * Part of this action.
		 */
		partOf?: Reference[];

		/**
		 * preparation | in-progress | suspended | aborted | completed | entered-in-error
		 * The status of the transmission.
		 * This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
		 */
		status: CommunicationCommunicationStatus;

		/**
		 * Communication did not occur
		 * If true, indicates that the described communication event did not actually occur.
		 * This element is labeled as a modifier because it marks the communication as a communication that did not occur.  The more attributes are populated, the more constrained the negated statement is.
		 */
		notDone?: boolean;

		/**
		 * Extension for notDone
		 **/
		_notDone?: Element;

		/**
		 * Why communication did not occur
		 * Describes why the communication event did not occur in coded and/or textual form.
		 */
		notDoneReason?: CodeableConcept;

		/**
		 * Message category
		 * The type of message conveyed such as alert, notification, reminder, instruction, etc.
		 * There may be multiple axes of categorization and one communication may serve multiple purposes.
		 */
		category?: CodeableConcept[];

		/**
		 * A channel of communication
		 * A channel that was used for this communication (e.g. email, fax).
		 */
		medium?: CodeableConcept[];

		/**
		 * Focus of message
		 * The patient or group that was the focus of this communication.
		 */
		subject?: Reference;

		/**
		 * Message recipient
		 * The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).
		 */
		recipient?: Reference[];

		/**
		 * Focal resources
		 * The resources which were responsible for or related to producing this communication.
		 */
		topic?: Reference[];

		/**
		 * Encounter or episode leading to message
		 * The encounter within which the communication was sent.
		 */
		context?: Reference;

		/**
		 * When sent
		 * The time when this communication was sent.
		 */
		sent?: dateTime;

		/**
		 * Extension for sent
		 **/
		_sent?: Element;

		/**
		 * When received
		 * The time when this communication arrived at the destination.
		 */
		received?: dateTime;

		/**
		 * Extension for received
		 **/
		_received?: Element;

		/**
		 * Message sender
		 * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
		 */
		sender?: Reference;

		/**
		 * Indication for message
		 * The reason or justification for the communication.
		 * Textual reasons can be caprued using reasonCode.text.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Why was communication done?
		 * Indicates another resource whose existence justifies this communication.
		 */
		reasonReference?: Reference[];

		/**
		 * Message payload
		 * Text, attachment(s), or resource(s) that was communicated to the recipient.
		 */
		payload?: CommunicationPayload[];

		/**
		 * Comments made about the communication
		 * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
		 */
		note?: Annotation[];
	}

	/**
	 * Message payload
	 * Text, attachment(s), or resource(s) to be communicated to the recipient.
	 */
	interface CommunicationRequestPayload extends BackboneElement {

		/**
		 * Message part content
		 * The communicated content (or for multi-part communications, one portion of the communication).
		 */
		contentString: string;

		/**
		 * Extension for contentString
		 **/
		_contentString?: Element;

		/**
		 * Message part content
		 * The communicated content (or for multi-part communications, one portion of the communication).
		 */
		contentAttachment: Attachment;

		/**
		 * Message part content
		 * The communicated content (or for multi-part communications, one portion of the communication).
		 */
		contentReference: Reference;
	}

	/**
	 * Who/what is requesting service
	 * The individual who initiated the request and has responsibility for its activation.
	 */
	interface CommunicationRequestRequester extends BackboneElement {

		/**
		 * Individual making the request
		 * The device, practitioner, etc. who initiated the request.
		 */
		agent: Reference;

		/**
		 * Organization agent is acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * A request for information to be sent to a receiver
	 * A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
	 */
	interface CommunicationRequest extends DomainResource {

		/**
		 * Unique identifier
		 * A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
		 */
		identifier?: Identifier[];

		/**
		 * Fulfills plan or proposal
		 * A plan or proposal that is fulfilled in whole or in part by this request.
		 */
		basedOn?: Reference[];

		/**
		 * Request(s) replaced by this request
		 * Completed or terminated request(s) whose function is taken by this new request.
		 * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
		 */
		replaces?: Reference[];

		/**
		 * Composite request this is part of
		 * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
		 * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
		 */
		groupIdentifier?: Identifier;

		/**
		 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
		 * The status of the proposal or order.
		 * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
		 */
		status: CommunicationRequestCommunicationRequestStatus;

		/**
		 * Message category
		 * The type of message to be sent such as alert, notification, reminder, instruction, etc.
		 * There may be multiple axes of categorization and one communication request may serve multiple purposes.
		 */
		category?: CodeableConcept[];

		/**
		 * Message urgency
		 * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
		 */
		priority?: code;

		/**
		 * Extension for priority
		 **/
		_priority?: Element;

		/**
		 * A channel of communication
		 * A channel that was used for this communication (e.g. email, fax).
		 */
		medium?: CodeableConcept[];

		/**
		 * Focus of message
		 * The patient or group that is the focus of this communication request.
		 */
		subject?: Reference;

		/**
		 * Message recipient
		 * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
		 */
		recipient?: Reference[];

		/**
		 * Focal resources
		 * The resources which were related to producing this communication request.
		 */
		topic?: Reference[];

		/**
		 * Encounter or episode leading to message
		 * The encounter or episode of care within which the communication request was created.
		 */
		context?: Reference;

		/**
		 * Message payload
		 * Text, attachment(s), or resource(s) to be communicated to the recipient.
		 */
		payload?: CommunicationRequestPayload[];

		/**
		 * When scheduled
		 * The time when this communication is to occur.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When scheduled
		 * The time when this communication is to occur.
		 */
		occurrencePeriod?: Period;

		/**
		 * When request transitioned to being actionable
		 * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Message sender
		 * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
		 */
		sender?: Reference;

		/**
		 * Who/what is requesting service
		 * The individual who initiated the request and has responsibility for its activation.
		 */
		requester?: CommunicationRequestRequester;

		/**
		 * Why is communication needed?
		 * Describes why the request is being made in coded or textual form.
		 * Textual reasons can be caprued using reasonCode.text.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Why is communication needed?
		 * Indicates another resource whose existence justifies this request.
		 */
		reasonReference?: Reference[];

		/**
		 * Comments made about communication request
		 * Comments made about the request by the requester, sender, recipient, subject or other participants.
		 */
		note?: Annotation[];
	}

	/**
	 * How a resource is related to the compartment
	 * Information about how a resource is related to the compartment.
	 */
	interface CompartmentDefinitionResource extends BackboneElement {

		/**
		 * Name of resource type
		 * The name of a resource supported by the server.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Search Parameter Name, or chained parameters
		 * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
		 * If no search parameters are listed, then the resource is not linked to the compartment.
		 */
		param?: string[];

		/**
		 * Extension for param
		 **/
		_param?: Element[];

		/**
		 * Additional documentation about the resource and compartment
		 * Additional documentation about the resource and compartment.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Compartment Definition for a resource
	 * A compartment definition that defines how resources are accessed on a server.
	 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
	 */
	interface CompartmentDefinition extends DomainResource {

		/**
		 * Logical URI to reference this compartment definition (globally unique)
		 * An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this compartment definition is (or will be) published. The URL SHOULD include the major version of the compartment definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Name for this compartment definition (computer friendly)
		 * A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly. This is often the same as the code for the parameter, but does not need to be.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this compartment definition (human friendly)
		 * A short, descriptive, user-friendly title for the compartment definition.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this compartment definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of compartment definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired compartment definition without due consideration.
		 */
		status: CompartmentDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of compartment definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental compartment definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the compartment definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the compartment definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the compartment definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the compartment definition is the organization or individual primarily responsible for the maintenance and upkeep of the compartment definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the compartment definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the compartment definition
		 * A free text natural language description of the compartment definition from a consumer's perspective.
		 * This description can be used to capture details such as why the compartment definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the compartment definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this compartment definition is defined
		 * Explaination of why this compartment definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the compartment definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this compartment definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate compartment definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for compartment definition (if applicable)
		 * A legal or geographic region in which the compartment definition is intended to be used.
		 * It may be possible for the compartment definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Patient | Encounter | RelatedPerson | Practitioner | Device
		 * Which compartment this definition describes.
		 * Only the specification can define the compartments that can exist. Servers can choose to support them.
		 */
		code: CompartmentDefinitionCompartmentType;

		/**
		 * Whether the search syntax is supported
		 * Whether the search syntax is supported,.
		 * Servers may define and use compartments to manage logical access without implementing the compartment related syntax.
		 */
		search: boolean;

		/**
		 * Extension for search
		 **/
		_search?: Element;

		/**
		 * How a resource is related to the compartment
		 * Information about how a resource is related to the compartment.
		 */
		resource?: CompartmentDefinitionResource[];
	}

	/**
	 * Attests to accuracy of composition
	 * A participant who has attested to the accuracy of the composition/document.
	 * Only list each attester once.
	 */
	interface CompositionAttester extends BackboneElement {

		/**
		 * personal | professional | legal | official
		 * The type of attestation the authenticator offers.
		 * Use more than one code where a single attester has more than one mode (professional and legal are often paired).
		 */
		mode: CompositionCompositionAttestationMode[];

		/**
		 * When the composition was attested
		 * When the composition was attested by the party.
		 */
		time?: dateTime;

		/**
		 * Extension for time
		 **/
		_time?: Element;

		/**
		 * Who attested the composition
		 * Who attested the composition in the specified way.
		 */
		party?: Reference;
	}

	/**
	 * Relationships to other compositions/documents
	 * Relationships that this composition has with other compositions or documents that already exist.
	 * A document is a version specific composition.
	 */
	interface CompositionRelatesTo extends BackboneElement {

		/**
		 * replaces | transforms | signs | appends
		 * The type of relationship that this composition has with anther composition or document.
		 * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
		 */
		code: CompositionDocumentRelationshipType;

		/**
		 * Target of the relationship
		 * The target composition/document of this relationship.
		 */
		targetIdentifier: Identifier;

		/**
		 * Target of the relationship
		 * The target composition/document of this relationship.
		 */
		targetReference: Reference;
	}

	/**
	 * The clinical service(s) being documented
	 * The clinical service, such as a colonoscopy or an appendectomy, being documented.
	 * The event needs to be consistent with the type element, though can provide further information if desired.
	 */
	interface CompositionEvent extends BackboneElement {

		/**
		 * Code(s) that apply to the event being documented
		 * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
		 * An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more eventCodes are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
		 */
		code?: CodeableConcept[];

		/**
		 * The period covered by the documentation
		 * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
		 */
		period?: Period;

		/**
		 * The event(s) being documented
		 * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
		 */
		detail?: Reference[];
	}

	/**
	 * Composition is broken into sections
	 * The root of the sections that make up the composition.
	 */
	interface CompositionSection extends BackboneElement {

		/**
		 * Label for section (e.g. for ToC)
		 * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
		 * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Classification of section (recommended)
		 * A code identifying the kind of content contained within the section. This must be consistent with the section title.
		 * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
		 */
		code?: CodeableConcept;

		/**
		 * Text summary of the section, for human interpretation
		 * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
		 * Document profiles may define what content should be represented in the narrative to ensure clinical safety.
		 */
		text?: Narrative;

		/**
		 * working | snapshot | changes
		 * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
		 * This element is labeled as a modifier because a change list must not be mis-understood as a complete list.
		 */
		mode?: CompositionSectionMode;

		/**
		 * Order of section entries
		 * Specifies the order applied to the items in the section entries.
		 * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
		 */
		orderedBy?: CodeableConcept;

		/**
		 * A reference to data that supports this section
		 * A reference to the actual resource from which the narrative in the section is derived.
		 * If there are no entries in the list, an emptyReason SHOULD be provided.
		 */
		entry?: Reference[];

		/**
		 * Why the section is empty
		 * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
		 * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
		 */
		emptyReason?: CodeableConcept;

		/**
		 * Nested Section
		 * A nested sub-section within this section.
		 * Nested sections are primarily used to help human readers navigate to particular portions of the document.
		 */
		section?: CompositionSection[];
	}

	/**
	 * A set of resources composed into a single coherent clinical statement with clinical attestation
	 * A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
	 * While the focus of this specification is on patient-specific clinical statements, this resource can also apply to other healthcare-related statements such as study protocol designs, healthcare invoices and other activities that are not necessarily patient-specific or clinical.
	 */
	interface Composition extends DomainResource {

		/**
		 * Logical identifier of composition (version-independent)
		 * Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
		 * See discussion in resource definition for how these relate.
		 */
		identifier?: Identifier;

		/**
		 * preliminary | final | amended | entered-in-error
		 * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
		 * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements. 

Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
		 */
		status: CompositionCompositionStatus;

		/**
		 * Kind of composition (LOINC if possible)
		 * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
		 * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
		 */
		type: CodeableConcept;

		/**
		 * Categorization of Composition
		 * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
		 * This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
		 */
		class?: CodeableConcept;

		/**
		 * Who and/or what the composition is about
		 * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
		 * For clinical documents, this is usually the patient.
		 */
		subject: Reference;

		/**
		 * Context of the Composition
		 * Describes the clinical encounter or type of care this documentation is associated with.
		 */
		encounter?: Reference;

		/**
		 * Composition editing time
		 * The composition editing time, when the composition was last logically changed by the author.
		 * The Last Modified Date on the composition may be after the date of the document was attested without being changed.
		 */
		date: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Who and/or what authored the composition
		 * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
		 */
		author: Reference[];

		/**
		 * Human Readable name/title
		 * Official human-readable label for the composition.
		 * For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
		 */
		title: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * As defined by affinity domain
		 * The code specifying the level of confidentiality of the Composition.
		 * The exact use of this element, and enforcement and issues related to highly sensitive documents are out of scope for the base specification, and delegated to implementation profiles (see security section).

This element is labeled as a modifier because highly confidential documents must not be treated as if they are not.
		 */
		confidentiality?: code;

		/**
		 * Extension for confidentiality
		 **/
		_confidentiality?: Element;

		/**
		 * Attests to accuracy of composition
		 * A participant who has attested to the accuracy of the composition/document.
		 * Only list each attester once.
		 */
		attester?: CompositionAttester[];

		/**
		 * Organization which maintains the composition
		 * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
		 * This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
		 */
		custodian?: Reference;

		/**
		 * Relationships to other compositions/documents
		 * Relationships that this composition has with other compositions or documents that already exist.
		 * A document is a version specific composition.
		 */
		relatesTo?: CompositionRelatesTo[];

		/**
		 * The clinical service(s) being documented
		 * The clinical service, such as a colonoscopy or an appendectomy, being documented.
		 * The event needs to be consistent with the type element, though can provide further information if desired.
		 */
		event?: CompositionEvent[];

		/**
		 * Composition is broken into sections
		 * The root of the sections that make up the composition.
		 */
		section?: CompositionSection[];
	}

	/**
	 * Other elements required for this mapping (from context)
	 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
	 */
	interface ConceptMapGroupElementTargetDependsOn extends BackboneElement {

		/**
		 * Reference to property mapping depends on
		 * A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somwhere that is labeled to correspond with a code system property.
		 */
		property: uri;

		/**
		 * Extension for property
		 **/
		_property?: Element;

		/**
		 * Code System (if necessary)
		 * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
		 */
		system?: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Value of the referenced element
		 * Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.
		 */
		code: string;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Display for the code
		 * The display for the code. The display is only provided to help editors when editing the concept map.
		 * The display is ignored when processing the map.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;
	}

	/**
	 * Concept in target system for element
	 * A concept from the target value set that this concept maps to.
	 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
	 */
	interface ConceptMapGroupElementTarget extends BackboneElement {

		/**
		 * Code that identifies the target element
		 * Identity (code or path) or the element/item that the map refers to.
		 */
		code?: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Display for the code
		 * The display for the code. The display is only provided to help editors when editing the concept map.
		 * The display is ignored when processing the map.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * relatedto | equivalent | equal | wider | subsumes | narrower | specializes | inexact | unmatched | disjoint
		 * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
		 * This element is labeled as a modifier because it may indicate that a target does not apply.
		 */
		equivalence?: ConceptMapConceptMapEquivalence;

		/**
		 * Description of status/issues in mapping
		 * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * Other elements required for this mapping (from context)
		 * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
		 */
		dependsOn?: ConceptMapGroupElementTargetDependsOn[];

		/**
		 * Other concepts that this mapping also produces
		 * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
		 */
		product?: ConceptMapGroupElementTargetDependsOn[];
	}

	/**
	 * Mappings for a concept from the source set
	 * Mappings for an individual concept in the source to one or more concepts in the target.
	 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
	 */
	interface ConceptMapGroupElement extends BackboneElement {

		/**
		 * Identifies element being mapped
		 * Identity (code or path) or the element/item being mapped.
		 */
		code?: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Display for the code
		 * The display for the code. The display is only provided to help editors when editing the concept map.
		 * The display is ignored when processing the map.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * Concept in target system for element
		 * A concept from the target value set that this concept maps to.
		 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
		 */
		target?: ConceptMapGroupElementTarget[];
	}

	/**
	 * When no match in the mappings
	 * What to do when there is no match in the mappings in the group.
	 * This only applies if the source code is in the system defined for the group.
	 */
	interface ConceptMapGroupUnmapped extends BackboneElement {

		/**
		 * provided | fixed | other-map
		 * Defines which action to take if there is no match in the group. One of 3 actions is possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
		 */
		mode: ConceptMapConceptMapGroupUnmappedMode;

		/**
		 * Fixed code when mode = fixed
		 * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
		 */
		code?: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Display for the code
		 * The display for the code. The display is only provided to help editors when editing the concept map.
		 * The display is ignored when processing the map.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * Canonical URL for other concept map
		 * The canonical URL of the map to use if this map contains no mapping.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;
	}

	/**
	 * Same source and target systems
	 * A group of mappings that all have the same source and target system.
	 */
	interface ConceptMapGroup extends BackboneElement {

		/**
		 * Code System (if value set crosses code systems)
		 * An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).
		 */
		source?: uri;

		/**
		 * Extension for source
		 **/
		_source?: Element;

		/**
		 * Specific version of the  code system
		 * The specific version of the code system, as determined by the code system authority.
		 * The specification of a particular code system version may be required for code systems which lack concept permanence.
		 */
		sourceVersion?: string;

		/**
		 * Extension for sourceVersion
		 **/
		_sourceVersion?: Element;

		/**
		 * System of the target (if necessary)
		 * An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).
		 * Target may be omitted if all the targget element equivalence values are 'unmatched'.
		 */
		target?: uri;

		/**
		 * Extension for target
		 **/
		_target?: Element;

		/**
		 * Specific version of the  code system
		 * The specific version of the code system, as determined by the code system authority.
		 * The specification of a particular code system version may be required for code systems which lack concept permanence.
		 */
		targetVersion?: string;

		/**
		 * Extension for targetVersion
		 **/
		_targetVersion?: Element;

		/**
		 * Mappings for a concept from the source set
		 * Mappings for an individual concept in the source to one or more concepts in the target.
		 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
		 */
		element: ConceptMapGroupElement[];

		/**
		 * When no match in the mappings
		 * What to do when there is no match in the mappings in the group.
		 * This only applies if the source code is in the system defined for the group.
		 */
		unmapped?: ConceptMapGroupUnmapped;
	}

	/**
	 * A map from one set of concepts to one or more other concepts
	 * A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
	 */
	interface ConceptMap extends DomainResource {

		/**
		 * Logical URI to reference this concept map (globally unique)
		 * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published. The URL SHOULD include the major version of the concept map. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the concept map
		 * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this concept map outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier;

		/**
		 * Business version of the concept map
		 * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different concept map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the concept map with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this concept map (computer friendly)
		 * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this concept map (human friendly)
		 * A short, descriptive, user-friendly title for the concept map.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this concept map. Enables tracking the life-cycle of the content.
		 * Allows filtering of concept maps that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired concept map without due consideration.
		 */
		status: ConceptMapPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of concept map that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental concept map in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the concept map was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the concept map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the concept map.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the concept map is the organization or individual primarily responsible for the maintenance and upkeep of the concept map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the concept map. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the concept map
		 * A free text natural language description of the concept map from a consumer's perspective.
		 * The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate concept map instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for concept map (if applicable)
		 * A legal or geographic region in which the concept map is intended to be used.
		 * It may be possible for the concept map to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this concept map is defined
		 * Explaination of why this concept map is needed and why it has been designed as it has.
		 * This element does not describe the usage of the concept map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this concept map.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
		 * null Frequently, the copyright differs between the concept map, and codes that are included. The copyright statement should clearly differentiate between these when required.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Identifies the source of the concepts which are being mapped
		 * The source value set that specifies the concepts that are being mapped.
		 * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
		 */
		sourceUri?: uri;

		/**
		 * Extension for sourceUri
		 **/
		_sourceUri?: Element;

		/**
		 * Identifies the source of the concepts which are being mapped
		 * The source value set that specifies the concepts that are being mapped.
		 * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
		 */
		sourceReference?: Reference;

		/**
		 * Provides context to the mappings
		 * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
		 * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
		 */
		targetUri?: uri;

		/**
		 * Extension for targetUri
		 **/
		_targetUri?: Element;

		/**
		 * Provides context to the mappings
		 * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
		 * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
		 */
		targetReference?: Reference;

		/**
		 * Same source and target systems
		 * A group of mappings that all have the same source and target system.
		 */
		group?: ConceptMapGroup[];
	}

	/**
	 * Stage/grade, usually assessed formally
	 * Clinical stage or grade of a condition. May include formal severity assessments.
	 */
	interface ConditionStage extends BackboneElement {

		/**
		 * Simple summary (disease specific)
		 * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
		 */
		summary?: CodeableConcept;

		/**
		 * Formal record of assessment
		 * Reference to a formal record of the evidence on which the staging assessment is based.
		 */
		assessment?: Reference[];
	}

	/**
	 * Supporting evidence
	 * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
	 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
	 */
	interface ConditionEvidence extends BackboneElement {

		/**
		 * Manifestation/symptom
		 * A manifestation or symptom that led to the recording of this condition.
		 */
		code?: CodeableConcept[];

		/**
		 * Supporting information found elsewhere
		 * Links to other relevant information, including pathology reports.
		 */
		detail?: Reference[];
	}

	/**
	 * Detailed information about conditions, problems or diagnoses
	 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
	 */
	interface Condition extends DomainResource {

		/**
		 * External Ids for this condition
		 * This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * active | recurrence | inactive | remission | resolved
		 * The clinical status of the condition.
		 * This element is labeled as a modifier because the status contains codes that mark the condition as not currently valid or of concern.
		 */
		clinicalStatus?: ConditionConditionClinicalStatus;

		/**
		 * provisional | differential | confirmed | refuted | entered-in-error | unknown
		 * The verification status to support the clinical status of the condition.
		 * verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.

This element is labeled as a modifier because the status contains the code refuted and entered-in-error that mark the Condition as not currently valid.
		 */
		verificationStatus?: ConditionConditionVerificationStatus;

		/**
		 * problem-list-item | encounter-diagnosis
		 * A category assigned to the condition.
		 * The categorization is often highly contextual and may appear poorly differentiated or not very useful in other contexts.
		 */
		category?: CodeableConcept[];

		/**
		 * Subjective severity of condition
		 * A subjective assessment of the severity of the condition as evaluated by the clinician.
		 * Coding of the severity with a terminology is preferred, where possible.
		 */
		severity?: CodeableConcept;

		/**
		 * Identification of the condition, problem or diagnosis
		 * Identification of the condition, problem or diagnosis.
		 */
		code?: CodeableConcept;

		/**
		 * Anatomical location, if relevant
		 * The anatomical location where this condition manifests itself.
		 * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
		 */
		bodySite?: CodeableConcept[];

		/**
		 * Who has the condition?
		 * Indicates the patient or group who the condition record is associated with.
		 */
		subject: Reference;

		/**
		 * Encounter or episode when condition first asserted
		 * Encounter during which the condition was first asserted.
		 * This record indicates the encounter this particular record is associated with.  In the case of a "new" diagnosis reflecting ongoing/revised information about the condition, this might be distinct from the first encounter in which the underlying condition was first "known".
		 */
		context?: Reference;

		/**
		 * Estimated or actual date,  date-time, or age
		 * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
		 * Age is generally used when the patient reports an age at which the Condition began to occur.
		 */
		onsetDateTime?: dateTime;

		/**
		 * Extension for onsetDateTime
		 **/
		_onsetDateTime?: Element;

		/**
		 * Estimated or actual date,  date-time, or age
		 * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
		 * Age is generally used when the patient reports an age at which the Condition began to occur.
		 */
		onsetAge?: Age;

		/**
		 * Estimated or actual date,  date-time, or age
		 * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
		 * Age is generally used when the patient reports an age at which the Condition began to occur.
		 */
		onsetPeriod?: Period;

		/**
		 * Estimated or actual date,  date-time, or age
		 * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
		 * Age is generally used when the patient reports an age at which the Condition began to occur.
		 */
		onsetRange?: Range;

		/**
		 * Estimated or actual date,  date-time, or age
		 * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
		 * Age is generally used when the patient reports an age at which the Condition began to occur.
		 */
		onsetString?: string;

		/**
		 * Extension for onsetString
		 **/
		_onsetString?: Element;

		/**
		 * If/when in resolution/remission
		 * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
		 * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
		 */
		abatementDateTime?: dateTime;

		/**
		 * Extension for abatementDateTime
		 **/
		_abatementDateTime?: Element;

		/**
		 * If/when in resolution/remission
		 * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
		 * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
		 */
		abatementAge?: Age;

		/**
		 * If/when in resolution/remission
		 * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
		 * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
		 */
		abatementBoolean?: boolean;

		/**
		 * Extension for abatementBoolean
		 **/
		_abatementBoolean?: Element;

		/**
		 * If/when in resolution/remission
		 * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
		 * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
		 */
		abatementPeriod?: Period;

		/**
		 * If/when in resolution/remission
		 * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
		 * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
		 */
		abatementRange?: Range;

		/**
		 * If/when in resolution/remission
		 * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
		 * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
		 */
		abatementString?: string;

		/**
		 * Extension for abatementString
		 **/
		_abatementString?: Element;

		/**
		 * Date record was believed accurate
		 * The date on which the existance of the Condition was first asserted or acknowledged.
		 * The assertedDate represents the date when this particular Condition record was created in the EHR, not the date of the most recent update in terms of when severity, abatement, etc. were specified.  The date of the last record modification can be retrieved from the resource metadata.
		 */
		assertedDate?: dateTime;

		/**
		 * Extension for assertedDate
		 **/
		_assertedDate?: Element;

		/**
		 * Person who asserts this condition
		 * Individual who is making the condition statement.
		 */
		asserter?: Reference;

		/**
		 * Stage/grade, usually assessed formally
		 * Clinical stage or grade of a condition. May include formal severity assessments.
		 */
		stage?: ConditionStage;

		/**
		 * Supporting evidence
		 * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
		 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
		 */
		evidence?: ConditionEvidence[];

		/**
		 * Additional information about the Condition
		 * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
		 */
		note?: Annotation[];
	}

	/**
	 * Who|what controlled by this consent (or group, by role)
	 * Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
	 */
	interface ConsentActor extends BackboneElement {

		/**
		 * How the actor is involved
		 * How the individual is involved in the resources content that is described in the consent.
		 */
		role: CodeableConcept;

		/**
		 * Resource for the actor (or group, by role)
		 * The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
		 */
		reference: Reference;
	}

	/**
	 * Policies covered by this consent
	 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
	 */
	interface ConsentPolicy extends BackboneElement {

		/**
		 * Enforcement source for policy
		 * Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
		 */
		authority?: uri;

		/**
		 * Extension for authority
		 **/
		_authority?: Element;

		/**
		 * Specific policy covered by this consent
		 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
		 * This element is for discoverability / documentation, and does not modify or qualify the policy rules.
		 */
		uri?: uri;

		/**
		 * Extension for uri
		 **/
		_uri?: Element;
	}

	/**
	 * Data controlled by this consent
	 * The resources controlled by this consent, if specific resources are referenced.
	 */
	interface ConsentData extends BackboneElement {

		/**
		 * instance | related | dependents | authoredby
		 * How the resource reference is interpreted when testing consent restrictions.
		 */
		meaning: ConsentConsentDataMeaning;

		/**
		 * The actual data reference
		 * A reference to a specific resource that defines which resources are covered by this consent.
		 */
		reference: Reference;
	}

	/**
	 * Who|what controlled by this exception (or group, by role)
	 * Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
	 */
	interface ConsentExceptActor extends BackboneElement {

		/**
		 * How the actor is involved
		 * How the individual is involved in the resources content that is described in the exception.
		 */
		role: CodeableConcept;

		/**
		 * Resource for the actor (or group, by role)
		 * The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
		 */
		reference: Reference;
	}

	/**
	 * Data controlled by this exception
	 * The resources controlled by this exception, if specific resources are referenced.
	 */
	interface ConsentExceptData extends BackboneElement {

		/**
		 * instance | related | dependents | authoredby
		 * How the resource reference is interpreted when testing consent restrictions.
		 */
		meaning: ConsentConsentDataMeaning;

		/**
		 * The actual data reference
		 * A reference to a specific resource that defines which resources are covered by this consent.
		 */
		reference: Reference;
	}

	/**
	 * Additional rule -  addition or removal of permissions
	 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
	 */
	interface ConsentExcept extends BackboneElement {

		/**
		 * deny | permit
		 * Action  to take - permit or deny - when the exception conditions are met.
		 */
		type: ConsentConsentExceptType;

		/**
		 * Timeframe for this exception
		 * The timeframe in this exception is valid.
		 */
		period?: Period;

		/**
		 * Who|what controlled by this exception (or group, by role)
		 * Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
		 */
		actor?: ConsentExceptActor[];

		/**
		 * Actions controlled by this exception
		 * Actions controlled by this Exception.
		 * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
		 */
		action?: CodeableConcept[];

		/**
		 * Security Labels that define affected resources
		 * A set of security labels that define which resources are controlled by this exception. If more than one label is specified, all resources must have all the specified labels.
		 * If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. Not all of the security labels make sense for use in this element (may define a narrower value set?).
		 */
		securityLabel?: Coding[];

		/**
		 * Context of activities covered by this exception
		 * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this exception.
		 * E.g. if the purpose is 'research', then the operational context must be research, in order for the consent to apply. Not all of the security labels make sense for use in this element (may define a narrower value set?).
		 */
		purpose?: Coding[];

		/**
		 * e.g. Resource Type, Profile, or CDA etc
		 * The class of information covered by this exception. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
		 * Multiple types are or'ed together. The intention of the contentType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
		 */
		class?: Coding[];

		/**
		 * e.g. LOINC or SNOMED CT code, etc in the content
		 * If this code is found in an instance, then the exception applies.
		 * Typical use of this is a Document code with class = CDA.
		 */
		code?: Coding[];

		/**
		 * Timeframe for data controlled by this exception
		 * Clinical or Operational Relevant period of time that bounds the data controlled by this exception.
		 * This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
		 */
		dataPeriod?: Period;

		/**
		 * Data controlled by this exception
		 * The resources controlled by this exception, if specific resources are referenced.
		 */
		data?: ConsentExceptData[];
	}

	/**
	 * A healthcare consumer's policy choices to permits or denies recipients or roles to perform actions for specific purposes and periods of time
	 * A record of a healthcare consumer’s policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
	 * Broadly, there are 3 key areas of consent for patients: Consent around sharing information (aka Privacy Consent Directive - Authorization to Collect, Use, or Disclose information), consent for specific treatment, or kinds of treatment, and general advance care directives.
	 */
	interface Consent extends DomainResource {

		/**
		 * Identifier for this record (external references)
		 * Unique identifier for this copy of the Consent Statement.
		 * This identifier is identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
		 */
		identifier?: Identifier;

		/**
		 * draft | proposed | active | rejected | inactive | entered-in-error
		 * Indicates the current state of this consent.
		 * This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
		 */
		status: ConsentConsentState;

		/**
		 * Classification of the consent statement - for indexing/retrieval
		 * A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
		 */
		category?: CodeableConcept[];

		/**
		 * Who the consent applies to
		 * The patient/healthcare consumer to whom this consent applies.
		 * Commonly, the patient the consent pertains to is the author, but for young and old people, it may be some other person.
		 */
		patient: Reference;

		/**
		 * Period that this consent applies
		 * Relevant time or time-period when this Consent is applicable.
		 * This can be a subset of the period of the original statement.
		 */
		period?: Period;

		/**
		 * When this Consent was created or indexed
		 * When this  Consent was issued / created / indexed.
		 * This is not the time of the original consent, but the time that this statement was made or derived.
		 */
		dateTime?: dateTime;

		/**
		 * Extension for dateTime
		 **/
		_dateTime?: Element;

		/**
		 * Who is agreeing to the policy and exceptions
		 * Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
		 * Commonly, the patient the consent pertains to is the consentor, but particularly for young and old people, it may be some other person - e.g. a legal guardian.
		 */
		consentingParty?: Reference[];

		/**
		 * Who|what controlled by this consent (or group, by role)
		 * Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
		 */
		actor?: ConsentActor[];

		/**
		 * Actions controlled by this consent
		 * Actions controlled by this consent.
		 * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
		 */
		action?: CodeableConcept[];

		/**
		 * Custodian of the consent
		 * The organization that manages the consent, and the framework within which it is executed.
		 */
		organization?: Reference[];

		/**
		 * Source from which this consent is taken
		 * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
		 * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
		 */
		sourceAttachment?: Attachment;

		/**
		 * Source from which this consent is taken
		 * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
		 * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
		 */
		sourceIdentifier?: Identifier;

		/**
		 * Source from which this consent is taken
		 * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
		 * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
		 */
		sourceReference?: Reference;

		/**
		 * Policies covered by this consent
		 * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
		 */
		policy?: ConsentPolicy[];

		/**
		 * Policy that this consents to
		 * A referece to the specific computable policy.
		 * If the policy reference is not known, the resource cannot be processed. Where the reference is absent, there is no particular policy other than what is expressed directly in the consent resource.
		 */
		policyRule?: uri;

		/**
		 * Extension for policyRule
		 **/
		_policyRule?: Element;

		/**
		 * Security Labels that define affected resources
		 * A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels.
		 * If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. Not all of the security labels make sense for use in this element (may define a narrower value set?).
		 */
		securityLabel?: Coding[];

		/**
		 * Context of activities for which the agreement is made
		 * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this consent.
		 * This element is for discoverability / documentation, and does not modify or qualify the policy (e.g. the policy itself describes the purposes for which it applies).
		 */
		purpose?: Coding[];

		/**
		 * Timeframe for data controlled by this consent
		 * Clinical or Operational Relevant period of time that bounds the data controlled by this consent.
		 * This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
		 */
		dataPeriod?: Period;

		/**
		 * Data controlled by this consent
		 * The resources controlled by this consent, if specific resources are referenced.
		 */
		data?: ConsentData[];

		/**
		 * Additional rule -  addition or removal of permissions
		 * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
		 */
		except?: ConsentExcept[];
	}

	/**
	 * Entity being ascribed responsibility
	 * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
	 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
	 */
	interface ContractAgent extends BackboneElement {

		/**
		 * Contract Agent Type
		 * Who or what parties are assigned roles in this Contract.
		 */
		actor: Reference;

		/**
		 * Role type of the agent
		 * Role type of agent assigned roles in this Contract.
		 */
		role?: CodeableConcept[];
	}

	/**
	 * Contract Signatory
	 * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
	 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
	 */
	interface ContractSigner extends BackboneElement {

		/**
		 * Contract Signatory Role
		 * Role of this Contract signer, e.g. notary, grantee.
		 */
		type: Coding;

		/**
		 * Contract Signatory Party
		 * Party which is a signator to this Contract.
		 */
		party: Reference;

		/**
		 * Contract Documentation Signature
		 * Legally binding Contract DSIG signature contents in Base64.
		 */
		signature: Signature[];
	}

	/**
	 * Contract Valued Item List
	 * Contract Valued Item List.
	 */
	interface ContractValuedItem extends BackboneElement {

		/**
		 * Contract Valued Item Type
		 * Specific type of Contract Valued Item that may be priced.
		 */
		entityCodeableConcept?: CodeableConcept;

		/**
		 * Contract Valued Item Type
		 * Specific type of Contract Valued Item that may be priced.
		 */
		entityReference?: Reference;

		/**
		 * Contract Valued Item Number
		 * Identifies a Contract Valued Item instance.
		 */
		identifier?: Identifier;

		/**
		 * Contract Valued Item Effective Tiem
		 * Indicates the time during which this Contract ValuedItem information is effective.
		 */
		effectiveTime?: dateTime;

		/**
		 * Extension for effectiveTime
		 **/
		_effectiveTime?: Element;

		/**
		 * Count of Contract Valued Items
		 * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Contract Valued Item fee, charge, or cost
		 * A Contract Valued Item unit valuation measure.
		 */
		unitPrice?: Money;

		/**
		 * Contract Valued Item Price Scaling Factor
		 * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Contract Valued Item Difficulty Scaling Factor
		 * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
		 */
		points?: decimal;

		/**
		 * Extension for points
		 **/
		_points?: Element;

		/**
		 * Total Contract Valued Item Value
		 * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;
	}

	/**
	 * Contract Term Agent List
	 * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
	 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
	 */
	interface ContractTermAgent extends BackboneElement {

		/**
		 * Contract Term Agent Subject
		 * The agent assigned a role in this Contract Provision.
		 */
		actor: Reference;

		/**
		 * Type of the Contract Term Agent
		 * Role played by the agent assigned this role in the execution of this Contract Provision.
		 */
		role?: CodeableConcept[];
	}

	/**
	 * Contract Term Valued Item List
	 * Contract Provision Valued Item List.
	 */
	interface ContractTermValuedItem extends BackboneElement {

		/**
		 * Contract Term Valued Item Type
		 * Specific type of Contract Provision Valued Item that may be priced.
		 */
		entityCodeableConcept?: CodeableConcept;

		/**
		 * Contract Term Valued Item Type
		 * Specific type of Contract Provision Valued Item that may be priced.
		 */
		entityReference?: Reference;

		/**
		 * Contract Term Valued Item Number
		 * Identifies a Contract Provision Valued Item instance.
		 */
		identifier?: Identifier;

		/**
		 * Contract Term Valued Item Effective Tiem
		 * Indicates the time during which this Contract Term ValuedItem information is effective.
		 */
		effectiveTime?: dateTime;

		/**
		 * Extension for effectiveTime
		 **/
		_effectiveTime?: Element;

		/**
		 * Contract Term Valued Item Count
		 * Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Contract Term Valued Item fee, charge, or cost
		 * A Contract Provision Valued Item unit valuation measure.
		 */
		unitPrice?: Money;

		/**
		 * Contract Term Valued Item Price Scaling Factor
		 * A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Contract Term Valued Item Difficulty Scaling Factor
		 * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
		 */
		points?: decimal;

		/**
		 * Extension for points
		 **/
		_points?: Element;

		/**
		 * Total Contract Term Valued Item Value
		 * Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;
	}

	/**
	 * Contract Term List
	 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
	 */
	interface ContractTerm extends BackboneElement {

		/**
		 * Contract Term Number
		 * Unique identifier for this particular Contract Provision.
		 */
		identifier?: Identifier;

		/**
		 * Contract Term Issue Date Time
		 * When this Contract Provision was issued.
		 */
		issued?: dateTime;

		/**
		 * Extension for issued
		 **/
		_issued?: Element;

		/**
		 * Contract Term Effective Time
		 * Relevant time or time-period when this Contract Provision is applicable.
		 */
		applies?: Period;

		/**
		 * Contract Term Type or Form
		 * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
		 */
		type?: CodeableConcept;

		/**
		 * Contract Term Type specific classification
		 * Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
		 */
		subType?: CodeableConcept;

		/**
		 * Context of the Contract term
		 * The matter of concern in the context of this provision of the agrement.
		 * The Contract.term.topic, as a Contract Resource subpart, is handled in the same manner as the Contract Resource as discussed above.
		 */
		topic?: Reference[];

		/**
		 * Contract Term Activity
		 * Action stipulated by this Contract Provision.
		 */
		action?: CodeableConcept[];

		/**
		 * Purpose for the Contract Term Action
		 * Reason or purpose for the action stipulated by this Contract Provision.
		 */
		actionReason?: CodeableConcept[];

		/**
		 * Security Labels that define affected terms
		 * A set of security labels that define which terms are controlled by this condition.
		 */
		securityLabel?: Coding[];

		/**
		 * Contract Term Agent List
		 * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
		 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
		 */
		agent?: ContractTermAgent[];

		/**
		 * Human readable Contract term text
		 * Human readable form of this Contract Provision.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Contract Term Valued Item List
		 * Contract Provision Valued Item List.
		 */
		valuedItem?: ContractTermValuedItem[];

		/**
		 * Nested Contract Term Group
		 * Nested group of Contract Provisions.
		 */
		group?: ContractTerm[];
	}

	/**
	 * Contract Friendly Language
	 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
	 */
	interface ContractFriendly extends BackboneElement {

		/**
		 * Easily comprehended representation of this Contract
		 * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
		 */
		contentAttachment: Attachment;

		/**
		 * Easily comprehended representation of this Contract
		 * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
		 */
		contentReference: Reference;
	}

	/**
	 * Contract Legal Language
	 * List of Legal expressions or representations of this Contract.
	 */
	interface ContractLegal extends BackboneElement {

		/**
		 * Contract Legal Text
		 * Contract legal text in human renderable form.
		 */
		contentAttachment: Attachment;

		/**
		 * Contract Legal Text
		 * Contract legal text in human renderable form.
		 */
		contentReference: Reference;
	}

	/**
	 * Computable Contract Language
	 * List of Computable Policy Rule Language Representations of this Contract.
	 */
	interface ContractRule extends BackboneElement {

		/**
		 * Computable Contract Rules
		 * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
		 */
		contentAttachment: Attachment;

		/**
		 * Computable Contract Rules
		 * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
		 */
		contentReference: Reference;
	}

	/**
	 * Legal Agreement
	 * A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
	 */
	interface Contract extends DomainResource {

		/**
		 * Contract number
		 * Unique identifier for this Contract.
		 */
		identifier?: Identifier;

		/**
		 * amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
		 */
		status?: ContractContractStatus;

		/**
		 * When this Contract was issued
		 * When this  Contract was issued.
		 */
		issued?: dateTime;

		/**
		 * Extension for issued
		 **/
		_issued?: Element;

		/**
		 * Effective time
		 * Relevant time or time-period when this Contract is applicable.
		 */
		applies?: Period;

		/**
		 * Contract Target Entity
		 * The target entity impacted by or of interest to parties to the agreement.
		 * The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason. 
In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
		 */
		subject?: Reference[];

		/**
		 * Context of the Contract
		 * The matter of concern in the context of this agreement.
		 * The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee. 
The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse. 
However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.
If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
		 */
		topic?: Reference[];

		/**
		 * Authority under which this Contract has standing
		 * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
		 */
		authority?: Reference[];

		/**
		 * Domain in which this Contract applies
		 * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
		 */
		domain?: Reference[];

		/**
		 * Type or form
		 * Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
		 */
		type?: CodeableConcept;

		/**
		 * Subtype within the context of type
		 * More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
		 */
		subType?: CodeableConcept[];

		/**
		 * Action stipulated by this Contract
		 * Action stipulated by this Contract.
		 */
		action?: CodeableConcept[];

		/**
		 * Rationale for the stiplulated action
		 * Reason for action stipulated by this Contract.
		 */
		actionReason?: CodeableConcept[];

		/**
		 * Decision by Grantor
		 * The type of decision made by a grantor with respect to an offer made by a grantee.
		 */
		decisionType?: CodeableConcept;

		/**
		 * Content derived from the basal information
		 * The minimal content derived from the basal information source at a specific stage in its lifecycle.
		 */
		contentDerivative?: CodeableConcept;

		/**
		 * Security Labels that define affected resources
		 * A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels.
		 */
		securityLabel?: Coding[];

		/**
		 * Entity being ascribed responsibility
		 * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
		 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
		 */
		agent?: ContractAgent[];

		/**
		 * Contract Signatory
		 * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
		 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
		 */
		signer?: ContractSigner[];

		/**
		 * Contract Valued Item List
		 * Contract Valued Item List.
		 */
		valuedItem?: ContractValuedItem[];

		/**
		 * Contract Term List
		 * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
		 */
		term?: ContractTerm[];

		/**
		 * Binding Contract
		 * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
		 */
		bindingAttachment?: Attachment;

		/**
		 * Binding Contract
		 * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
		 */
		bindingReference?: Reference;

		/**
		 * Contract Friendly Language
		 * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
		 */
		friendly?: ContractFriendly[];

		/**
		 * Contract Legal Language
		 * List of Legal expressions or representations of this Contract.
		 */
		legal?: ContractLegal[];

		/**
		 * Computable Contract Language
		 * List of Computable Policy Rule Language Representations of this Contract.
		 */
		rule?: ContractRule[];
	}

	/**
	 * Additional coverage classifications
	 * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
	 */
	interface CoverageGrouping extends BackboneElement {

		/**
		 * An identifier for the group
		 * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify an employer group. May also be referred to as a Policy or Group ID.
		 */
		group?: string;

		/**
		 * Extension for group
		 **/
		_group?: Element;

		/**
		 * Display text for an identifier for the group
		 * A short description for the group.
		 */
		groupDisplay?: string;

		/**
		 * Extension for groupDisplay
		 **/
		_groupDisplay?: Element;

		/**
		 * An identifier for the subsection of the group
		 * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a subset of an employer group.
		 */
		subGroup?: string;

		/**
		 * Extension for subGroup
		 **/
		_subGroup?: Element;

		/**
		 * Display text for the subsection of the group
		 * A short description for the subgroup.
		 */
		subGroupDisplay?: string;

		/**
		 * Extension for subGroupDisplay
		 **/
		_subGroupDisplay?: Element;

		/**
		 * An identifier for the plan
		 * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a collection of benefits provided to employees. May be referred to as a Section or Division ID.
		 */
		plan?: string;

		/**
		 * Extension for plan
		 **/
		_plan?: Element;

		/**
		 * Display text for the plan
		 * A short description for the plan.
		 */
		planDisplay?: string;

		/**
		 * Extension for planDisplay
		 **/
		_planDisplay?: Element;

		/**
		 * An identifier for the subsection of the plan
		 * Identifies a sub-style or sub-collective of coverage issued by the underwriter, for example may be used to identify a subset of a collection of benefits provided to employees.
		 */
		subPlan?: string;

		/**
		 * Extension for subPlan
		 **/
		_subPlan?: Element;

		/**
		 * Display text for the subsection of the plan
		 * A short description for the subplan.
		 */
		subPlanDisplay?: string;

		/**
		 * Extension for subPlanDisplay
		 **/
		_subPlanDisplay?: Element;

		/**
		 * An identifier for the class
		 * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage such as a level of deductables or co-payment.
		 */
		class?: string;

		/**
		 * Extension for class
		 **/
		_class?: Element;

		/**
		 * Display text for the class
		 * A short description for the class.
		 */
		classDisplay?: string;

		/**
		 * Extension for classDisplay
		 **/
		_classDisplay?: Element;

		/**
		 * An identifier for the subsection of the class
		 * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a subclass of coverage such as a sub-level of deductables or co-payment.
		 */
		subClass?: string;

		/**
		 * Extension for subClass
		 **/
		_subClass?: Element;

		/**
		 * Display text for the subsection of the subclass
		 * A short description for the subclass.
		 */
		subClassDisplay?: string;

		/**
		 * Extension for subClassDisplay
		 **/
		_subClassDisplay?: Element;
	}

	/**
	 * Insurance or medical plan or a payment agreement
	 * Financial instrument which may be used to reimburse or pay for health care products and services.
	 */
	interface Coverage extends DomainResource {

		/**
		 * The primary coverage ID
		 * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatination of the Coverage.SubscriberID and the Coverage.dependant.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
		 */
		status?: CoverageCoverageStatus;

		/**
		 * Type of coverage such as medical or accident
		 * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
		 */
		type?: CodeableConcept;

		/**
		 * Owner of the policy
		 * The party who 'owns' the insurance policy,  may be an individual, corporation or the subscriber's employer.
		 */
		policyHolder?: Reference;

		/**
		 * Subscriber to the policy
		 * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
		 */
		subscriber?: Reference;

		/**
		 * ID assigned to the Subscriber
		 * The insurer assigned ID for the Subscriber.
		 */
		subscriberId?: string;

		/**
		 * Extension for subscriberId
		 **/
		_subscriberId?: Element;

		/**
		 * Plan Beneficiary
		 * The party who benefits from the insurance coverage., the patient when services are provided.
		 */
		beneficiary?: Reference;

		/**
		 * Beneficiary relationship to the Subscriber
		 * The relationship of beneficiary (patient) to the subscriber.
		 */
		relationship?: CodeableConcept;

		/**
		 * Coverage start and end dates
		 * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
		 */
		period?: Period;

		/**
		 * Identifier for the plan or agreement issuer
		 * The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements. May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
		 */
		payor?: Reference[];

		/**
		 * Additional coverage classifications
		 * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
		 */
		grouping?: CoverageGrouping;

		/**
		 * Dependent number
		 * A unique identifier for a dependent under the coverage.
		 */
		dependent?: string;

		/**
		 * Extension for dependent
		 **/
		_dependent?: Element;

		/**
		 * The plan instance or sequence counter
		 * An optional counter for a particular instance of the identified coverage which increments upon each renewal.
		 */
		sequence?: string;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Relative order of the coverage
		 * The order of applicability of this coverage relative to other coverages which are currently inforce. Note, there may be gaps in the numbering and this does not imply primary, secondard etc. as the specific positioning of coverages depends upon the episode of care.
		 */
		order?: positiveInt;

		/**
		 * Extension for order
		 **/
		_order?: Element;

		/**
		 * Insurer network
		 * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
		 */
		network?: string;

		/**
		 * Extension for network
		 **/
		_network?: Element;

		/**
		 * Contract details
		 * The policy(s) which constitute this insurance coverage.
		 */
		contract?: Reference[];
	}

	/**
	 * External specification mapped to
	 * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
	 */
	interface DataElementMapping extends BackboneElement {

		/**
		 * Internal id when this mapping is used
		 * An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis.
		 * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
		 */
		identity: id;

		/**
		 * Extension for identity
		 **/
		_identity?: Element;

		/**
		 * Identifies what this mapping refers to
		 * An absolute URI that identifies the specification that this mapping is expressed to.
		 * A formal identity for the specification being mapped to helps with identifying maps consistently.
		 */
		uri?: uri;

		/**
		 * Extension for uri
		 **/
		_uri?: Element;

		/**
		 * Names what this mapping refers to
		 * A name for the specification that is being mapped to.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Versions, issues, scope limitations, etc.
		 * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * Resource data element
	 * The formal description of a single piece of information that can be gathered and reported.
	 * Often called a clinical template.
	 */
	interface DataElement extends DomainResource {

		/**
		 * Logical URI to reference this data element (globally unique)
		 * An absolute URI that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published. The URL SHOULD include the major version of the data element. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the data element
		 * A formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this data element outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the data element
		 * The identifier that is used to identify this version of the data element when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the data element author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different data element instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the data element with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this data element. Enables tracking the life-cycle of the content.
		 * Allows filtering of data elements that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired data element without due consideration.
		 */
		status: DataElementPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this data element is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of data element that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental data element in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the data element was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the data element changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the data element. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the data element.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the data element is the organization or individual primarily responsible for the maintenance and upkeep of the data element. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the data element. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Name for this data element (computer friendly)
		 * A natural language name identifying the data element. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this data element (human friendly)
		 * A short, descriptive, user-friendly title for the data element.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc. This may be similar to the question used to prompt someone for a data element value, but the purpose is communicating about the data element, not asking the question.  (Refer to the 'question' element for the latter.).
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate data element instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for data element (if applicable)
		 * A legal or geographic region in which the data element is intended to be used.
		 * It may be possible for the data element to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the data element and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the data element.
		 * null The copyright statement does not apply to values for the data element, only to its definition.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * comparable | fully-specified | equivalent | convertable | scaleable | flexible
		 * Identifies how precise the data element is in its definition.
		 */
		stringency?: DataElementDataElementStringency;

		/**
		 * External specification mapped to
		 * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
		 */
		mapping?: DataElementMapping[];

		/**
		 * Definition of element
		 * Defines the structure, type, allowed values and other constraining characteristics of the data element.
		 * For simple data types there will only be one repetition.  For complex data types, multiple repetitions will be present defining a nested structure using the "path" element.
		 */
		element: ElementDefinition[];
	}

	/**
	 * Step taken to address
	 * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
	 */
	interface DetectedIssueMitigation extends BackboneElement {

		/**
		 * What mitigation?
		 * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
		 * The "text" component can be used for detail or when no appropriate code exists.
		 */
		action: CodeableConcept;

		/**
		 * Date committed
		 * Indicates when the mitigating action was documented.
		 * This may not be the same as when the mitigating step was actually taken.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Who is committing?
		 * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
		 */
		author?: Reference;
	}

	/**
	 * Clinical issue with action
	 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
	 */
	interface DetectedIssue extends DomainResource {

		/**
		 * Unique id for the detected issue
		 * Business identifier associated with the detected issue record.
		 */
		identifier?: Identifier;

		/**
		 * registered | preliminary | final | amended +
		 * Indicates the status of the detected issue.
		 * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the issue as not currently valid.
		 */
		status: DetectedIssueDetectedIssueStatus;

		/**
		 * Issue Category, e.g. drug-drug, duplicate therapy, etc.
		 * Identifies the general type of issue identified.
		 */
		category?: CodeableConcept;

		/**
		 * high | moderate | low
		 * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
		 */
		severity?: DetectedIssueDetectedIssueSeverity;

		/**
		 * Associated patient
		 * Indicates the patient whose record the detected issue is associated with.
		 */
		patient?: Reference;

		/**
		 * When identified
		 * The date or date-time when the detected issue was initially identified.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * The provider or device that identified the issue
		 * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
		 */
		author?: Reference;

		/**
		 * Problem resource
		 * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
		 * There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
		 */
		implicated?: Reference[];

		/**
		 * Description and context
		 * A textual explanation of the detected issue.
		 * Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
		 */
		detail?: string;

		/**
		 * Extension for detail
		 **/
		_detail?: Element;

		/**
		 * Authority for issue
		 * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
		 */
		reference?: uri;

		/**
		 * Extension for reference
		 **/
		_reference?: Element;

		/**
		 * Step taken to address
		 * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
		 */
		mitigation?: DetectedIssueMitigation[];
	}

	/**
	 * Unique Device Identifier (UDI) Barcode string
	 * [Unique device identifier (UDI)](device.html#5.11.3.2.2) assigned to device label or package.
	 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
	 */
	interface DeviceUdi extends BackboneElement {

		/**
		 * Mandatory fixed portion of UDI
		 * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
		 */
		deviceIdentifier?: string;

		/**
		 * Extension for deviceIdentifier
		 **/
		_deviceIdentifier?: Element;

		/**
		 * Device Name as appears on UDI label
		 * Name of device as used in labeling or catalog.
		 * Use the `Device.type`  for a generic type or kind of device name.  Note the [GUDID](http://www.fda.gov/medicaldevices/deviceregulationandguidance/uniquedeviceidentification/globaludidatabasegudid/default.htm) lists the name as the 'Brand Name'.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Regional UDI authority
		 * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace. with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
		 */
		jurisdiction?: uri;

		/**
		 * Extension for jurisdiction
		 **/
		_jurisdiction?: Element;

		/**
		 * UDI Human Readable Barcode String
		 * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
		 * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
		 */
		carrierHRF?: string;

		/**
		 * Extension for carrierHRF
		 **/
		_carrierHRF?: Element;

		/**
		 * UDI Machine Readable Barcode String
		 * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - E.g a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
		 * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
		 */
		carrierAIDC?: base64Binary;

		/**
		 * Extension for carrierAIDC
		 **/
		_carrierAIDC?: Element;

		/**
		 * UDI Issuing Organization
		 * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
1) GS1: 
http://hl7.org/fhir/NamingSystem/gs1-di, 
2) HIBCC:
http://hl7.org/fhir/NamingSystem/hibcc-dI, 
3) ICCBBA for blood containers:
http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
4) ICCBA for other devices:
http://hl7.org/fhir/NamingSystem/iccbba-other-di.
		 */
		issuer?: uri;

		/**
		 * Extension for issuer
		 **/
		_issuer?: Element;

		/**
		 * barcode | rfid | manual +
		 * A coded entry to indicate how the data was entered.
		 */
		entryType?: DeviceUDIEntryType;
	}

	/**
	 * Item used in healthcare
	 * This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices include durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.
	 */
	interface Device extends DomainResource {

		/**
		 * Instance identifier
		 * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
		 * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.  For [UDI](device.html#5.11.3.2.2),  this element corresponds to the variable portion of the UDI that identifies the serial number of a specific device. See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
		 */
		identifier?: Identifier[];

		/**
		 * Unique Device Identifier (UDI) Barcode string
		 * [Unique device identifier (UDI)](device.html#5.11.3.2.2) assigned to device label or package.
		 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
		 */
		udi?: DeviceUdi;

		/**
		 * active | inactive | entered-in-error | unknown
		 * Status of the Device availability.
		 * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
		 */
		status?: DeviceFHIRDeviceStatus;

		/**
		 * What kind of device this is
		 * Code or identifier to identify a kind of device.
		 */
		type?: CodeableConcept;

		/**
		 * Lot number of manufacture
		 * Lot number assigned by the manufacturer.
		 */
		lotNumber?: string;

		/**
		 * Extension for lotNumber
		 **/
		_lotNumber?: Element;

		/**
		 * Name of device manufacturer
		 * A name of the manufacturer.
		 */
		manufacturer?: string;

		/**
		 * Extension for manufacturer
		 **/
		_manufacturer?: Element;

		/**
		 * Date when the device was made
		 * The date and time when the device was manufactured.
		 */
		manufactureDate?: dateTime;

		/**
		 * Extension for manufactureDate
		 **/
		_manufactureDate?: Element;

		/**
		 * Date and time of expiry of this device (if applicable)
		 * The date and time beyond which this device is no longer valid or should not be used (if applicable).
		 */
		expirationDate?: dateTime;

		/**
		 * Extension for expirationDate
		 **/
		_expirationDate?: Element;

		/**
		 * Model id assigned by the manufacturer
		 * The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
		 */
		model?: string;

		/**
		 * Extension for model
		 **/
		_model?: Element;

		/**
		 * Version number (i.e. software)
		 * The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Patient to whom Device is affixed
		 * Patient information, If the device is affixed to a person.
		 */
		patient?: Reference;

		/**
		 * Organization responsible for device
		 * An organization that is responsible for the provision and ongoing maintenance of the device.
		 */
		owner?: Reference;

		/**
		 * Details for human/organization for support
		 * Contact details for an organization or a particular human that is responsible for the device.
		 * used for troubleshooting etc.
		 */
		contact?: ContactPoint[];

		/**
		 * Where the resource is found
		 * The place where the device can be found.
		 */
		location?: Reference;

		/**
		 * Network address to contact device
		 * A network address on which the device may be contacted directly.
		 * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Device notes and comments
		 * Descriptive information, usage information or implantation information that is not captured in an existing element.
		 */
		note?: Annotation[];

		/**
		 * Safety Characteristics of Device
		 * Provides additional safety characteristics about a medical device.  For example devices containing latex.
		 */
		safety?: CodeableConcept[];
	}

	/**
	 * Specification details such as Component Revisions, or Serial Numbers
	 * The production specification such as component revision, serial number, etc.
	 */
	interface DeviceComponentProductionSpecification extends BackboneElement {

		/**
		 * Type or kind of production specification, for example serial number or software revision
		 * The specification type, such as, serial number, part number, hardware revision, software revision, etc.
		 */
		specType?: CodeableConcept;

		/**
		 * Internal component unique identification
		 * The internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacturer can make use of.
		 */
		componentId?: Identifier;

		/**
		 * A printable string defining the component
		 * The printable string defining the component.
		 */
		productionSpec?: string;

		/**
		 * Extension for productionSpec
		 **/
		_productionSpec?: Element;
	}

	/**
	 * An instance of a medical-related component of a medical device
	 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
	 * For the initial scope, this DeviceComponent resource is only applicable to describe a single node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard and that does not represent a metric. Examples for such a node are MDS, VMD, or Channel.
	 */
	interface DeviceComponent extends DomainResource {

		/**
		 * Instance id assigned by the software stack
		 * The locally assigned unique identification by the software. For example: handle ID.
		 */
		identifier: Identifier;

		/**
		 * What kind of component it is
		 * The component type as defined in the object-oriented or metric nomenclature partition.
		 * DeviceComponent.type can be referred to either GDMN (nomenclature system supported by FDA Global UDI Database) or preferable RTMMS coding system.
		 */
		type: CodeableConcept;

		/**
		 * Recent system change timestamp
		 * The timestamp for the most recent system change which includes device configuration or setting change.
		 */
		lastSystemChange?: instant;

		/**
		 * Extension for lastSystemChange
		 **/
		_lastSystemChange?: Element;

		/**
		 * Top-level device resource link
		 * The link to the source Device that contains administrative device information such as manufacture, serial number, etc.
		 */
		source?: Reference;

		/**
		 * Parent resource link
		 * The link to the parent resource. For example: Channel is linked to its VMD parent.
		 */
		parent?: Reference;

		/**
		 * Current operational status of the component, for example On, Off or Standby
		 * The current operational status of the device. For example: On, Off, Standby, etc.
		 * OperationalStatus for the MDS, VMD, or Channel will be bound to a specific ValueSet that is defined in its profile.
		 */
		operationalStatus?: CodeableConcept[];

		/**
		 * Current supported parameter group
		 * The parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
		 */
		parameterGroup?: CodeableConcept;

		/**
		 * other | chemical | electrical | impedance | nuclear | optical | thermal | biological | mechanical | acoustical | manual+
		 * The physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
		 */
		measurementPrinciple?: DeviceComponentMeasmntPrinciple;

		/**
		 * Specification details such as Component Revisions, or Serial Numbers
		 * The production specification such as component revision, serial number, etc.
		 */
		productionSpecification?: DeviceComponentProductionSpecification[];

		/**
		 * Language code for the human-readable text strings produced by the device
		 * The language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
		 */
		languageCode?: CodeableConcept;
	}

	/**
	 * Describes the calibrations that have been performed or that are required to be performed
	 * Describes the calibrations that have been performed or that are required to be performed.
	 */
	interface DeviceMetricCalibration extends BackboneElement {

		/**
		 * unspecified | offset | gain | two-point
		 * Describes the type of the calibration method.
		 */
		type?: DeviceMetricDeviceMetricCalibrationType;

		/**
		 * not-calibrated | calibration-required | calibrated | unspecified
		 * Describes the state of the calibration.
		 */
		state?: DeviceMetricDeviceMetricCalibrationState;

		/**
		 * Describes the time last calibration has been performed
		 * Describes the time last calibration has been performed.
		 */
		time?: instant;

		/**
		 * Extension for time
		 **/
		_time?: Element;
	}

	/**
	 * Measurement, calculation or setting capability of a medical device
	 * Describes a measurement, calculation or setting capability of a medical device.
	 * For the initial scope, this DeviceMetric resource is only applicable to describe a single metric node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard.
	 */
	interface DeviceMetric extends DomainResource {

		/**
		 * Unique identifier of this DeviceMetric
		 * Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.
		 */
		identifier: Identifier;

		/**
		 * Identity of metric, for example Heart Rate or PEEP Setting
		 * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
		 * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
		 */
		type: CodeableConcept;

		/**
		 * Unit of Measure for the Metric
		 * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
		 * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
		 */
		unit?: CodeableConcept;

		/**
		 * Describes the link to the source Device
		 * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
		 */
		source?: Reference;

		/**
		 * Describes the link to the parent DeviceComponent
		 * Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
		 */
		parent?: Reference;

		/**
		 * on | off | standby | entered-in-error
		 * Indicates current operational state of the device. For example: On, Off, Standby, etc.
		 */
		operationalStatus?: DeviceMetricDeviceMetricOperationalStatus;

		/**
		 * black | red | green | yellow | blue | magenta | cyan | white
		 * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
		 */
		color?: DeviceMetricDeviceMetricColor;

		/**
		 * measurement | setting | calculation | unspecified
		 * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
		 */
		category: DeviceMetricDeviceMetricCategory;

		/**
		 * Describes the measurement repetition time
		 * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
		 */
		measurementPeriod?: Timing;

		/**
		 * Describes the calibrations that have been performed or that are required to be performed
		 * Describes the calibrations that have been performed or that are required to be performed.
		 */
		calibration?: DeviceMetricCalibration[];
	}

	/**
	 * Who/what is requesting diagnostics
	 * The individual who initiated the request and has responsibility for its activation.
	 */
	interface DeviceRequestRequester extends BackboneElement {

		/**
		 * Individual making the request
		 * The device, practitioner, etc. who initiated the request.
		 */
		agent: Reference;

		/**
		 * Organization agent is acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Medical device request
	 * Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
	 */
	interface DeviceRequest extends DomainResource {

		/**
		 * External Request identifier
		 * Identifiers assigned to this order by the orderer or by the receiver.
		 */
		identifier?: Identifier[];

		/**
		 * Protocol or definition
		 * Protocol or definition followed by this request. For example: The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
		 */
		definition?: Reference[];

		/**
		 * What request fulfills
		 * Plan/proposal/order fulfilled by this request.
		 */
		basedOn?: Reference[];

		/**
		 * What request replaces
		 * The request takes the place of the referenced completed or terminated request(s).
		 */
		priorRequest?: Reference[];

		/**
		 * Identifier of composite request
		 * Composite request this is part of.
		 */
		groupIdentifier?: Identifier;

		/**
		 * draft | active | suspended | completed | entered-in-error | cancelled
		 * The status of the request.
		 * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
		 */
		status?: DeviceRequestDeviceRequestStatus;

		/**
		 * proposal | plan | original-order | encoded | reflex-order
		 * Whether the request is a proposal, plan, an original order or a reflex order.
		 */
		intent: CodeableConcept;

		/**
		 * Indicates how quickly the {{title}} should be addressed with respect to other requests
		 * Indicates how quickly the {{title}} should be addressed with respect to other requests.
		 */
		priority?: code;

		/**
		 * Extension for priority
		 **/
		_priority?: Element;

		/**
		 * Device requested
		 * The details of the device to be used.
		 */
		codeReference: Reference;

		/**
		 * Device requested
		 * The details of the device to be used.
		 */
		codeCodeableConcept: CodeableConcept;

		/**
		 * Focus of request
		 * The patient who will use the device.
		 */
		subject: Reference;

		/**
		 * Encounter or Episode motivating request
		 * An encounter that provides additional context in which this request is made.
		 */
		context?: Reference;

		/**
		 * Desired time or schedule for use
		 * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * Desired time or schedule for use
		 * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
		 */
		occurrencePeriod?: Period;

		/**
		 * Desired time or schedule for use
		 * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
		 */
		occurrenceTiming?: Timing;

		/**
		 * When recorded
		 * When the request transitioned to being actionable.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Who/what is requesting diagnostics
		 * The individual who initiated the request and has responsibility for its activation.
		 */
		requester?: DeviceRequestRequester;

		/**
		 * Fille role
		 * Desired type of performer for doing the diagnostic testing.
		 */
		performerType?: CodeableConcept;

		/**
		 * Requested Filler
		 * The desired perfomer for doing the diagnostic testing.
		 */
		performer?: Reference;

		/**
		 * Coded Reason for request
		 * Reason or justification for the use of this device.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Linked Reason for request
		 * Reason or justification for the use of this device.
		 */
		reasonReference?: Reference[];

		/**
		 * Additional clinical information
		 * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may includes body where on the subject's the device will be used ( i.e. the target site).
		 */
		supportingInfo?: Reference[];

		/**
		 * Notes or comments
		 * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
		 */
		note?: Annotation[];

		/**
		 * Request provenance
		 * Key events in the history of the request.
		 * This may not include provenances for all versions of the request – only those deemed “relevant” or important.
This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
All Provenances should have some historical version of this Request as their subject.
		 */
		relevantHistory?: Reference[];
	}

	/**
	 * Record of use of a device
	 * A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
	 */
	interface DeviceUseStatement extends DomainResource {

		/**
		 * External identifier for this record
		 * An external identifier for this statement such as an IRI.
		 */
		identifier?: Identifier[];

		/**
		 * active | completed | entered-in-error +
		 * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
		 * DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).

This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
		 */
		status: DeviceUseStatementDeviceUseStatementStatus;

		/**
		 * Patient using device
		 * The patient who used the device.
		 */
		subject: Reference;

		/**
		 * Period device was used
		 * The time period over which the device was used.
		 */
		whenUsed?: Period;

		/**
		 * How often  the device was used
		 * How often the device was used.
		 */
		timingTiming?: Timing;

		/**
		 * How often  the device was used
		 * How often the device was used.
		 */
		timingPeriod?: Period;

		/**
		 * How often  the device was used
		 * How often the device was used.
		 */
		timingDateTime?: dateTime;

		/**
		 * Extension for timingDateTime
		 **/
		_timingDateTime?: Element;

		/**
		 * When statement was recorded
		 * The time at which the statement was made/recorded.
		 */
		recordedOn?: dateTime;

		/**
		 * Extension for recordedOn
		 **/
		_recordedOn?: Element;

		/**
		 * Who made the statement
		 * Who reported the device was being used by the patient.
		 */
		source?: Reference;

		/**
		 * Reference to device used
		 * The details of the device used.
		 */
		device: Reference;

		/**
		 * Why device was used
		 * Reason or justification for the use of the device.
		 */
		indication?: CodeableConcept[];

		/**
		 * Target body site
		 * Indicates the site on the subject's body where the device was used ( i.e. the target site).
		 */
		bodySite?: CodeableConcept;

		/**
		 * Addition details (comments, instructions)
		 * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
		 */
		note?: Annotation[];
	}

	/**
	 * Participants in producing the report
	 * Indicates who or what participated in producing the report.
	 */
	interface DiagnosticReportPerformer extends BackboneElement {

		/**
		 * Type of performer
		 * Describes the type of participation (e.g.  a responsible party, author, or verifier).
		 */
		role?: CodeableConcept;

		/**
		 * Practitioner or Organization  participant
		 * The reference to the  practitioner or organization involved in producing the report. For example, the diagnostic service that is responsible for issuing the report.
		 * This is not necessarily the source of the atomic data items. It is the entity that takes responsibility for the clinical report.
		 */
		actor: Reference;
	}

	/**
	 * Key images associated with this report
	 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
	 */
	interface DiagnosticReportImage extends BackboneElement {

		/**
		 * Comment about the image (e.g. explanation)
		 * A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
		 * The comment should be displayed with the image. It would be common for the report to include additional discussion of the image contents in other sections such as the conclusion.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * Reference to the image source
		 * Reference to the image source.
		 */
		link: Reference;
	}

	/**
	 * A Diagnostic report - a combination of request information, atomic results, images, interpretation, as well as formatted reports
	 * The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
	 * This is intended to capture a single report, and is not suitable for use in displaying summary information that covers multiple reports.  For example, this resource has not been designed for laboratory cumulative reporting formats nor detailed structured reports for sequencing.
	 */
	interface DiagnosticReport extends DomainResource {

		/**
		 * Business identifier for report
		 * Identifiers assigned to this report by the performer or other systems.
		 * Usually assigned by the Information System of the diagnostic service provider (filler id).
		 */
		identifier?: Identifier[];

		/**
		 * What was requested
		 * Details concerning a test or procedure requested.
		 * Note: Usually there is one test request for each result, however in some circumstances multiple test requests may be represented using a single test result resource. Note that there are also cases where one request leads to multiple reports.
		 */
		basedOn?: Reference[];

		/**
		 * registered | partial | preliminary | final +
		 * The status of the diagnostic report as a whole.
		 * This is labeled as "Is Modifier" because applications need to take appropriate action if a report is withdrawn.
		 */
		status: DiagnosticReportDiagnosticReportStatus;

		/**
		 * Service category
		 * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
		 * The level of granularity is defined by the category concepts in the value set. More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in DiagnosticReport.code.
		 */
		category?: CodeableConcept;

		/**
		 * Name/Code for this diagnostic report
		 * A code or name that describes this diagnostic report.
		 */
		code: CodeableConcept;

		/**
		 * The subject of the report - usually, but not always, the patient
		 * The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.
		 */
		subject?: Reference;

		/**
		 * Health care event when test ordered
		 * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport per is about.
		 * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter or episode but still be tied to the context of the encounter or episode (e.g. pre-admission lab tests).
		 */
		context?: Reference;

		/**
		 * Clinically relevant time/time-period for report
		 * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
		 * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
		 */
		effectiveDateTime?: dateTime;

		/**
		 * Extension for effectiveDateTime
		 **/
		_effectiveDateTime?: Element;

		/**
		 * Clinically relevant time/time-period for report
		 * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
		 * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
		 */
		effectivePeriod?: Period;

		/**
		 * DateTime this version was released
		 * The date and time that this version of the report was released from the source diagnostic service.
		 * May be different from the update time of the resource itself, because that is the status of the record (potentially a secondary copy), not the actual release time of the report.
		 */
		issued?: instant;

		/**
		 * Extension for issued
		 **/
		_issued?: Element;

		/**
		 * Participants in producing the report
		 * Indicates who or what participated in producing the report.
		 */
		performer?: DiagnosticReportPerformer[];

		/**
		 * Specimens this report is based on
		 * Details about the specimens on which this diagnostic report is based.
		 * If the specimen is sufficiently specified with a code in the test result name, then this additional data may be redundant. If there are multiple specimens, these may be represented per observation or group.
		 */
		specimen?: Reference[];

		/**
		 * Observations - simple, or complex nested groups
		 * Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. "atomic" results), or they can be grouping observations that include references to other members of the group (e.g. "panels").
		 */
		result?: Reference[];

		/**
		 * Reference to full details of imaging associated with the diagnostic report
		 * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
		 * ImagingStudy and ImageManifest and the image element are somewhat overlapping - typically, the list of image references in the image element will also be found in one of the imaging study resources. However each caters to different types of displays for different types of purposes. Neither, either, or both may be provided.
		 */
		imagingStudy?: Reference[];

		/**
		 * Key images associated with this report
		 * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
		 */
		image?: DiagnosticReportImage[];

		/**
		 * Clinical Interpretation of test results
		 * Concise and clinically contextualized impression / summary of the diagnostic report.
		 */
		conclusion?: string;

		/**
		 * Extension for conclusion
		 **/
		_conclusion?: Element;

		/**
		 * Codes for the conclusion
		 * Codes for the conclusion.
		 */
		codedDiagnosis?: CodeableConcept[];

		/**
		 * Entire report as issued
		 * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
		 * "application/pdf" is recommended as the most reliable and interoperable in this context.
		 */
		presentedForm?: Attachment[];
	}

	/**
	 * The items included
	 * The list of Documents included in the manifest.
	 */
	interface DocumentManifestContent extends BackboneElement {

		/**
		 * Contents of this set of documents
		 * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
		 * The intended focus of the DocumentManifest is for the reference to target either DocumentReference or Media Resources, and most implementation guides will restrict to these resources. The reference is to "Any" to support EN 13606 usage, where an extract is DocumentManifest that references  List and Composition resources.
		 */
		pAttachment: Attachment;

		/**
		 * Contents of this set of documents
		 * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
		 * The intended focus of the DocumentManifest is for the reference to target either DocumentReference or Media Resources, and most implementation guides will restrict to these resources. The reference is to "Any" to support EN 13606 usage, where an extract is DocumentManifest that references  List and Composition resources.
		 */
		pReference: Reference;
	}

	/**
	 * Related things
	 * Related identifiers or resources associated with the DocumentManifest.
	 * May be identifiers or resources that caused the DocumentManifest to be created.
	 */
	interface DocumentManifestRelated extends BackboneElement {

		/**
		 * Identifiers of things that are related
		 * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
		 * If both identifier and ref elements are present they shall refer to the same thing.
		 */
		identifier?: Identifier;

		/**
		 * Related Resource
		 * Related Resource to this DocumentManifest. For example, Order, ProcedureRequest,  Procedure, EligibilityRequest, etc.
		 * If both identifier and ref elements are present they shall refer to the same thing.
		 */
		ref?: Reference;
	}

	/**
	 * A list that defines a set of documents
	 * A collection of documents compiled for a purpose together with metadata that applies to the collection.
	 */
	interface DocumentManifest extends DomainResource {

		/**
		 * Unique Identifier for the set of documents
		 * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
		 */
		masterIdentifier?: Identifier;

		/**
		 * Other identifiers for the manifest
		 * Other identifiers associated with the document manifest, including version independent  identifiers.
		 */
		identifier?: Identifier[];

		/**
		 * current | superseded | entered-in-error
		 * The status of this document manifest.
		 * This element is labeled as a modifier because the status contains the codes that mark the manifest as not currently valid.
		 */
		status: DocumentManifestDocumentReferenceStatus;

		/**
		 * Kind of document set
		 * Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
		 */
		type?: CodeableConcept;

		/**
		 * The subject of the set of documents
		 * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
		 */
		subject?: Reference;

		/**
		 * When this document manifest created
		 * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
		 * Creation time is used for tracking, organizing versions and searching. This is the creation time of the document set, not the documents on which it is based.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Who and/or what authored the manifest
		 * Identifies who is responsible for creating the manifest, and adding  documents to it.
		 * Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
		 */
		author?: Reference[];

		/**
		 * Intended to get notified about this set of documents
		 * A patient, practitioner, or organization for which this set of documents is intended.
		 * How the recipient receives the document set or is notified of it is up to the implementation. This element is just a statement of intent. If the recipient is a person, and it is not known whether the person is a patient or a practitioner, RelatedPerson would be the default choice.
		 */
		recipient?: Reference[];

		/**
		 * The source system/application/software
		 * Identifies the source system, application, or software that produced the document manifest.
		 */
		source?: uri;

		/**
		 * Extension for source
		 **/
		_source?: Element;

		/**
		 * Human-readable description (title)
		 * Human-readable description of the source document. This is sometimes known as the "title".
		 * What the document is about, rather than a terse summary of the document. It is commonly the case that records do not have a title and are collectively referred to by the display name of Record code (e.g. a "consultation" or "progress note").
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * The items included
		 * The list of Documents included in the manifest.
		 */
		content: DocumentManifestContent[];

		/**
		 * Related things
		 * Related identifiers or resources associated with the DocumentManifest.
		 * May be identifiers or resources that caused the DocumentManifest to be created.
		 */
		related?: DocumentManifestRelated[];
	}

	/**
	 * Relationships to other documents
	 * Relationships that this document has with other document references that already exist.
	 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
	 */
	interface DocumentReferenceRelatesTo extends BackboneElement {

		/**
		 * replaces | transforms | signs | appends
		 * The type of relationship that this document has with anther document.
		 * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
		 */
		code: DocumentReferenceDocumentRelationshipType;

		/**
		 * Target of the relationship
		 * The target document of this relationship.
		 */
		target: Reference;
	}

	/**
	 * Document referenced
	 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
	 */
	interface DocumentReferenceContent extends BackboneElement {

		/**
		 * Where to access the document
		 * The document or URL of the document along with critical metadata to prove content has integrity.
		 */
		attachment: Attachment;

		/**
		 * Format/content rules for the document
		 * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
		 * Note that while IHE mostly issues URNs for format types, not all documents can be identified by a URI.
		 */
		format?: Coding;
	}

	/**
	 * Related identifiers or resources
	 * Related identifiers or resources associated with the DocumentReference.
	 * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
	 */
	interface DocumentReferenceContextRelated extends BackboneElement {

		/**
		 * Identifier of related objects or events
		 * Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing.
		 * Order numbers, accession numbers, XDW workflow numbers.
		 */
		identifier?: Identifier;

		/**
		 * Related Resource
		 * Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing.
		 * Order, ProcedureRequest,  Procedure, EligibilityRequest, etc.
		 */
		ref?: Reference;
	}

	/**
	 * Clinical context of document
	 * The clinical context in which the document was prepared.
	 * These values are primarily added to help with searching for interesting/relevant documents.
	 */
	interface DocumentReferenceContext extends BackboneElement {

		/**
		 * Context of the document  content
		 * Describes the clinical encounter or type of care that the document content is associated with.
		 */
		encounter?: Reference;

		/**
		 * Main clinical acts documented
		 * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
		 * An event can further specialize the act inherent in the type, such as  where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more event codes are included, they shall not conflict with the values inherent in the class or type elements as such a conflict would create an ambiguous situation.
		 */
		event?: CodeableConcept[];

		/**
		 * Time of service that is being documented
		 * The time period over which the service that is described by the document was provided.
		 */
		period?: Period;

		/**
		 * Kind of facility where patient was seen
		 * The kind of facility where the patient was seen.
		 */
		facilityType?: CodeableConcept;

		/**
		 * Additional details about where the content was created (e.g. clinical specialty)
		 * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
		 * The value set for this content has an example binding because it is a value set decided by community policy. Other examples exist for consideration: * HITSP created the table HITSP/C80 Table 2-148 Clinical Specialty Value Set (a value set based upon SNOMED CT which is referenced by Direct (XDR and XDM for Direct Messaging Specification, Version 1), as well as Nationwide Health Information Network (NHIN).  Query for Documents, Web Service Interface Specification, V 3.0, 07/27/2011 * ELGA (Austria) (ELGA CDA Implementie-rungsleitfäden Registrierung von CDA Dokumenten für ELGA mit IHE Cross-Enterprise Document Sharing: XDS Metadaten (XDSDocumentEntry), [1.2.40.0.34.7.6.3] * XDS Connect-a-thon practiceSettingCode.
		 */
		practiceSetting?: CodeableConcept;

		/**
		 * Patient demographics from source
		 * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
		 */
		sourcePatientInfo?: Reference;

		/**
		 * Related identifiers or resources
		 * Related identifiers or resources associated with the DocumentReference.
		 * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
		 */
		related?: DocumentReferenceContextRelated[];
	}

	/**
	 * A reference to a document
	 * A reference to a document.
	 * Usually, this is used for documents other than those defined by FHIR.
	 */
	interface DocumentReference extends DomainResource {

		/**
		 * Master Version Specific Identifier
		 * Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
		 * CDA Document Id extension and root.
		 */
		masterIdentifier?: Identifier;

		/**
		 * Other identifiers for the document
		 * Other identifiers associated with the document, including version independent identifiers.
		 */
		identifier?: Identifier[];

		/**
		 * current | superseded | entered-in-error
		 * The status of this document reference.
		 * This is the status of the DocumentReference object, which might be independent from the docStatus element.

This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
		 */
		status: DocumentReferenceDocumentReferenceStatus;

		/**
		 * preliminary | final | appended | amended | entered-in-error
		 * The status of the underlying document.
		 * The document that is pointed to might be in various lifecycle states.
		 */
		docStatus?: DocumentReferenceReferredDocumentStatus;

		/**
		 * Kind of document (LOINC if possible)
		 * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
		 * Key metadata element describing the document, used in searching/filtering.
		 */
		type: CodeableConcept;

		/**
		 * Categorization of document
		 * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
		 * This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
		 */
		class?: CodeableConcept;

		/**
		 * Who/what is the subject of the document
		 * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
		 */
		subject?: Reference;

		/**
		 * Document creation time
		 * When the document was created.
		 * Creation time is used for tracking, organizing versions and searching. This is the creation time of the document, not the source material on which it is based.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * When this document reference was created
		 * When the document reference was created.
		 * Referencing/indexing time is used for tracking, organizing versions and searching.
		 */
		indexed: instant;

		/**
		 * Extension for indexed
		 **/
		_indexed?: Element;

		/**
		 * Who and/or what authored the document
		 * Identifies who is responsible for adding the information to the document.
		 * Not necessarily who did the actual data entry (i.e. typist) it in or who was the source (informant).
		 */
		author?: Reference[];

		/**
		 * Who/what authenticated the document
		 * Which person or organization authenticates that this document is valid.
		 * Represents a participant within the author institution who has legally authenticated or attested the document. Legal authentication implies that a document has been signed manually or electronically by the legal Authenticator.
		 */
		authenticator?: Reference;

		/**
		 * Organization which maintains the document
		 * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
		 * Identifies the logical organization to go to find the current version, where to report issues, etc. This is different from the physical location of the document, which is the technical location of the document, which host may be delegated to the management of some other organization.
		 */
		custodian?: Reference;

		/**
		 * Relationships to other documents
		 * Relationships that this document has with other document references that already exist.
		 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
		 */
		relatesTo?: DocumentReferenceRelatesTo[];

		/**
		 * Human-readable description (title)
		 * Human-readable description of the source document. This is sometimes known as the "title".
		 * What the document is about, rather than a terse summary of the document. It is commonly the case that records do not have a title and are collectively referred to by the display name of Record code (e.g. a "consultation" or "progress note").
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Document security-tags
		 * A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
		 * The confidentiality codes can carry multiple vocabulary items. HL7 has developed an understanding of security and privacy tags that might be desirable in a Document Sharing environment, called HL7 Healthcare Privacy and Security Classification System (HCS). The following specification is recommended but not mandated, as the vocabulary bindings are an administrative domain responsibility. The use of this method is up to the policy domain such as the XDS Affinity Domain or other Trust Domain where all parties including sender and recipients are trusted to appropriately tag and enforce.   In the HL7 Healthcare Privacy and Security Classification (HCS) there are code systems specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some values would come from a local vocabulary as they are related to workflow roles and special projects.
		 */
		securityLabel?: CodeableConcept[];

		/**
		 * Document referenced
		 * The document and format referenced. There may be multiple content element repetitions, each with a different format.
		 */
		content: DocumentReferenceContent[];

		/**
		 * Clinical context of document
		 * The clinical context in which the document was prepared.
		 * These values are primarily added to help with searching for interesting/relevant documents.
		 */
		context?: DocumentReferenceContext;
	}

	/**
	 * A resource with narrative, extensions, and contained resources
	 * A resource that includes narrative, extensions, and contained resources.
	 */
	interface DomainResource extends Resource {

		/**
		 * Text summary of the resource, for human interpretation
		 * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
		 * Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded in formation is added later.
		 */
		text?: Narrative;

		/**
		 * Contained, inline Resources
		 * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
		 * This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again.
		 */
		contained?: Resource[];

		/**
		 * Additional Content defined by implementations
		 * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
		 * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
		 */
		extension?: Extension[];

		/**
		 * Extensions that cannot be ignored
		 * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
		 * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
		 */
		modifierExtension?: Extension[];
	}

	/**
	 * Determine insurance validity and scope of coverage
	 * The EligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an EligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
	 */
	interface EligibilityRequest extends DomainResource {

		/**
		 * Business Identifier
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 */
		status?: EligibilityRequestEligibilityRequestStatus;

		/**
		 * Desired processing priority
		 * Immediate (STAT), best effort (NORMAL), deferred (DEFER).
		 */
		priority?: CodeableConcept;

		/**
		 * The subject of the Products and Services
		 * Patient Resource.
		 * 1..1.
		 */
		patient?: Reference;

		/**
		 * Estimated date or dates of Service
		 * The date or dates when the enclosed suite of services were performed or completed.
		 */
		servicedDate?: date;

		/**
		 * Extension for servicedDate
		 **/
		_servicedDate?: Element;

		/**
		 * Estimated date or dates of Service
		 * The date or dates when the enclosed suite of services were performed or completed.
		 */
		servicedPeriod?: Period;

		/**
		 * Creation date
		 * The date when this resource was created.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Author
		 * Person who created the invoice/claim/pre-determination or pre-authorization.
		 */
		enterer?: Reference;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		provider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		organization?: Reference;

		/**
		 * Target
		 * The Insurer who is target  of the request.
		 */
		insurer?: Reference;

		/**
		 * Servicing Facility
		 * Facility where the services were provided.
		 */
		facility?: Reference;

		/**
		 * Insurance or medical plan
		 * Financial instrument by which payment information for health care.
		 * 1..1.
		 */
		coverage?: Reference;

		/**
		 * Business agreement
		 * The contract number of a business agreement which describes the terms and conditions.
		 */
		businessArrangement?: string;

		/**
		 * Extension for businessArrangement
		 **/
		_businessArrangement?: Element;

		/**
		 * Type of services covered
		 * Dental, Vision, Medical, Pharmacy, Rehab etc.
		 */
		benefitCategory?: CodeableConcept;

		/**
		 * Detailed services covered within the type
		 * Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
		 */
		benefitSubCategory?: CodeableConcept;
	}

	/**
	 * Benefit Summary
	 * Benefits Used to date.
	 */
	interface EligibilityResponseInsuranceBenefitBalanceFinancial extends BackboneElement {

		/**
		 * Deductable, visits, benefit amount
		 * Deductable, visits, benefit amount.
		 */
		type: CodeableConcept;

		/**
		 * Benefits allowed
		 * Benefits allowed.
		 */
		allowedUnsignedInt?: unsignedInt;

		/**
		 * Extension for allowedUnsignedInt
		 **/
		_allowedUnsignedInt?: Element;

		/**
		 * Benefits allowed
		 * Benefits allowed.
		 */
		allowedString?: string;

		/**
		 * Extension for allowedString
		 **/
		_allowedString?: Element;

		/**
		 * Benefits allowed
		 * Benefits allowed.
		 */
		allowedMoney?: Money;

		/**
		 * Benefits used
		 * Benefits used.
		 */
		usedUnsignedInt?: unsignedInt;

		/**
		 * Extension for usedUnsignedInt
		 **/
		_usedUnsignedInt?: Element;

		/**
		 * Benefits used
		 * Benefits used.
		 */
		usedMoney?: Money;
	}

	/**
	 * Benefits by Category
	 * Benefits and optionally current balances by Category.
	 */
	interface EligibilityResponseInsuranceBenefitBalance extends BackboneElement {

		/**
		 * Type of services covered
		 * Dental, Vision, Medical, Pharmacy, Rehab etc.
		 */
		category: CodeableConcept;

		/**
		 * Detailed services covered within the type
		 * Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
		 */
		subCategory?: CodeableConcept;

		/**
		 * Excluded from the plan
		 * True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage.
		 */
		excluded?: boolean;

		/**
		 * Extension for excluded
		 **/
		_excluded?: Element;

		/**
		 * Short name for the benefit
		 * A short name or tag for the benefit, for example MED01, or DENT2.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Description of the benefit or services covered
		 * A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * In or out of network
		 * Network designation.
		 */
		network?: CodeableConcept;

		/**
		 * Individual or family
		 * Unit designation: individual or family.
		 */
		unit?: CodeableConcept;

		/**
		 * Annual or lifetime
		 * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'.
		 */
		term?: CodeableConcept;

		/**
		 * Benefit Summary
		 * Benefits Used to date.
		 */
		financial?: EligibilityResponseInsuranceBenefitBalanceFinancial[];
	}

	/**
	 * Details by insurance coverage
	 * The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer.
	 */
	interface EligibilityResponseInsurance extends BackboneElement {

		/**
		 * Updated Coverage details
		 * A suite of updated or additional Coverages from the Insurer.
		 */
		coverage?: Reference;

		/**
		 * Contract details
		 * The contract resource which may provide more detailed information.
		 */
		contract?: Reference;

		/**
		 * Benefits by Category
		 * Benefits and optionally current balances by Category.
		 */
		benefitBalance?: EligibilityResponseInsuranceBenefitBalance[];
	}

	/**
	 * Processing errors
	 * Mutually exclusive with Services Provided (Item).
	 */
	interface EligibilityResponseError extends BackboneElement {

		/**
		 * Error code detailing processing issues
		 * An error code,from a specified code system, which details why the eligibility check could not be performed.
		 */
		code: CodeableConcept;
	}

	/**
	 * EligibilityResponse resource
	 * This resource provides eligibility and plan details from the processing of an Eligibility resource.
	 */
	interface EligibilityResponse extends DomainResource {

		/**
		 * Business Identifier
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
		 */
		status?: EligibilityResponseEligibilityResponseStatus;

		/**
		 * Creation date
		 * The date when the enclosed suite of services were performed or completed.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		requestProvider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		requestOrganization?: Reference;

		/**
		 * Eligibility reference
		 * Original request resource reference.
		 */
		request?: Reference;

		/**
		 * complete | error | partial
		 * Transaction status: error, complete.
		 */
		outcome?: CodeableConcept;

		/**
		 * Disposition Message
		 * A description of the status of the adjudication.
		 */
		disposition?: string;

		/**
		 * Extension for disposition
		 **/
		_disposition?: Element;

		/**
		 * Insurer issuing the coverage
		 * The Insurer who produced this adjudicated response.
		 */
		insurer?: Reference;

		/**
		 * Coverage inforce indicator
		 * Flag indicating if the coverage provided is inforce currently  if no service date(s) specified or for the whole duration of the service dates.
		 */
		inforce?: boolean;

		/**
		 * Extension for inforce
		 **/
		_inforce?: Element;

		/**
		 * Details by insurance coverage
		 * The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer.
		 */
		insurance?: EligibilityResponseInsurance[];

		/**
		 * Printed Form Identifier
		 * The form to be used for printing the content.
		 */
		form?: CodeableConcept;

		/**
		 * Processing errors
		 * Mutually exclusive with Services Provided (Item).
		 */
		error?: EligibilityResponseError[];
	}

	/**
	 * List of past encounter statuses
	 * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
	 * The current status is always found in the current version of the resource, not the status history.
	 */
	interface EncounterStatusHistory extends BackboneElement {

		/**
		 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +
		 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
		 */
		status: EncounterEncounterStatus;

		/**
		 * The time that the episode was in the specified status
		 * The time that the episode was in the specified status.
		 */
		period: Period;
	}

	/**
	 * List of past encounter classes
	 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.

This would be used for a case where an admission starts of as an emergency encounter, then transisions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kindof discharge from emergency to inpatient.
	 */
	interface EncounterClassHistory extends BackboneElement {

		/**
		 * inpatient | outpatient | ambulatory | emergency +
		 * inpatient | outpatient | ambulatory | emergency +.
		 */
		class: Coding;

		/**
		 * The time that the episode was in the specified class
		 * The time that the episode was in the specified class.
		 */
		period: Period;
	}

	/**
	 * List of participants involved in the encounter
	 * The list of people responsible for providing the service.
	 */
	interface EncounterParticipant extends BackboneElement {

		/**
		 * Role of participant in encounter
		 * Role of participant in encounter.
		 * The participant type indicates how an individual partitipates in an encounter. It includes non-practitioner participants, and for practitioners this is to describe the action type in the context of this encounter (e.g. Admitting Dr, Attending Dr, Translator, Consulting Dr). This is different to the practitioner roles which are functional roles, derived from terms of employment, education, licensing, etc.
		 */
		type?: CodeableConcept[];

		/**
		 * Period of time during the encounter that the participant participated
		 * The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
		 */
		period?: Period;

		/**
		 * Persons involved in the encounter other than the patient
		 * Persons involved in the encounter other than the patient.
		 */
		individual?: Reference;
	}

	/**
	 * The list of diagnosis relevant to this encounter
	 * The list of diagnosis relevant to this encounter.
	 */
	interface EncounterDiagnosis extends BackboneElement {

		/**
		 * Reason the encounter takes place (resource)
		 * Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
		 * For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
		 */
		condition: Reference;

		/**
		 * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …)
		 * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
		 */
		role?: CodeableConcept;

		/**
		 * Ranking of the diagnosis (for each role type)
		 * Ranking of the diagnosis (for each role type).
		 */
		rank?: positiveInt;

		/**
		 * Extension for rank
		 **/
		_rank?: Element;
	}

	/**
	 * Details about the admission to a healthcare service
	 * Details about the admission to a healthcare service.
	 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.

The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
	 */
	interface EncounterHospitalization extends BackboneElement {

		/**
		 * Pre-admission identifier
		 * Pre-admission identifier.
		 */
		preAdmissionIdentifier?: Identifier;

		/**
		 * The location from which the patient came before admission
		 * The location from which the patient came before admission.
		 */
		origin?: Reference;

		/**
		 * From where patient was admitted (physician referral, transfer)
		 * From where patient was admitted (physician referral, transfer).
		 */
		admitSource?: CodeableConcept;

		/**
		 * The type of hospital re-admission that has occurred (if any). If the value is absent, then this is not identified as a readmission
		 * Whether this hospitalization is a readmission and why if known.
		 */
		reAdmission?: CodeableConcept;

		/**
		 * Diet preferences reported by the patient
		 * Diet preferences reported by the patient.
		 * For example a patient may request both a dairy-free and nut-free diet preference (not mutually exclusive).
		 */
		dietPreference?: CodeableConcept[];

		/**
		 * Special courtesies (VIP, board member)
		 * Special courtesies (VIP, board member).
		 */
		specialCourtesy?: CodeableConcept[];

		/**
		 * Wheelchair, translator, stretcher, etc.
		 * Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
		 */
		specialArrangement?: CodeableConcept[];

		/**
		 * Location to which the patient is discharged
		 * Location to which the patient is discharged.
		 */
		destination?: Reference;

		/**
		 * Category or kind of location after discharge
		 * Category or kind of location after discharge.
		 */
		dischargeDisposition?: CodeableConcept;
	}

	/**
	 * List of locations where the patient has been
	 * List of locations where  the patient has been during this encounter.
	 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
	 */
	interface EncounterLocation extends BackboneElement {

		/**
		 * Location the encounter takes place
		 * The location where the encounter takes place.
		 */
		location: Reference;

		/**
		 * planned | active | reserved | completed
		 * The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
		 * When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
		 */
		status?: EncounterEncounterLocationStatus;

		/**
		 * Time period during which the patient was present at the location
		 * Time period during which the patient was present at the location.
		 */
		period?: Period;
	}

	/**
	 * An interaction during which services are provided to the patient
	 * An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
	 */
	interface Encounter extends DomainResource {

		/**
		 * Identifier(s) by which this encounter is known
		 * Identifier(s) by which this encounter is known.
		 */
		identifier?: Identifier[];

		/**
		 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +
		 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
		 * Note that internal business rules will detemine the appropraite transitions that may occur between statuses (and also classes).

This element is labeled as a modifier because the status contains codes that mark the encounter as not currently valid.
		 */
		status: EncounterEncounterStatus;

		/**
		 * List of past encounter statuses
		 * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
		 * The current status is always found in the current version of the resource, not the status history.
		 */
		statusHistory?: EncounterStatusHistory[];

		/**
		 * inpatient | outpatient | ambulatory | emergency +
		 * inpatient | outpatient | ambulatory | emergency +.
		 */
		class?: Coding;

		/**
		 * List of past encounter classes
		 * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.

This would be used for a case where an admission starts of as an emergency encounter, then transisions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kindof discharge from emergency to inpatient.
		 */
		classHistory?: EncounterClassHistory[];

		/**
		 * Specific type of encounter
		 * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
		 * Since there are many ways to further classify encounters, this element is 0..*.
		 */
		type?: CodeableConcept[];

		/**
		 * Indicates the urgency of the encounter
		 * Indicates the urgency of the encounter.
		 */
		priority?: CodeableConcept;

		/**
		 * The patient ro group present at the encounter
		 * The patient ro group present at the encounter.
		 * While the encounter is always about the patient, the patient may not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
		 */
		subject?: Reference;

		/**
		 * Episode(s) of care that this encounter should be recorded against
		 * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
		 */
		episodeOfCare?: Reference[];

		/**
		 * The ReferralRequest that initiated this encounter
		 * The referral request this encounter satisfies (incoming referral).
		 */
		incomingReferral?: Reference[];

		/**
		 * List of participants involved in the encounter
		 * The list of people responsible for providing the service.
		 */
		participant?: EncounterParticipant[];

		/**
		 * The appointment that scheduled this encounter
		 * The appointment that scheduled this encounter.
		 */
		appointment?: Reference;

		/**
		 * The start and end time of the encounter
		 * The start and end time of the encounter.
		 * If not (yet) known, the end of the Period may be omitted.
		 */
		period?: Period;

		/**
		 * Quantity of time the encounter lasted (less time absent)
		 * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
		 * May differ from the time the Encounter.period lasted because of leave of absence.
		 */
		length?: Duration;

		/**
		 * Reason the encounter takes place (code)
		 * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
		 * For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
		 */
		reason?: CodeableConcept[];

		/**
		 * The list of diagnosis relevant to this encounter
		 * The list of diagnosis relevant to this encounter.
		 */
		diagnosis?: EncounterDiagnosis[];

		/**
		 * The set of accounts that may be used for billing for this Encounter
		 * The set of accounts that may be used for billing for this Encounter.
		 * The billing system may choose to allocate billable items associated with the Encounter to different referenced Accounts based on internal business rules.
		 */
		account?: Reference[];

		/**
		 * Details about the admission to a healthcare service
		 * Details about the admission to a healthcare service.
		 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.

The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
		 */
		hospitalization?: EncounterHospitalization;

		/**
		 * List of locations where the patient has been
		 * List of locations where  the patient has been during this encounter.
		 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
		 */
		location?: EncounterLocation[];

		/**
		 * The custodian organization of this Encounter record
		 * An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
		 */
		serviceProvider?: Reference;

		/**
		 * Another Encounter this encounter is part of
		 * Another Encounter of which this encounter is a part of (administratively or in time).
		 * This is also used for associating a child's encounter back to the mother's encounter.

Refer to the Notes section in the Patient resource for further details.
		 */
		partOf?: Reference;
	}

	/**
	 * The technical details of an endpoint that can be used for electronic services
	 * The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
	 */
	interface Endpoint extends DomainResource {

		/**
		 * Identifies this endpoint across multiple systems
		 * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
		 */
		identifier?: Identifier[];

		/**
		 * active | suspended | error | off | entered-in-error | test
		 * active | suspended | error | off | test.
		 * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid.
		 */
		status: EndpointEndpointStatus;

		/**
		 * Protocol/Profile/Standard to be used with this endpoint connection
		 * A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
		 * For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example.
		 */
		connectionType: Coding;

		/**
		 * A name that this endpoint can be identified by
		 * A friendly name that this endpoint can be referred to with.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Organization that manages this endpoint (may not be the organization that exposes the endpoint)
		 * The organization that manages this endpoint (even if technically another organisation is hosting this in the cloud, it is the organisation associated with the data).
		 * This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an aplicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
		 */
		managingOrganization?: Reference;

		/**
		 * Contact details for source (e.g. troubleshooting)
		 * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
		 */
		contact?: ContactPoint[];

		/**
		 * Interval the endpoint is expected to be operational
		 * The interval during which the endpoint is expected to be operational.
		 */
		period?: Period;

		/**
		 * The type of content that may be used at this endpoint (e.g. XDS Discharge summaries)
		 * The payload type describes the acceptable content that can be communicated on the endpoint.
		 * The payloadFormat describes the serialization format of the data, where the payloadType indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
		 */
		payloadType: CodeableConcept[];

		/**
		 * Mimetype to send. If not specified, the content could be anything (including no payload, if the connectionType defined this)
		 * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
		 * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
		 */
		payloadMimeType?: code[];

		/**
		 * Extension for payloadMimeType
		 **/
		_payloadMimeType?: Element[];

		/**
		 * The technical base address for connecting to this endpoint
		 * The uri that describes the actual end-point to connect to.
		 * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since their may be more than one, clients should avoid using relative URIs)

This address will be to the service base, without any parameters, or sub-services or resources tacked on.

E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"

and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
		 */
		address: uri;

		/**
		 * Extension for address
		 **/
		_address?: Element;

		/**
		 * Usage depends on the channel type
		 * Additional headers / information to send as part of the notification.
		 * Exactly what these mean depend on the channel type. The can convey additional information to the recipient and/or meet security requirements.
		 */
		header?: string[];

		/**
		 * Extension for header
		 **/
		_header?: Element[];
	}

	/**
	 * Enrollment request
	 * This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
	 */
	interface EnrollmentRequest extends DomainResource {

		/**
		 * Business Identifier
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
		 */
		status?: EnrollmentRequestEnrollmentRequestStatus;

		/**
		 * Creation date
		 * The date when this resource was created.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Target
		 * The Insurer who is target  of the request.
		 */
		insurer?: Reference;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		provider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		organization?: Reference;

		/**
		 * The subject of the Products and Services
		 * Patient Resource.
		 */
		subject?: Reference;

		/**
		 * Insurance information
		 * Reference to the program or plan identification, underwriter or payor.
		 */
		coverage?: Reference;
	}

	/**
	 * EnrollmentResponse resource
	 * This resource provides enrollment and plan details from the processing of an Enrollment resource.
	 */
	interface EnrollmentResponse extends DomainResource {

		/**
		 * Business Identifier
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
		 */
		status?: EnrollmentResponseEnrollmentResponseStatus;

		/**
		 * Claim reference
		 * Original request resource reference.
		 */
		request?: Reference;

		/**
		 * complete | error | partial
		 * Processing status: error, complete.
		 */
		outcome?: CodeableConcept;

		/**
		 * Disposition Message
		 * A description of the status of the adjudication.
		 */
		disposition?: string;

		/**
		 * Extension for disposition
		 **/
		_disposition?: Element;

		/**
		 * Creation date
		 * The date when the enclosed suite of services were performed or completed.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Insurer
		 * The Insurer who produced this adjudicated response.
		 */
		organization?: Reference;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		requestProvider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		requestOrganization?: Reference;
	}

	/**
	 * Past list of status codes (the current status may be included to cover the start date of the status)
	 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
	 */
	interface EpisodeOfCareStatusHistory extends BackboneElement {

		/**
		 * planned | waitlist | active | onhold | finished | cancelled | entered-in-error
		 * planned | waitlist | active | onhold | finished | cancelled.
		 */
		status: EpisodeOfCareEpisodeOfCareStatus;

		/**
		 * Duration the EpisodeOfCare was in the specified status
		 * The period during this EpisodeOfCare that the specific status applied.
		 */
		period: Period;
	}

	/**
	 * The list of diagnosis relevant to this episode of care
	 * The list of diagnosis relevant to this episode of care.
	 */
	interface EpisodeOfCareDiagnosis extends BackboneElement {

		/**
		 * Conditions/problems/diagnoses this episode of care is for
		 * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
		 */
		condition: Reference;

		/**
		 * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …)
		 * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
		 */
		role?: CodeableConcept;

		/**
		 * Ranking of the diagnosis (for each role type)
		 * Ranking of the diagnosis (for each role type).
		 */
		rank?: positiveInt;

		/**
		 * Extension for rank
		 **/
		_rank?: Element;
	}

	/**
	 * An association of a Patient with an Organization and  Healthcare Provider(s) for a period of time that the Organization assumes some level of responsibility
	 * An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
	 */
	interface EpisodeOfCare extends DomainResource {

		/**
		 * Business Identifier(s) relevant for this EpisodeOfCare
		 * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
		 */
		identifier?: Identifier[];

		/**
		 * planned | waitlist | active | onhold | finished | cancelled | entered-in-error
		 * planned | waitlist | active | onhold | finished | cancelled.
		 * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
		 */
		status: EpisodeOfCareEpisodeOfCareStatus;

		/**
		 * Past list of status codes (the current status may be included to cover the start date of the status)
		 * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
		 */
		statusHistory?: EpisodeOfCareStatusHistory[];

		/**
		 * Type/class  - e.g. specialist referral, disease management
		 * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
		 * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
		 */
		type?: CodeableConcept[];

		/**
		 * The list of diagnosis relevant to this episode of care
		 * The list of diagnosis relevant to this episode of care.
		 */
		diagnosis?: EpisodeOfCareDiagnosis[];

		/**
		 * The patient who is the focus of this episode of care
		 * The patient who is the focus of this episode of care.
		 */
		patient: Reference;

		/**
		 * Organization that assumes care
		 * The organization that has assumed the specific responsibilities for the specified duration.
		 */
		managingOrganization?: Reference;

		/**
		 * Interval during responsibility is assumed
		 * The interval during which the managing organization assumes the defined responsibility.
		 */
		period?: Period;

		/**
		 * Originating Referral Request(s)
		 * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
		 */
		referralRequest?: Reference[];

		/**
		 * Care manager/care co-ordinator for the patient
		 * The practitioner that is the care manager/care co-ordinator for this patient.
		 */
		careManager?: Reference;

		/**
		 * Other practitioners facilitating this episode of care
		 * The list of practitioners that may be facilitating this episode of care for specific purposes.
		 */
		team?: Reference[];

		/**
		 * The set of accounts that may be used for billing for this EpisodeOfCare
		 * The set of accounts that may be used for billing for this EpisodeOfCare.
		 * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
		 */
		account?: Reference[];
	}

	/**
	 * Fix use of a code system to a particular version
	 * Fix use of a particular code system to a particular version.
	 */
	interface ExpansionProfileFixedVersion extends BackboneElement {

		/**
		 * System to have its version fixed
		 * The specific system for which to fix the version.
		 * See ''Coding.system'' for further documentation.
		 */
		system: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Specific version of the code system referred to
		 * The version of the code system from which codes in the expansion should be included.
		 */
		version: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * default | check | override
		 * How to manage the intersection between a fixed version in a value set, and this fixed version of the system in the expansion profile.
		 */
		mode: ExpansionProfileSystemVersionProcessingMode;
	}

	/**
	 * Systems/Versions to be exclude
	 * Code system, or a particular version of a code system to be excluded from value set expansions.
	 * When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
	 */
	interface ExpansionProfileExcludedSystem extends BackboneElement {

		/**
		 * The specific code system to be excluded
		 * An absolute URI which is the code system to be excluded.
		 * See ''Coding.system'' for further documentation.
		 */
		system: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Specific version of the code system referred to
		 * The version of the code system from which codes in the expansion should be excluded.
		 * This is used to apply version specifc exclusion contraints. If no version is specified, then all codes from the code system present in the expansion (prior to application of the expansion profile) will be excluded.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;
	}

	/**
	 * The designation to be included
	 * A data group for each designation to be included.
	 * At least one of designation.language or designation.use must be provided for each include.designation element.
	 */
	interface ExpansionProfileDesignationIncludeDesignation extends BackboneElement {

		/**
		 * Human language of the designation to be included
		 * The language this designation is defined for.
		 * In the absence of a language, all designations are retained which match the designation.use parameter for this include.designation.
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * What kind of Designation to include
		 * Which kinds of designation to include in the expansion.
		 * In the absence of a use, all designations are retained which match the designation.language parameter for this include.designation element.
		 */
		use?: Coding;
	}

	/**
	 * Designations to be included
	 * Designations to be included.
	 */
	interface ExpansionProfileDesignationInclude extends BackboneElement {

		/**
		 * The designation to be included
		 * A data group for each designation to be included.
		 * At least one of designation.language or designation.use must be provided for each include.designation element.
		 */
		designation?: ExpansionProfileDesignationIncludeDesignation[];
	}

	/**
	 * The designation to be excluded
	 * A data group for each designation to be excluded.
	 * At least one of designation.language or designation.use must be provided for each exclude.designation element.
	 */
	interface ExpansionProfileDesignationExcludeDesignation extends BackboneElement {

		/**
		 * Human language of the designation to be excluded
		 * The language this designation is defined for.
		 * In the absence of a language, all designations are excluded which match the designation.use parameter for this exclude.designation element.
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * What kind of Designation to exclude
		 * Which kinds of designation to exclude from the expansion.
		 * In the absence of a use, all designations are retained which match the designation.language parameter for this exclude.designation element.
		 */
		use?: Coding;
	}

	/**
	 * Designations to be excluded
	 * Designations to be excluded.
	 */
	interface ExpansionProfileDesignationExclude extends BackboneElement {

		/**
		 * The designation to be excluded
		 * A data group for each designation to be excluded.
		 * At least one of designation.language or designation.use must be provided for each exclude.designation element.
		 */
		designation?: ExpansionProfileDesignationExcludeDesignation[];
	}

	/**
	 * When the expansion profile imposes designation contraints
	 * A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
	 */
	interface ExpansionProfileDesignation extends BackboneElement {

		/**
		 * Designations to be included
		 * Designations to be included.
		 */
		include?: ExpansionProfileDesignationInclude;

		/**
		 * Designations to be excluded
		 * Designations to be excluded.
		 */
		exclude?: ExpansionProfileDesignationExclude;
	}

	/**
	 * Defines behaviour and contraints on the ValueSet Expansion operation
	 * Resource to define constraints on the Expansion of a FHIR ValueSet.
	 */
	interface ExpansionProfile extends DomainResource {

		/**
		 * Logical URI to reference this expansion profile (globally unique)
		 * An absolute URI that is used to identify this expansion profile when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this expansion profile is (or will be) published. The URL SHOULD include the major version of the expansion profile. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the expansion profile
		 * A formal identifier that is used to identify this expansion profile when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this expansion profile outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier;

		/**
		 * Business version of the expansion profile
		 * The identifier that is used to identify this version of the expansion profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the expansion profile author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different expansion profile instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the expansion profile with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this expansion profile (computer friendly)
		 * A natural language name identifying the expansion profile. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this expansion profile. Enables tracking the life-cycle of the content.
		 * Allows filtering of expansion profiles that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired expansion profile without due consideration.
		 */
		status: ExpansionProfilePublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this expansion profile is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of expansion profile that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental expansion profile in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the expansion profile was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the expansion profile changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the expansion profile. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the expansion profile.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the expansion profile is the organization or individual primarily responsible for the maintenance and upkeep of the expansion profile. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the expansion profile. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the expansion profile
		 * A free text natural language description of the expansion profile from a consumer's perspective.
		 * This description can be used to capture details such as why the expansion profile was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the expansion profile as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate expansion profile instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for expansion profile (if applicable)
		 * A legal or geographic region in which the expansion profile is intended to be used.
		 * It may be possible for the expansion profile to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Fix use of a code system to a particular version
		 * Fix use of a particular code system to a particular version.
		 */
		fixedVersion?: ExpansionProfileFixedVersion[];

		/**
		 * Systems/Versions to be exclude
		 * Code system, or a particular version of a code system to be excluded from value set expansions.
		 * When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
		 */
		excludedSystem?: ExpansionProfileExcludedSystem;

		/**
		 * Whether the expansion should include concept designations
		 * Controls whether concept designations are to be included or excluded in value set expansions.
		 * ExpansionProfile.designation.include and ExpansionProfile.designation.exclude are only evaluated if includeDesignations is present and set to "true". If includeDesignations is present with a value of "true" and both ExpansionProfile.designation.include and ExpansionProfile.designation.exclude are absent, then all designations are returned in the expansion.
		 */
		includeDesignations?: boolean;

		/**
		 * Extension for includeDesignations
		 **/
		_includeDesignations?: Element;

		/**
		 * When the expansion profile imposes designation contraints
		 * A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
		 */
		designation?: ExpansionProfileDesignation;

		/**
		 * Include or exclude the value set definition in the expansion
		 * Controls whether the value set definition is included or excluded in value set expansions.
		 * The ValueSet defintion refers to all fields in the ValueSet definition apart from  ValueSet.contains. The definition is only included if includeDefinition is present and has a value of "true".
		 */
		includeDefinition?: boolean;

		/**
		 * Extension for includeDefinition
		 **/
		_includeDefinition?: Element;

		/**
		 * Include or exclude inactive concepts in the expansion
		 * Controls whether inactive concepts are included or excluded in value set expansions.
		 * Inactive codes are included if activeOnly is present and has a value of "true". Note that if the value set explicitly specifies that inactive codes are included, this property can still remove them from a specific expansion, but this parameter cannot include them if the value set excludes them.
		 */
		activeOnly?: boolean;

		/**
		 * Extension for activeOnly
		 **/
		_activeOnly?: Element;

		/**
		 * Nested codes in the expansion or not
		 * Controls whether or not the value set expansion nests codes or not (i.e. ValueSet.expansion.contains.contains).
		 * Nesting of codes is excluded if excludeNested is present and has a value of "true".
		 */
		excludeNested?: boolean;

		/**
		 * Extension for excludeNested
		 **/
		_excludeNested?: Element;

		/**
		 * Include or exclude codes which cannot be rendered in user interfaces in the value set expansion
		 * Controls whether or not the value set expansion includes codes which cannot be displayed in user interfaces.
		 * Codes which cannot be used in user interfaces will be excluded if excludeNotForUI is present and has a value of "true".
		 */
		excludeNotForUI?: boolean;

		/**
		 * Extension for excludeNotForUI
		 **/
		_excludeNotForUI?: Element;

		/**
		 * Include or exclude codes which are post coordinated expressions in the value set expansion
		 * Controls whether or not the value set expansion includes post coordinated codes.
		 * Post coordinated codes are excluded if excludePostCoordinated is present and has a value of "true".
		 */
		excludePostCoordinated?: boolean;

		/**
		 * Extension for excludePostCoordinated
		 **/
		_excludePostCoordinated?: Element;

		/**
		 * Specify the language for the display element of codes in the value set expansion
		 * Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display.
		 */
		displayLanguage?: code;

		/**
		 * Extension for displayLanguage
		 **/
		_displayLanguage?: Element;

		/**
		 * Controls behaviour of the value set expand operation when value sets are too large to be completely expanded
		 * If the value set being expanded is incomplete (because it is too big to expand), return a limited expansion (a subset) with an indicator that expansion is incomplete, using the extension [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html).
		 * This field overides the default behaviour (which is to return an error). This does not apply to expansions which are unbounded. Clients SHALL process the extension [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html) correctly if limitedExpansion = true.
		 */
		limitedExpansion?: boolean;

		/**
		 * Extension for limitedExpansion
		 **/
		_limitedExpansion?: Element;
	}

	/**
	 * Related Claims which may be revelant to processing this claim
	 * Other claims which are related to this claim such as prior claim versions or for related services.
	 */
	interface ExplanationOfBenefitRelated extends BackboneElement {

		/**
		 * Reference to the related claim
		 * Other claims which are related to this claim such as prior claim versions or for related services.
		 * Do we need a relationship code?
		 */
		claim?: Reference;

		/**
		 * How the reference claim is related
		 * For example prior or umbrella.
		 */
		relationship?: CodeableConcept;

		/**
		 * Related file or case reference
		 * An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .
		 */
		reference?: Identifier;
	}

	/**
	 * Party to be paid any benefits payable
	 * The party to be reimbursed for the services.
	 */
	interface ExplanationOfBenefitPayee extends BackboneElement {

		/**
		 * Type of party: Subscriber, Provider, other
		 * Type of Party to be reimbursed: Subscriber, provider, other.
		 */
		type?: CodeableConcept;

		/**
		 * organization | patient | practitioner | relatedperson
		 * organization | patient | practitioner | relatedperson.
		 */
		resourceType?: CodeableConcept;

		/**
		 * Party to receive the payable
		 * Party to be reimbursed: Subscriber, provider, other.
		 */
		party?: Reference;
	}

	/**
	 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
	 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
	 */
	interface ExplanationOfBenefitInformation extends BackboneElement {

		/**
		 * Information instance identifier
		 * Sequence of the information element which serves to provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * General class of information
		 * The general class of the information supplied: information; exception; accident, employment; onset, etc.
		 * This may contain the local bill type codes such as the US UB-04 bill type code.
		 */
		category: CodeableConcept;

		/**
		 * Type of information
		 * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.
		 * This may contain the local bill type codes such as the US UB-04 bill type code.
		 */
		code?: CodeableConcept;

		/**
		 * When it occurred
		 * The date when or period to which this information refers.
		 */
		timingDate?: date;

		/**
		 * Extension for timingDate
		 **/
		_timingDate?: Element;

		/**
		 * When it occurred
		 * The date when or period to which this information refers.
		 */
		timingPeriod?: Period;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueQuantity?: Quantity;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueAttachment?: Attachment;

		/**
		 * Additional Data or supporting information
		 * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
		 */
		valueReference?: Reference;

		/**
		 * Reason associated with the information
		 * For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content.
		 */
		reason?: Coding;
	}

	/**
	 * Care Team members
	 * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
	 */
	interface ExplanationOfBenefitCareTeam extends BackboneElement {

		/**
		 * Number to covey order of careteam
		 * Sequence of careteam which serves to order and provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Member of the Care Team
		 * The members of the team who provided the overall service.
		 */
		provider: Reference;

		/**
		 * Billing practitioner
		 * The practitioner who is billing and responsible for the claimed services rendered to the patient.
		 */
		responsible?: boolean;

		/**
		 * Extension for responsible
		 **/
		_responsible?: Element;

		/**
		 * Role on the team
		 * The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.
		 */
		role?: CodeableConcept;

		/**
		 * Type, classification or Specialization
		 * The qualification which is applicable for this service.
		 */
		qualification?: CodeableConcept;
	}

	/**
	 * List of Diagnosis
	 * Ordered list of patient diagnosis for which care is sought.
	 */
	interface ExplanationOfBenefitDiagnosis extends BackboneElement {

		/**
		 * Number to covey order of diagnosis
		 * Sequence of diagnosis which serves to provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Patient's diagnosis
		 * The diagnosis.
		 */
		diagnosisCodeableConcept: CodeableConcept;

		/**
		 * Patient's diagnosis
		 * The diagnosis.
		 */
		diagnosisReference: Reference;

		/**
		 * Timing or nature of the diagnosis
		 * The type of the Diagnosis, for example: admitting, primary, secondary, discharge.
		 * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
		 */
		type?: CodeableConcept[];

		/**
		 * Package billing code
		 * The package billing code, for example DRG, based on the assigned grouping code system.
		 */
		packageCode?: CodeableConcept;
	}

	/**
	 * Procedures performed
	 * Ordered list of patient procedures performed to support the adjudication.
	 */
	interface ExplanationOfBenefitProcedure extends BackboneElement {

		/**
		 * Procedure sequence for reference
		 * Sequence of procedures which serves to order and provide a link.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * When the procedure was performed
		 * Date and optionally time the procedure was performed .
		 * SB DateTime??
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Patient's list of procedures performed
		 * The procedure code.
		 */
		procedureCodeableConcept: CodeableConcept;

		/**
		 * Patient's list of procedures performed
		 * The procedure code.
		 */
		procedureReference: Reference;
	}

	/**
	 * Insurance or medical plan
	 * Financial instrument by which payment information for health care.
	 */
	interface ExplanationOfBenefitInsurance extends BackboneElement {

		/**
		 * Insurance information
		 * Reference to the program or plan identification, underwriter or payor.
		 */
		coverage?: Reference;

		/**
		 * Pre-Authorization/Determination Reference
		 * A list of references from the Insurer to which these services pertain.
		 */
		preAuthRef?: string[];

		/**
		 * Extension for preAuthRef
		 **/
		_preAuthRef?: Element[];
	}

	/**
	 * Details of an accident
	 * An accident which resulted in the need for healthcare services.
	 */
	interface ExplanationOfBenefitAccident extends BackboneElement {

		/**
		 * When the accident occurred
		 * Date of an accident which these services are addressing.
		 */
		date?: date;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * The nature of the accident
		 * Type of accident: work, auto, etc.
		 */
		type?: CodeableConcept;

		/**
		 * Accident Place
		 * Where the accident occurred.
		 */
		locationAddress?: Address;

		/**
		 * Accident Place
		 * Where the accident occurred.
		 */
		locationReference?: Reference;
	}

	/**
	 * Adjudication details
	 * The adjudications results.
	 */
	interface ExplanationOfBenefitItemAdjudication extends BackboneElement {

		/**
		 * Adjudication category such as co-pay, eligible, benefit, etc.
		 * Code indicating: Co-Pay, deductable, elegible, benefit, tax, etc.
		 */
		category: CodeableConcept;

		/**
		 * Explanation of Adjudication outcome
		 * Adjudication reason such as limit reached.
		 */
		reason?: CodeableConcept;

		/**
		 * Monetary amount
		 * Monitory amount associated with the code.
		 */
		amount?: Money;

		/**
		 * Non-monitory value
		 * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
		 */
		value?: decimal;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Additional items
	 * Third tier of goods and services.
	 */
	interface ExplanationOfBenefitItemDetailSubDetail extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Type of product or service
		 * The type of product or service.
		 */
		type: CodeableConcept;

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Program specific reason for item inclusion
		 * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
		 */
		programCode?: CodeableConcept[];

		/**
		 * Count of Products or Services
		 * The number of repetitions of a service or product.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Fee, charge or cost per point
		 * The fee for an addittional service or product or charge.
		 */
		unitPrice?: Money;

		/**
		 * Price scaling factor
		 * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Net additional item cost
		 * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;

		/**
		 * Unique Device Identifier
		 * List of Unique Device Identifiers associated with this line item.
		 */
		udi?: Reference[];

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Language if different from the resource
		 * The adjudications results.
		 */
		adjudication?: ExplanationOfBenefitItemAdjudication[];
	}

	/**
	 * Additional items
	 * Second tier of goods and services.
	 */
	interface ExplanationOfBenefitItemDetail extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Group or type of product or service
		 * The type of product or service.
		 * ItemType.
		 */
		type: CodeableConcept;

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Program specific reason for item inclusion
		 * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
		 */
		programCode?: CodeableConcept[];

		/**
		 * Count of Products or Services
		 * The number of repetitions of a service or product.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Fee, charge or cost per point
		 * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
		 */
		unitPrice?: Money;

		/**
		 * Price scaling factor
		 * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Total additional item cost
		 * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;

		/**
		 * Unique Device Identifier
		 * List of Unique Device Identifiers associated with this line item.
		 */
		udi?: Reference[];

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Detail level adjudication details
		 * The adjudications results.
		 */
		adjudication?: ExplanationOfBenefitItemAdjudication[];

		/**
		 * Additional items
		 * Third tier of goods and services.
		 */
		subDetail?: ExplanationOfBenefitItemDetailSubDetail[];
	}

	/**
	 * Goods and Services
	 * First tier of goods and services.
	 */
	interface ExplanationOfBenefitItem extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequence: positiveInt;

		/**
		 * Extension for sequence
		 **/
		_sequence?: Element;

		/**
		 * Applicable careteam members
		 * Careteam applicable for this service or product line.
		 */
		careTeamLinkId?: positiveInt[];

		/**
		 * Extension for careTeamLinkId
		 **/
		_careTeamLinkId?: Element[];

		/**
		 * Applicable diagnoses
		 * Diagnosis applicable for this service or product line.
		 */
		diagnosisLinkId?: positiveInt[];

		/**
		 * Extension for diagnosisLinkId
		 **/
		_diagnosisLinkId?: Element[];

		/**
		 * Applicable procedures
		 * Procedures applicable for this service or product line.
		 */
		procedureLinkId?: positiveInt[];

		/**
		 * Extension for procedureLinkId
		 **/
		_procedureLinkId?: Element[];

		/**
		 * Applicable exception and supporting information
		 * Exceptions, special conditions and supporting information pplicable for this service or product line.
		 */
		informationLinkId?: positiveInt[];

		/**
		 * Extension for informationLinkId
		 **/
		_informationLinkId?: Element[];

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Program specific reason for item inclusion
		 * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
		 */
		programCode?: CodeableConcept[];

		/**
		 * Date or dates of Service
		 * The date or dates when the enclosed suite of services were performed or completed.
		 */
		servicedDate?: date;

		/**
		 * Extension for servicedDate
		 **/
		_servicedDate?: Element;

		/**
		 * Date or dates of Service
		 * The date or dates when the enclosed suite of services were performed or completed.
		 */
		servicedPeriod?: Period;

		/**
		 * Place of service
		 * Where the service was provided.
		 */
		locationCodeableConcept?: CodeableConcept;

		/**
		 * Place of service
		 * Where the service was provided.
		 */
		locationAddress?: Address;

		/**
		 * Place of service
		 * Where the service was provided.
		 */
		locationReference?: Reference;

		/**
		 * Count of Products or Services
		 * The number of repetitions of a service or product.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Fee, charge or cost per point
		 * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
		 */
		unitPrice?: Money;

		/**
		 * Price scaling factor
		 * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
		 */
		factor?: decimal;

		/**
		 * Extension for factor
		 **/
		_factor?: Element;

		/**
		 * Total item cost
		 * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
		 */
		net?: Money;

		/**
		 * Unique Device Identifier
		 * List of Unique Device Identifiers associated with this line item.
		 */
		udi?: Reference[];

		/**
		 * Service Location
		 * Physical service site on the patient (limb, tooth, etc).
		 */
		bodySite?: CodeableConcept;

		/**
		 * Service Sub-location
		 * A region or surface of the site, eg. limb region or tooth surface(s).
		 */
		subSite?: CodeableConcept[];

		/**
		 * Encounters related to this billed item
		 * A billed item may include goods or services provided in multiple encounters.
		 */
		encounter?: Reference[];

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Adjudication details
		 * The adjudications results.
		 */
		adjudication?: ExplanationOfBenefitItemAdjudication[];

		/**
		 * Additional items
		 * Second tier of goods and services.
		 */
		detail?: ExplanationOfBenefitItemDetail[];
	}

	/**
	 * Added items details
	 * The second tier service adjudications for payor added services.
	 */
	interface ExplanationOfBenefitAddItemDetail extends BackboneElement {

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Professional fee or Product charge
		 * The fee charged for the professional service or product.
		 */
		fee?: Money;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Added items detail adjudication
		 * The adjudications results.
		 */
		adjudication?: ExplanationOfBenefitItemAdjudication[];
	}

	/**
	 * Insurer added line items
	 * The first tier service adjudications for payor added services.
	 */
	interface ExplanationOfBenefitAddItem extends BackboneElement {

		/**
		 * Service instances
		 * List of input service items which this service line is intended to replace.
		 */
		sequenceLinkId?: positiveInt[];

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element[];

		/**
		 * Revenue or cost center code
		 * The type of reveneu or cost center providing the product and/or service.
		 */
		revenue?: CodeableConcept;

		/**
		 * Type of service or product
		 * Health Care Service Type Codes  to identify the classification of service or benefits.
		 */
		category?: CodeableConcept;

		/**
		 * Billing Code
		 * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
		 */
		service?: CodeableConcept;

		/**
		 * Service/Product billing modifiers
		 * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
		 */
		modifier?: CodeableConcept[];

		/**
		 * Professional fee or Product charge
		 * The fee charged for the professional service or product.
		 */
		fee?: Money;

		/**
		 * List of note numbers which apply
		 * A list of note references to the notes provided below.
		 */
		noteNumber?: positiveInt[];

		/**
		 * Extension for noteNumber
		 **/
		_noteNumber?: Element[];

		/**
		 * Added items adjudication
		 * The adjudications results.
		 */
		adjudication?: ExplanationOfBenefitItemAdjudication[];

		/**
		 * Added items details
		 * The second tier service adjudications for payor added services.
		 */
		detail?: ExplanationOfBenefitAddItemDetail[];
	}

	/**
	 * Payment (if paid)
	 * Payment details for the claim if the claim has been paid.
	 */
	interface ExplanationOfBenefitPayment extends BackboneElement {

		/**
		 * Partial or Complete
		 * Whether this represents partial or complete payment of the claim.
		 */
		type?: CodeableConcept;

		/**
		 * Payment adjustment for non-Claim issues
		 * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
		 */
		adjustment?: Money;

		/**
		 * Explanation for the non-claim adjustment
		 * Reason for the payment adjustment.
		 */
		adjustmentReason?: CodeableConcept;

		/**
		 * Expected date of Payment
		 * Estimated payment date.
		 */
		date?: date;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Payable amount after adjustment
		 * Payable less any payment adjustment.
		 */
		amount?: Money;

		/**
		 * Identifier of the payment instrument
		 * Payment identifer.
		 */
		identifier?: Identifier;
	}

	/**
	 * Processing notes
	 * Note text.
	 */
	interface ExplanationOfBenefitProcessNote extends BackboneElement {

		/**
		 * Sequence number for this note
		 * An integer associated with each note which may be referred to from each service line item.
		 */
		number?: positiveInt;

		/**
		 * Extension for number
		 **/
		_number?: Element;

		/**
		 * display | print | printoper
		 * The note purpose: Print/Display.
		 */
		type?: CodeableConcept;

		/**
		 * Note explanitory text
		 * The note text.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Language if different from the resource
		 * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
		 */
		language?: CodeableConcept;
	}

	/**
	 * Benefit Summary
	 * Benefits Used to date.
	 */
	interface ExplanationOfBenefitBenefitBalanceFinancial extends BackboneElement {

		/**
		 * Deductable, visits, benefit amount
		 * Deductable, visits, benefit amount.
		 */
		type: CodeableConcept;

		/**
		 * Benefits allowed
		 * Benefits allowed.
		 */
		allowedUnsignedInt?: unsignedInt;

		/**
		 * Extension for allowedUnsignedInt
		 **/
		_allowedUnsignedInt?: Element;

		/**
		 * Benefits allowed
		 * Benefits allowed.
		 */
		allowedString?: string;

		/**
		 * Extension for allowedString
		 **/
		_allowedString?: Element;

		/**
		 * Benefits allowed
		 * Benefits allowed.
		 */
		allowedMoney?: Money;

		/**
		 * Benefits used
		 * Benefits used.
		 */
		usedUnsignedInt?: unsignedInt;

		/**
		 * Extension for usedUnsignedInt
		 **/
		_usedUnsignedInt?: Element;

		/**
		 * Benefits used
		 * Benefits used.
		 */
		usedMoney?: Money;
	}

	/**
	 * Balance by Benefit Category
	 * Balance by Benefit Category.
	 */
	interface ExplanationOfBenefitBenefitBalance extends BackboneElement {

		/**
		 * Type of services covered
		 * Dental, Vision, Medical, Pharmacy, Rehab etc.
		 */
		category: CodeableConcept;

		/**
		 * Detailed services covered within the type
		 * Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
		 */
		subCategory?: CodeableConcept;

		/**
		 * Excluded from the plan
		 * True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage.
		 */
		excluded?: boolean;

		/**
		 * Extension for excluded
		 **/
		_excluded?: Element;

		/**
		 * Short name for the benefit
		 * A short name or tag for the benefit, for example MED01, or DENT2.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Description of the benefit or services covered
		 * A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * In or out of network
		 * Network designation.
		 */
		network?: CodeableConcept;

		/**
		 * Individual or family
		 * Unit designation: individual or family.
		 */
		unit?: CodeableConcept;

		/**
		 * Annual or lifetime
		 * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'.
		 */
		term?: CodeableConcept;

		/**
		 * Benefit Summary
		 * Benefits Used to date.
		 */
		financial?: ExplanationOfBenefitBenefitBalanceFinancial[];
	}

	/**
	 * Explanation of Benefit resource
	 * This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
	 */
	interface ExplanationOfBenefit extends DomainResource {

		/**
		 * Business Identifier
		 * The EOB Business Identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: ExplanationOfBenefitExplanationOfBenefitStatus;

		/**
		 * Type or discipline
		 * The category of claim, eg, oral, pharmacy, vision, insitutional, professional.
		 * Affects which fields and value sets are used.
		 */
		type?: CodeableConcept;

		/**
		 * Finer grained claim type information
		 * A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.
		 * This may contain the local bill type codes such as the US UB-04 bill type code.
		 */
		subType?: CodeableConcept[];

		/**
		 * The subject of the Products and Services
		 * Patient Resource.
		 */
		patient?: Reference;

		/**
		 * Period for charge submission
		 * The billable period for which charges are being submitted.
		 */
		billablePeriod?: Period;

		/**
		 * Creation date
		 * The date when the EOB was created.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Author
		 * The person who created the explanation of benefit.
		 */
		enterer?: Reference;

		/**
		 * Insurer responsible for the EOB
		 * The insurer which is responsible for the explanation of benefit.
		 */
		insurer?: Reference;

		/**
		 * Responsible provider for the claim
		 * The provider which is responsible for the claim.
		 */
		provider?: Reference;

		/**
		 * Responsible organization for the claim
		 * The provider which is responsible for the claim.
		 */
		organization?: Reference;

		/**
		 * Treatment Referral
		 * The referral resource which lists the date, practitioner, reason and other supporting information.
		 */
		referral?: Reference;

		/**
		 * Servicing Facility
		 * Facility where the services were provided.
		 */
		facility?: Reference;

		/**
		 * Claim reference
		 * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
		 */
		claim?: Reference;

		/**
		 * Claim response reference
		 * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
		 */
		claimResponse?: Reference;

		/**
		 * complete | error | partial
		 * Processing outcome errror, partial or complete processing.
		 */
		outcome?: CodeableConcept;

		/**
		 * Disposition Message
		 * A description of the status of the adjudication.
		 * Do we need a disposition code?
		 */
		disposition?: string;

		/**
		 * Extension for disposition
		 **/
		_disposition?: Element;

		/**
		 * Related Claims which may be revelant to processing this claim
		 * Other claims which are related to this claim such as prior claim versions or for related services.
		 */
		related?: ExplanationOfBenefitRelated[];

		/**
		 * Prescription authorizing services or products
		 * Prescription to support the dispensing of Pharmacy or Vision products.
		 */
		prescription?: Reference;

		/**
		 * Original prescription if superceded by fulfiller
		 * Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
		 */
		originalPrescription?: Reference;

		/**
		 * Party to be paid any benefits payable
		 * The party to be reimbursed for the services.
		 */
		payee?: ExplanationOfBenefitPayee;

		/**
		 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
		 * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
		 */
		information?: ExplanationOfBenefitInformation[];

		/**
		 * Care Team members
		 * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
		 */
		careTeam?: ExplanationOfBenefitCareTeam[];

		/**
		 * List of Diagnosis
		 * Ordered list of patient diagnosis for which care is sought.
		 */
		diagnosis?: ExplanationOfBenefitDiagnosis[];

		/**
		 * Procedures performed
		 * Ordered list of patient procedures performed to support the adjudication.
		 */
		procedure?: ExplanationOfBenefitProcedure[];

		/**
		 * Precedence (primary, secondary, etc.)
		 * Precedence (primary, secondary, etc.).
		 */
		precedence?: positiveInt;

		/**
		 * Extension for precedence
		 **/
		_precedence?: Element;

		/**
		 * Insurance or medical plan
		 * Financial instrument by which payment information for health care.
		 */
		insurance?: ExplanationOfBenefitInsurance;

		/**
		 * Details of an accident
		 * An accident which resulted in the need for healthcare services.
		 */
		accident?: ExplanationOfBenefitAccident;

		/**
		 * Period unable to work
		 * The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
		 */
		employmentImpacted?: Period;

		/**
		 * Period in hospital
		 * The start and optional end dates of when the patient was confined to a treatment center.
		 */
		hospitalization?: Period;

		/**
		 * Goods and Services
		 * First tier of goods and services.
		 */
		item?: ExplanationOfBenefitItem[];

		/**
		 * Insurer added line items
		 * The first tier service adjudications for payor added services.
		 */
		addItem?: ExplanationOfBenefitAddItem[];

		/**
		 * Total Cost of service from the Claim
		 * The total cost of the services reported.
		 */
		totalCost?: Money;

		/**
		 * Unallocated deductable
		 * The amount of deductable applied which was not allocated to any particular service line.
		 */
		unallocDeductable?: Money;

		/**
		 * Total benefit payable for the Claim
		 * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductable).
		 */
		totalBenefit?: Money;

		/**
		 * Payment (if paid)
		 * Payment details for the claim if the claim has been paid.
		 */
		payment?: ExplanationOfBenefitPayment;

		/**
		 * Printed Form Identifier
		 * The form to be used for printing the content.
		 */
		form?: CodeableConcept;

		/**
		 * Processing notes
		 * Note text.
		 */
		processNote?: ExplanationOfBenefitProcessNote[];

		/**
		 * Balance by Benefit Category
		 * Balance by Benefit Category.
		 */
		benefitBalance?: ExplanationOfBenefitBenefitBalance[];
	}

	/**
	 * Condition that the related person had
	 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
	 * If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
	 */
	interface FamilyMemberHistoryCondition extends BackboneElement {

		/**
		 * Condition suffered by relation
		 * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
		 */
		code: CodeableConcept;

		/**
		 * deceased | permanent disability | etc.
		 * Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
		 */
		outcome?: CodeableConcept;

		/**
		 * When condition first manifested
		 * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
		 */
		onsetAge?: Age;

		/**
		 * When condition first manifested
		 * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
		 */
		onsetRange?: Range;

		/**
		 * When condition first manifested
		 * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
		 */
		onsetPeriod?: Period;

		/**
		 * When condition first manifested
		 * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
		 */
		onsetString?: string;

		/**
		 * Extension for onsetString
		 **/
		_onsetString?: Element;

		/**
		 * Extra information about condition
		 * An area where general notes can be placed about this specific condition.
		 */
		note?: Annotation[];
	}

	/**
	 * Information about patient's relatives, relevant for patient
	 * Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
	 */
	interface FamilyMemberHistory extends DomainResource {

		/**
		 * External Id(s) for this record
		 * This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * Instantiates protocol or definition
		 * A protocol or questionnaire that was adhered to in whole or in part by this event.
		 */
		definition?: Reference[];

		/**
		 * partial | completed | entered-in-error | health-unknown
		 * A code specifying the status of the record of the family history of a specific family member.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: FamilyMemberHistoryFamilyHistoryStatus;

		/**
		 * The taking of a family member's history did not occur
		 * If true, indicates the taking of an individual family member's history did not occur. The notDone element should not be used to document negated conditions, such as a family member that did not have a condition.
		 * This element is labeled as a modifier because it marks the family member history as a family member history that did not occur.  The more attributes are populated, the more constrained the negated statement is.  This notDone element is being evaluated and will likely be removed in a subsequent release.
		 */
		notDone?: boolean;

		/**
		 * Extension for notDone
		 **/
		_notDone?: Element;

		/**
		 * subject-unknown | withheld | unable-to-obtain | deferred
		 * Describes why the family member's history is absent.
		 * This notDoneReason element is being evaluated and will likely be replaced in a subsequent release (e.g. dataAbsentReason).
		 */
		notDoneReason?: CodeableConcept;

		/**
		 * Patient history is about
		 * The person who this history concerns.
		 */
		patient: Reference;

		/**
		 * When history was captured/updated
		 * The date (and possibly time) when the family member history was taken.
		 * This should be captured even if the same as the date on the List aggregating the full family history.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * The family member described
		 * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Relationship to the subject
		 * The type of relationship this person has to the patient (father, mother, brother etc.).
		 */
		relationship: CodeableConcept;

		/**
		 * male | female | other | unknown
		 * Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes.
		 */
		gender?: FamilyMemberHistoryAdministrativeGender;

		/**
		 * (approximate) date of birth
		 * The actual or approximate date of birth of the relative.
		 */
		bornPeriod?: Period;

		/**
		 * (approximate) date of birth
		 * The actual or approximate date of birth of the relative.
		 */
		bornDate?: date;

		/**
		 * Extension for bornDate
		 **/
		_bornDate?: Element;

		/**
		 * (approximate) date of birth
		 * The actual or approximate date of birth of the relative.
		 */
		bornString?: string;

		/**
		 * Extension for bornString
		 **/
		_bornString?: Element;

		/**
		 * (approximate) age
		 * The age of the relative at the time the family member history is recorded.
		 * use estimatedAge to indicate whether the age is actual or not.
		 */
		ageAge?: Age;

		/**
		 * (approximate) age
		 * The age of the relative at the time the family member history is recorded.
		 * use estimatedAge to indicate whether the age is actual or not.
		 */
		ageRange?: Range;

		/**
		 * (approximate) age
		 * The age of the relative at the time the family member history is recorded.
		 * use estimatedAge to indicate whether the age is actual or not.
		 */
		ageString?: string;

		/**
		 * Extension for ageString
		 **/
		_ageString?: Element;

		/**
		 * Age is estimated?
		 * If true, indicates that the age value specified is an estimated value.
		 * This element is labeled as a modifier because the fact tha age is estimated can/should change the results of any algorithm that calculates based on the specified age.
		 */
		estimatedAge?: boolean;

		/**
		 * Extension for estimatedAge
		 **/
		_estimatedAge?: Element;

		/**
		 * Dead? How old/when?
		 * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
		 */
		deceasedBoolean?: boolean;

		/**
		 * Extension for deceasedBoolean
		 **/
		_deceasedBoolean?: Element;

		/**
		 * Dead? How old/when?
		 * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
		 */
		deceasedAge?: Age;

		/**
		 * Dead? How old/when?
		 * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
		 */
		deceasedRange?: Range;

		/**
		 * Dead? How old/when?
		 * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
		 */
		deceasedDate?: date;

		/**
		 * Extension for deceasedDate
		 **/
		_deceasedDate?: Element;

		/**
		 * Dead? How old/when?
		 * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
		 */
		deceasedString?: string;

		/**
		 * Extension for deceasedString
		 **/
		_deceasedString?: Element;

		/**
		 * Why was family member history performed?
		 * Describes why the family member history occurred in coded or textual form.
		 * Textual reasons can be caprued using reasonCode.text.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Why was family member history performed?
		 * Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
		 */
		reasonReference?: Reference[];

		/**
		 * General note about related person
		 * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
		 */
		note?: Annotation[];

		/**
		 * Condition that the related person had
		 * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
		 * If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
		 */
		condition?: FamilyMemberHistoryCondition[];
	}

	/**
	 * Key information to flag to healthcare providers
	 * Prospective warnings of potential issues when providing care to the patient.
	 */
	interface Flag extends DomainResource {

		/**
		 * Business identifier
		 * Identifier assigned to the flag for external use (outside the FHIR environment).
		 */
		identifier?: Identifier[];

		/**
		 * active | inactive | entered-in-error
		 * Supports basic workflow.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: FlagFlagStatus;

		/**
		 * Clinical, administrative, etc.
		 * Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
		 */
		category?: CodeableConcept;

		/**
		 * Coded or textual message to display to user
		 * The coded value or textual component of the flag to display to the user.
		 * If non coded, use CodeableConcept.text.  This element should always be included in the narrative.
		 */
		code: CodeableConcept;

		/**
		 * Who/What is flag about?
		 * The patient, location, group , organization , or practitioner, etc. this is about record this flag is associated with.
		 */
		subject: Reference;

		/**
		 * Time period when flag is active
		 * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
		 */
		period?: Period;

		/**
		 * Alert relevant during encounter
		 * This alert is only relevant during the encounter.
		 * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
		 */
		encounter?: Reference;

		/**
		 * Flag creator
		 * The person, organization or device that created the flag.
		 */
		author?: Reference;
	}

	/**
	 * Target outcome for the goal
	 * Indicates what should be done by when.
	 */
	interface GoalTarget extends BackboneElement {

		/**
		 * The parameter whose value is being tracked
		 * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
		 */
		measure?: CodeableConcept;

		/**
		 * The target value to be achieved
		 * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
		 */
		detailQuantity?: Quantity;

		/**
		 * The target value to be achieved
		 * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
		 */
		detailRange?: Range;

		/**
		 * The target value to be achieved
		 * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
		 */
		detailCodeableConcept?: CodeableConcept;

		/**
		 * Reach goal on or before
		 * Indicates either the date or the duration after start by which the goal should be met.
		 */
		dueDate?: date;

		/**
		 * Extension for dueDate
		 **/
		_dueDate?: Element;

		/**
		 * Reach goal on or before
		 * Indicates either the date or the duration after start by which the goal should be met.
		 */
		dueDuration?: Duration;
	}

	/**
	 * Describes the intended objective(s) for a patient, group or organization
	 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
	 * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
	 */
	interface Goal extends DomainResource {

		/**
		 * External Ids for this goal
		 * This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * proposed | accepted | planned | in-progress | on-target | ahead-of-target | behind-target | sustaining | achieved | on-hold | cancelled | entered-in-error | rejected
		 * Indicates whether the goal has been reached and is still considered relevant.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: GoalGoalStatus;

		/**
		 * E.g. Treatment, dietary, behavioral, etc.
		 * Indicates a category the goal falls within.
		 */
		category?: CodeableConcept[];

		/**
		 * high-priority | medium-priority | low-priority
		 * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
		 * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)

The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
		 */
		priority?: CodeableConcept;

		/**
		 * Code or text describing goal
		 * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
		 * If no code is available, use CodeableConcept.text.
		 */
		description: CodeableConcept;

		/**
		 * Who this goal is intended for
		 * Identifies the patient, group or organization for whom the goal is being established.
		 */
		subject?: Reference;

		/**
		 * When goal pursuit begins
		 * The date or event after which the goal should begin being pursued.
		 */
		startDate?: date;

		/**
		 * Extension for startDate
		 **/
		_startDate?: Element;

		/**
		 * When goal pursuit begins
		 * The date or event after which the goal should begin being pursued.
		 */
		startCodeableConcept?: CodeableConcept;

		/**
		 * Target outcome for the goal
		 * Indicates what should be done by when.
		 */
		target?: GoalTarget;

		/**
		 * When goal status took effect
		 * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
		 * To see the date for past statuses, query history.
		 */
		statusDate?: date;

		/**
		 * Extension for statusDate
		 **/
		_statusDate?: Element;

		/**
		 * Reason for current status
		 * Captures the reason for the current status.
		 * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
		 */
		statusReason?: string;

		/**
		 * Extension for statusReason
		 **/
		_statusReason?: Element;

		/**
		 * Who's responsible for creating Goal?
		 * Indicates whose goal this is - patient goal, practitioner goal, etc.
		 * This is the individual reponsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
		 */
		expressedBy?: Reference;

		/**
		 * Issues addressed by this goal
		 * The identified conditions and other health record elements that are intended to be addressed by the goal.
		 */
		addresses?: Reference[];

		/**
		 * Comments about the goal
		 * Any comments related to the goal.
		 * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
		 */
		note?: Annotation[];

		/**
		 * What result was achieved regarding the goal?
		 * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
		 * Note that this should not duplicate the goal status.
		 */
		outcomeCode?: CodeableConcept[];

		/**
		 * Observation that resulted from goal
		 * Details of what's changed (or not changed).
		 * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
		 */
		outcomeReference?: Reference[];
	}

	/**
	 * Compartment Consistency Rules
	 * Compartment Consistency Rules.
	 */
	interface GraphDefinitionLinkTargetCompartment extends BackboneElement {

		/**
		 * Identifies the compartment
		 * Identifies the compartment.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * identical | matching | different | custom
		 * identical | matching | different | no-rule | custom.
		 */
		rule: GraphDefinitionGraphCompartmentRule;

		/**
		 * Custom rule, as a FHIRPath expression
		 * Custom rule, as a FHIRPath expression.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;

		/**
		 * Documentation for FHIRPath expression
		 * Documentation for FHIRPath expression.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;
	}

	/**
	 * Potential target for the link
	 * Potential target for the link.
	 */
	interface GraphDefinitionLinkTarget extends BackboneElement {

		/**
		 * Type of resource this link refers to
		 * Type of resource this link refers to.
		 */
		type: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Profile for the target resource
		 * Profile for the target resource.
		 */
		profile?: uri;

		/**
		 * Extension for profile
		 **/
		_profile?: Element;

		/**
		 * Compartment Consistency Rules
		 * Compartment Consistency Rules.
		 */
		compartment?: GraphDefinitionLinkTargetCompartment[];

		/**
		 * Additional links from target resource
		 * Additional links from target resource.
		 */
		link?: GraphDefinitionLink[];
	}

	/**
	 * Links this graph makes rules about
	 * Links this graph makes rules about.
	 */
	interface GraphDefinitionLink extends BackboneElement {

		/**
		 * Path in the resource that contains the link
		 * Path in the resource that contains the link.
		 * The path can be a literal path (e.g. Observation.subject), or it can be a query for reverse links (e.g. Provenance?target=[id]).
		 */
		path: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * Which slice (if profiled)
		 * Which slice (if profiled).
		 */
		sliceName?: string;

		/**
		 * Extension for sliceName
		 **/
		_sliceName?: Element;

		/**
		 * Minimum occurrences for this link
		 * Minimum occurrences for this link.
		 */
		min?: integer;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Maximum occurrences for this link
		 * Maximum occurrences for this link.
		 */
		max?: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;

		/**
		 * Why this link is specified
		 * Information about why this link is of interest in this graph definition.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Potential target for the link
		 * Potential target for the link.
		 */
		target: GraphDefinitionLinkTarget[];
	}

	/**
	 * Definition of an graph of resources
	 * A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
	 */
	interface GraphDefinition extends DomainResource {

		/**
		 * Logical URI to reference this graph definition (globally unique)
		 * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this graph definition is (or will be) published. The URL SHOULD include the major version of the graph definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Business version of the graph definition
		 * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the graph definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this graph definition (computer friendly)
		 * A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this graph definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of graph definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired graph definition without due consideration.
		 */
		status: GraphDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of graph definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental graph definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the graph definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the graph definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the graph definition
		 * A free text natural language description of the graph definition from a consumer's perspective.
		 * This description can be used to capture details such as why the graph definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate graph definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for graph definition (if applicable)
		 * A legal or geographic region in which the graph definition is intended to be used.
		 * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this graph definition is defined
		 * Explaination of why this graph definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the graph definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Type of resource at which the graph starts
		 * The type of FHIR resource at which instances of this graph start.
		 */
		start: code;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * Profile on base resource
		 * The profile that describes the use of the base resource.
		 * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
		 */
		profile?: uri;

		/**
		 * Extension for profile
		 **/
		_profile?: Element;

		/**
		 * Links this graph makes rules about
		 * Links this graph makes rules about.
		 */
		link?: GraphDefinitionLink[];
	}

	/**
	 * Trait of group members
	 * Identifies the traits shared by members of the group.
	 * All the identified characteristics must be true for an entity to a member of the group.
	 */
	interface GroupCharacteristic extends BackboneElement {

		/**
		 * Kind of characteristic
		 * A code that identifies the kind of trait being asserted.
		 */
		code: CodeableConcept;

		/**
		 * Value held by characteristic
		 * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
		 * For Range, it means members of the group have a value that falls somewhere within the specified range.
		 */
		valueCodeableConcept: CodeableConcept;

		/**
		 * Value held by characteristic
		 * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
		 * For Range, it means members of the group have a value that falls somewhere within the specified range.
		 */
		valueBoolean: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Value held by characteristic
		 * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
		 * For Range, it means members of the group have a value that falls somewhere within the specified range.
		 */
		valueQuantity: Quantity;

		/**
		 * Value held by characteristic
		 * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
		 * For Range, it means members of the group have a value that falls somewhere within the specified range.
		 */
		valueRange: Range;

		/**
		 * Group includes or excludes
		 * If true, indicates the characteristic is one that is NOT held by members of the group.
		 * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
		 */
		exclude: boolean;

		/**
		 * Extension for exclude
		 **/
		_exclude?: Element;

		/**
		 * Period over which characteristic is tested
		 * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
		 */
		period?: Period;
	}

	/**
	 * Who or what is in group
	 * Identifies the resource instances that are members of the group.
	 */
	interface GroupMember extends BackboneElement {

		/**
		 * Reference to the group member
		 * A reference to the entity that is a member of the group. Must be consistent with Group.type.
		 */
		entity: Reference;

		/**
		 * Period member belonged to the group
		 * The period that the member was in the group, if known.
		 */
		period?: Period;

		/**
		 * If member is no longer in group
		 * A flag to indicate that the member is no longer in the group, but previously may have been a member.
		 */
		inactive?: boolean;

		/**
		 * Extension for inactive
		 **/
		_inactive?: Element;
	}

	/**
	 * Group of multiple entities
	 * Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
	 */
	interface Group extends DomainResource {

		/**
		 * Unique id
		 * A unique business identifier for this group.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this group's record is in active use
		 * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * person | animal | practitioner | device | medication | substance
		 * Identifies the broad classification of the kind of resources the group includes.
		 * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medicaiton or Substance for the other types.).
		 */
		type: GroupGroupType;

		/**
		 * Descriptive or actual
		 * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
		 */
		actual: boolean;

		/**
		 * Extension for actual
		 **/
		_actual?: Element;

		/**
		 * Kind of Group members
		 * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
		 * This would generally be omitted for Person resources.
		 */
		code?: CodeableConcept;

		/**
		 * Label for Group
		 * A label assigned to the group for human identification and communication.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Number of members
		 * A count of the number of resource instances that are part of the group.
		 * Note that the quantity may be less than the number of members if some of the members are not active.
		 */
		quantity?: unsignedInt;

		/**
		 * Extension for quantity
		 **/
		_quantity?: Element;

		/**
		 * Trait of group members
		 * Identifies the traits shared by members of the group.
		 * All the identified characteristics must be true for an entity to a member of the group.
		 */
		characteristic?: GroupCharacteristic[];

		/**
		 * Who or what is in group
		 * Identifies the resource instances that are members of the group.
		 */
		member?: GroupMember[];
	}

	/**
	 * The formal response to a guidance request
	 * A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
	 */
	interface GuidanceResponse extends DomainResource {

		/**
		 * The id of the request associated with this response, if any
		 * The id of the request associated with this response. If an id was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
		 */
		requestId?: id;

		/**
		 * Extension for requestId
		 **/
		_requestId?: Element;

		/**
		 * Business identifier
		 * Allows a service to provide a unique, business identifier for the response.
		 */
		identifier?: Identifier;

		/**
		 * A reference to a knowledge module
		 * A reference to the knowledge module that was invoked.
		 */
		module: Reference;

		/**
		 * success | data-requested | data-required | in-progress | failure | entered-in-error
		 * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: GuidanceResponseGuidanceResponseStatus;

		/**
		 * Patient the request was performed for
		 * The patient for which the request was processed.
		 */
		subject?: Reference;

		/**
		 * Encounter or Episode during which the response was returned
		 * Allows the context of the guidance response to be provided if available. In a service context, this would likely be unavailable.
		 */
		context?: Reference;

		/**
		 * When the guidance response was processed
		 * Indicates when the guidance response was processed.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * Device returning the guidance
		 * Provides a reference to the device that performed the guidance.
		 */
		performer?: Reference;

		/**
		 * Reason for the response
		 * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
		 */
		reasonCodeableConcept?: CodeableConcept;

		/**
		 * Reason for the response
		 * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
		 */
		reasonReference?: Reference;

		/**
		 * Additional notes about the response
		 * Provides a mechanism to communicate additional information about the response.
		 */
		note?: Annotation[];

		/**
		 * Messages resulting from the evaluation of the artifact or artifacts
		 * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
		 */
		evaluationMessage?: Reference[];

		/**
		 * The output parameters of the evaluation, if any
		 * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
		 */
		outputParameters?: Reference;

		/**
		 * Proposed actions, if any
		 * The actions, if any, produced by the evaluation of the artifact.
		 */
		result?: Reference;

		/**
		 * Additional required data
		 * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
		 */
		dataRequirement?: DataRequirement[];
	}

	/**
	 * Times the Service Site is available
	 * A collection of times that the Service Site is available.
	 * More detailed availability information may be provided in associated Schedule/Slot resources.
	 */
	interface HealthcareServiceAvailableTime extends BackboneElement {

		/**
		 * mon | tue | wed | thu | fri | sat | sun
		 * Indicates which days of the week are available between the start and end Times.
		 */
		daysOfWeek?: HealthcareServiceDaysOfWeek[];

		/**
		 * Always available? e.g. 24 hour service
		 * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
		 */
		allDay?: boolean;

		/**
		 * Extension for allDay
		 **/
		_allDay?: Element;

		/**
		 * Opening time of day (ignored if allDay = true)
		 * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
		 * The timezone is expected to be for where this HealthcareService is provided at.
		 */
		availableStartTime?: time;

		/**
		 * Extension for availableStartTime
		 **/
		_availableStartTime?: Element;

		/**
		 * Closing time of day (ignored if allDay = true)
		 * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
		 * The timezone is expected to be for where this HealthcareService is provided at.
		 */
		availableEndTime?: time;

		/**
		 * Extension for availableEndTime
		 **/
		_availableEndTime?: Element;
	}

	/**
	 * Not available during this time due to provided reason
	 * The HealthcareService is not available during this period of time due to the provided reason.
	 */
	interface HealthcareServiceNotAvailable extends BackboneElement {

		/**
		 * Reason presented to the user explaining why time not available
		 * The reason that can be presented to the user as to why this time is not available.
		 */
		description: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Service not availablefrom this date
		 * Service is not available (seasonally or for a public holiday) from this date.
		 */
		during?: Period;
	}

	/**
	 * The details of a healthcare service available at a location
	 * The details of a healthcare service available at a location.
	 */
	interface HealthcareService extends DomainResource {

		/**
		 * External identifiers for this item
		 * External identifiers for this item.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this healthcareservice is in active use
		 * Whether this healthcareservice record is in active use.
		 * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * Organization that provides this service
		 * The organization that provides this healthcare service.
		 * This property is recommended to be the same as the Location's managingOrganization, and if not provided should be interpreted as such. If the Location does not have a managing Organization, then this property should be populated.
		 */
		providedBy?: Reference;

		/**
		 * Broad category of service being performed or delivered
		 * Identifies the broad category of service being performed or delivered.
		 * Selecting a Service Category then determines the list of relevant service types that can be selected in the primary service type.
		 */
		category?: CodeableConcept;

		/**
		 * Type of service that may be delivered or performed
		 * The specific type of service that may be delivered or performed.
		 */
		type?: CodeableConcept[];

		/**
		 * Specialties handled by the HealthcareService
		 * Collection of specialties handled by the service site. This is more of a medical term.
		 */
		specialty?: CodeableConcept[];

		/**
		 * Location(s) where service may be provided
		 * The location(s) where this healthcare service may be provided.
		 */
		location?: Reference[];

		/**
		 * Description of service as presented to a consumer while searching
		 * Further description of the service as it would be presented to a consumer while searching.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Additional description and/or any specific issues not covered elsewhere
		 * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
		 * Would expect that a user would not see this information on a search results, and it would only be available when viewing the complete details of the service.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * Extra details about the service that can't be placed in the other fields
		 * Extra details about the service that can't be placed in the other fields.
		 */
		extraDetails?: string;

		/**
		 * Extension for extraDetails
		 **/
		_extraDetails?: Element;

		/**
		 * Facilitates quick identification of the service
		 * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
		 */
		photo?: Attachment;

		/**
		 * Contacts related to the healthcare service
		 * List of contacts related to this specific healthcare service.
		 * If this is empty, then refer to the location's contacts.
		 */
		telecom?: ContactPoint[];

		/**
		 * Location(s) service is inteded for/available to
		 * The location(s) that this service is available to (not where the service is provided).
		 * The locations referenced by the coverage area can include both specific locations, including areas, and also conceptual domains too (mode = kind), such as a physical area (tri-state area) and some other attribute (covered by Example Care Organization). These types of Locations are often not managed by any specific organization. This could also include generic locations such as "in-home".
		 */
		coverageArea?: Reference[];

		/**
		 * Conditions under which service is available/offered
		 * The code(s) that detail the conditions under which the healthcare service is available/offered.
		 * The provision means being commissioned by, contractually obliged or financially sourced. Types of costings that may apply to this healthcare service, such if the service may be available for free, some discounts available, or fees apply.
		 */
		serviceProvisionCode?: CodeableConcept[];

		/**
		 * Specific eligibility requirements required to use the service
		 * Does this service have specific eligibility requirements that need to be met in order to use the service?
		 */
		eligibility?: CodeableConcept;

		/**
		 * Describes the eligibility conditions for the service
		 * Describes the eligibility conditions for the service.
		 * The description of service eligibility should, in general, not exceed one or two paragraphs. It should be sufficient for a prospective consumer to determine if they are likely to be eligible or not. Where eligibility requirements and conditions are complex, it may simply be noted that an eligibility assessment is required. Where eligibility is determined by an outside source, such as an Act of Parliament, this should be noted, preferably with a reference to a commonly available copy of the source document such as a web page.
		 */
		eligibilityNote?: string;

		/**
		 * Extension for eligibilityNote
		 **/
		_eligibilityNote?: Element;

		/**
		 * Program Names that categorize the service
		 * Program Names that can be used to categorize the service.
		 * Programs are often defined externally to an Organization, commonly by governments; e.g. Home and Community Care Programs, Homeless Program, ….
		 */
		programName?: string[];

		/**
		 * Extension for programName
		 **/
		_programName?: Element[];

		/**
		 * Collection of characteristics (attributes)
		 * Collection of characteristics (attributes).
		 * These could be such things as is wheelchair accessible.
		 */
		characteristic?: CodeableConcept[];

		/**
		 * Ways that the service accepts referrals
		 * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
		 */
		referralMethod?: CodeableConcept[];

		/**
		 * If an appointment is required for access to this service
		 * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
		 */
		appointmentRequired?: boolean;

		/**
		 * Extension for appointmentRequired
		 **/
		_appointmentRequired?: Element;

		/**
		 * Times the Service Site is available
		 * A collection of times that the Service Site is available.
		 * More detailed availability information may be provided in associated Schedule/Slot resources.
		 */
		availableTime?: HealthcareServiceAvailableTime[];

		/**
		 * Not available during this time due to provided reason
		 * The HealthcareService is not available during this period of time due to the provided reason.
		 */
		notAvailable?: HealthcareServiceNotAvailable[];

		/**
		 * Description of availability exceptions
		 * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
		 */
		availabilityExceptions?: string;

		/**
		 * Extension for availabilityExceptions
		 **/
		_availabilityExceptions?: Element;

		/**
		 * Technical endpoints providing access to services operated for the location
		 * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
		 */
		endpoint?: Reference[];
	}

	/**
	 * The selected instance
	 * Identity and locating information of the selected DICOM SOP instances.
	 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
	 */
	interface ImagingManifestStudySeriesInstance extends BackboneElement {

		/**
		 * SOP class UID of instance
		 * SOP class UID of the selected instance.
		 * SOP class UID identifies the type of the selected instances, e.g. CT image, Gray scale softcopy presentation state, ECG waveform, etc.
		 */
		sopClass: oid;

		/**
		 * Extension for sopClass
		 **/
		_sopClass?: Element;

		/**
		 * Selected instance UID
		 * SOP Instance UID of the selected instance.
		 * SOP instance UID identifies the instance.
		 */
		uid: oid;

		/**
		 * Extension for uid
		 **/
		_uid?: Element;
	}

	/**
	 * Series identity of the selected instances
	 * Series identity and locating information of the DICOM SOP instances in the selection.
	 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
	 */
	interface ImagingManifestStudySeries extends BackboneElement {

		/**
		 * Series instance UID
		 * Series instance UID of the SOP instances in the selection.
		 */
		uid: oid;

		/**
		 * Extension for uid
		 **/
		_uid?: Element;

		/**
		 * Series access endpoint
		 * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type.
		 */
		endpoint?: Reference[];

		/**
		 * The selected instance
		 * Identity and locating information of the selected DICOM SOP instances.
		 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
		 */
		instance: ImagingManifestStudySeriesInstance[];
	}

	/**
	 * Study identity of the selected instances
	 * Study identity and locating information of the DICOM SOP instances in the selection.
	 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
	 */
	interface ImagingManifestStudy extends BackboneElement {

		/**
		 * Study instance UID
		 * Study instance UID of the SOP instances in the selection.
		 */
		uid: oid;

		/**
		 * Extension for uid
		 **/
		_uid?: Element;

		/**
		 * Reference to ImagingStudy
		 * Reference to the Imaging Study in FHIR form.
		 */
		imagingStudy?: Reference;

		/**
		 * Study access service endpoint
		 * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type.
		 */
		endpoint?: Reference[];

		/**
		 * Series identity of the selected instances
		 * Series identity and locating information of the DICOM SOP instances in the selection.
		 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
		 */
		series: ImagingManifestStudySeries[];
	}

	/**
	 * Key Object Selection
	 * A text description of the DICOM SOP instances selected in the ImagingManifest; or the reason for, or significance of, the selection.
	 */
	interface ImagingManifest extends DomainResource {

		/**
		 * SOP Instance UID
		 * Unique identifier of the DICOM Key Object Selection (KOS) that this resource represents.
		 */
		identifier?: Identifier;

		/**
		 * Patient of the selected objects
		 * A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingManifest.
		 * SOP instances selected in the ImagingManifest can be from different studies, but must be of the same patient.
		 */
		patient: Reference;

		/**
		 * Time when the selection of instances was made
		 * Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
		 */
		authoringTime?: dateTime;

		/**
		 * Extension for authoringTime
		 **/
		_authoringTime?: Element;

		/**
		 * Author (human or machine)
		 * Author of ImagingManifest. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
		 */
		author?: Reference;

		/**
		 * Description text
		 * Free text narrative description of the ImagingManifest.  
The value may be derived from the DICOM Standard Part 16, CID-7010 descriptions (e.g. Best in Set, Complete Study Content). Note that those values cover the wide range of uses of the DICOM Key Object Selection object, several of which are not supported by ImagingManifest. Specifically, there is no expected behavior associated with descriptions that suggest referenced images be removed or not used.
		 * Free text narrative description of the ImagingManifest.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Study identity of the selected instances
		 * Study identity and locating information of the DICOM SOP instances in the selection.
		 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
		 */
		study: ImagingManifestStudy[];
	}

	/**
	 * A single SOP instance from the series
	 * A single SOP instance within the series, e.g. an image, or presentation state.
	 */
	interface ImagingStudySeriesInstance extends BackboneElement {

		/**
		 * Formal DICOM identifier for this instance
		 * Formal identifier for this image or other content.
		 */
		uid: oid;

		/**
		 * Extension for uid
		 **/
		_uid?: Element;

		/**
		 * The number of this instance in the series
		 * The number of instance in the series.
		 */
		number?: unsignedInt;

		/**
		 * Extension for number
		 **/
		_number?: Element;

		/**
		 * DICOM class type
		 * DICOM instance  type.
		 */
		sopClass: oid;

		/**
		 * Extension for sopClass
		 **/
		_sopClass?: Element;

		/**
		 * Description of instance
		 * The description of the instance.
		 * Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;
	}

	/**
	 * Each study has one or more series of instances
	 * Each study has one or more series of images or other content.
	 */
	interface ImagingStudySeries extends BackboneElement {

		/**
		 * Formal DICOM identifier for this series
		 * Formal identifier for this series.
		 */
		uid: oid;

		/**
		 * Extension for uid
		 **/
		_uid?: Element;

		/**
		 * Numeric identifier of this series
		 * The numeric identifier of this series in the study.
		 */
		number?: unsignedInt;

		/**
		 * Extension for number
		 **/
		_number?: Element;

		/**
		 * The modality of the instances in the series
		 * The modality of this series sequence.
		 */
		modality: Coding;

		/**
		 * A short human readable summary of the series
		 * A description of the series.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Number of Series Related Instances
		 * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
		 */
		numberOfInstances?: unsignedInt;

		/**
		 * Extension for numberOfInstances
		 **/
		_numberOfInstances?: Element;

		/**
		 * ONLINE | OFFLINE | NEARLINE | UNAVAILABLE
		 * Availability of series (online, offline or nearline).
		 */
		availability?: ImagingStudyInstanceAvailability;

		/**
		 * Series access endpoint
		 * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type.
		 * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
		 */
		endpoint?: Reference[];

		/**
		 * Body part examined
		 * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
		 */
		bodySite?: Coding;

		/**
		 * Body part laterality
		 * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
		 */
		laterality?: Coding;

		/**
		 * When the series started
		 * The date and time the series was started.
		 */
		started?: dateTime;

		/**
		 * Extension for started
		 **/
		_started?: Element;

		/**
		 * Who performed the series
		 * The physician or operator (often the radiology technician)  who performed the series. The performer is recorded at the series level, since each series in a study may be performed by a different practitioner, at different times, and using different devices. A series may be performed by multiple practitioners.
		 */
		performer?: Reference[];

		/**
		 * A single SOP instance from the series
		 * A single SOP instance within the series, e.g. an image, or presentation state.
		 */
		instance?: ImagingStudySeriesInstance[];
	}

	/**
	 * A set of images produced in single study (one or more series of references images)
	 * Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
	 */
	interface ImagingStudy extends DomainResource {

		/**
		 * Formal DICOM identifier for the study
		 * Formal identifier for the study.
		 */
		uid: oid;

		/**
		 * Extension for uid
		 **/
		_uid?: Element;

		/**
		 * Related workflow identifier ("Accession Number")
		 * Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
		 */
		accession?: Identifier;

		/**
		 * Other identifiers for the study
		 * Other identifiers for the study.
		 */
		identifier?: Identifier[];

		/**
		 * ONLINE | OFFLINE | NEARLINE | UNAVAILABLE
		 * Availability of study (online, offline, or nearline).
		 */
		availability?: ImagingStudyInstanceAvailability;

		/**
		 * All series modality if actual acquisition modalities
		 * A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
		 */
		modalityList?: Coding[];

		/**
		 * Who the images are of
		 * The patient imaged in the study.
		 */
		patient: Reference;

		/**
		 * Originating context
		 * The encounter or episode at which the request is initiated.
		 */
		context?: Reference;

		/**
		 * When the study was started
		 * Date and time the study started.
		 */
		started?: dateTime;

		/**
		 * Extension for started
		 **/
		_started?: Element;

		/**
		 * Request fulfilled
		 * A list of the diagnostic requests that resulted in this imaging study being performed.
		 */
		basedOn?: Reference[];

		/**
		 * Referring physician
		 * The requesting/referring physician.
		 */
		referrer?: Reference;

		/**
		 * Who interpreted images
		 * Who read the study and interpreted the images or other content.
		 */
		interpreter?: Reference[];

		/**
		 * Study access endpoint
		 * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type.
		 * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
		 */
		endpoint?: Reference[];

		/**
		 * Number of Study Related Series
		 * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
		 */
		numberOfSeries?: unsignedInt;

		/**
		 * Extension for numberOfSeries
		 **/
		_numberOfSeries?: Element;

		/**
		 * Number of Study Related Instances
		 * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
		 */
		numberOfInstances?: unsignedInt;

		/**
		 * Extension for numberOfInstances
		 **/
		_numberOfInstances?: Element;

		/**
		 * The performed Procedure reference
		 * A reference to the performed Procedure.
		 */
		procedureReference?: Reference[];

		/**
		 * The performed procedure code
		 * The code for the performed procedure type.
		 */
		procedureCode?: CodeableConcept[];

		/**
		 * Why the study was requested
		 * Description of clinical condition indicating why the ImagingStudy was requested.
		 */
		reason?: CodeableConcept;

		/**
		 * Institution-generated description
		 * Institution-generated description or classification of the Study performed.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Each study has one or more series of instances
		 * Each study has one or more series of images or other content.
		 */
		series?: ImagingStudySeries[];
	}

	/**
	 * Who performed event
	 * Indicates who or what performed the event.
	 */
	interface ImmunizationPractitioner extends BackboneElement {

		/**
		 * What type of performance was done
		 * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
		 */
		role?: CodeableConcept;

		/**
		 * Individual who was performing
		 * The device, practitioner, etc. who performed the action.
		 */
		actor: Reference;
	}

	/**
	 * Administration/non-administration reasons
	 * Reasons why a vaccine was or was not administered.
	 */
	interface ImmunizationExplanation extends BackboneElement {

		/**
		 * Why immunization occurred
		 * Reasons why a vaccine was administered.
		 */
		reason?: CodeableConcept[];

		/**
		 * Why immunization did not occur
		 * Reason why a vaccine was not administered.
		 */
		reasonNotGiven?: CodeableConcept[];
	}

	/**
	 * Details of a reaction that follows immunization
	 * Categorical data indicating that an adverse event is associated in time to an immunization.
	 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case,  it should be recorded as a new [AllergyIntolerance](allergyintolerance.html) resource instance as most systems will not query against  past Immunization.reaction elements.
	 */
	interface ImmunizationReaction extends BackboneElement {

		/**
		 * When reaction started
		 * Date of reaction to the immunization.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Additional information on reaction
		 * Details of the reaction.
		 */
		detail?: Reference;

		/**
		 * Indicates self-reported reaction
		 * Self-reported indicator.
		 */
		reported?: boolean;

		/**
		 * Extension for reported
		 **/
		_reported?: Element;
	}

	/**
	 * What protocol was followed
	 * Contains information about the protocol(s) under which the vaccine was administered.
	 */
	interface ImmunizationVaccinationProtocol extends BackboneElement {

		/**
		 * Dose number within series
		 * Nominal position in a series.
		 */
		doseSequence?: positiveInt;

		/**
		 * Extension for doseSequence
		 **/
		_doseSequence?: Element;

		/**
		 * Details of vaccine protocol
		 * Contains the description about the protocol under which the vaccine was administered.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Who is responsible for protocol
		 * Indicates the authority who published the protocol.  E.g. ACIP.
		 */
		authority?: Reference;

		/**
		 * Name of vaccine series
		 * One possible path to achieve presumed immunity against a disease - within the context of an authority.
		 */
		series?: string;

		/**
		 * Extension for series
		 **/
		_series?: Element;

		/**
		 * Recommended number of doses for immunity
		 * The recommended number of doses to achieve immunity.
		 */
		seriesDoses?: positiveInt;

		/**
		 * Extension for seriesDoses
		 **/
		_seriesDoses?: Element;

		/**
		 * Disease immunized against
		 * The targeted disease.
		 */
		targetDisease: CodeableConcept[];

		/**
		 * Indicates if dose counts towards immunity
		 * Indicates if the immunization event should "count" against  the protocol.
		 * May need to differentiate between status declarations by a provider vs. a CDS engine.
		 */
		doseStatus: CodeableConcept;

		/**
		 * Why dose does (not) count
		 * Provides an explanation as to why an immunization event should or should not count against the protocol.
		 */
		doseStatusReason?: CodeableConcept;
	}

	/**
	 * Immunization event information
	 * Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.
	 */
	interface Immunization extends DomainResource {

		/**
		 * Business identifier
		 * A unique identifier assigned to this immunization record.
		 */
		identifier?: Identifier[];

		/**
		 * completed | entered-in-error
		 * Indicates the current status of the vaccination event.
		 * Will generally be set to show that the immunization has been completed.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ImmunizationImmunizationStatus;

		/**
		 * Flag for whether immunization was given
		 * Indicates if the vaccination was or was not given.
		 * This element is labeled as a modifier because it indicates that an immunization didn't happen.
		 */
		notGiven: boolean;

		/**
		 * Extension for notGiven
		 **/
		_notGiven?: Element;

		/**
		 * Vaccine product administered
		 * Vaccine that was administered or was to be administered.
		 */
		vaccineCode: CodeableConcept;

		/**
		 * Who was immunized
		 * The patient who either received or did not receive the immunization.
		 */
		patient: Reference;

		/**
		 * Encounter administered as part of
		 * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
		 */
		encounter?: Reference;

		/**
		 * Vaccination administration date
		 * Date vaccine administered or was to be administered.
		 * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Indicates context the data was recorded in
		 * An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
		 * Reflects the “reliability” of the content.
		 */
		primarySource: boolean;

		/**
		 * Extension for primarySource
		 **/
		_primarySource?: Element;

		/**
		 * Indicates the source of a secondarily reported record
		 * The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
		 * Should not be populated if primarySource = True, will not be required even if primarySource = False.
		 */
		reportOrigin?: CodeableConcept;

		/**
		 * Where vaccination occurred
		 * The service delivery location where the vaccine administration occurred.
		 */
		location?: Reference;

		/**
		 * Vaccine manufacturer
		 * Name of vaccine manufacturer.
		 */
		manufacturer?: Reference;

		/**
		 * Vaccine lot number
		 * Lot number of the  vaccine product.
		 */
		lotNumber?: string;

		/**
		 * Extension for lotNumber
		 **/
		_lotNumber?: Element;

		/**
		 * Vaccine expiration date
		 * Date vaccine batch expires.
		 */
		expirationDate?: date;

		/**
		 * Extension for expirationDate
		 **/
		_expirationDate?: Element;

		/**
		 * Body site vaccine  was administered
		 * Body site where vaccine was administered.
		 */
		site?: CodeableConcept;

		/**
		 * How vaccine entered body
		 * The path by which the vaccine product is taken into the body.
		 */
		route?: CodeableConcept;

		/**
		 * Amount of vaccine administered
		 * The quantity of vaccine product that was administered.
		 */
		doseQuantity?: SimpleQuantity;

		/**
		 * Who performed event
		 * Indicates who or what performed the event.
		 */
		practitioner?: ImmunizationPractitioner[];

		/**
		 * Vaccination notes
		 * Extra information about the immunization that is not conveyed by the other attributes.
		 */
		note?: Annotation[];

		/**
		 * Administration/non-administration reasons
		 * Reasons why a vaccine was or was not administered.
		 */
		explanation?: ImmunizationExplanation;

		/**
		 * Details of a reaction that follows immunization
		 * Categorical data indicating that an adverse event is associated in time to an immunization.
		 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case,  it should be recorded as a new [AllergyIntolerance](allergyintolerance.html) resource instance as most systems will not query against  past Immunization.reaction elements.
		 */
		reaction?: ImmunizationReaction[];

		/**
		 * What protocol was followed
		 * Contains information about the protocol(s) under which the vaccine was administered.
		 */
		vaccinationProtocol?: ImmunizationVaccinationProtocol[];
	}

	/**
	 * Dates governing proposed immunization
	 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
	 */
	interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {

		/**
		 * Type of date
		 * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
		 */
		code: CodeableConcept;

		/**
		 * Recommended date
		 * The date whose meaning is specified by dateCriterion.code.
		 */
		value: dateTime;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Protocol used by recommendation
	 * Contains information about the protocol under which the vaccine was administered.
	 */
	interface ImmunizationRecommendationRecommendationProtocol extends BackboneElement {

		/**
		 * Dose number within sequence
		 * Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
		 */
		doseSequence?: positiveInt;

		/**
		 * Extension for doseSequence
		 **/
		_doseSequence?: Element;

		/**
		 * Protocol details
		 * Contains the description about the protocol under which the vaccine was administered.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Who is responsible for protocol
		 * Indicates the authority who published the protocol.  For example, ACIP.
		 */
		authority?: Reference;

		/**
		 * Name of vaccination series
		 * One possible path to achieve presumed immunity against a disease - within the context of an authority.
		 */
		series?: string;

		/**
		 * Extension for series
		 **/
		_series?: Element;
	}

	/**
	 * Vaccine administration recommendations
	 * Vaccine administration recommendations.
	 */
	interface ImmunizationRecommendationRecommendation extends BackboneElement {

		/**
		 * Date recommendation created
		 * The date the immunization recommendation was created.
		 */
		date: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Vaccine recommendation applies to
		 * Vaccine that pertains to the recommendation.
		 */
		vaccineCode?: CodeableConcept;

		/**
		 * Disease to be immunized against
		 * The targeted disease for the recommendation.
		 */
		targetDisease?: CodeableConcept;

		/**
		 * Recommended dose number
		 * The next recommended dose number (e.g. dose 2 is the next recommended dose).
		 * May need other dose concepts such as administered vs. valid.
		 */
		doseNumber?: positiveInt;

		/**
		 * Extension for doseNumber
		 **/
		_doseNumber?: Element;

		/**
		 * Vaccine administration status
		 * Vaccine administration status.
		 */
		forecastStatus: CodeableConcept;

		/**
		 * Dates governing proposed immunization
		 * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
		 */
		dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[];

		/**
		 * Protocol used by recommendation
		 * Contains information about the protocol under which the vaccine was administered.
		 */
		protocol?: ImmunizationRecommendationRecommendationProtocol;

		/**
		 * Past immunizations supporting recommendation
		 * Immunization event history that supports the status and recommendation.
		 */
		supportingImmunization?: Reference[];

		/**
		 * Patient observations supporting recommendation
		 * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
		 */
		supportingPatientInformation?: Reference[];
	}

	/**
	 * Guidance or advice relating to an immunization
	 * A patient's point-in-time immunization and recommendation (i.e. forecasting a patient's immunization eligibility according to a published schedule) with optional supporting justification.
	 */
	interface ImmunizationRecommendation extends DomainResource {

		/**
		 * Business identifier
		 * A unique identifier assigned to this particular recommendation record.
		 */
		identifier?: Identifier[];

		/**
		 * Who this profile is for
		 * The patient the recommendations are for.
		 */
		patient: Reference;

		/**
		 * Vaccine administration recommendations
		 * Vaccine administration recommendations.
		 */
		recommendation: ImmunizationRecommendationRecommendation[];
	}

	/**
	 * Another Implementation guide this depends on
	 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
	 */
	interface ImplementationGuideDependency extends BackboneElement {

		/**
		 * reference | inclusion
		 * How the dependency is represented when the guide is published.
		 * For information about processing included guides, see [Including Guides]{implementationguide.html#include}.
		 */
		type: ImplementationGuideGuideDependencyType;

		/**
		 * Where to find dependency
		 * Where the dependency is located.
		 * When a guide is published, and the type is 'include', this will be a relative reference within the guide.
		 */
		uri: uri;

		/**
		 * Extension for uri
		 **/
		_uri?: Element;
	}

	/**
	 * Resource in the implementation guide
	 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
	 */
	interface ImplementationGuidePackageResource extends BackboneElement {

		/**
		 * If not an example, has its normal meaning
		 * Whether a resource is included in the guide as part of the rules defined by the guide, or just as an example of a resource that conforms to the rules and/or help implementers understand the intent of the guide.
		 * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
		 */
		example: boolean;

		/**
		 * Extension for example
		 **/
		_example?: Element;

		/**
		 * Human Name for the resource
		 * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Reason why included in guide
		 * A description of the reason that a resource has been included in the implementation guide.
		 * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Short code to identify the resource
		 * A short code that may be used to identify the resource throughout the implementation guide.
		 * This is used when generating schematrons from profiles, for example, but has other uses. Publishing tooling may autogenerate this value, but a human assigned value is more useful. This value must be unique within an implementation guide (across included guides as well).
		 */
		acronym?: string;

		/**
		 * Extension for acronym
		 **/
		_acronym?: Element;

		/**
		 * Location of the resource
		 * Where this resource is found.
		 * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
		 */
		sourceUri: uri;

		/**
		 * Extension for sourceUri
		 **/
		_sourceUri?: Element;

		/**
		 * Location of the resource
		 * Where this resource is found.
		 * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
		 */
		sourceReference: Reference;

		/**
		 * Resource this is an example of (if applicable)
		 * Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.
		 * Examples:
* StructureDefinition -> Any
* ValueSet -> expansion
* OperationDefinition -> Parameters
* Questionnaire -> QuestionnaireResponse.
		 */
		exampleFor?: Reference;
	}

	/**
	 * Group of resources as used in .page.package
	 * A logical group of resources. Logical groups can be used when building pages.
	 */
	interface ImplementationGuidePackage extends BackboneElement {

		/**
		 * Name used .page.package
		 * The name for the group, as used in page.package.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Human readable text describing the package
		 * Human readable text describing the package.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Resource in the implementation guide
		 * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
		 */
		resource: ImplementationGuidePackageResource[];
	}

	/**
	 * Profiles that apply globally
	 * A set of profiles that all resources covered by this implementation guide must conform to.
	 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
	 */
	interface ImplementationGuideGlobal extends BackboneElement {

		/**
		 * Type this profiles applies to
		 * The type of resource that all instances must conform to.
		 * The type must match that of the profile that is referred to, but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
		 */
		type: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Profile that all resources must conform to
		 * A reference to the profile that all instances must conform to.
		 */
		profile: Reference;
	}

	/**
	 * Page/Section in the Guide
	 * A page / section in the implementation guide. The root page is the implementation guide home page.
	 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
	 */
	interface ImplementationGuidePage extends BackboneElement {

		/**
		 * Where to find that page
		 * The source address for the page.
		 * The publishing tool will autogenerate source for list (source = n/a), and inject included implementations for include (source = uri of guide to include).
		 */
		source: uri;

		/**
		 * Extension for source
		 **/
		_source?: Element;

		/**
		 * Short title shown for navigational assistance
		 * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
		 */
		title: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * page | example | list | include | directory | dictionary | toc | resource
		 * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
		 */
		kind: ImplementationGuideGuidePageKind;

		/**
		 * Kind of resource to include in the list
		 * For constructed pages, what kind of resources to include in the list.
		 */
		type?: code[];

		/**
		 * Extension for type
		 **/
		_type?: Element[];

		/**
		 * Name of package to include
		 * For constructed pages, a list of packages to include in the page (or else empty for everything).
		 */
		package?: string[];

		/**
		 * Extension for package
		 **/
		_package?: Element[];

		/**
		 * Format of the page (e.g. html, markdown, etc.)
		 * The format of the page.
		 * This is primarily for the publishing tool, that will convert all pages to html format. HTML pages are pre-processed, see xxxx.
		 */
		format?: code;

		/**
		 * Extension for format
		 **/
		_format?: Element;

		/**
		 * Nested Pages / Sections
		 * Nested Pages/Sections under this page.
		 * The implementation guide breadcrumbs are generated from this structure.
		 */
		page?: ImplementationGuidePage[];
	}

	/**
	 * A set of rules about how FHIR is used
	 * A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
	 */
	interface ImplementationGuide extends DomainResource {

		/**
		 * Logical URI to reference this implementation guide (globally unique)
		 * An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this implementation guide is (or will be) published. The URL SHOULD include the major version of the implementation guide. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Business version of the implementation guide
		 * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the implementation guide with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this implementation guide (computer friendly)
		 * A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this implementation guide. Enables tracking the life-cycle of the content.
		 * Allows filtering of implementation guides that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired implementation guide without due consideration.
		 */
		status: ImplementationGuidePublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of implementation guide that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental implementation guide in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the implementation guide was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the implementation guide.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the implementation guide
		 * A free text natural language description of the implementation guide from a consumer's perspective.
		 * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate implementation guide instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for implementation guide (if applicable)
		 * A legal or geographic region in which the implementation guide is intended to be used.
		 * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * FHIR Version this Implementation Guide targets
		 * The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 3.0.1 for this version.
		 * An Implementation Guide should specify the target it applies to, as ImplementationGuides are rarely valid across multiple versions of FHIR.
		 */
		fhirVersion?: id;

		/**
		 * Extension for fhirVersion
		 **/
		_fhirVersion?: Element;

		/**
		 * Another Implementation guide this depends on
		 * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
		 */
		dependency?: ImplementationGuideDependency[];

		/**
		 * Group of resources as used in .page.package
		 * A logical group of resources. Logical groups can be used when building pages.
		 */
		package?: ImplementationGuidePackage[];

		/**
		 * Profiles that apply globally
		 * A set of profiles that all resources covered by this implementation guide must conform to.
		 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
		 */
		global?: ImplementationGuideGlobal[];

		/**
		 * Image, css, script, etc.
		 * A binary file that is included in the  implementation guide when it is published.
		 * This is principally included for the FHIR publishing tool, but may be useful when extracting and reusing content from the implementation guide.
		 */
		binary?: uri[];

		/**
		 * Extension for binary
		 **/
		_binary?: Element[];

		/**
		 * Page/Section in the Guide
		 * A page / section in the implementation guide. The root page is the implementation guide home page.
		 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
		 */
		page?: ImplementationGuidePage;
	}

	/**
	 * Represents a library of quality improvement components
	 * The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.
	 */
	interface Library extends DomainResource {

		/**
		 * Logical URI to reference this library (globally unique)
		 * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this library is (or will be) published. The URL SHOULD include the major version of the library. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the library
		 * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this library outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the library
		 * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
		 * There may be different library instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the library with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this library (computer friendly)
		 * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this library (human friendly)
		 * A short, descriptive, user-friendly title for the library.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this library. Enables tracking the life-cycle of the content.
		 * Allows filtering of librarys that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired library without due consideration.
		 */
		status: LibraryPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of library that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental library in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * logic-library | model-definition | asset-collection | module-definition
		 * Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
		 */
		type: CodeableConcept;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the library was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the library. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the library.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the library is the organization or individual primarily responsible for the maintenance and upkeep of the library. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the library. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Natural language description of the library
		 * A free text natural language description of the library from a consumer's perspective.
		 * This description can be used to capture details such as why the library was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the library as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this library is defined
		 * Explaination of why this library is needed and why it has been designed as it has.
		 * This element does not describe the usage of the library Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this library.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Describes the clinical usage of the library
		 * A detailed description of how the library is used from a clinical perspective.
		 */
		usage?: string;

		/**
		 * Extension for usage
		 **/
		_usage?: Element;

		/**
		 * When the library was approved by publisher
		 * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
		 * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
		 */
		approvalDate?: date;

		/**
		 * Extension for approvalDate
		 **/
		_approvalDate?: Element;

		/**
		 * When the library was last reviewed
		 * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
		 * If specified, this is usually after the approval date.
		 */
		lastReviewDate?: date;

		/**
		 * Extension for lastReviewDate
		 **/
		_lastReviewDate?: Element;

		/**
		 * When the library is expected to be used
		 * The period during which the library content was or is planned to be in active use.
		 * The effective period for a library  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
		 */
		effectivePeriod?: Period;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate library instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for library (if applicable)
		 * A legal or geographic region in which the library is intended to be used.
		 * It may be possible for the library to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * E.g. Education, Treatment, Assessment, etc
		 * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
		 */
		topic?: CodeableConcept[];

		/**
		 * A content contributor
		 * A contributor to the content of the library, including authors, editors, reviewers, and endorsers.
		 */
		contributor?: Contributor[];

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Additional documentation, citations, etc.
		 * Related artifacts such as additional documentation, justification, or bibliographic references.
		 * Each related artifact is either an attachment, or a reference to another resource, but not both.
		 */
		relatedArtifact?: RelatedArtifact[];

		/**
		 * Parameters defined by the library
		 * The parameter element defines parameters used by the library.
		 */
		parameter?: ParameterDefinition[];

		/**
		 * What data is referenced by this library
		 * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
		 */
		dataRequirement?: DataRequirement[];

		/**
		 * Contents of the library, either embedded or referenced
		 * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
		 */
		content?: Attachment[];
	}

	/**
	 * Item to be linked
	 * Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items.
	 */
	interface LinkageItem extends BackboneElement {

		/**
		 * source | alternate | historical
		 * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
		 */
		type: LinkageLinkageType;

		/**
		 * Resource being linked
		 * The resource instance being linked as part of the group.
		 */
		resource: Reference;
	}

	/**
	 * Links records for 'same' item
	 * Identifies two or more records (resource instances) that are referring to the same real-world "occurrence".
	 */
	interface Linkage extends DomainResource {

		/**
		 * Whether this linkage assertion is active or not
		 * Indicates whether the asserted set of linkages are considered to be "in effect".
		 * If false, any asserted linkages should not be considered current/relevant/applicable.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * Who is responsible for linkages
		 * Identifies the user or organization responsible for asserting the linkages and who establishes the context for evaluating the nature of each linkage.
		 */
		author?: Reference;

		/**
		 * Item to be linked
		 * Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items.
		 */
		item: LinkageItem[];
	}

	/**
	 * Entries in the list
	 * Entries in this list.
	 * If there are no entries in the list, an emptyReason SHOULD be provided.
	 */
	interface ListEntry extends BackboneElement {

		/**
		 * Status/Workflow information about this item
		 * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
		 * The flag can only be understood in the context of the List.code. If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. Deleted can only be used if the List.mode is "changes".
		 */
		flag?: CodeableConcept;

		/**
		 * If this item is actually marked as deleted
		 * True if this item is marked as deleted in the list.
		 * If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. Both flag and deleted can only be used if the List.mode is "changes". A deleted entry should be displayed in narrative as deleted.

This element is labeled as a modifier because it indicates that an item is (to be) no longer in the list.
		 */
		deleted?: boolean;

		/**
		 * Extension for deleted
		 **/
		_deleted?: Element;

		/**
		 * When item added to list
		 * When this item was added to the list.
		 * This is only useful and meaningful when the mode is "working".
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Actual entry
		 * A reference to the actual resource from which data was derived.
		 */
		item: Reference;
	}

	/**
	 * Information summarized from a list of other resources
	 * A set of information summarized from a list of other resources.
	 */
	interface List extends DomainResource {

		/**
		 * Business identifier
		 * Identifier for the List assigned for business purposes outside the context of FHIR.
		 */
		identifier?: Identifier[];

		/**
		 * current | retired | entered-in-error
		 * Indicates the current state of this list.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ListListStatus;

		/**
		 * working | snapshot | changes
		 * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
		 * This element is labeled as a modifier because a change list must not be mis-understood as a complete list.
		 */
		mode: ListListMode;

		/**
		 * Descriptive name for the list
		 * A label for the list assigned by the author.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * What the purpose of this list is
		 * This code defines the purpose of the list - why it was created.
		 * If there is no code, the purpose of the list is implied where it is used, such as in a document section using Document.section.code.
		 */
		code?: CodeableConcept;

		/**
		 * If all resources have the same subject
		 * The common subject (or patient) of the resources that are in the list, if there is one.
		 * Some purely arbitrary lists do not have a common subject, so this is optional.
		 */
		subject?: Reference;

		/**
		 * Context in which list created
		 * The encounter that is the context in which this list was created.
		 */
		encounter?: Reference;

		/**
		 * When the list was prepared
		 * The date that the list was prepared.
		 * The actual important date is the date of currency of the resources that were summarized, but it is usually assumed that these are current when the preparation occurs.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Who and/or what defined the list contents (aka Author)
		 * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
		 * The primary source is the entity that made the decisions what items are in the list. This may be software or user.
		 */
		source?: Reference;

		/**
		 * What order the list has
		 * What order applies to the items in the list.
		 * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
		 */
		orderedBy?: CodeableConcept;

		/**
		 * Comments about the list
		 * Comments that apply to the overall list.
		 */
		note?: Annotation[];

		/**
		 * Entries in the list
		 * Entries in this list.
		 * If there are no entries in the list, an emptyReason SHOULD be provided.
		 */
		entry?: ListEntry[];

		/**
		 * Why list is empty
		 * If the list is empty, why the list is empty.
		 * The various reasons for an empty list make a significant interpretation to its interpretation. Note that this code is for use when the entire list has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
		 */
		emptyReason?: CodeableConcept;
	}

	/**
	 * The absolute geographic location
	 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
	 */
	interface LocationPosition extends BackboneElement {

		/**
		 * Longitude with WGS84 datum
		 * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
		 */
		longitude: decimal;

		/**
		 * Extension for longitude
		 **/
		_longitude?: Element;

		/**
		 * Latitude with WGS84 datum
		 * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
		 */
		latitude: decimal;

		/**
		 * Extension for latitude
		 **/
		_latitude?: Element;

		/**
		 * Altitude with WGS84 datum
		 * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
		 */
		altitude?: decimal;

		/**
		 * Extension for altitude
		 **/
		_altitude?: Element;
	}

	/**
	 * Details and position information for a physical place
	 * Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
	 */
	interface Location extends DomainResource {

		/**
		 * Unique code or number identifying the location to its users
		 * Unique code or number identifying the location to its users.
		 */
		identifier?: Identifier[];

		/**
		 * active | suspended | inactive
		 * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: LocationLocationStatus;

		/**
		 * The Operational status of the location (typically only for a bed/room)
		 * The Operational status covers operation values most relevant to beds (but can also apply to rooms/units/chair/etc such as an isolation unit/dialisys chair). This typically covers concepts such as contamination, housekeeping and other activities like maintenance.
		 */
		operationalStatus?: Coding;

		/**
		 * Name of the location as used by humans
		 * Name of the location as used by humans. Does not need to be unique.
		 * If the name of an location changes, consider putting the old name in the alias column so that it can still be located through searches.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * A list of alternate names that the location is known as, or was known as in the past
		 * A list of alternate names that the location is known as, or was known as in the past.
		 * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
		 */
		alias?: string[];

		/**
		 * Extension for alias
		 **/
		_alias?: Element[];

		/**
		 * Additional details about the location that could be displayed as further information to identify the location beyond its name
		 * Description of the Location, which helps in finding or referencing the place.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * instance | kind
		 * Indicates whether a resource instance represents a specific location or a class of locations.
		 * This is labeled as a modifer because whether or not the location is a class of locations changes how it can be used and understood.
		 */
		mode?: LocationLocationMode;

		/**
		 * Type of function performed
		 * Indicates the type of function performed at the location.
		 */
		type?: CodeableConcept;

		/**
		 * Contact details of the location
		 * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
		 */
		telecom?: ContactPoint[];

		/**
		 * Physical location
		 * Physical location.
		 * This was kept as 0..1 as there is no use property on the address, so wouldn't be able to identify different address types.
		 */
		address?: Address;

		/**
		 * Physical form of the location
		 * Physical form of the location, e.g. building, room, vehicle, road.
		 */
		physicalType?: CodeableConcept;

		/**
		 * The absolute geographic location
		 * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
		 */
		position?: LocationPosition;

		/**
		 * Organization responsible for provisioning and upkeep
		 * The organization responsible for the provisioning and upkeep of the location.
		 * This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
		 */
		managingOrganization?: Reference;

		/**
		 * Another Location this one is physically part of
		 * Another Location which this Location is physically part of.
		 */
		partOf?: Reference;

		/**
		 * Technical endpoints providing access to services operated for the location
		 * Technical endpoints providing access to services operated for the location.
		 */
		endpoint?: Reference[];
	}

	/**
	 * Population criteria
	 * A population criteria for the measure.
	 */
	interface MeasureGroupPopulation extends BackboneElement {

		/**
		 * Unique identifier
		 * A unique identifier for the population criteria. This identifier is used to report data against this criteria within the measure report.
		 */
		identifier?: Identifier;

		/**
		 * initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation
		 * The type of population criteria.
		 */
		code?: CodeableConcept;

		/**
		 * Short name
		 * Optional name or short description of this population.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * The human readable description of this population criteria
		 * The human readable description of this population criteria.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * The name of a valid referenced CQL expression (may be namespaced) that defines this population criteria
		 * The name of a valid referenced CQL expression (may be namespaced) that defines this population criteria.
		 * In the case of a continuous variable or ratio measure, this may be the name of a function that calculates the value of the individual observation for each patient or event in the population. For these types of measures, individual observations are reported as observation resources included in the evaluatedResources bundle for each patient. See the MeasureReport resource or the Quality Reporting topic for more information.
		 */
		criteria: string;

		/**
		 * Extension for criteria
		 **/
		_criteria?: Element;
	}

	/**
	 * Stratifier criteria for the measure
	 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path.
	 */
	interface MeasureGroupStratifier extends BackboneElement {

		/**
		 * The identifier for the stratifier used to coordinate the reported data back to this stratifier
		 * The identifier for the stratifier used to coordinate the reported data back to this stratifier.
		 */
		identifier?: Identifier;

		/**
		 * How the measure should be stratified
		 * The criteria for the stratifier. This must be the name of an expression defined within a referenced library.
		 */
		criteria?: string;

		/**
		 * Extension for criteria
		 **/
		_criteria?: Element;

		/**
		 * Path to the stratifier
		 * The path to an element that defines the stratifier, specified as a valid FHIR resource path.
		 */
		path?: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;
	}

	/**
	 * Population criteria group
	 * A group of population criteria for the measure.
	 */
	interface MeasureGroup extends BackboneElement {

		/**
		 * Unique identifier
		 * A unique identifier for the group. This identifier will used to report data for the group in the measure report.
		 */
		identifier: Identifier;

		/**
		 * Short name
		 * Optional name or short description of this group.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Summary description
		 * The human readable description of this population group.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Population criteria
		 * A population criteria for the measure.
		 */
		population?: MeasureGroupPopulation[];

		/**
		 * Stratifier criteria for the measure
		 * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path.
		 */
		stratifier?: MeasureGroupStratifier[];
	}

	/**
	 * What other data should be reported with the measure
	 * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
	 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
	 */
	interface MeasureSupplementalData extends BackboneElement {

		/**
		 * Identifier, unique within the measure
		 * An identifier for the supplemental data.
		 */
		identifier?: Identifier;

		/**
		 * supplemental-data | risk-adjustment-factor
		 * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
		 */
		usage?: CodeableConcept[];

		/**
		 * Expression describing additional data to be reported
		 * The criteria for the supplemental data. This must be the name of a valid expression defined within a referenced library, and defines the data to be returned for this element.
		 */
		criteria?: string;

		/**
		 * Extension for criteria
		 **/
		_criteria?: Element;

		/**
		 * Path to the supplemental data element
		 * The supplemental data to be supplied as part of the measure response, specified as a valid FHIR Resource Path.
		 */
		path?: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;
	}

	/**
	 * A quality measure definition
	 * The Measure resource provides the definition of a quality measure.
	 */
	interface Measure extends DomainResource {

		/**
		 * Logical URI to reference this measure (globally unique)
		 * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this measure is (or will be) published. The URL SHOULD include the major version of the measure. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the measure
		 * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this measure outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the measure
		 * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
		 * There may be different measure instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the measure with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this measure (computer friendly)
		 * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this measure (human friendly)
		 * A short, descriptive, user-friendly title for the measure.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this measure. Enables tracking the life-cycle of the content.
		 * Allows filtering of measures that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired measure without due consideration.
		 */
		status: MeasurePublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of measure that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental measure in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the measure was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the measure. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the measure.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the measure is the organization or individual primarily responsible for the maintenance and upkeep of the measure. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the measure. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Natural language description of the measure
		 * A free text natural language description of the measure from a consumer's perspective.
		 * This description can be used to capture details such as why the measure was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the measure as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this measure is defined
		 * Explaination of why this measure is needed and why it has been designed as it has.
		 * This element does not describe the usage of the measure Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this measure.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Describes the clinical usage of the measure
		 * A detailed description of how the measure is used from a clinical perspective.
		 */
		usage?: string;

		/**
		 * Extension for usage
		 **/
		_usage?: Element;

		/**
		 * When the measure was approved by publisher
		 * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
		 * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
		 */
		approvalDate?: date;

		/**
		 * Extension for approvalDate
		 **/
		_approvalDate?: Element;

		/**
		 * When the measure was last reviewed
		 * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
		 * If specified, this is usually after the approval date.
		 */
		lastReviewDate?: date;

		/**
		 * Extension for lastReviewDate
		 **/
		_lastReviewDate?: Element;

		/**
		 * When the measure is expected to be used
		 * The period during which the measure content was or is planned to be in active use.
		 * The effective period for a measure  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
		 */
		effectivePeriod?: Period;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate measure instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for measure (if applicable)
		 * A legal or geographic region in which the measure is intended to be used.
		 * It may be possible for the measure to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * E.g. Education, Treatment, Assessment, etc
		 * Descriptive topics related to the content of the measure. Topics provide a high-level categorization of the type of the measure that can be useful for filtering and searching.
		 */
		topic?: CodeableConcept[];

		/**
		 * A content contributor
		 * A contributor to the content of the measure, including authors, editors, reviewers, and endorsers.
		 */
		contributor?: Contributor[];

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Additional documentation, citations, etc
		 * Related artifacts such as additional documentation, justification, or bibliographic references.
		 * Each related artifact is either an attachment, or a reference to another resource, but not both.
		 */
		relatedArtifact?: RelatedArtifact[];

		/**
		 * Logic used by the measure
		 * A reference to a Library resource containing the formal logic used by the measure.
		 */
		library?: Reference[];

		/**
		 * Disclaimer for use of the measure or its referenced content
		 * Notices and disclaimers regarding the use of the measure, or related to intellectual property (such as code systems) referenced by the measure.
		 */
		disclaimer?: markdown;

		/**
		 * Extension for disclaimer
		 **/
		_disclaimer?: Element;

		/**
		 * proportion | ratio | continuous-variable | cohort
		 * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
		 */
		scoring?: CodeableConcept;

		/**
		 * opportunity | all-or-nothing | linear | weighted
		 * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
		 */
		compositeScoring?: CodeableConcept;

		/**
		 * process | outcome | structure | patient-reported-outcome | composite
		 * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
		 */
		type?: CodeableConcept[];

		/**
		 * How is risk adjustment applied for this measure
		 * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
		 * Describes the method of adjusting for clinical severity and conditions present at the start of care that can influence patient outcomes for making valid comparisons of outcome measures across providers. Indicates whether an eMeasure is subject to the statistical process for reducing, removing, or clarifying the influences of confounding factors to allow more useful comparisons.
		 */
		riskAdjustment?: string;

		/**
		 * Extension for riskAdjustment
		 **/
		_riskAdjustment?: Element;

		/**
		 * How is rate aggregation performed for this measure
		 * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
		 * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
		 */
		rateAggregation?: string;

		/**
		 * Extension for rateAggregation
		 **/
		_rateAggregation?: Element;

		/**
		 * Why does this measure exist
		 * Provides a succint statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
		 */
		rationale?: markdown;

		/**
		 * Extension for rationale
		 **/
		_rationale?: Element;

		/**
		 * Summary of clinical guidelines
		 * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
		 */
		clinicalRecommendationStatement?: markdown;

		/**
		 * Extension for clinicalRecommendationStatement
		 **/
		_clinicalRecommendationStatement?: Element;

		/**
		 * Improvement notation for the measure, e.g. higher score indicates better quality
		 * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is whthin a range).
		 */
		improvementNotation?: string;

		/**
		 * Extension for improvementNotation
		 **/
		_improvementNotation?: Element;

		/**
		 * Defined terms used in the measure documentation
		 * Provides a description of an individual term used within the measure.
		 */
		definition?: markdown[];

		/**
		 * Extension for definition
		 **/
		_definition?: Element[];

		/**
		 * Additional guidance for implementers
		 * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
		 */
		guidance?: markdown;

		/**
		 * Extension for guidance
		 **/
		_guidance?: Element;

		/**
		 * The measure set, e.g. Preventive Care and Screening
		 * The measure set, e.g. Preventive Care and Screening.
		 */
		set?: string;

		/**
		 * Extension for set
		 **/
		_set?: Element;

		/**
		 * Population criteria group
		 * A group of population criteria for the measure.
		 */
		group?: MeasureGroup[];

		/**
		 * What other data should be reported with the measure
		 * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
		 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
		 */
		supplementalData?: MeasureSupplementalData[];
	}

	/**
	 * The populations in the group
	 * The populations that make up the population group, one for each type of population appropriate for the measure.
	 */
	interface MeasureReportGroupPopulation extends BackboneElement {

		/**
		 * Population identifier as defined in the measure
		 * The identifier of the population being reported, as defined by the population element of the measure.
		 */
		identifier?: Identifier;

		/**
		 * initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-score
		 * The type of the population.
		 */
		code?: CodeableConcept;

		/**
		 * Size of the population
		 * The number of members of the population.
		 */
		count?: integer;

		/**
		 * Extension for count
		 **/
		_count?: Element;

		/**
		 * For patient-list reports, the patients in this population
		 * This element refers to a List of patient level MeasureReport resources, one for each patient in this population.
		 */
		patients?: Reference;
	}

	/**
	 * Population results in this stratum
	 * The populations that make up the stratum, one for each type of population appropriate to the measure.
	 */
	interface MeasureReportGroupStratifierStratumPopulation extends BackboneElement {

		/**
		 * Population identifier as defined in the measure
		 * The identifier of the population being reported, as defined by the population element of the measure.
		 */
		identifier?: Identifier;

		/**
		 * initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-score
		 * The type of the population.
		 */
		code?: CodeableConcept;

		/**
		 * Size of the population
		 * The number of members of the population in this stratum.
		 */
		count?: integer;

		/**
		 * Extension for count
		 **/
		_count?: Element;

		/**
		 * For patient-list reports, the patients in this population
		 * This element refers to a List of patient level MeasureReport resources, one for each patient in this population in this stratum.
		 */
		patients?: Reference;
	}

	/**
	 * Stratum results, one for each unique value in the stratifier
	 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
	 */
	interface MeasureReportGroupStratifierStratum extends BackboneElement {

		/**
		 * The stratum value, e.g. male
		 * The value for this stratum, expressed as a string. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;

		/**
		 * Population results in this stratum
		 * The populations that make up the stratum, one for each type of population appropriate to the measure.
		 */
		population?: MeasureReportGroupStratifierStratumPopulation[];

		/**
		 * What score this stratum achieved
		 * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
		 */
		measureScore?: decimal;

		/**
		 * Extension for measureScore
		 **/
		_measureScore?: Element;
	}

	/**
	 * Stratification results
	 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
	 */
	interface MeasureReportGroupStratifier extends BackboneElement {

		/**
		 * What stratifier of the group
		 * The identifier of this stratifier, as defined in the measure definition.
		 */
		identifier?: Identifier;

		/**
		 * Stratum results, one for each unique value in the stratifier
		 * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
		 */
		stratum?: MeasureReportGroupStratifierStratum[];
	}

	/**
	 * Measure results for each group
	 * The results of the calculation, one for each population group in the measure.
	 */
	interface MeasureReportGroup extends BackboneElement {

		/**
		 * What group of the measure
		 * The identifier of the population group as defined in the measure definition.
		 */
		identifier: Identifier;

		/**
		 * The populations in the group
		 * The populations that make up the population group, one for each type of population appropriate for the measure.
		 */
		population?: MeasureReportGroupPopulation[];

		/**
		 * What score this group achieved
		 * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
		 */
		measureScore?: decimal;

		/**
		 * Extension for measureScore
		 **/
		_measureScore?: Element;

		/**
		 * Stratification results
		 * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
		 */
		stratifier?: MeasureReportGroupStratifier[];
	}

	/**
	 * Results of a measure evaluation
	 * The MeasureReport resource contains the results of evaluating a measure.
	 */
	interface MeasureReport extends DomainResource {

		/**
		 * Additional identifier for the Report
		 * A formal identifier that is used to identify this report when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 v3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
		 */
		identifier?: Identifier;

		/**
		 * complete | pending | error
		 * The report status. No data will be available until the report status is complete.
		 */
		status: MeasureReportMeasureReportStatus;

		/**
		 * individual | patient-list | summary
		 * The type of measure report. This may be an individual report, which provides a single patient's score for the measure; a patient listing, which returns the list of patients that meet the various criteria in the measure; or a summary report, which returns a population count for each of the criteria in the measure.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		type: MeasureReportMeasureReportType;

		/**
		 * What measure was evaluated
		 * A reference to the Measure that was evaluated to produce this report.
		 */
		measure: Reference;

		/**
		 * What patient the report is for
		 * Optional Patient if the report was requested for a single patient.
		 */
		patient?: Reference;

		/**
		 * When the report was generated
		 * The date this measure report was generated.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Who is reporting the data
		 * Reporting Organization.
		 */
		reportingOrganization?: Reference;

		/**
		 * What period the report covers
		 * The reporting period for which the report was calculated.
		 */
		period: Period;

		/**
		 * Measure results for each group
		 * The results of the calculation, one for each population group in the measure.
		 */
		group?: MeasureReportGroup[];

		/**
		 * What data was evaluated to produce the measure score
		 * A reference to a Bundle containing the Resources that were used in the evaluation of this report.
		 */
		evaluatedResources?: Reference;
	}

	/**
	 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference
	 * A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
	 */
	interface Media extends DomainResource {

		/**
		 * Identifier(s) for the image
		 * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
		 * The identifier label and use can be used to determine what kind of identifier it is.
		 */
		identifier?: Identifier[];

		/**
		 * Procedure that caused this media to be created
		 * A procedure that is fulfilled in whole or in part by the creation of this media.
		 */
		basedOn?: Reference[];

		/**
		 * photo | video | audio
		 * Whether the media is a photo (still image), an audio recording, or a video recording.
		 */
		type: MediaDigitalMediaType;

		/**
		 * The type of acquisition equipment/process
		 * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
		 */
		subtype?: CodeableConcept;

		/**
		 * Imaging view, e.g. Lateral or Antero-posterior
		 * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
		 */
		view?: CodeableConcept;

		/**
		 * Who/What this Media is a record of
		 * Who/What this Media is a record of.
		 */
		subject?: Reference;

		/**
		 * Encounter / Episode associated with media
		 * The encounter or episode of care that establishes the context for this media.
		 * This will typically be the encounter the media occurred within.
		 */
		context?: Reference;

		/**
		 * When Media was collected
		 * The date and time(s) at which the media was collected.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When Media was collected
		 * The date and time(s) at which the media was collected.
		 */
		occurrencePeriod?: Period;

		/**
		 * The person who generated the image
		 * The person who administered the collection of the image.
		 */
		operator?: Reference;

		/**
		 * Why was event performed?
		 * Describes why the event occurred in coded or textual form.
		 * Textual reasons can be caprued using reasonCode.text.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Body part in media
		 * Indicates the site on the subject's body where the media was collected (i.e. the target site).
		 * If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use The standard extension[ body-site-instance](extension-body-site-instance.html).
		 */
		bodySite?: CodeableConcept;

		/**
		 * Observing Device
		 * The device used to collect the media.
		 * An extension should be used if further typing of the device is needed.  Scondary devices used to support collecting a media can be represented using either extension or through the Observation.related element.
		 */
		device?: Reference;

		/**
		 * Height of the image in pixels (photo/video)
		 * Height of the image in pixels (photo/video).
		 */
		height?: positiveInt;

		/**
		 * Extension for height
		 **/
		_height?: Element;

		/**
		 * Width of the image in pixels (photo/video)
		 * Width of the image in pixels (photo/video).
		 */
		width?: positiveInt;

		/**
		 * Extension for width
		 **/
		_width?: Element;

		/**
		 * Number of frames if > 1 (photo)
		 * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
		 */
		frames?: positiveInt;

		/**
		 * Extension for frames
		 **/
		_frames?: Element;

		/**
		 * Length in seconds (audio / video)
		 * The duration of the recording in seconds - for audio and video.
		 * The duration might differ from occurrencePeriod if recording was paused.
		 */
		duration?: unsignedInt;

		/**
		 * Extension for duration
		 **/
		_duration?: Element;

		/**
		 * Actual Media - reference or data
		 * The actual content of the media - inline or by direct reference to the media source file.
		 * Recommended content types: image/jpeg, image/png, image/tiff, video/mpeg, audio/mp4, application/dicom. Application/dicom can contain the transfer syntax as a parameter.  For an media that covers a period of time (video/sound), the content.creationTime is the end time. Creation time is used for tracking, organizing versions and searching.
		 */
		content: Attachment;

		/**
		 * Comments made about the media
		 * Comments made about the media by the performer, subject or other participants.
		 */
		note?: Annotation[];
	}

	/**
	 * Active or inactive ingredient
	 * Identifies a particular constituent of interest in the product.
	 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
	 */
	interface MedicationIngredient extends BackboneElement {

		/**
		 * The product contained
		 * The actual ingredient - either a substance (simple ingredient) or another medication.
		 */
		itemCodeableConcept: CodeableConcept;

		/**
		 * The product contained
		 * The actual ingredient - either a substance (simple ingredient) or another medication.
		 */
		itemReference: Reference;

		/**
		 * Active ingredient indicator
		 * Indication of whether this ingredient affects the therapeutic action of the drug.
		 */
		isActive?: boolean;

		/**
		 * Extension for isActive
		 **/
		_isActive?: Element;

		/**
		 * Quantity of ingredient present
		 * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
		 */
		amount?: Ratio;
	}

	/**
	 * What is  in the package
	 * A set of components that go to make up the described item.
	 */
	interface MedicationPackageContent extends BackboneElement {

		/**
		 * The item in the package
		 * Identifies one of the items in the package.
		 */
		itemCodeableConcept: CodeableConcept;

		/**
		 * The item in the package
		 * Identifies one of the items in the package.
		 */
		itemReference: Reference;

		/**
		 * Quantity present in the package
		 * The amount of the product that is in the package.
		 */
		amount?: SimpleQuantity;
	}

	/**
	 * Identifies a single production run
	 * Information about a group of medication produced or packaged from one production run.
	 */
	interface MedicationPackageBatch extends BackboneElement {

		/**
		 * Identifier assigned to batch
		 * The assigned lot number of a batch of the specified product.
		 */
		lotNumber?: string;

		/**
		 * Extension for lotNumber
		 **/
		_lotNumber?: Element;

		/**
		 * When batch will expire
		 * When this specific batch of product will expire.
		 */
		expirationDate?: dateTime;

		/**
		 * Extension for expirationDate
		 **/
		_expirationDate?: Element;
	}

	/**
	 * Details about packaged medications
	 * Information that only applies to packages (not products).
	 */
	interface MedicationPackage extends BackboneElement {

		/**
		 * E.g. box, vial, blister-pack
		 * The kind of container that this package comes as.
		 */
		container?: CodeableConcept;

		/**
		 * What is  in the package
		 * A set of components that go to make up the described item.
		 */
		content?: MedicationPackageContent[];

		/**
		 * Identifies a single production run
		 * Information about a group of medication produced or packaged from one production run.
		 */
		batch?: MedicationPackageBatch[];
	}

	/**
	 * Definition of a Medication
	 * This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.
	 */
	interface Medication extends DomainResource {

		/**
		 * Codes that identify this medication
		 * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
		 * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc.
		 */
		code?: CodeableConcept;

		/**
		 * active | inactive | entered-in-error
		 * A code to indicate if the medication is in active use.
		 * This status is not intended to specify if a medication is part of a formulary.
		 */
		status?: MedicationMedicationStatus;

		/**
		 * True if a brand
		 * Set to true if the item is attributable to a specific manufacturer.
		 */
		isBrand?: boolean;

		/**
		 * Extension for isBrand
		 **/
		_isBrand?: Element;

		/**
		 * True if medication does not require a prescription
		 * Set to true if the medication can be obtained without an order from a prescriber.
		 */
		isOverTheCounter?: boolean;

		/**
		 * Extension for isOverTheCounter
		 **/
		_isOverTheCounter?: Element;

		/**
		 * Manufacturer of the item
		 * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
		 */
		manufacturer?: Reference;

		/**
		 * powder | tablets | capsule +
		 * Describes the form of the item.  Powder; tablets; capsule.
		 * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
		 */
		form?: CodeableConcept;

		/**
		 * Active or inactive ingredient
		 * Identifies a particular constituent of interest in the product.
		 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
		 */
		ingredient?: MedicationIngredient[];

		/**
		 * Details about packaged medications
		 * Information that only applies to packages (not products).
		 */
		package?: MedicationPackage;

		/**
		 * Picture of the medication
		 * Photo(s) or graphic representation(s) of the medication.
		 */
		image?: Attachment[];
	}

	/**
	 * Who administered substance
	 * The individual who was responsible for giving the medication to the patient.
	 */
	interface MedicationAdministrationPerformer extends BackboneElement {

		/**
		 * Individual who was performing
		 * The device, practitioner, etc. who performed the action.
		 */
		actor: Reference;

		/**
		 * Organization organization was acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Details of how medication was taken
	 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
	 */
	interface MedicationAdministrationDosage extends BackboneElement {

		/**
		 * Free text dosage instructions e.g. SIG
		 * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.

The dosage instructions should reflect the dosage of the medication that was administered.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * Body site administered to
		 * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
		 * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
		 */
		site?: CodeableConcept;

		/**
		 * Path of substance into body
		 * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
		 */
		route?: CodeableConcept;

		/**
		 * How drug was administered
		 * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
		 * One of the reasons this attribute is not used often, is that the method is often pre-coordinated with the route and/or form of administration.  This means the codes used in route or form may pre-coordinate the method in the route code or the form code.  The implementation decision about what coding system to use for route or form code will determine how frequently the method code will be populated e.g. if route or form code pre-coordinate method code, then this attribute will not be populated often; if there is no pre-coordination then method code may  be used frequently.
		 */
		method?: CodeableConcept;

		/**
		 * Amount of medication per dose
		 * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
		 * If the administration is not instantaneous (rate is present), this can be specified to convey the total amount administered over period of time of a single administration.
		 */
		dose?: SimpleQuantity;

		/**
		 * Dose quantity per unit of time
		 * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
		 * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
		 */
		rateRatio?: Ratio;

		/**
		 * Dose quantity per unit of time
		 * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
		 * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
		 */
		rateQuantity?: SimpleQuantity;
	}

	/**
	 * Administration of medication to a patient
	 * Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
	 * The WG will be updating the MedicationAdministration resource  to adjust each affected resource to align with the workflow pattern (see workflow.html).
	 */
	interface MedicationAdministration extends DomainResource {

		/**
		 * External identifier
		 * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
		 */
		identifier?: Identifier[];

		/**
		 * Instantiates protocol or definition
		 * A protocol, guideline, orderset or other definition that was adhered to in whole or in part by this event.
		 */
		definition?: Reference[];

		/**
		 * Part of referenced event
		 * A larger event of which this particular event is a component or step.
		 */
		partOf?: Reference[];

		/**
		 * in-progress | on-hold | completed | entered-in-error | stopped | unknown
		 * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: MedicationAdministrationMedicationAdministrationStatus;

		/**
		 * Type of medication usage
		 * Indicates the type of medication administration and where the medication is expected to be consumed or administered.
		 */
		category?: CodeableConcept;

		/**
		 * What was administered
		 * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
		 */
		medicationCodeableConcept: CodeableConcept;

		/**
		 * What was administered
		 * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
		 */
		medicationReference: Reference;

		/**
		 * Who received medication
		 * The person or animal or group receiving the medication.
		 */
		subject: Reference;

		/**
		 * Encounter or Episode of Care administered as part of
		 * The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.
		 */
		context?: Reference;

		/**
		 * Additional information to support administration
		 * Additional information (for example, patient height and weight) that supports the administration of the medication.
		 */
		supportingInformation?: Reference[];

		/**
		 * Start and end time of administration
		 * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
		 */
		effectiveDateTime: dateTime;

		/**
		 * Extension for effectiveDateTime
		 **/
		_effectiveDateTime?: Element;

		/**
		 * Start and end time of administration
		 * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
		 */
		effectivePeriod: Period;

		/**
		 * Who administered substance
		 * The individual who was responsible for giving the medication to the patient.
		 */
		performer?: MedicationAdministrationPerformer[];

		/**
		 * True if medication not administered
		 * Set this to true if the record is saying that the medication was NOT administered.
		 * This element is labeled as a modifier because it indicates that a administration didn't happen.
		 */
		notGiven?: boolean;

		/**
		 * Extension for notGiven
		 **/
		_notGiven?: Element;

		/**
		 * Reason administration not performed
		 * A code indicating why the administration was not performed.
		 */
		reasonNotGiven?: CodeableConcept[];

		/**
		 * Reason administration performed
		 * A code indicating why the medication was given.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Condition or Observation that supports why the medication was administered
		 * Condition or observation that supports why the medication was administered.
		 * This is a reference to a condition that is the reason for the medication request.  If only a code exists, use reasonCode.
		 */
		reasonReference?: Reference[];

		/**
		 * Request administration performed against
		 * The original request, instruction or authority to perform the administration.
		 */
		prescription?: Reference;

		/**
		 * Device used to administer
		 * The device used in administering the medication to the patient.  For example, a particular infusion pump.
		 */
		device?: Reference[];

		/**
		 * Information about the administration
		 * Extra information about the medication administration that is not conveyed by the other attributes.
		 */
		note?: Annotation[];

		/**
		 * Details of how medication was taken
		 * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
		 */
		dosage?: MedicationAdministrationDosage;

		/**
		 * A list of events of interest in the lifecycle
		 * A summary of the events of interest that have occurred, such as when the administration was verified.
		 * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.
		 */
		eventHistory?: Reference[];
	}

	/**
	 * Who performed event
	 * Indicates who or what performed the event.  It should be assumed that the performer is the dispenser of the medication.
	 * The performer will be reviewed as part of STU4.
	 */
	interface MedicationDispensePerformer extends BackboneElement {

		/**
		 * Individual who was performing
		 * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
		 */
		actor: Reference;

		/**
		 * Organization organization was acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Whether a substitution was performed on the dispense
	 * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
	 */
	interface MedicationDispenseSubstitution extends BackboneElement {

		/**
		 * Whether a substitution was or was not performed on the dispense
		 * True if the dispenser dispensed a different drug or product from what was prescribed.
		 */
		wasSubstituted: boolean;

		/**
		 * Extension for wasSubstituted
		 **/
		_wasSubstituted?: Element;

		/**
		 * Code signifying whether a different drug was dispensed from what was prescribed
		 * A code signifying whether a different drug was dispensed from what was prescribed.
		 */
		type?: CodeableConcept;

		/**
		 * Why was substitution made
		 * Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
		 */
		reason?: CodeableConcept[];

		/**
		 * Who is responsible for the substitution
		 * The person or organization that has primary responsibility for the substitution.
		 */
		responsibleParty?: Reference[];
	}

	/**
	 * Dispensing a medication to a named patient
	 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
	 * The WG will be updating the MedicationDispense resource  to adjust each affected resource to align with the workflow pattern (see workflow.html).
	 */
	interface MedicationDispense extends DomainResource {

		/**
		 * External identifier
		 * Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
		 */
		identifier?: Identifier[];

		/**
		 * Event that dispense is part of
		 * The procedure that the dispense is done because of.
		 */
		partOf?: Reference[];

		/**
		 * preparation | in-progress | on-hold | completed | entered-in-error | stopped
		 * A code specifying the state of the set of dispense events.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: MedicationDispenseMedicationDispenseStatus;

		/**
		 * Type of medication dispense
		 * Indicates type of medication dispense and where the medication is expected to be consumed or administered.
		 */
		category?: CodeableConcept;

		/**
		 * What medication was supplied
		 * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
		 */
		medicationCodeableConcept: CodeableConcept;

		/**
		 * What medication was supplied
		 * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
		 */
		medicationReference: Reference;

		/**
		 * Who the dispense is for
		 * A link to a resource representing the person or the group to whom the medication will be given.
		 * SubstanceAdministration->subject->Patient.
		 */
		subject?: Reference;

		/**
		 * Encounter / Episode associated with event
		 * The encounter or episode of care that establishes the context for this event.
		 */
		context?: Reference;

		/**
		 * Information that supports the dispensing of the medication
		 * Additional information that supports the medication being dispensed.
		 */
		supportingInformation?: Reference[];

		/**
		 * Who performed event
		 * Indicates who or what performed the event.  It should be assumed that the performer is the dispenser of the medication.
		 * The performer will be reviewed as part of STU4.
		 */
		performer?: MedicationDispensePerformer[];

		/**
		 * Medication order that authorizes the dispense
		 * Indicates the medication order that is being dispensed against.
		 * Maps to basedOn in Event logical model.
		 */
		authorizingPrescription?: Reference[];

		/**
		 * Trial fill, partial fill, emergency fill, etc.
		 * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
		 */
		type?: CodeableConcept;

		/**
		 * Amount dispensed
		 * The amount of medication that has been dispensed. Includes unit of measure.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Amount of medication expressed as a timing amount
		 * The amount of medication expressed as a timing amount.
		 */
		daysSupply?: SimpleQuantity;

		/**
		 * When product was packaged and reviewed
		 * The time when the dispensed product was packaged and reviewed.
		 */
		whenPrepared?: dateTime;

		/**
		 * Extension for whenPrepared
		 **/
		_whenPrepared?: Element;

		/**
		 * When product was given out
		 * The time the dispensed product was provided to the patient or their representative.
		 */
		whenHandedOver?: dateTime;

		/**
		 * Extension for whenHandedOver
		 **/
		_whenHandedOver?: Element;

		/**
		 * Where the medication was sent
		 * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
		 */
		destination?: Reference;

		/**
		 * Who collected the medication
		 * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
		 */
		receiver?: Reference[];

		/**
		 * Information about the dispense
		 * Extra information about the dispense that could not be conveyed in the other attributes.
		 */
		note?: Annotation[];

		/**
		 * How the medication is to be used by the patient or administered by the caregiver
		 * Indicates how the medication is to be used by the patient.
		 * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
		 */
		dosageInstruction?: Dosage[];

		/**
		 * Whether a substitution was performed on the dispense
		 * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
		 */
		substitution?: MedicationDispenseSubstitution;

		/**
		 * Clinical issue with action
		 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
		 */
		detectedIssue?: Reference[];

		/**
		 * Whether the dispense was or was not performed
		 * True if the dispense was not performed for some reason.
		 */
		notDone?: boolean;

		/**
		 * Extension for notDone
		 **/
		_notDone?: Element;

		/**
		 * Why a dispense was not performed
		 * Indicates the reason why a dispense was not performed.
		 */
		notDoneReasonCodeableConcept?: CodeableConcept;

		/**
		 * Why a dispense was not performed
		 * Indicates the reason why a dispense was not performed.
		 */
		notDoneReasonReference?: Reference;

		/**
		 * A list of releveant lifecycle events
		 * A summary of the events of interest that have occurred, such as when the dispense was verified.
		 * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
		 */
		eventHistory?: Reference[];
	}

	/**
	 * Who/What requested the Request
	 * The individual, organization or device that initiated the request and has responsibility for its activation.
	 */
	interface MedicationRequestRequester extends BackboneElement {

		/**
		 * Who ordered the initial medication(s)
		 * The healthcare professional responsible for authorizing the initial prescription.
		 * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.
		 */
		agent: Reference;

		/**
		 * Organization agent is acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Medication supply authorization
	 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
	 */
	interface MedicationRequestDispenseRequest extends BackboneElement {

		/**
		 * Time period supply is authorized for
		 * This indicates the validity period of a prescription (stale dating the Prescription).
		 * It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
		 */
		validityPeriod?: Period;

		/**
		 * Number of refills authorized
		 * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
		 * If displaying "number of authorized fills", add 1 to this number.
		 */
		numberOfRepeatsAllowed?: positiveInt;

		/**
		 * Extension for numberOfRepeatsAllowed
		 **/
		_numberOfRepeatsAllowed?: Element;

		/**
		 * Amount of medication to supply per dispense
		 * The amount that is to be dispensed for one fill.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Number of days supply per dispense
		 * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
		 * In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage) When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
		 */
		expectedSupplyDuration?: Duration;

		/**
		 * Intended dispenser
		 * Indicates the intended dispensing Organization specified by the prescriber.
		 */
		performer?: Reference;
	}

	/**
	 * Any restrictions on medication substitution
	 * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
	 */
	interface MedicationRequestSubstitution extends BackboneElement {

		/**
		 * Whether substitution is allowed or not
		 * True if the prescriber allows a different drug to be dispensed from what was prescribed.
		 * This element is labeled as a modifer because whether substitution is allow or not cannot be ignored.
		 */
		allowed: boolean;

		/**
		 * Extension for allowed
		 **/
		_allowed?: Element;

		/**
		 * Why should (not) substitution be made
		 * Indicates the reason for the substitution, or why substitution must or must not be performed.
		 */
		reason?: CodeableConcept;
	}

	/**
	 * Ordering of medication for patient or group
	 * An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
	 */
	interface MedicationRequest extends DomainResource {

		/**
		 * External ids for this request
		 * This records identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. For example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records must be tracked through an entire system.
		 */
		identifier?: Identifier[];

		/**
		 * Protocol or definition
		 * Protocol or definition followed by this request.
		 */
		definition?: Reference[];

		/**
		 * What request fulfills
		 * A plan or request that is fulfilled in whole or in part by this medication request.
		 */
		basedOn?: Reference[];

		/**
		 * Composite request this is part of
		 * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
		 */
		groupIdentifier?: Identifier;

		/**
		 * active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown
		 * A code specifying the current state of the order.  Generally this will be active or completed state.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: MedicationRequestMedicationRequestStatus;

		/**
		 * proposal | plan | order | instance-order
		 * Whether the request is a proposal, plan, or an original order.
		 * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.

An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.

This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
		 */
		intent: MedicationRequestMedicationRequestIntent;

		/**
		 * Type of medication usage
		 * Indicates the type of medication order and where the medication is expected to be consumed or administered.
		 */
		category?: CodeableConcept;

		/**
		 * routine | urgent | stat | asap
		 * Indicates how quickly the Medication Request should be addressed with respect to other requests.
		 */
		priority?: MedicationRequestMedicationRequestPriority;

		/**
		 * Medication to be taken
		 * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource. .
		 */
		medicationCodeableConcept: CodeableConcept;

		/**
		 * Medication to be taken
		 * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource. .
		 */
		medicationReference: Reference;

		/**
		 * Who or group medication request is for
		 * A link to a resource representing the person or set of individuals to whom the medication will be given.
		 * The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
		 */
		subject: Reference;

		/**
		 * Created during encounter/admission/stay
		 * A link to an encounter, or episode of care, that identifies the particular occurrence or set occurrences of contact between patient and health care provider.
		 * SubstanceAdministration->component->EncounterEvent.
		 */
		context?: Reference;

		/**
		 * Information to support ordering of the medication
		 * Include additional information (for example, patient height and weight) that supports the ordering of the medication.
		 */
		supportingInformation?: Reference[];

		/**
		 * When request was initially authored
		 * The date (and perhaps time) when the prescription was initially written or authored on.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Who/What requested the Request
		 * The individual, organization or device that initiated the request and has responsibility for its activation.
		 */
		requester?: MedicationRequestRequester;

		/**
		 * Person who entered the request
		 * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
		 */
		recorder?: Reference;

		/**
		 * Reason or indication for writing the prescription
		 * The reason or the indication for ordering the medication.
		 * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Condition or Observation that supports why the prescription is being written
		 * Condition or observation that supports why the medication was ordered.
		 * This is a reference to a condition or observation that is the reason for the medication order.  If only a code exists, use reasonCode.
		 */
		reasonReference?: Reference[];

		/**
		 * Information about the prescription
		 * Extra information about the prescription that could not be conveyed by the other attributes.
		 */
		note?: Annotation[];

		/**
		 * How the medication should be taken
		 * Indicates how the medication is to be used by the patient.
		 * There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed.
		 */
		dosageInstruction?: Dosage[];

		/**
		 * Medication supply authorization
		 * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
		 */
		dispenseRequest?: MedicationRequestDispenseRequest;

		/**
		 * Any restrictions on medication substitution
		 * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
		 */
		substitution?: MedicationRequestSubstitution;

		/**
		 * An order/prescription that is being replaced
		 * A link to a resource representing an earlier order related order or prescription.
		 */
		priorPrescription?: Reference;

		/**
		 * Clinical Issue with action
		 * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
		 */
		detectedIssue?: Reference[];

		/**
		 * A list of events of interest in the lifecycle
		 * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
		 * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
		 */
		eventHistory?: Reference[];
	}

	/**
	 * Record of medication being taken by a patient
	 * A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains 

The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
	 * When interpreting a medicationStatement, the value of the status and NotTaken needed to be considered:
MedicationStatement.status + MedicationStatement.wasNotTaken
Status=Active + NotTaken=T = Not currently taking
Status=Completed + NotTaken=T = Not taken in the past
Status=Intended + NotTaken=T = No intention of taking
Status=Active + NotTaken=F = Taking, but not as prescribed
Status=Active + NotTaken=F = Taking
Status=Intended +NotTaken= F = Will be taking (not started)
Status=Completed + NotTaken=F = Taken in past
Status=In Error + NotTaken=N/A = In Error.
	 */
	interface MedicationStatement extends DomainResource {

		/**
		 * External identifier
		 * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
		 */
		identifier?: Identifier[];

		/**
		 * Fulfils plan, proposal or order
		 * A plan, proposal or order that is fulfilled in whole or in part by this event.
		 */
		basedOn?: Reference[];

		/**
		 * Part of referenced event
		 * A larger event of which this particular event is a component or step.
		 */
		partOf?: Reference[];

		/**
		 * Encounter / Episode associated with MedicationStatement
		 * The encounter or episode of care that establishes the context for this MedicationStatement.
		 */
		context?: Reference;

		/**
		 * active | completed | entered-in-error | intended | stopped | on-hold
		 * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
		 * MedicationStatement is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for MedicationStatement.status contains codes that assert the status of the use of the medication by the patient (for example, stopped or on hold) as well as codes that assert the status of the medication statement itself (for example, entered in error).

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: MedicationStatementMedicationStatementStatus;

		/**
		 * Type of medication usage
		 * Indicates where type of medication statement and where the medication is expected to be consumed or administered.
		 */
		category?: CodeableConcept;

		/**
		 * What medication was taken
		 * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
		 */
		medicationCodeableConcept: CodeableConcept;

		/**
		 * What medication was taken
		 * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
		 * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
		 */
		medicationReference: Reference;

		/**
		 * The date/time or interval when the medication was taken
		 * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
		 * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken at the time the statement is recorded, the "end" date will be omitted.
		 */
		effectiveDateTime?: dateTime;

		/**
		 * Extension for effectiveDateTime
		 **/
		_effectiveDateTime?: Element;

		/**
		 * The date/time or interval when the medication was taken
		 * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
		 * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken at the time the statement is recorded, the "end" date will be omitted.
		 */
		effectivePeriod?: Period;

		/**
		 * When the statement was asserted?
		 * The date when the medication statement was asserted by the information source.
		 */
		dateAsserted?: dateTime;

		/**
		 * Extension for dateAsserted
		 **/
		_dateAsserted?: Element;

		/**
		 * Person or organization that provided the information about the taking of this medication
		 * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g Claim or MedicationRequest.
		 */
		informationSource?: Reference;

		/**
		 * Who is/was taking  the medication
		 * The person, animal or group who is/was taking the medication.
		 */
		subject: Reference;

		/**
		 * Additional supporting information
		 * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
		 * Likely references would be to MedicationRequest, MedicationDispense, Claim, Observation or QuestionnaireAnswers.  The most common use cases for deriving a MedicationStatement comes from creating a MedicationStatement from a MedicationRequest or from a lab observation or a claim.  it should be noted that the amount of information that is available varies from the type resource that you derive the MedicationStatement from.
		 */
		derivedFrom?: Reference[];

		/**
		 * y | n | unk | na
		 * Indicator of the certainty of whether the medication was taken by the patient.
		 * This element is labeled as a modifier because it indicates that the medication was not taken.
		 */
		taken: MedicationStatementMedicationStatementTaken;

		/**
		 * True if asserting medication was not given
		 * A code indicating why the medication was not taken.
		 */
		reasonNotTaken?: CodeableConcept[];

		/**
		 * Reason for why the medication is being/was taken
		 * A reason for why the medication is being/was taken.
		 * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonForUseReference.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Condition or observation that supports why the medication is being/was taken
		 * Condition or observation that supports why the medication is being/was taken.
		 * This is a reference to a condition that is the reason why the medication is being/was taken.  If only a code exists, use reasonForUseCode.
		 */
		reasonReference?: Reference[];

		/**
		 * Further information about the statement
		 * Provides extra information about the medication statement that is not conveyed by the other attributes.
		 */
		note?: Annotation[];

		/**
		 * Details of how medication is/was taken or should be taken
		 * Indicates how the medication is/was or should be taken by the patient.
		 * The dates included in the dosage on a Medication Statement reflect the dates for a given dose.  For example, "from November 1, 2016 to November 3, 2016, take one tablet daily and from November 4, 2016 to November 7, 2016, take two tablets daily."  It is expected that this specificity may only be populated where the patient brings in their labeled container or where the Medication Statement is derived from a MedicationRequest.
		 */
		dosage?: Dosage[];
	}

	/**
	 * Resource(s) that are the subject of the event
	 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
	 */
	interface MessageDefinitionFocus extends BackboneElement {

		/**
		 * Type of resource
		 * The kind of resource that must be the focus for this message.
		 * Multiple focuses addressing different resources may occasionally occur.  E.g. to link or unlink a resource from a particular account or encounter, etc.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Profile that must be adhered to by focus
		 * A profile that reflects constraints for the focal resource (and potentially for related resources).
		 * This should be present for most message definitions.  However, if the message focus is only a single resource and there is no need to include referenced resources or otherwise enforce the presence of particular elements, it can be omitted.
		 */
		profile?: Reference;

		/**
		 * Minimum number of focuses of this type
		 * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
		 */
		min?: unsignedInt;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Maximum number of focuses of this type
		 * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
		 */
		max?: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;
	}

	/**
	 * Responses to this message
	 * Indicates what types of messages may be sent as an application-level response to this message.
	 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
	 */
	interface MessageDefinitionAllowedResponse extends BackboneElement {

		/**
		 * Reference to allowed message definition response
		 * A reference to the message definition that must be adhered to by this supported response.
		 */
		message: Reference;

		/**
		 * When should this response be used
		 * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
		 */
		situation?: markdown;

		/**
		 * Extension for situation
		 **/
		_situation?: Element;
	}

	/**
	 * A resource that defines a type of message that can be exchanged between systems
	 * Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
	 * This would be a MIF-level artifact.
	 */
	interface MessageDefinition extends DomainResource {

		/**
		 * Logical URI to reference this message definition (globally unique)
		 * An absolute URI that is used to identify this message definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this message definition is (or will be) published. The URL SHOULD include the major version of the message definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the message definition
		 * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this message definition outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier;

		/**
		 * Business version of the message definition
		 * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different message definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the message definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this message definition (computer friendly)
		 * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this message definition (human friendly)
		 * A short, descriptive, user-friendly title for the message definition.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this message definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of message definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired message definition without due consideration.
		 */
		status: MessageDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of message definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental message definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the message definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the message definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the message definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the message definition is the organization or individual primarily responsible for the maintenance and upkeep of the message definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the message definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the message definition
		 * A free text natural language description of the message definition from a consumer's perspective.
		 * This description can be used to capture details such as why the message definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the message definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate message definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for message definition (if applicable)
		 * A legal or geographic region in which the message definition is intended to be used.
		 * It may be possible for the message definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this message definition is defined
		 * Explaination of why this message definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the message definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this message definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Definition this one is based on
		 * The MessageDefinition that is the basis for the contents of this resource.
		 */
		base?: Reference;

		/**
		 * Protocol/workflow this is part of
		 * Identifies a protocol or workflow that this MessageDefinition represents a step in.
		 */
		parent?: Reference[];

		/**
		 * Takes the place of
		 * A MessageDefinition that is superseded by this definition.
		 */
		replaces?: Reference[];

		/**
		 * Event type
		 * A coded identifier of a supported messaging event.
		 */
		event: Coding;

		/**
		 * Consequence | Currency | Notification
		 * The impact of the content of the message.
		 */
		category?: MessageDefinitionMessageSignificanceCategory;

		/**
		 * Resource(s) that are the subject of the event
		 * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
		 */
		focus?: MessageDefinitionFocus[];

		/**
		 * Is a response required?
		 * Indicates whether a response is required for this message.
		 */
		responseRequired?: boolean;

		/**
		 * Extension for responseRequired
		 **/
		_responseRequired?: Element;

		/**
		 * Responses to this message
		 * Indicates what types of messages may be sent as an application-level response to this message.
		 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
		 */
		allowedResponse?: MessageDefinitionAllowedResponse[];
	}

	/**
	 * Message destination application(s)
	 * The destination application which the message is intended for.
	 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
	 */
	interface MessageHeaderDestination extends BackboneElement {

		/**
		 * Name of system
		 * Human-readable name for the target system.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Particular delivery destination within the destination
		 * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
		 */
		target?: Reference;

		/**
		 * Actual destination address or id
		 * Indicates where the message should be routed to.
		 * The id may be a non-resolvable URI for systems that do not use standard network-based addresses.
		 */
		endpoint: uri;

		/**
		 * Extension for endpoint
		 **/
		_endpoint?: Element;
	}

	/**
	 * Message source application
	 * The source application from which this message originated.
	 */
	interface MessageHeaderSource extends BackboneElement {

		/**
		 * Name of system
		 * Human-readable name for the source system.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name of software running the system
		 * May include configuration or other information useful in debugging.
		 */
		software?: string;

		/**
		 * Extension for software
		 **/
		_software?: Element;

		/**
		 * Version of software running
		 * Can convey versions of multiple systems in situations where a message passes through multiple hands.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Human contact for problems
		 * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
		 */
		contact?: ContactPoint;

		/**
		 * Actual message source address or id
		 * Identifies the routing target to send acknowledgements to.
		 * The id may be a non-resolvable URI for systems that do not use standard network-based addresses.
		 */
		endpoint: uri;

		/**
		 * Extension for endpoint
		 **/
		_endpoint?: Element;
	}

	/**
	 * If this is a reply to prior message
	 * Information about the message that this message is a response to.  Only present if this message is a response.
	 */
	interface MessageHeaderResponse extends BackboneElement {

		/**
		 * Id of original message
		 * The MessageHeader.id of the message to which this message is a response.
		 */
		identifier: id;

		/**
		 * Extension for identifier
		 **/
		_identifier?: Element;

		/**
		 * ok | transient-error | fatal-error
		 * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
		 * This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
		 */
		code: MessageHeaderResponseType;

		/**
		 * Specific list of hints/warnings/errors
		 * Full details of any issues found in the message.
		 * This SHALL be contained in the bundle. If any of the issues are errors, the response code SHALL be an error.
		 */
		details?: Reference;
	}

	/**
	 * A resource that describes a message that is exchanged between systems
	 * The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
	 */
	interface MessageHeader extends DomainResource {

		/**
		 * Code for the event this message represents
		 * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://hl7.org/fhir/message-events".
		 */
		event: Coding;

		/**
		 * Message destination application(s)
		 * The destination application which the message is intended for.
		 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
		 */
		destination?: MessageHeaderDestination[];

		/**
		 * Intended "real-world" recipient for the data
		 * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
		 */
		receiver?: Reference;

		/**
		 * Real world sender of the message
		 * Identifies the sending system to allow the use of a trust relationship.
		 * Use case is for where a (trusted) sending system is responsible for multiple organizations, and therefore cannot differentiate based on source endpoint / authentication alone.
		 */
		sender?: Reference;

		/**
		 * Time that the message was sent
		 * The time that the message was sent.
		 */
		timestamp: instant;

		/**
		 * Extension for timestamp
		 **/
		_timestamp?: Element;

		/**
		 * The source of the data entry
		 * The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
		 * Usually only for the request, but can be used in a response.
		 */
		enterer?: Reference;

		/**
		 * The source of the decision
		 * The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
		 * Usually only for the request, but can be used in a response.
		 */
		author?: Reference;

		/**
		 * Message source application
		 * The source application from which this message originated.
		 */
		source: MessageHeaderSource;

		/**
		 * Final responsibility for event
		 * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
		 * Usually only for the request, but can be used in a response.
		 */
		responsible?: Reference;

		/**
		 * Cause of event
		 * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
		 */
		reason?: CodeableConcept;

		/**
		 * If this is a reply to prior message
		 * Information about the message that this message is a response to.  Only present if this message is a response.
		 */
		response?: MessageHeaderResponse;

		/**
		 * The actual content of the message
		 * The actual data of the message - a reference to the root/focus class of the event.
		 * The data is defined where the transaction type is defined. The transaction data is always included in the bundle that is the full message.  Only the root resource is specified.  The resources it references should be contained in the bundle but are not also listed here.  Multiple repetitions are allowed to cater for merges and other situations with multiple focal targets.
		 */
		focus?: Reference[];
	}

	/**
	 * Unique identifiers used for system
	 * Indicates how the system may be identified when referenced in electronic exchange.
	 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
	 */
	interface NamingSystemUniqueId extends BackboneElement {

		/**
		 * oid | uuid | uri | other
		 * Identifies the unique identifier scheme used for this particular identifier.
		 * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.
		 */
		type: NamingSystemNamingSystemIdentifierType;

		/**
		 * The unique identifier
		 * The string that should be sent over the wire to identify the code system or identifier system.
		 * If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;

		/**
		 * Is this the id that should be used for this type
		 * Indicates whether this identifier is the "preferred" identifier of this type.
		 */
		preferred?: boolean;

		/**
		 * Extension for preferred
		 **/
		_preferred?: Element;

		/**
		 * Notes about identifier usage
		 * Notes about the past or intended usage of this identifier.
		 * e.g. "must be used in Germany" or "was initially published in error with this value".
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * When is identifier valid?
		 * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
		 * Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).
		 */
		period?: Period;
	}

	/**
	 * System of unique identification
	 * A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
	 */
	interface NamingSystem extends DomainResource {

		/**
		 * Name for this naming system (computer friendly)
		 * A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly. The"symbolic name" for an OID would be captured as an extension.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this naming system. Enables tracking the life-cycle of the content.
		 * Allows filtering of naming systems that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired naming system without due consideration.
		 */
		status: NamingSystemPublicationStatus;

		/**
		 * codesystem | identifier | root
		 * Indicates the purpose for the naming system - what kinds of things does it make unique?
		 */
		kind: NamingSystemNamingSystemType;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the naming system was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the naming system.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Who maintains system namespace?
		 * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
		 * This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
		 */
		responsible?: string;

		/**
		 * Extension for responsible
		 **/
		_responsible?: Element;

		/**
		 * e.g. driver,  provider,  patient, bank etc.
		 * Categorizes a naming system for easier search by grouping related naming systems.
		 * This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
		 */
		type?: CodeableConcept;

		/**
		 * Natural language description of the naming system
		 * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
		 * This description can be used to capture details such as why the naming system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate naming system instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for naming system (if applicable)
		 * A legal or geographic region in which the naming system is intended to be used.
		 * It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * How/where is it used
		 * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
		 */
		usage?: string;

		/**
		 * Extension for usage
		 **/
		_usage?: Element;

		/**
		 * Unique identifiers used for system
		 * Indicates how the system may be identified when referenced in electronic exchange.
		 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
		 */
		uniqueId: NamingSystemUniqueId[];

		/**
		 * Use this instead
		 * For naming systems that are retired, indicates the naming system that should be used in their place (if any).
		 */
		replacedBy?: Reference;
	}

	/**
	 * Required  nutrient modifications
	 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
	 */
	interface NutritionOrderOralDietNutrient extends BackboneElement {

		/**
		 * Type of nutrient that is being modified
		 * The nutrient that is being modified such as carbohydrate or sodium.
		 */
		modifier?: CodeableConcept;

		/**
		 * Quantity of the specified nutrient
		 * The quantity of the specified nutrient to include in diet.
		 */
		amount?: SimpleQuantity;
	}

	/**
	 * Required  texture modifications
	 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
	 */
	interface NutritionOrderOralDietTexture extends BackboneElement {

		/**
		 * Code to indicate how to alter the texture of the foods, e.g. pureed
		 * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
		 * Coupled with the foodType (Meat).
		 */
		modifier?: CodeableConcept;

		/**
		 * Concepts that are used to identify an entity that is ingested for nutritional purposes
		 * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
		 * Coupled with the textureModifier; could be (All Foods).
		 */
		foodType?: CodeableConcept;
	}

	/**
	 * Oral diet components
	 * Diet given orally in contrast to enteral (tube) feeding.
	 */
	interface NutritionOrderOralDiet extends BackboneElement {

		/**
		 * Type of oral diet or diet restrictions that describe what can be consumed orally
		 * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
		 */
		type?: CodeableConcept[];

		/**
		 * Scheduled frequency of diet
		 * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
		 */
		schedule?: Timing[];

		/**
		 * Required  nutrient modifications
		 * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
		 */
		nutrient?: NutritionOrderOralDietNutrient[];

		/**
		 * Required  texture modifications
		 * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
		 */
		texture?: NutritionOrderOralDietTexture[];

		/**
		 * The required consistency of fluids and liquids provided to the patient
		 * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
		 */
		fluidConsistencyType?: CodeableConcept[];

		/**
		 * Instructions or additional information about the oral diet
		 * Free text or additional instructions or information pertaining to the oral diet.
		 * Free text dosage instructions can be used for cases where the instructions are too complex to code.
		 */
		instruction?: string;

		/**
		 * Extension for instruction
		 **/
		_instruction?: Element;
	}

	/**
	 * Supplement components
	 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
	 */
	interface NutritionOrderSupplement extends BackboneElement {

		/**
		 * Type of supplement product requested
		 * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
		 */
		type?: CodeableConcept;

		/**
		 * Product or brand name of the nutritional supplement
		 * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
		 */
		productName?: string;

		/**
		 * Extension for productName
		 **/
		_productName?: Element;

		/**
		 * Scheduled frequency of supplement
		 * The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
		 */
		schedule?: Timing[];

		/**
		 * Amount of the nutritional supplement
		 * The amount of the nutritional supplement to be given.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Instructions or additional information about the oral supplement
		 * Free text or additional instructions or information pertaining to the oral supplement.
		 * Free text dosage instructions can be used for cases where the instructions are too complex to code.
		 */
		instruction?: string;

		/**
		 * Extension for instruction
		 **/
		_instruction?: Element;
	}

	/**
	 * Formula feeding instruction as structured data
	 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
	 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
	 */
	interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {

		/**
		 * Scheduled frequency of enteral feeding
		 * The time period and frequency at which the enteral formula should be delivered to the patient.
		 */
		schedule?: Timing;

		/**
		 * The volume of formula to provide
		 * The volume of formula to provide to the patient per the specified administration schedule.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Speed with which the formula is provided per period of time
		 * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
		 * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
		 */
		rateQuantity?: SimpleQuantity;

		/**
		 * Speed with which the formula is provided per period of time
		 * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
		 * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
		 */
		rateRatio?: Ratio;
	}

	/**
	 * Enteral formula components
	 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
	 */
	interface NutritionOrderEnteralFormula extends BackboneElement {

		/**
		 * Type of enteral or infant formula
		 * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
		 */
		baseFormulaType?: CodeableConcept;

		/**
		 * Product or brand name of the enteral or infant formula
		 * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
		 */
		baseFormulaProductName?: string;

		/**
		 * Extension for baseFormulaProductName
		 **/
		_baseFormulaProductName?: Element;

		/**
		 * Type of modular component to add to the feeding
		 * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
		 */
		additiveType?: CodeableConcept;

		/**
		 * Product or brand name of the modular additive
		 * The product or brand name of the type of modular component to be added to the formula.
		 */
		additiveProductName?: string;

		/**
		 * Extension for additiveProductName
		 **/
		_additiveProductName?: Element;

		/**
		 * Amount of energy per specified volume that is required
		 * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
		 */
		caloricDensity?: SimpleQuantity;

		/**
		 * How the formula should enter the patient's gastrointestinal tract
		 * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
		 */
		routeofAdministration?: CodeableConcept;

		/**
		 * Formula feeding instruction as structured data
		 * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
		 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
		 */
		administration?: NutritionOrderEnteralFormulaAdministration[];

		/**
		 * Upper limit on formula volume per unit of time
		 * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
		 */
		maxVolumeToDeliver?: SimpleQuantity;

		/**
		 * Formula feeding instructions expressed as text
		 * Free text formula administration, feeding instructions or additional instructions or information.
		 * Free text dosage instructions can be used for cases where the instructions are too complex to code.
		 */
		administrationInstruction?: string;

		/**
		 * Extension for administrationInstruction
		 **/
		_administrationInstruction?: Element;
	}

	/**
	 * Diet, formula or nutritional supplement request
	 * A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
	 * Referenced by an Order Request (workflow).
	 */
	interface NutritionOrder extends DomainResource {

		/**
		 * Identifiers assigned to this order
		 * Identifiers assigned to this order by the order sender or by the order receiver.
		 * The Identifier.type element can be to indicate filler vs. placer if needed.  This is explained in further detail [here](procedurerequest.html#notes).
		 */
		identifier?: Identifier[];

		/**
		 * proposed | draft | planned | requested | active | on-hold | completed | cancelled | entered-in-error
		 * The workflow status of the nutrition order/request.
		 * Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: NutritionOrderNutritionOrderStatus;

		/**
		 * The person who requires the diet, formula or nutritional supplement
		 * The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
		 */
		patient: Reference;

		/**
		 * The encounter associated with this nutrition order
		 * An encounter that provides additional information about the healthcare context in which this request is made.
		 */
		encounter?: Reference;

		/**
		 * Date and time the nutrition order was requested
		 * The date and time that this nutrition order was requested.
		 */
		dateTime: dateTime;

		/**
		 * Extension for dateTime
		 **/
		_dateTime?: Element;

		/**
		 * Who ordered the diet, formula or nutritional supplement
		 * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
		 */
		orderer?: Reference;

		/**
		 * List of the patient's food and nutrition-related allergies and intolerances
		 * A link to a record of allergies or intolerances  which should be included in the nutrition order.
		 * Information on a patient's food allergies and intolerances to inform healthcare personnel about the type of foods that the patient shouldn't receive or consume.
		 */
		allergyIntolerance?: Reference[];

		/**
		 * Order-specific modifier about the type of food that should be given
		 * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
		 * Information on a patient's food preferences that inform healthcare personnel about the food that the patient should receive or consume.
		 */
		foodPreferenceModifier?: CodeableConcept[];

		/**
		 * Order-specific modifier about the type of food that should not be given
		 * This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
		 * Information on a patient's food allergies, intolerances and preferences to inform healthcare personnel about the type  of foods that the patient shouldn't receive or consume.
		 */
		excludeFoodModifier?: CodeableConcept[];

		/**
		 * Oral diet components
		 * Diet given orally in contrast to enteral (tube) feeding.
		 */
		oralDiet?: NutritionOrderOralDiet;

		/**
		 * Supplement components
		 * Oral nutritional products given in order to add further nutritional value to the patient's diet.
		 */
		supplement?: NutritionOrderSupplement[];

		/**
		 * Enteral formula components
		 * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
		 */
		enteralFormula?: NutritionOrderEnteralFormula;
	}

	/**
	 * Provides guide for interpretation
	 * Guidance on how to interpret the value by comparison to a normal or recommended range.
	 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
	 */
	interface ObservationReferenceRange extends BackboneElement {

		/**
		 * Low Range, if relevant
		 * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
		 */
		low?: SimpleQuantity;

		/**
		 * High Range, if relevant
		 * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
		 */
		high?: SimpleQuantity;

		/**
		 * Reference range qualifier
		 * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
		 * This SHOULD be populated if there is more than one range.  If this element is not present then the normal range is assumed.
		 */
		type?: CodeableConcept;

		/**
		 * Reference range population
		 * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.
		 * This SHOULD be populated if there is more than one range.  If this element is not present then the normal population is assumed.
		 */
		appliesTo?: CodeableConcept[];

		/**
		 * Applicable age range, if relevant
		 * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
		 */
		age?: Range;

		/**
		 * Text based reference range in an observation
		 * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;
	}

	/**
	 * Resource related to this observation
	 * A  reference to another resource (usually another Observation) whose relationship is defined by the relationship type code.
	 * For a discussion on the ways Observations can assembled in groups together see [Notes below](observation.html#4.20.4).
	 */
	interface ObservationRelated extends BackboneElement {

		/**
		 * has-member | derived-from | sequel-to | replaces | qualified-by | interfered-by
		 * A code specifying the kind of relationship that exists with the target resource.
		 * The "derived-from" type is the only logical choice when referencing the QuestionnaireAnswer resource.
		 */
		type?: ObservationObservationRelationshipType;

		/**
		 * Resource that is related to this one
		 * A reference to the observation or [QuestionnaireResponse](questionnaireresponse.html#) resource that is related to this observation.
		 */
		target: Reference;
	}

	/**
	 * Component results
	 * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
	 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
	 */
	interface ObservationComponent extends BackboneElement {

		/**
		 * Type of component observation (code / type)
		 * Describes what was observed. Sometimes this is called the observation "code".
		 */
		code: CodeableConcept;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueQuantity?: Quantity;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueCodeableConcept?: CodeableConcept;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueRange?: Range;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueRatio?: Ratio;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueSampledData?: SampledData;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueAttachment?: Attachment;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueTime?: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valueDateTime?: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Actual component result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
		 */
		valuePeriod?: Period;

		/**
		 * Why the component result is missing
		 * Provides a reason why the expected value in the element Observation.value[x] is missing.
		 * "Null" or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "test not done".   The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed.  Because of these options, use-case agreements are required to interpret general observations for exceptional values.
		 */
		dataAbsentReason?: CodeableConcept;

		/**
		 * High, low, normal, etc.
		 * The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.
		 * The component interpretation applies only to the individual component value.  For an overall interpretation all components together use thes Observation.interpretation element.
		 */
		interpretation?: CodeableConcept;

		/**
		 * Provides guide for interpretation of component result
		 * Guidance on how to interpret the value by comparison to a normal or recommended range.
		 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
		 */
		referenceRange?: ObservationReferenceRange[];
	}

	/**
	 * Measurements and simple assertions
	 * Measurements and simple assertions made about a patient, device or other subject.
	 * Used for simple observations such as device measurements, laboratory atomic results, vital signs, height, weight, smoking status, comments, etc.  Other resources are used to provide context for observations such as lab reports, etc.
	 */
	interface Observation extends DomainResource {

		/**
		 * Business Identifier for observation
		 * A unique identifier assigned to this observation.
		 */
		identifier?: Identifier[];

		/**
		 * Fulfills plan, proposal or order
		 * A plan, proposal or order that is fulfilled in whole or in part by this event.
		 */
		basedOn?: Reference[];

		/**
		 * registered | preliminary | final | amended +
		 * The status of the result value.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ObservationObservationStatus;

		/**
		 * Classification of  type of observation
		 * A code that classifies the general type of observation being made.
		 * In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
		 */
		category?: CodeableConcept[];

		/**
		 * Type of observation (code / type)
		 * Describes what was observed. Sometimes this is called the observation "name".
		 */
		code: CodeableConcept;

		/**
		 * Who and/or what this is about
		 * The patient, or group of patients, location, or device whose characteristics (direct or indirect) are described by the observation and into whose record the observation is placed.  Comments: Indirect characteristics may be those of a specimen, fetus, donor,  other observer (for example a relative or EMT), or any observation made about the subject.
		 * One would expect this element to be a cardinality  of 1..1.  The only circumstance in which the subject can be missing is when the observation is made by a device that does not know the patient. In this case, the observation SHALL be matched to a patient through some context/channel matching technique, and at this point, the observation should be updated.

If the target of the observation is different than the subject, the general extension [observation-focal-subject](extension-observation-focal-subject.html).  may be used.  However, the distinction between the patient's own value for an observation versus that of the fetus, or the donor or blood product unit, etc., are often specified in the observation code.
		 */
		subject?: Reference;

		/**
		 * Healthcare event during which this observation is made
		 * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
		 * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter or episode but still be tied to the context of the encounter or episode (e.g. pre-admission lab tests).
		 */
		context?: Reference;

		/**
		 * Clinically relevant time/time-period for observation
		 * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
		 * At least a date should be present unless this observation is a historical report.
		 */
		effectiveDateTime?: dateTime;

		/**
		 * Extension for effectiveDateTime
		 **/
		_effectiveDateTime?: Element;

		/**
		 * Clinically relevant time/time-period for observation
		 * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
		 * At least a date should be present unless this observation is a historical report.
		 */
		effectivePeriod?: Period;

		/**
		 * Date/Time this was made available
		 * The date and time this observation was made available to providers, typically after the results have been reviewed and verified.
		 * Updated when the result is updated.
		 */
		issued?: instant;

		/**
		 * Extension for issued
		 **/
		_issued?: Element;

		/**
		 * Who is responsible for the observation
		 * Who was responsible for asserting the observed value as "true".
		 */
		performer?: Reference[];

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueQuantity?: Quantity;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueCodeableConcept?: CodeableConcept;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueBoolean?: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueRange?: Range;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueRatio?: Ratio;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueSampledData?: SampledData;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueAttachment?: Attachment;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueTime?: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valueDateTime?: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Actual result
		 * The information determined as a result of making the observation, if the information has a simple value.
		 * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).


If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
		 */
		valuePeriod?: Period;

		/**
		 * Why the result is missing
		 * Provides a reason why the expected value in the element Observation.value[x] is missing.
		 * Null or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "specimen unsatisfactory".   The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed. Note that an observation may only be reported if there are values to report. For example differential cell counts values may be reported only when > 0.  Because of these options, use-case agreements are required to interpret general observations for null or exceptional values.
		 */
		dataAbsentReason?: CodeableConcept;

		/**
		 * High, low, normal, etc.
		 * The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.
		 */
		interpretation?: CodeableConcept;

		/**
		 * Comments about result
		 * May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * Observed body part
		 * Indicates the site on the subject's body where the observation was made (i.e. the target site).
		 * Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.   If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use the standard extension[ body-site-instance](extension-body-site-instance.html).
		 */
		bodySite?: CodeableConcept;

		/**
		 * How it was done
		 * Indicates the mechanism used to perform the observation.
		 * Only used if not implicit in code for Observation.code.
		 */
		method?: CodeableConcept;

		/**
		 * Specimen used for this observation
		 * The specimen that was used when this observation was made.
		 * Should only be used if not implicit in code found in `Observation.code`.  Observations are not made on specimens themselves; they are made on a subject, but in many cases by the means of a specimen. Note that although specimens are often involved, they are not always tracked and reported explicitly. Also note that observation resources may be used in contexts that track the specimen explicitly (e.g. Diagnostic Report).
		 */
		specimen?: Reference;

		/**
		 * (Measurement) Device
		 * The device used to generate the observation data.
		 * An extension should be used if further typing of the device is needed.  Devices used to support obtaining an observation can be represented using either an extension or through the Observation.related element.
		 */
		device?: Reference;

		/**
		 * Provides guide for interpretation
		 * Guidance on how to interpret the value by comparison to a normal or recommended range.
		 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
		 */
		referenceRange?: ObservationReferenceRange[];

		/**
		 * Resource related to this observation
		 * A  reference to another resource (usually another Observation) whose relationship is defined by the relationship type code.
		 * For a discussion on the ways Observations can assembled in groups together see [Notes below](observation.html#4.20.4).
		 */
		related?: ObservationRelated[];

		/**
		 * Component results
		 * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
		 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
		 */
		component?: ObservationComponent[];
	}

	/**
	 * ValueSet details if this is coded
	 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
	 */
	interface OperationDefinitionParameterBinding extends BackboneElement {

		/**
		 * required | extensible | preferred | example
		 * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
		 * For further discussion, see [Using Terminologies](terminologies.html).
		 */
		strength: OperationDefinitionBindingStrength;

		/**
		 * Source of value set
		 * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
		 * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
		 */
		valueSetUri: uri;

		/**
		 * Extension for valueSetUri
		 **/
		_valueSetUri?: Element;

		/**
		 * Source of value set
		 * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
		 * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
		 */
		valueSetReference: Reference;
	}

	/**
	 * Parameters for the operation/query
	 * The parameters for the operation/query.
	 * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
	 */
	interface OperationDefinitionParameter extends BackboneElement {

		/**
		 * Name in Parameters.parameter.name or in URL
		 * The name of used to identify the parameter.
		 * This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.
		 */
		name: code;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * in | out
		 * Whether this is an input or an output parameter.
		 * If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
		 */
		use: OperationDefinitionOperationParameterUse;

		/**
		 * Minimum Cardinality
		 * The minimum number of times this parameter SHALL appear in the request or response.
		 */
		min: integer;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Maximum Cardinality (a number or *)
		 * The maximum number of times this element is permitted to appear in the request or response.
		 */
		max: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;

		/**
		 * Description of meaning/use
		 * Describes the meaning or use of this parameter.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * What type this parameter has
		 * The type for this parameter.
		 * if there is no stated parameter, then the parameter is a multi-part parameter; type and must have at least one part defined.
		 */
		type?: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * number | date | string | token | reference | composite | quantity | uri
		 * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
		 */
		searchType?: OperationDefinitionSearchParamType;

		/**
		 * Profile on the type
		 * A profile the specifies the rules that this parameter must conform to.
		 */
		profile?: Reference;

		/**
		 * ValueSet details if this is coded
		 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
		 */
		binding?: OperationDefinitionParameterBinding;

		/**
		 * Parts of a nested Parameter
		 * The parts of a nested Parameter.
		 * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
		 */
		part?: OperationDefinitionParameter[];
	}

	/**
	 * Define overloaded variants for when  generating code
	 * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
	 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
	 */
	interface OperationDefinitionOverload extends BackboneElement {

		/**
		 * Name of parameter to include in overload
		 * Name of parameter to include in overload.
		 */
		parameterName?: string[];

		/**
		 * Extension for parameterName
		 **/
		_parameterName?: Element[];

		/**
		 * Comments to go on overload
		 * Comments to go on overload.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * Definition of an operation or a named query
	 * A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
	 */
	interface OperationDefinition extends DomainResource {

		/**
		 * Logical URI to reference this operation definition (globally unique)
		 * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published. The URL SHOULD include the major version of the operation definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Business version of the operation definition
		 * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different operation definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the operation definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this operation definition (computer friendly)
		 * A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this operation definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of operation definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired operation definition without due consideration.
		 */
		status: OperationDefinitionPublicationStatus;

		/**
		 * operation | query
		 * Whether this is an operation or a named query.
		 * Named queries are invoked differently, and have different capabilities.
		 */
		kind: OperationDefinitionOperationKind;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of operation definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental operation definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the operation definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the operation definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the operation definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the operation definition is the organization or individual primarily responsible for the maintenance and upkeep of the operation definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the operation definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the operation definition
		 * A free text natural language description of the operation definition from a consumer's perspective.
		 * This description can be used to capture details such as why the operation definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the operation definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate operation definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for operation definition (if applicable)
		 * A legal or geographic region in which the operation definition is intended to be used.
		 * It may be possible for the operation definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this operation definition is defined
		 * Explaination of why this operation definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the operation definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this operation definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Whether content is unchanged by the operation
		 * Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.
		 */
		idempotent?: boolean;

		/**
		 * Extension for idempotent
		 **/
		_idempotent?: Element;

		/**
		 * Name used to invoke the operation
		 * The name used to invoke the operation.
		 * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Additional information about use
		 * Additional information about how to use this operation or named query.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;

		/**
		 * Marks this as a profile of the base
		 * Indicates that this operation definition is a constraining profile on the base.
		 * A constrained profile can make optional parameters required or not used and clarify documentation.
		 */
		base?: Reference;

		/**
		 * Types this operation applies to
		 * The types on which this operation can be executed.
		 * If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.
		 */
		resource?: code[];

		/**
		 * Extension for resource
		 **/
		_resource?: Element[];

		/**
		 * Invoke at the system level?
		 * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
		 */
		system: boolean;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Invole at the type level?
		 * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
		 */
		type: boolean;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Invoke on an instance?
		 * Indicates whether this operation can be invoked on a particular instance of one of the given types.
		 */
		instance: boolean;

		/**
		 * Extension for instance
		 **/
		_instance?: Element;

		/**
		 * Parameters for the operation/query
		 * The parameters for the operation/query.
		 * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
		 */
		parameter?: OperationDefinitionParameter[];

		/**
		 * Define overloaded variants for when  generating code
		 * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
		 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
		 */
		overload?: OperationDefinitionOverload[];
	}

	/**
	 * A single issue associated with the action
	 * An error, warning or information message that results from a system action.
	 */
	interface OperationOutcomeIssue extends BackboneElement {

		/**
		 * fatal | error | warning | information
		 * Indicates whether the issue indicates a variation from successful processing.
		 * This is labeled as "Is Modifier" because applications should not confuse hints and warnings with errors.
		 */
		severity: OperationOutcomeIssueSeverity;

		/**
		 * Error or warning code
		 * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Additional details about the error
		 * Additional details about the error. This may be a text description of the error, or a system code that identifies the error.
		 * A human readable description of the error issue SHOULD be placed in details.text.
		 */
		details?: CodeableConcept;

		/**
		 * Additional diagnostic information about the issue
		 * Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue.
		 * Typically this field is used to provide troubleshooting information about the error.
		 */
		diagnostics?: string;

		/**
		 * Extension for diagnostics
		 **/
		_diagnostics?: Element;

		/**
		 * Path of element(s) related to issue
		 * For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
		 * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  The XPath syntax is used whether the referenced instance is expressed in XML or JSON. Note that expression is being trialed as an alternative to XPath.
		 */
		location?: string[];

		/**
		 * Extension for location
		 **/
		_location?: Element[];

		/**
		 * FHIRPath of element(s) related to issue
		 * A simple FHIRPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.
		 * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
		 */
		expression?: string[];

		/**
		 * Extension for expression
		 **/
		_expression?: Element[];
	}

	/**
	 * Information about the success/failure of an action
	 * A collection of error, warning or information messages that result from a system action.
	 * Can result from the failure of a REST call or be part of the response message returned from a request message.  If sent with extensions overriding particular issues, might even appear as part of a request message.
	 */
	interface OperationOutcome extends DomainResource {

		/**
		 * A single issue associated with the action
		 * An error, warning or information message that results from a system action.
		 */
		issue: OperationOutcomeIssue[];
	}

	/**
	 * Contact for the organization for a certain purpose
	 * Contact for the organization for a certain purpose.
	 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
	 */
	interface OrganizationContact extends BackboneElement {

		/**
		 * The type of contact
		 * Indicates a purpose for which the contact can be reached.
		 */
		purpose?: CodeableConcept;

		/**
		 * A name associated with the contact
		 * A name associated with the contact.
		 */
		name?: HumanName;

		/**
		 * Contact details (telephone, email, etc.)  for a contact
		 * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
		 */
		telecom?: ContactPoint[];

		/**
		 * Visiting or postal addresses for the contact
		 * Visiting or postal addresses for the contact.
		 */
		address?: Address;
	}

	/**
	 * A grouping of people or organizations with a common purpose
	 * A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
	 */
	interface Organization extends DomainResource {

		/**
		 * Identifies this organization  across multiple systems
		 * Identifier for the organization that is used to identify the organization across multiple disparate systems.
		 */
		identifier?: Identifier[];

		/**
		 * Whether the organization's record is still in active use
		 * Whether the organization's record is still in active use.
		 * Default is true.

This active flag is not intended to be used to mark an organizations as temporarily closed or under construction. Instead the Location(s) within the Organization should have the suspended status. If further details of the reason for the suspension are required, then an extension on this element should be used.

This element is labeled as a modifier because it may be used to mark that the resource was created in error.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * Kind of organization
		 * The kind(s) of organization that this is.
		 * Organizations can be corporations, wards, sections, clinical teams, government departments, etc. Note that code is generally a classifier of the type of organization; in many applications, codes are used to identity a particular organization (say, ward) as opposed to another of the same type - these are identifiers, not codes

When considering if multiple types are appropriate, you should evaluate if child organizations would be a more appropriate use of the concept, as different types likely are in different sub-areas of the organization. This is most likely to be used where type values have orthogonal values, such as a religious, academic and medical center.

We expect that some jurisdictions will profile this optionality to be a single cardinality.
		 */
		type?: CodeableConcept[];

		/**
		 * Name used for the organization
		 * A name associated with the organization.
		 * If the name of an organization changes, consider putting the old name in the alias column so that it can still be located through searches.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * A list of alternate names that the organization is known as, or was known as in the past
		 * A list of alternate names that the organization is known as, or was known as in the past.
		 * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the organization.
		 */
		alias?: string[];

		/**
		 * Extension for alias
		 **/
		_alias?: Element[];

		/**
		 * A contact detail for the organization
		 * A contact detail for the organization.
		 * The use code home is not to be used. Note that these contacts are not the contact details of people who are employed by or represent the organization, but official contacts for the organization itself.
		 */
		telecom?: ContactPoint[];

		/**
		 * An address for the organization
		 * An address for the organization.
		 * Organization may have multiple addresses with different uses or applicable periods. The use code home is not to be used.
		 */
		address?: Address[];

		/**
		 * The organization of which this organization forms a part
		 * The organization of which this organization forms a part.
		 */
		partOf?: Reference;

		/**
		 * Contact for the organization for a certain purpose
		 * Contact for the organization for a certain purpose.
		 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
		 */
		contact?: OrganizationContact[];

		/**
		 * Technical endpoints providing access to services operated for the organization
		 * Technical endpoints providing access to services operated for the organization.
		 */
		endpoint?: Reference[];
	}

	/**
	 * Operation Parameter
	 * A parameter passed to or received from the operation.
	 */
	interface ParametersParameter extends BackboneElement {

		/**
		 * Name from the definition
		 * The name of the parameter (reference to the operation definition).
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueBase64Binary?: base64Binary;

		/**
		 * Extension for valueBase64Binary
		 **/
		_valueBase64Binary?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueBoolean?: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueCode?: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueDate?: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueDateTime?: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueDecimal?: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueId?: id;

		/**
		 * Extension for valueId
		 **/
		_valueId?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueInstant?: instant;

		/**
		 * Extension for valueInstant
		 **/
		_valueInstant?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueInteger?: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueMarkdown?: markdown;

		/**
		 * Extension for valueMarkdown
		 **/
		_valueMarkdown?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueOid?: oid;

		/**
		 * Extension for valueOid
		 **/
		_valueOid?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valuePositiveInt?: positiveInt;

		/**
		 * Extension for valuePositiveInt
		 **/
		_valuePositiveInt?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueTime?: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueUnsignedInt?: unsignedInt;

		/**
		 * Extension for valueUnsignedInt
		 **/
		_valueUnsignedInt?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueUri?: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueAddress?: Address;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueAge?: Age;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueAnnotation?: Annotation;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueAttachment?: Attachment;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueCodeableConcept?: CodeableConcept;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueCoding?: Coding;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueContactPoint?: ContactPoint;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueCount?: Count;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueDistance?: Distance;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueDuration?: Duration;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueHumanName?: HumanName;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueIdentifier?: Identifier;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueMoney?: Money;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valuePeriod?: Period;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueQuantity?: Quantity;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueRange?: Range;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueRatio?: Ratio;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueReference?: Reference;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueSampledData?: SampledData;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueSignature?: Signature;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueTiming?: Timing;

		/**
		 * If parameter is a data type
		 * If the parameter is a data type.
		 */
		valueMeta?: Meta;

		/**
		 * If parameter is a whole resource
		 * If the parameter is a whole resource.
		 */
		resource?: Resource;

		/**
		 * Named part of a multi-part parameter
		 * A named part of a multi-part parameter.
		 * Only one level of nested parameters is allowed.
		 */
		part?: ParametersParameter[];
	}

	/**
	 * Operation Request or Response
	 * This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.
	 * The parameters that may be used are defined by the OperationDefinition resource.
	 */
	interface Parameters extends Resource {

		/**
		 * Operation Parameter
		 * A parameter passed to or received from the operation.
		 */
		parameter?: ParametersParameter[];
	}

	/**
	 * A contact party (e.g. guardian, partner, friend) for the patient
	 * A contact party (e.g. guardian, partner, friend) for the patient.
	 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
	 */
	interface PatientContact extends BackboneElement {

		/**
		 * The kind of relationship
		 * The nature of the relationship between the patient and the contact person.
		 */
		relationship?: CodeableConcept[];

		/**
		 * A name associated with the contact person
		 * A name associated with the contact person.
		 */
		name?: HumanName;

		/**
		 * A contact detail for the person
		 * A contact detail for the person, e.g. a telephone number or an email address.
		 * Contact may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
		 */
		telecom?: ContactPoint[];

		/**
		 * Address for the contact person
		 * Address for the contact person.
		 */
		address?: Address;

		/**
		 * male | female | other | unknown
		 * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
		 */
		gender?: PatientAdministrativeGender;

		/**
		 * Organization that is associated with the contact
		 * Organization on behalf of which the contact is acting or for which the contact is working.
		 */
		organization?: Reference;

		/**
		 * The period during which this contact person or organization is valid to be contacted relating to this patient
		 * The period during which this contact person or organization is valid to be contacted relating to this patient.
		 */
		period?: Period;
	}

	/**
	 * This patient is known to be an animal (non-human)
	 * This patient is known to be an animal.
	 * The animal element is labeled "Is Modifier" since patients may be non-human. Systems SHALL either handle patient details appropriately (e.g. inform users patient is not human) or reject declared animal records.   The absense of the animal element does not imply that the patient is a human. If a system requires such a positive assertion that the patient is human, an extension will be required.  (Do not use a species of homo-sapiens in animal species, as this would incorrectly infer that the patient is an animal).
	 */
	interface PatientAnimal extends BackboneElement {

		/**
		 * E.g. Dog, Cow
		 * Identifies the high level taxonomic categorization of the kind of animal.
		 * If the patient is non-human, at least a species SHALL be specified. Species SHALL be a widely recognised taxonomic classification.  It may or may not be Linnaean taxonomy and may or may not be at the level of species. If the level is finer than species--such as a breed code--the code system used SHALL allow inference of the species.  (The common example is that the word "Hereford" does not allow inference of the species Bos taurus, because there is a Hereford pig breed, but the SNOMED CT code for "Hereford Cattle Breed" does.).
		 */
		species: CodeableConcept;

		/**
		 * E.g. Poodle, Angus
		 * Identifies the detailed categorization of the kind of animal.
		 * Breed MAY be used to provide further taxonomic or non-taxonomic classification.  It may involve local or proprietary designation--such as commercial strain--and/or additional information such as production type.
		 */
		breed?: CodeableConcept;

		/**
		 * E.g. Neutered, Intact
		 * Indicates the current state of the animal's reproductive organs.
		 */
		genderStatus?: CodeableConcept;
	}

	/**
	 * A list of Languages which may be used to communicate with the patient about his or her health
	 * Languages which may be used to communicate with the patient about his or her health.
	 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
	 */
	interface PatientCommunication extends BackboneElement {

		/**
		 * The language which can be used to communicate with the patient about his or her health
		 * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
		 * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
		 */
		language: CodeableConcept;

		/**
		 * Language preference indicator
		 * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
		 * This language is specifically identified for communicating healthcare information.
		 */
		preferred?: boolean;

		/**
		 * Extension for preferred
		 **/
		_preferred?: Element;
	}

	/**
	 * Link to another patient resource that concerns the same actual person
	 * Link to another patient resource that concerns the same actual patient.
	 * There is no assumption that linked patient records have mutual links. 

This element is labelled as a modifier because it may not be the main Patient resource, and the referenced patient should be used instead of this Patient record. This is when the link.type value is 'replaced-by'.
	 */
	interface PatientLink extends BackboneElement {

		/**
		 * The other patient or related person resource that the link refers to
		 * The other patient resource that the link refers to.
		 * Referencing a RelatedPerson here removes the need to use a Person record to associate a Patient and RelatedPerson as the same individual.
		 */
		other: Reference;

		/**
		 * replaced-by | replaces | refer | seealso - type of link
		 * The type of link between this patient resource and another patient resource.
		 */
		type: PatientLinkType;
	}

	/**
	 * Information about an individual or animal receiving health care services
	 * Demographics and other administrative information about an individual or animal receiving care or other health-related services.
	 */
	interface Patient extends DomainResource {

		/**
		 * An identifier for this patient
		 * An identifier for this patient.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this patient's record is in active use
		 * Whether this patient record is in active use.
		 * Default is true. If a record is inactive, and linked to an active record, then future patient/record updates should occur on the other patient

This element is labeled as a modifier because when the patient record is marked as not active it is not expected to be used/referenced without being changed back to active.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * A name associated with the patient
		 * A name associated with the individual.
		 * A patient may have multiple names with different uses or applicable periods. For animals, the name is a "HumanName" in the sense that is assigned and used by humans and has the same patterns.
		 */
		name?: HumanName[];

		/**
		 * A contact detail for the individual
		 * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
		 * A Patient may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification. The address may not go directly to the individual, but may reach another party that is able to proxy for the patient (i.e. home phone, or pet owner's phone).
		 */
		telecom?: ContactPoint[];

		/**
		 * male | female | other | unknown
		 * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
		 * The gender may not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though the vast majority of systems and contexts only support M and F.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific gender aspect of interest (anatomical, chromosonal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosonal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overrideable error, not a "hard" error.
		 */
		gender?: PatientAdministrativeGender;

		/**
		 * The date of birth for the individual
		 * The date of birth for the individual.
		 * At least an estimated year should be provided as a guess if the real DOB is unknown  There is a standard extension "patient-birthTime" available that should be used where Time is required (such as in maternaty/infant care systems).
		 */
		birthDate?: date;

		/**
		 * Extension for birthDate
		 **/
		_birthDate?: Element;

		/**
		 * Indicates if the individual is deceased or not
		 * Indicates if the individual is deceased or not.
		 * If there's no value in the instance it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.

This element is labeled as a modifier because once a patient is marked as deceased, the actions that are appropriate to perform on the patient may be significantly different.
		 */
		deceasedBoolean?: boolean;

		/**
		 * Extension for deceasedBoolean
		 **/
		_deceasedBoolean?: Element;

		/**
		 * Indicates if the individual is deceased or not
		 * Indicates if the individual is deceased or not.
		 * If there's no value in the instance it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.

This element is labeled as a modifier because once a patient is marked as deceased, the actions that are appropriate to perform on the patient may be significantly different.
		 */
		deceasedDateTime?: dateTime;

		/**
		 * Extension for deceasedDateTime
		 **/
		_deceasedDateTime?: Element;

		/**
		 * Addresses for the individual
		 * Addresses for the individual.
		 * Patient may have multiple addresses with different uses or applicable periods.
		 */
		address?: Address[];

		/**
		 * Marital (civil) status of a patient
		 * This field contains a patient's most recent marital (civil) status.
		 */
		maritalStatus?: CodeableConcept;

		/**
		 * Whether patient is part of a multiple birth
		 * Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).
		 * Where the valueInteger is provided, the number is the birth number in the sequence.
E.g. The middle birth in tripplets would be valueInteger=2 and the third born would have valueInteger=3
If a bool value was provided for this tripplets examle, then all 3 patient records would have valueBool=true (the ordering is not indicated).
		 */
		multipleBirthBoolean?: boolean;

		/**
		 * Extension for multipleBirthBoolean
		 **/
		_multipleBirthBoolean?: Element;

		/**
		 * Whether patient is part of a multiple birth
		 * Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).
		 * Where the valueInteger is provided, the number is the birth number in the sequence.
E.g. The middle birth in tripplets would be valueInteger=2 and the third born would have valueInteger=3
If a bool value was provided for this tripplets examle, then all 3 patient records would have valueBool=true (the ordering is not indicated).
		 */
		multipleBirthInteger?: integer;

		/**
		 * Extension for multipleBirthInteger
		 **/
		_multipleBirthInteger?: Element;

		/**
		 * Image of the patient
		 * Image of the patient.
		 */
		photo?: Attachment[];

		/**
		 * A contact party (e.g. guardian, partner, friend) for the patient
		 * A contact party (e.g. guardian, partner, friend) for the patient.
		 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
		 */
		contact?: PatientContact[];

		/**
		 * This patient is known to be an animal (non-human)
		 * This patient is known to be an animal.
		 * The animal element is labeled "Is Modifier" since patients may be non-human. Systems SHALL either handle patient details appropriately (e.g. inform users patient is not human) or reject declared animal records.   The absense of the animal element does not imply that the patient is a human. If a system requires such a positive assertion that the patient is human, an extension will be required.  (Do not use a species of homo-sapiens in animal species, as this would incorrectly infer that the patient is an animal).
		 */
		animal?: PatientAnimal;

		/**
		 * A list of Languages which may be used to communicate with the patient about his or her health
		 * Languages which may be used to communicate with the patient about his or her health.
		 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
		 */
		communication?: PatientCommunication[];

		/**
		 * Patient's nominated primary care provider
		 * Patient's nominated care provider.
		 * This may be the primary care provider (in a GP context), or it may be a patient nominated care manager in a community/disablity setting, or even organization that will provide people to perform the care provider roles.

It is not to be used to record Care Teams, these should be in a CareTeam resource that may be linked to the CarePlan or EpisodeOfCare resources.
		 */
		generalPractitioner?: Reference[];

		/**
		 * Organization that is the custodian of the patient record
		 * Organization that is the custodian of the patient record.
		 * There is only one managing organization for a specific patient record. Other organizations will have their own Patient record, and may use the Link property to join the records together (or a Person resource which can include confidence ratings for the association).
		 */
		managingOrganization?: Reference;

		/**
		 * Link to another patient resource that concerns the same actual person
		 * Link to another patient resource that concerns the same actual patient.
		 * There is no assumption that linked patient records have mutual links. 

This element is labelled as a modifier because it may not be the main Patient resource, and the referenced patient should be used instead of this Patient record. This is when the link.type value is 'replaced-by'.
		 */
		link?: PatientLink[];
	}

	/**
	 * PaymentNotice request
	 * This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
	 */
	interface PaymentNotice extends DomainResource {

		/**
		 * Business Identifier
		 * The notice business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: PaymentNoticePaymentNoticeStatus;

		/**
		 * Request reference
		 * Reference of resource for which payment is being made.
		 */
		request?: Reference;

		/**
		 * Response reference
		 * Reference of response to resource for which payment is being made.
		 */
		response?: Reference;

		/**
		 * Payment or clearing date
		 * The date when the above payment action occurrred.
		 */
		statusDate?: date;

		/**
		 * Extension for statusDate
		 **/
		_statusDate?: Element;

		/**
		 * Creation date
		 * The date when this resource was created.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Insurer or Regulatory body
		 * The Insurer who is target  of the request.
		 */
		target?: Reference;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		provider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		organization?: Reference;

		/**
		 * Whether payment has been sent or cleared
		 * The payment status, typically paid: payment sent, cleared: payment received.
		 */
		paymentStatus?: CodeableConcept;
	}

	/**
	 * List of settlements
	 * List of individual settlement amounts and the corresponding transaction.
	 */
	interface PaymentReconciliationDetail extends BackboneElement {

		/**
		 * Type code
		 * Code to indicate the nature of the payment, adjustment, funds advance, etc.
		 */
		type: CodeableConcept;

		/**
		 * Claim
		 * The claim or financial resource.
		 */
		request?: Reference;

		/**
		 * Claim Response
		 * The claim response resource.
		 */
		response?: Reference;

		/**
		 * Organization which submitted the claim
		 * The Organization which submitted the claim or financial transaction.
		 */
		submitter?: Reference;

		/**
		 * Organization which is receiving the payment
		 * The organization which is receiving the payment.
		 */
		payee?: Reference;

		/**
		 * Invoice date
		 * The date of the invoice or financial resource.
		 */
		date?: date;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Amount being paid
		 * Amount paid for this detail.
		 */
		amount?: Money;
	}

	/**
	 * Processing comments
	 * Suite of notes.
	 */
	interface PaymentReconciliationProcessNote extends BackboneElement {

		/**
		 * display | print | printoper
		 * The note purpose: Print/Display.
		 */
		type?: CodeableConcept;

		/**
		 * Comment on the processing
		 * The note text.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;
	}

	/**
	 * PaymentReconciliation resource
	 * This resource provides payment details and claim references supporting a bulk payment.
	 */
	interface PaymentReconciliation extends DomainResource {

		/**
		 * Business Identifier
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: PaymentReconciliationPaymentReconciliationStatus;

		/**
		 * Period covered
		 * The period of time for which payments have been gathered into this bulk payment for settlement.
		 */
		period?: Period;

		/**
		 * Creation date
		 * The date when the enclosed suite of services were performed or completed.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Insurer
		 * The Insurer who produced this adjudicated response.
		 */
		organization?: Reference;

		/**
		 * Claim reference
		 * Original request resource reference.
		 */
		request?: Reference;

		/**
		 * complete | error | partial
		 * Transaction status: error, complete.
		 */
		outcome?: CodeableConcept;

		/**
		 * Disposition Message
		 * A description of the status of the adjudication.
		 */
		disposition?: string;

		/**
		 * Extension for disposition
		 **/
		_disposition?: Element;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		requestProvider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		requestOrganization?: Reference;

		/**
		 * List of settlements
		 * List of individual settlement amounts and the corresponding transaction.
		 */
		detail?: PaymentReconciliationDetail[];

		/**
		 * Printed Form Identifier
		 * The form to be used for printing the content.
		 */
		form?: CodeableConcept;

		/**
		 * Total amount of Payment
		 * Total payment amount.
		 */
		total?: Money;

		/**
		 * Processing comments
		 * Suite of notes.
		 */
		processNote?: PaymentReconciliationProcessNote[];
	}

	/**
	 * Link to a resource that concerns the same actual person
	 * Link to a resource that concerns the same actual person.
	 */
	interface PersonLink extends BackboneElement {

		/**
		 * The resource to which this actual person is associated
		 * The resource to which this actual person is associated.
		 */
		target: Reference;

		/**
		 * level1 | level2 | level3 | level4
		 * Level of assurance that this link is actually associated with the target resource.
		 */
		assurance?: PersonIdentityAssuranceLevel;
	}

	/**
	 * A generic person record
	 * Demographics and administrative information about a person independent of a specific health-related context.
	 * The Person resource does justice to person registries that keep track of persons regardless of their role. The Person resource is also a primary resource to point to for people acting in a particular role such as SubjectofCare, Practitioner, and Agent. Very few attributes are specific to any role and so Person is kept lean. Most attributes are expected to be tied to the role the Person plays rather than the Person himself. Examples of that are Guardian (SubjectofCare), ContactParty (SubjectOfCare, Practitioner), and multipleBirthInd (SubjectofCare).
	 */
	interface Person extends DomainResource {

		/**
		 * A human identifier for this person
		 * Identifier for a person within a particular scope.
		 */
		identifier?: Identifier[];

		/**
		 * A name associated with the person
		 * A name associated with the person.
		 * Person may have multiple names with different uses or applicable periods.
		 */
		name?: HumanName[];

		/**
		 * A contact detail for the person
		 * A contact detail for the person, e.g. a telephone number or an email address.
		 * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
		 */
		telecom?: ContactPoint[];

		/**
		 * male | female | other | unknown
		 * Administrative Gender.
		 * The gender may not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though the vast majority of systems and contexts only support M and F.
		 */
		gender?: PersonAdministrativeGender;

		/**
		 * The date on which the person was born
		 * The birth date for the person.
		 * At least an estimated year should be provided as a guess if the real DOB is unknown.
		 */
		birthDate?: date;

		/**
		 * Extension for birthDate
		 **/
		_birthDate?: Element;

		/**
		 * One or more addresses for the person
		 * One or more addresses for the person.
		 * Person may have multiple addresses with different uses or applicable periods.
		 */
		address?: Address[];

		/**
		 * Image of the person
		 * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
		 */
		photo?: Attachment;

		/**
		 * The organization that is the custodian of the person record
		 * The organization that is the custodian of the person record.
		 */
		managingOrganization?: Reference;

		/**
		 * This person's record is in active use
		 * Whether this person's record is in active use.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * Link to a resource that concerns the same actual person
		 * Link to a resource that concerns the same actual person.
		 */
		link?: PersonLink[];
	}

	/**
	 * Target outcome for the goal
	 * Indicates what should be done and within what timeframe.
	 */
	interface PlanDefinitionGoalTarget extends BackboneElement {

		/**
		 * The parameter whose value is to be tracked
		 * The parameter whose value is to be tracked, e.g. body weigth, blood pressure, or hemoglobin A1c level.
		 */
		measure?: CodeableConcept;

		/**
		 * The target value to be achieved
		 * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
		 */
		detailQuantity?: Quantity;

		/**
		 * The target value to be achieved
		 * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
		 */
		detailRange?: Range;

		/**
		 * The target value to be achieved
		 * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
		 */
		detailCodeableConcept?: CodeableConcept;

		/**
		 * Reach goal within
		 * Indicates the timeframe after the start of the goal in which the goal should be met.
		 */
		due?: Duration;
	}

	/**
	 * What the plan is trying to accomplish
	 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
	 */
	interface PlanDefinitionGoal extends BackboneElement {

		/**
		 * E.g. Treatment, dietary, behavioral, etc
		 * Indicates a category the goal falls within.
		 */
		category?: CodeableConcept;

		/**
		 * Code or text describing the goal
		 * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
		 * If no code is available, use CodeableConcept.text.
		 */
		description: CodeableConcept;

		/**
		 * high-priority | medium-priority | low-priority
		 * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
		 */
		priority?: CodeableConcept;

		/**
		 * When goal pursuit begins
		 * The event after which the goal should begin being pursued.
		 */
		start?: CodeableConcept;

		/**
		 * What does the goal address
		 * Identifies problems, conditions, issues, or concerns the goal is intended to address.
		 */
		addresses?: CodeableConcept[];

		/**
		 * Supporting documentation for the goal
		 * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
		 */
		documentation?: RelatedArtifact[];

		/**
		 * Target outcome for the goal
		 * Indicates what should be done and within what timeframe.
		 */
		target?: PlanDefinitionGoalTarget[];
	}

	/**
	 * Whether or not the action is applicable
	 * An expression that describes applicability criteria, or start/stop conditions for the action.
	 */
	interface PlanDefinitionActionCondition extends BackboneElement {

		/**
		 * applicability | start | stop
		 * The kind of condition.
		 * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
		 */
		kind: PlanDefinitionActionConditionKind;

		/**
		 * Natural language description of the condition
		 * A brief, natural language description of the condition that effectively communicates the intended semantics.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Language of the expression
		 * The media type of the language for the expression.
		 */
		language?: string;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * Boolean-valued expression
		 * An expression that returns true or false, indicating whether or not the condition is satisfied.
		 * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;
	}

	/**
	 * Relationship to another action
	 * A relationship to another action such as "before" or "30-60 minutes after start of".
	 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
	 */
	interface PlanDefinitionActionRelatedAction extends BackboneElement {

		/**
		 * What action is this related to
		 * The element id of the related action.
		 */
		actionId: id;

		/**
		 * Extension for actionId
		 **/
		_actionId?: Element;

		/**
		 * before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end
		 * The relationship of this action to the related action.
		 */
		relationship: PlanDefinitionActionRelationshipType;

		/**
		 * Time offset for the relationship
		 * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
		 */
		offsetDuration?: Duration;

		/**
		 * Time offset for the relationship
		 * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
		 */
		offsetRange?: Range;
	}

	/**
	 * Who should participate in the action
	 * Indicates who should participate in performing the action described.
	 */
	interface PlanDefinitionActionParticipant extends BackboneElement {

		/**
		 * patient | practitioner | related-person
		 * The type of participant in the action.
		 */
		type: PlanDefinitionActionParticipantType;

		/**
		 * E.g. Nurse, Surgeon, Parent, etc
		 * The role the participant should play in performing the described action.
		 */
		role?: CodeableConcept;
	}

	/**
	 * Dynamic aspects of the definition
	 * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
	 */
	interface PlanDefinitionActionDynamicValue extends BackboneElement {

		/**
		 * Natural language description of the dynamic value
		 * A brief, natural language description of the intended semantics of the dynamic value.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * The path to the element to be set dynamically
		 * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression.
		 */
		path?: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * Language of the expression
		 * The media type of the language for the expression.
		 */
		language?: string;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * An expression that provides the dynamic value for the customization
		 * An expression specifying the value of the customized element.
		 * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;
	}

	/**
	 * Action defined by the plan
	 * An action to be taken as part of the plan.
	 */
	interface PlanDefinitionAction extends BackboneElement {

		/**
		 * User-visible label for the action (e.g. 1. or A.)
		 * A user-visible label for the action.
		 */
		label?: string;

		/**
		 * Extension for label
		 **/
		_label?: Element;

		/**
		 * User-visible title
		 * The title of the action displayed to a user.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Short description of the action
		 * A short description of the action used to provide a summary to display to the user.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
		 * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
		 */
		textEquivalent?: string;

		/**
		 * Extension for textEquivalent
		 **/
		_textEquivalent?: Element;

		/**
		 * Code representing the meaning of the action or sub-actions
		 * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template.
		 */
		code?: CodeableConcept[];

		/**
		 * Why the action should be performed
		 * A description of why this action is necessary or appropriate.
		 * This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
		 */
		reason?: CodeableConcept[];

		/**
		 * Supporting documentation for the intended performer of the action
		 * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
		 */
		documentation?: RelatedArtifact[];

		/**
		 * What goals this action supports
		 * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
		 */
		goalId?: id[];

		/**
		 * Extension for goalId
		 **/
		_goalId?: Element[];

		/**
		 * When the action should be triggered
		 * A description of when the action should be triggered.
		 */
		triggerDefinition?: TriggerDefinition[];

		/**
		 * Whether or not the action is applicable
		 * An expression that describes applicability criteria, or start/stop conditions for the action.
		 */
		condition?: PlanDefinitionActionCondition[];

		/**
		 * Input data requirements
		 * Defines input data requirements for the action.
		 */
		input?: DataRequirement[];

		/**
		 * Output data definition
		 * Defines the outputs of the action, if any.
		 */
		output?: DataRequirement[];

		/**
		 * Relationship to another action
		 * A relationship to another action such as "before" or "30-60 minutes after start of".
		 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
		 */
		relatedAction?: PlanDefinitionActionRelatedAction[];

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingDateTime?: dateTime;

		/**
		 * Extension for timingDateTime
		 **/
		_timingDateTime?: Element;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingPeriod?: Period;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingDuration?: Duration;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingRange?: Range;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingTiming?: Timing;

		/**
		 * Who should participate in the action
		 * Indicates who should participate in performing the action described.
		 */
		participant?: PlanDefinitionActionParticipant[];

		/**
		 * create | update | remove | fire-event
		 * The type of action to perform (create, update, remove).
		 */
		type?: Coding;

		/**
		 * visual-group | logical-group | sentence-group
		 * Defines the grouping behavior for the action and its children.
		 */
		groupingBehavior?: PlanDefinitionActionGroupingBehavior;

		/**
		 * any | all | all-or-none | exactly-one | at-most-one | one-or-more
		 * Defines the selection behavior for the action and its children.
		 */
		selectionBehavior?: PlanDefinitionActionSelectionBehavior;

		/**
		 * must | could | must-unless-documented
		 * Defines the requiredness behavior for the action.
		 */
		requiredBehavior?: PlanDefinitionActionRequiredBehavior;

		/**
		 * yes | no
		 * Defines whether the action should usually be preselected.
		 */
		precheckBehavior?: PlanDefinitionActionPrecheckBehavior;

		/**
		 * single | multiple
		 * Defines whether the action can be selected multiple times.
		 */
		cardinalityBehavior?: PlanDefinitionActionCardinalityBehavior;

		/**
		 * Description of the activity to be performed
		 * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
		 * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root (~) path can be used to define the entire resource dynamically.
		 */
		definition?: Reference;

		/**
		 * Transform to apply the template
		 * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
		 */
		transform?: Reference;

		/**
		 * Dynamic aspects of the definition
		 * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
		 */
		dynamicValue?: PlanDefinitionActionDynamicValue[];

		/**
		 * A sub-action
		 * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
		 */
		action?: PlanDefinitionAction[];
	}

	/**
	 * The definition of a plan for a series of actions, independent of any specific patient or context
	 * This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
	 */
	interface PlanDefinition extends DomainResource {

		/**
		 * Logical URI to reference this plan definition (globally unique)
		 * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this plan definition is (or will be) published. The URL SHOULD include the major version of the plan definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the plan definition
		 * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the plan definition
		 * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
		 * There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the plan definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this plan definition (computer friendly)
		 * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this plan definition (human friendly)
		 * A short, descriptive, user-friendly title for the plan definition.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * order-set | protocol | eca-rule
		 * The type of asset the plan definition represents, e.g. an order set, protocol, or event-condition-action rule.
		 */
		type?: CodeableConcept;

		/**
		 * draft | active | retired | unknown
		 * The status of this plan definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of plan definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired plan definition without due consideration.
		 */
		status: PlanDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of plan definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental plan definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the plan definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the plan definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Natural language description of the plan definition
		 * A free text natural language description of the plan definition from a consumer's perspective.
		 * This description can be used to capture details such as why the plan definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this plan definition is defined
		 * Explaination of why this plan definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the plan definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Describes the clinical usage of the asset
		 * A detailed description of how the asset is used from a clinical perspective.
		 */
		usage?: string;

		/**
		 * Extension for usage
		 **/
		_usage?: Element;

		/**
		 * When the plan definition was approved by publisher
		 * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
		 * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
		 */
		approvalDate?: date;

		/**
		 * Extension for approvalDate
		 **/
		_approvalDate?: Element;

		/**
		 * When the plan definition was last reviewed
		 * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
		 * If specified, this is usually after the approval date.
		 */
		lastReviewDate?: date;

		/**
		 * Extension for lastReviewDate
		 **/
		_lastReviewDate?: Element;

		/**
		 * When the plan definition is expected to be used
		 * The period during which the plan definition content was or is planned to be in active use.
		 * The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
		 */
		effectivePeriod?: Period;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate plan definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for plan definition (if applicable)
		 * A legal or geographic region in which the plan definition is intended to be used.
		 * It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * E.g. Education, Treatment, Assessment, etc
		 * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
		 */
		topic?: CodeableConcept[];

		/**
		 * A content contributor
		 * A contributor to the content of the asset, including authors, editors, reviewers, and endorsers.
		 */
		contributor?: Contributor[];

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Related artifacts for the asset
		 * Related artifacts such as additional documentation, justification, or bibliographic references.
		 * Each related artifact is either an attachment, or a reference to another resource, but not both.
		 */
		relatedArtifact?: RelatedArtifact[];

		/**
		 * Logic used by the plan definition
		 * A reference to a Library resource containing any formal logic used by the plan definition.
		 */
		library?: Reference[];

		/**
		 * What the plan is trying to accomplish
		 * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
		 */
		goal?: PlanDefinitionGoal[];

		/**
		 * Action defined by the plan
		 * An action to be taken as part of the plan.
		 */
		action?: PlanDefinitionAction[];
	}

	/**
	 * Qualifications obtained by training and certification
	 * Qualifications obtained by training and certification.
	 */
	interface PractitionerQualification extends BackboneElement {

		/**
		 * An identifier for this qualification for the practitioner
		 * An identifier that applies to this person's qualification in this role.
		 */
		identifier?: Identifier[];

		/**
		 * Coded representation of the qualification
		 * Coded representation of the qualification.
		 */
		code: CodeableConcept;

		/**
		 * Period during which the qualification is valid
		 * Period during which the qualification is valid.
		 */
		period?: Period;

		/**
		 * Organization that regulates and issues the qualification
		 * Organization that regulates and issues the qualification.
		 */
		issuer?: Reference;
	}

	/**
	 * A person with a  formal responsibility in the provisioning of healthcare or related services
	 * A person who is directly or indirectly involved in the provisioning of healthcare.
	 * Note that a cab driver no longer fits the bill. You probably would be interested in the organization rather than the individual?
	 */
	interface Practitioner extends DomainResource {

		/**
		 * A identifier for the person as this agent
		 * An identifier that applies to this person in this role.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this practitioner's record is in active use
		 * Whether this practitioner's record is in active use.
		 * Default is true. 

If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * The name(s) associated with the practitioner
		 * The name(s) associated with the practitioner.
		 * The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.

In general select the value to be used in the ResourceReference.display based on this:

1. There is more than 1 name
2. Use = usual
3. Period is current to the date of the usage
4. Use = official
5. Other order as decided by internal business rules.
		 */
		name?: HumanName[];

		/**
		 * A contact detail for the practitioner (that apply to all roles)
		 * A contact detail for the practitioner, e.g. a telephone number or an email address.
		 * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification

These typically will have home numbers, or mobile numbers that are not role specific.
		 */
		telecom?: ContactPoint[];

		/**
		 * Address(es) of the practitioner that are not role specific (typically home address)
		 * Address(es) of the practitioner that are not role specific (typically home address). 
Work addresses are not typically entered in this property as they are usually role dependent.
		 * The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).
		 */
		address?: Address[];

		/**
		 * male | female | other | unknown
		 * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
		 */
		gender?: PractitionerAdministrativeGender;

		/**
		 * The date  on which the practitioner was born
		 * The date of birth for the practitioner.
		 */
		birthDate?: date;

		/**
		 * Extension for birthDate
		 **/
		_birthDate?: Element;

		/**
		 * Image of the person
		 * Image of the person.
		 */
		photo?: Attachment[];

		/**
		 * Qualifications obtained by training and certification
		 * Qualifications obtained by training and certification.
		 */
		qualification?: PractitionerQualification[];

		/**
		 * A language the practitioner is able to use in patient communication
		 * A language the practitioner is able to use in patient communication.
		 * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
		 */
		communication?: CodeableConcept[];
	}

	/**
	 * Times the Service Site is available
	 * A collection of times that the Service Site is available.
	 * More detailed availability information may be provided in associated Schedule/Slot resources.
	 */
	interface PractitionerRoleAvailableTime extends BackboneElement {

		/**
		 * mon | tue | wed | thu | fri | sat | sun
		 * Indicates which days of the week are available between the start and end Times.
		 */
		daysOfWeek?: PractitionerRoleDaysOfWeek[];

		/**
		 * Always available? e.g. 24 hour service
		 * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
		 */
		allDay?: boolean;

		/**
		 * Extension for allDay
		 **/
		_allDay?: Element;

		/**
		 * Opening time of day (ignored if allDay = true)
		 * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
		 * The timezone is expected to be for where this HealthcareService is provided at.
		 */
		availableStartTime?: time;

		/**
		 * Extension for availableStartTime
		 **/
		_availableStartTime?: Element;

		/**
		 * Closing time of day (ignored if allDay = true)
		 * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
		 * The timezone is expected to be for where this HealthcareService is provided at.
		 */
		availableEndTime?: time;

		/**
		 * Extension for availableEndTime
		 **/
		_availableEndTime?: Element;
	}

	/**
	 * Not available during this time due to provided reason
	 * The HealthcareService is not available during this period of time due to the provided reason.
	 */
	interface PractitionerRoleNotAvailable extends BackboneElement {

		/**
		 * Reason presented to the user explaining why time not available
		 * The reason that can be presented to the user as to why this time is not available.
		 */
		description: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Service not availablefrom this date
		 * Service is not available (seasonally or for a public holiday) from this date.
		 */
		during?: Period;
	}

	/**
	 * Roles/organizations the practitioner is associated with
	 * A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
	 */
	interface PractitionerRole extends DomainResource {

		/**
		 * Business Identifiers that are specific to a role/location
		 * Business Identifiers that are specific to a role/location.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this practitioner's record is in active use
		 * Whether this practitioner's record is in active use.
		 * Default is true. 

If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * The period during which the practitioner is authorized to perform in these role(s)
		 * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
		 */
		period?: Period;

		/**
		 * Practitioner that is able to provide the defined services for the organation
		 * Practitioner that is able to provide the defined services for the organation.
		 */
		practitioner?: Reference;

		/**
		 * Organization where the roles are available
		 * The organization where the Practitioner performs the roles associated.
		 */
		organization?: Reference;

		/**
		 * Roles which this practitioner may perform
		 * Roles which this practitioner is authorized to perform for the organization.
		 * A person may have more than one role. At least one role is required.
		 */
		code?: CodeableConcept[];

		/**
		 * Specific specialty of the practitioner
		 * Specific specialty of the practitioner.
		 */
		specialty?: CodeableConcept[];

		/**
		 * The location(s) at which this practitioner provides care
		 * The location(s) at which this practitioner provides care.
		 */
		location?: Reference[];

		/**
		 * The list of healthcare services that this worker provides for this role's Organization/Location(s)
		 * The list of healthcare services that this worker provides for this role's Organization/Location(s).
		 */
		healthcareService?: Reference[];

		/**
		 * Contact details that are specific to the role/location/service
		 * Contact details that are specific to the role/location/service.
		 */
		telecom?: ContactPoint[];

		/**
		 * Times the Service Site is available
		 * A collection of times that the Service Site is available.
		 * More detailed availability information may be provided in associated Schedule/Slot resources.
		 */
		availableTime?: PractitionerRoleAvailableTime[];

		/**
		 * Not available during this time due to provided reason
		 * The HealthcareService is not available during this period of time due to the provided reason.
		 */
		notAvailable?: PractitionerRoleNotAvailable[];

		/**
		 * Description of availability exceptions
		 * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
		 */
		availabilityExceptions?: string;

		/**
		 * Extension for availabilityExceptions
		 **/
		_availabilityExceptions?: Element;

		/**
		 * Technical endpoints providing access to services operated for the practitioner with this role
		 * Technical endpoints providing access to services operated for the practitioner with this role.
		 */
		endpoint?: Reference[];
	}

	/**
	 * The people who performed the procedure
	 * Limited to 'real' people rather than equipment.
	 */
	interface ProcedurePerformer extends BackboneElement {

		/**
		 * The role the actor was in
		 * For example: surgeon, anaethetist, endoscopist.
		 */
		role?: CodeableConcept;

		/**
		 * The reference to the practitioner
		 * The practitioner who was involved in the procedure.
		 */
		actor: Reference;

		/**
		 * Organization the device or practitioner was acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Device changed in procedure
	 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
	 */
	interface ProcedureFocalDevice extends BackboneElement {

		/**
		 * Kind of change to device
		 * The kind of change that happened to the device during the procedure.
		 */
		action?: CodeableConcept;

		/**
		 * Device that was changed
		 * The device that was manipulated (changed) during the procedure.
		 */
		manipulated: Reference;
	}

	/**
	 * An action that is being or was performed on a patient
	 * An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.
	 */
	interface Procedure extends DomainResource {

		/**
		 * External Identifiers for this procedure
		 * This records identifiers associated with this procedure that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
		 */
		identifier?: Identifier[];

		/**
		 * Instantiates protocol or definition
		 * A protocol, guideline, orderset or other definition that was adhered to in whole or in part by this procedure.
		 */
		definition?: Reference[];

		/**
		 * A request for this procedure
		 * A reference to a resource that contains details of the request for this procedure.
		 */
		basedOn?: Reference[];

		/**
		 * Part of referenced event
		 * A larger event of which this particular procedure is a component or step.
		 * The MedicationAdministration has a partOf reference to Procedure, but this is not a circular reference.  For a surgical procedure, the anesthesia related medicationAdministration is part of the procedure.  For an IV medication administration,  the procedure to insert the IV port is part of the medication administration.
		 */
		partOf?: Reference[];

		/**
		 * preparation | in-progress | suspended | aborted | completed | entered-in-error | unknown
		 * A code specifying the state of the procedure. Generally this will be in-progress or completed state.
		 * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ProcedureProcedureStatus;

		/**
		 * True if procedure was not performed as scheduled
		 * Set this to true if the record is saying that the procedure was NOT performed.
		 * If true, it means the procedure did not occur as described.  Typically it would be accompanied by attributes describing the type of activity.  It might also be accompanied by body site information or time information (i.e. no procedure was done to the left arm or no procedure was done in this 2-year period).  Specifying additional information such as performer, outcome, etc. is generally inappropriate.  For example, it's not that useful to say "There was no appendectomy done at 12:03pm June 6th by Dr. Smith with a successful outcome" as it implies that there *could* have been an appendectomy done at any other time, by any other clinician or with any other outcome.

This element is labeled as a modifier because it indicates that a procedure didn't happen.
		 */
		notDone?: boolean;

		/**
		 * Extension for notDone
		 **/
		_notDone?: Element;

		/**
		 * Reason procedure was not performed
		 * A code indicating why the procedure was not performed.
		 */
		notDoneReason?: CodeableConcept;

		/**
		 * Classification of the procedure
		 * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
		 */
		category?: CodeableConcept;

		/**
		 * Identification of the procedure
		 * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
		 */
		code?: CodeableConcept;

		/**
		 * Who the procedure was performed on
		 * The person, animal or group on which the procedure was performed.
		 */
		subject: Reference;

		/**
		 * Encounter or episode associated with the procedure
		 * The encounter during which the procedure was performed.
		 */
		context?: Reference;

		/**
		 * Date/Period the procedure was performed
		 * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
		 */
		performedDateTime?: dateTime;

		/**
		 * Extension for performedDateTime
		 **/
		_performedDateTime?: Element;

		/**
		 * Date/Period the procedure was performed
		 * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
		 */
		performedPeriod?: Period;

		/**
		 * The people who performed the procedure
		 * Limited to 'real' people rather than equipment.
		 */
		performer?: ProcedurePerformer[];

		/**
		 * Where the procedure happened
		 * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
		 */
		location?: Reference;

		/**
		 * Coded reason procedure performed
		 * The coded reason why the procedure was performed. This may be coded entity of some type, or may simply be present as text.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Condition that is the reason the procedure performed
		 * The condition that is the reason why the procedure was performed.
		 * e.g. endoscopy for dilatation and biopsy, combination diagnosis and therapeutic.
		 */
		reasonReference?: Reference[];

		/**
		 * Target body sites
		 * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
		 */
		bodySite?: CodeableConcept[];

		/**
		 * The result of procedure
		 * The outcome of the procedure - did it resolve reasons for the procedure being performed?
		 * If outcome contains narrative text only, it can be captured using the CodeableConcept.text.
		 */
		outcome?: CodeableConcept;

		/**
		 * Any report resulting from the procedure
		 * This could be a histology result, pathology report, surgical report, etc..
		 * There could potentially be multiple reports - e.g. if this was a procedure which took multiple biopsies resulting in a number of anatomical pathology reports.
		 */
		report?: Reference[];

		/**
		 * Complication following the procedure
		 * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
		 * If complications are only expressed by the narrative text, they can be captured using the CodeableConcept.text.
		 */
		complication?: CodeableConcept[];

		/**
		 * A condition that is a result of the procedure
		 * Any complications that occurred during the procedure, or in the immediate post-performance period.
		 */
		complicationDetail?: Reference[];

		/**
		 * Instructions for follow up
		 * If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.
		 */
		followUp?: CodeableConcept[];

		/**
		 * Additional information about the procedure
		 * Any other notes about the procedure.  E.g. the operative notes.
		 */
		note?: Annotation[];

		/**
		 * Device changed in procedure
		 * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
		 */
		focalDevice?: ProcedureFocalDevice[];

		/**
		 * Items used during procedure
		 * Identifies medications, devices and any other substance used as part of the procedure.
		 * For devices actually implanted or removed, use Procedure.device.
		 */
		usedReference?: Reference[];

		/**
		 * Coded items used during the procedure
		 * Identifies coded items that were used as part of the procedure.
		 * For devices actually implanted or removed, use Procedure.device.
		 */
		usedCode?: CodeableConcept[];
	}

	/**
	 * Who/what is requesting procedure or diagnostic
	 * The individual who initiated the request and has responsibility for its activation.
	 * This not the dispatcher, but rather who is the authorizer.
	 */
	interface ProcedureRequestRequester extends BackboneElement {

		/**
		 * Individual making the request
		 * The device, practitioner or organization who initiated the request.
		 */
		agent: Reference;

		/**
		 * Organization agent is acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * A request for a procedure or diagnostic to be performed
	 * A record of a request for diagnostic investigations, treatments, or operations to be performed.
	 */
	interface ProcedureRequest extends DomainResource {

		/**
		 * Identifiers assigned to this order
		 * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
		 * The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 v2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 v2).  For further discussion and examples see the resource notes section below.
		 */
		identifier?: Identifier[];

		/**
		 * Protocol or definition
		 * Protocol or definition followed by this request.
		 */
		definition?: Reference[];

		/**
		 * What request fulfills
		 * Plan/proposal/order fulfilled by this request.
		 */
		basedOn?: Reference[];

		/**
		 * What request replaces
		 * The request takes the place of the referenced completed or terminated request(s).
		 */
		replaces?: Reference[];

		/**
		 * Composite Request ID
		 * A shared identifier common to all procedure or diagnostic requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
		 * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition. Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
		 */
		requisition?: Identifier;

		/**
		 * draft | active | suspended | completed | entered-in-error | cancelled
		 * The status of the order.
		 * The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, cancelled or suspended. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ProcedureRequestProcedureRequestStatus;

		/**
		 * proposal | plan | order +
		 * Whether the request is a proposal, plan, an original order or a reflex order.
		 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
		 */
		intent: ProcedureRequestProcedureRequestIntent;

		/**
		 * routine | urgent | asap | stat
		 * Indicates how quickly the ProcedureRequest should be addressed with respect to other requests.
		 */
		priority?: ProcedureRequestProcedureRequestPriority;

		/**
		 * True if procedure should not be performed
		 * Set this to true if the record is saying that the procedure should NOT be performed.
		 * This element is labeled as a [modifier](conformance-rules.html#isModifier.html) because it indicates that a procedure shouldn't happen, instead of a request for it to happen.  In general, only the code and timeframe will be present, though occasional additional qualifiers such as body site or even performer could be included to narrow the scope of the prohibition.  If the ProcedureRequest.code and ProcedureRequest.doNotPerform both contain negation, that will reinforce prohibition and should not have a double negative interpretation.
		 */
		doNotPerform?: boolean;

		/**
		 * Extension for doNotPerform
		 **/
		_doNotPerform?: Element;

		/**
		 * Classification of procedure
		 * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
		 * There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
		 */
		category?: CodeableConcept[];

		/**
		 * What is being requested/ordered
		 * A code that identifies a particular procedure, diagnostic investigation, or panel of investigations, that have been requested.
		 * Many laboratory and radiology procedure codes embed the specimen/organ system in the test ordeer name, for example,  serum or serum/plasma glucose, or a chest xray. The specimen may not be recorded separately from the test code.
		 */
		code: CodeableConcept;

		/**
		 * Individual the service is ordered for
		 * On whom or what the procedure or diagnostic is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
		 */
		subject: Reference;

		/**
		 * Encounter or Episode during which request was created
		 * An encounter or episode of care that provides additional information about the healthcare context in which this request is made.
		 */
		context?: Reference;

		/**
		 * When procedure should occur
		 * The date/time at which the diagnostic testing should occur.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When procedure should occur
		 * The date/time at which the diagnostic testing should occur.
		 */
		occurrencePeriod?: Period;

		/**
		 * When procedure should occur
		 * The date/time at which the diagnostic testing should occur.
		 */
		occurrenceTiming?: Timing;

		/**
		 * Preconditions for procedure or diagnostic
		 * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.  For example "pain", "on flare-up", etc.
		 */
		asNeededBoolean?: boolean;

		/**
		 * Extension for asNeededBoolean
		 **/
		_asNeededBoolean?: Element;

		/**
		 * Preconditions for procedure or diagnostic
		 * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.  For example "pain", "on flare-up", etc.
		 */
		asNeededCodeableConcept?: CodeableConcept;

		/**
		 * Date request signed
		 * When the request transitioned to being actionable.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Who/what is requesting procedure or diagnostic
		 * The individual who initiated the request and has responsibility for its activation.
		 * This not the dispatcher, but rather who is the authorizer.
		 */
		requester?: ProcedureRequestRequester;

		/**
		 * Performer role
		 * Desired type of performer for doing the diagnostic testing.
		 * this is a  role, not  a participation type.  I.e. does not describe the task, but describes the capacity.  For example, “compounding pharmacy” or “psychiatrist” or “internal referral”.
		 */
		performerType?: CodeableConcept;

		/**
		 * Requested perfomer
		 * The desired perfomer for doing the diagnostic testing.  For example, the surgeon, dermatopathologist, endoscopist, etc.
		 * If needed, use an [extension](extensibility.html) for listing alternative performers and/or roles and/or preference.
		 */
		performer?: Reference;

		/**
		 * Explanation/Justification for test
		 * An explanation or justification for why this diagnostic investigation is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.
		 * This may be used to decide how the diagnostic investigation will be performed, or even if it will be performed at all.   Use CodeableConcept text element if the data is free (uncoded) text as shown in the [CT Scan example](procedurerequest-example-di.html).
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Explanation/Justification for test
		 * Indicates another resource that provides a justification for why this diagnostic investigation is being requested.   May relate to the resources referred to in supportingInformation.
		 * This may be used to decide how the diagnostic investigation will be performed, or even if it will be performed at all.   Use CodeableConcept text element if the data is free (uncoded) text as shown in the [CT Scan example](procedurerequest-example-di.html).
		 */
		reasonReference?: Reference[];

		/**
		 * Additional clinical information
		 * Additional clinical information about the patient or specimen that may influence the procedure or diagnostics or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
		 */
		supportingInfo?: Reference[];

		/**
		 * Procedure Samples
		 * One or more specimens that the laboratory procedure will use.
		 * Many diagnostic procedures need a specimen, but the request itself is not actually about the specimen. This element is for when the diagnostic is requested on already existing specimens and the request points to the specimen it applies to.    Conversely, If the request is entered first with an unknown specimen, The [Specimen](specimen.html) resource references to the ProcedureRequest.
		 */
		specimen?: Reference[];

		/**
		 * Location on Body
		 * Anatomic location where the procedure should be performed. This is the target site.
		 * Only used if not implicit in the code found in ProcedureRequest.type.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [procedurerequest-targetBodySite](extension-procedurerequest-targetbodysite.html).
		 */
		bodySite?: CodeableConcept[];

		/**
		 * Comments
		 * Any other notes and comments made about the service request. For example, letting provider know that "patient hates needles" or other provider instructions.
		 */
		note?: Annotation[];

		/**
		 * Request provenance
		 * Key events in the history of the request.
		 * This may not include provenances for all versions of the request – only those deemed “relevant” or important.
This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
All Provenances should have some historical version of this Request as their subject.
		 */
		relevantHistory?: Reference[];
	}

	/**
	 * Items to re-adjudicate
	 * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
	 */
	interface ProcessRequestItem extends BackboneElement {

		/**
		 * Service instance
		 * A service line number.
		 */
		sequenceLinkId: integer;

		/**
		 * Extension for sequenceLinkId
		 **/
		_sequenceLinkId?: Element;
	}

	/**
	 * Request to perform some action on or in regards to an existing resource
	 * This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.
	 */
	interface ProcessRequest extends DomainResource {

		/**
		 * Business Identifier
		 * The ProcessRequest business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: ProcessRequestProcessRequestStatus;

		/**
		 * cancel | poll | reprocess | status
		 * The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.
		 */
		action?: ProcessRequestActionList;

		/**
		 * Party which is the target of the request
		 * The organization which is the target of the request.
		 */
		target?: Reference;

		/**
		 * Creation date
		 * The date when this resource was created.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Responsible practitioner
		 * The practitioner who is responsible for the action specified in this request.
		 */
		provider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the action speccified in this request.
		 */
		organization?: Reference;

		/**
		 * Reference to the Request resource
		 * Reference of resource which is the target or subject of this action.
		 */
		request?: Reference;

		/**
		 * Reference to the Response resource
		 * Reference of a prior response to resource which is the target or subject of this action.
		 */
		response?: Reference;

		/**
		 * Remove history
		 * If true remove all history excluding audit.
		 */
		nullify?: boolean;

		/**
		 * Extension for nullify
		 **/
		_nullify?: Element;

		/**
		 * Reference number/string
		 * A reference to supply which authenticates the process.
		 */
		reference?: string;

		/**
		 * Extension for reference
		 **/
		_reference?: Element;

		/**
		 * Items to re-adjudicate
		 * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
		 */
		item?: ProcessRequestItem[];

		/**
		 * Resource type(s) to include
		 * Names of resource types to include.
		 */
		include?: string[];

		/**
		 * Extension for include
		 **/
		_include?: Element[];

		/**
		 * Resource type(s) to exclude
		 * Names of resource types to exclude.
		 */
		exclude?: string[];

		/**
		 * Extension for exclude
		 **/
		_exclude?: Element[];

		/**
		 * Selection period
		 * A period of time during which the fulfilling resources would have been created.
		 */
		period?: Period;
	}

	/**
	 * Processing comments or additional requirements
	 * Suite of processing notes or additional requirements if the processing has been held.
	 */
	interface ProcessResponseProcessNote extends BackboneElement {

		/**
		 * display | print | printoper
		 * The note purpose: Print/Display.
		 */
		type?: CodeableConcept;

		/**
		 * Comment on the processing
		 * The note text.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;
	}

	/**
	 * ProcessResponse resource
	 * This resource provides processing status, errors and notes from the processing of a resource.
	 */
	interface ProcessResponse extends DomainResource {

		/**
		 * Business Identifier
		 * The Response business identifier.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: ProcessResponseProcessResponseStatus;

		/**
		 * Creation date
		 * The date when the enclosed suite of services were performed or completed.
		 */
		created?: dateTime;

		/**
		 * Extension for created
		 **/
		_created?: Element;

		/**
		 * Authoring Organization
		 * The organization who produced this adjudicated response.
		 */
		organization?: Reference;

		/**
		 * Request reference
		 * Original request resource reference.
		 */
		request?: Reference;

		/**
		 * Processing outcome
		 * Transaction status: error, complete, held.
		 */
		outcome?: CodeableConcept;

		/**
		 * Disposition Message
		 * A description of the status of the adjudication or processing.
		 */
		disposition?: string;

		/**
		 * Extension for disposition
		 **/
		_disposition?: Element;

		/**
		 * Responsible Practitioner
		 * The practitioner who is responsible for the services rendered to the patient.
		 */
		requestProvider?: Reference;

		/**
		 * Responsible organization
		 * The organization which is responsible for the services rendered to the patient.
		 */
		requestOrganization?: Reference;

		/**
		 * Printed Form Identifier
		 * The form to be used for printing the content.
		 */
		form?: CodeableConcept;

		/**
		 * Processing comments or additional requirements
		 * Suite of processing notes or additional requirements if the processing has been held.
		 */
		processNote?: ProcessResponseProcessNote[];

		/**
		 * Error code
		 * Processing errors.
		 */
		error?: CodeableConcept[];

		/**
		 * Request for additional information
		 * Request for additional supporting or authorizing information, such as: documents, images or resources.
		 */
		communicationRequest?: Reference[];
	}

	/**
	 * Actor involved
	 * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
	 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
	 */
	interface ProvenanceAgent extends BackboneElement {

		/**
		 * What the agents role was
		 * The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity.
		 * For example: author, performer, enterer, attester, doctor, nurse, clerk, etc.
		 */
		role?: CodeableConcept[];

		/**
		 * Who participated
		 * The individual, device or organization that participated in the event.
		 */
		whoUri: uri;

		/**
		 * Extension for whoUri
		 **/
		_whoUri?: Element;

		/**
		 * Who participated
		 * The individual, device or organization that participated in the event.
		 */
		whoReference: Reference;

		/**
		 * Who the agent is representing
		 * The individual, device, or organization for whom the change was made.
		 */
		onBehalfOfUri?: uri;

		/**
		 * Extension for onBehalfOfUri
		 **/
		_onBehalfOfUri?: Element;

		/**
		 * Who the agent is representing
		 * The individual, device, or organization for whom the change was made.
		 */
		onBehalfOfReference?: Reference;

		/**
		 * Type of relationship between agents
		 * The type of relationship between agents.
		 */
		relatedAgentType?: CodeableConcept;
	}

	/**
	 * An entity used in this activity
	 * An entity used in this activity.
	 * Multiple userIds may be associated with the same Practitioner or other individual across various appearances, each with distinct privileges.
	 */
	interface ProvenanceEntity extends BackboneElement {

		/**
		 * derivation | revision | quotation | source | removal
		 * How the entity was used during the activity.
		 */
		role: ProvenanceProvenanceEntityRole;

		/**
		 * Identity of entity
		 * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
		 * Identity may be a reference to a resource or to something else, depending on the type.
		 */
		whatUri: uri;

		/**
		 * Extension for whatUri
		 **/
		_whatUri?: Element;

		/**
		 * Identity of entity
		 * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
		 * Identity may be a reference to a resource or to something else, depending on the type.
		 */
		whatReference: Reference;

		/**
		 * Identity of entity
		 * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
		 * Identity may be a reference to a resource or to something else, depending on the type.
		 */
		whatIdentifier: Identifier;

		/**
		 * Entity is attributed to this agent
		 * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
		 * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.
		 */
		agent?: ProvenanceAgent[];
	}

	/**
	 * Who, What, When for a set of resources
	 * Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
	 * Some parties may be duplicated between the target resource and its provenance.  For instance, the prescriber is usually (but not always) the author of the prescription resource. This resource is defined with close consideration for W3C Provenance.
	 */
	interface Provenance extends DomainResource {

		/**
		 * Target Reference(s) (usually version specific)
		 * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
		 * Target references are usually version specific, but may not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource may not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.
		 */
		target: Reference[];

		/**
		 * When the activity occurred
		 * The period during which the activity occurred.
		 * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
		 */
		period?: Period;

		/**
		 * When the activity was recorded / updated
		 * The instant of time at which the activity was recorded.
		 * This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.
		 */
		recorded: instant;

		/**
		 * Extension for recorded
		 **/
		_recorded?: Element;

		/**
		 * Policy or plan the activity was defined by
		 * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
		 * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
		 */
		policy?: uri[];

		/**
		 * Extension for policy
		 **/
		_policy?: Element[];

		/**
		 * Where the activity occurred, if relevant
		 * Where the activity occurred, if relevant.
		 */
		location?: Reference;

		/**
		 * Reason the activity is occurring
		 * The reason that the activity was taking place.
		 */
		reason?: Coding[];

		/**
		 * Activity that occurred
		 * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
		 */
		activity?: Coding;

		/**
		 * Actor involved
		 * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
		 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
		 */
		agent: ProvenanceAgent[];

		/**
		 * An entity used in this activity
		 * An entity used in this activity.
		 * Multiple userIds may be associated with the same Practitioner or other individual across various appearances, each with distinct privileges.
		 */
		entity?: ProvenanceEntity[];

		/**
		 * Signature on target
		 * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
		 */
		signature?: Signature[];
	}

	/**
	 * Only allow data when
	 * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
	 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.

This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
	 */
	interface QuestionnaireItemEnableWhen extends BackboneElement {

		/**
		 * Question that determines whether item is enabled
		 * The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
		 * If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.
		 */
		question: string;

		/**
		 * Extension for question
		 **/
		_question?: Element;

		/**
		 * Enable when answered or not
		 * An indication that this item should be enabled only if the specified question is answered (hasAnswer=true) or not answered (hasAnswer=false).
		 * If answered=false and answer values are also provided, then they are treated as "or".  I.e. "Enable if the question is unanswered or the answer is one of the specified values".  If answered=true and answers are present, one of the specified answers must be met. (So there's little reason to specify answered=true if answers are present.).
		 */
		hasAnswer?: boolean;

		/**
		 * Extension for hasAnswer
		 **/
		_hasAnswer?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerBoolean?: boolean;

		/**
		 * Extension for answerBoolean
		 **/
		_answerBoolean?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerDecimal?: decimal;

		/**
		 * Extension for answerDecimal
		 **/
		_answerDecimal?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerInteger?: integer;

		/**
		 * Extension for answerInteger
		 **/
		_answerInteger?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerDate?: date;

		/**
		 * Extension for answerDate
		 **/
		_answerDate?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerDateTime?: dateTime;

		/**
		 * Extension for answerDateTime
		 **/
		_answerDateTime?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerTime?: time;

		/**
		 * Extension for answerTime
		 **/
		_answerTime?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerString?: string;

		/**
		 * Extension for answerString
		 **/
		_answerString?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerUri?: uri;

		/**
		 * Extension for answerUri
		 **/
		_answerUri?: Element;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerAttachment?: Attachment;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerCoding?: Coding;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerQuantity?: Quantity;

		/**
		 * Value question must have
		 * An answer that the referenced question must match in order for the item to be enabled.
		 * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  

Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.

The dataType of this element must be the same as the data type of the question being referenced.
		 */
		answerReference?: Reference;
	}

	/**
	 * Permitted answer
	 * One of the permitted answers for a "choice" or "open-choice" question.
	 * This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
	 */
	interface QuestionnaireItemOption extends BackboneElement {

		/**
		 * Answer value
		 * A potential answer that's allowed as the answer to this question.
		 * The data type of the value must agree with the item.type.
		 */
		valueInteger: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Answer value
		 * A potential answer that's allowed as the answer to this question.
		 * The data type of the value must agree with the item.type.
		 */
		valueDate: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * Answer value
		 * A potential answer that's allowed as the answer to this question.
		 * The data type of the value must agree with the item.type.
		 */
		valueTime: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Answer value
		 * A potential answer that's allowed as the answer to this question.
		 * The data type of the value must agree with the item.type.
		 */
		valueString: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Answer value
		 * A potential answer that's allowed as the answer to this question.
		 * The data type of the value must agree with the item.type.
		 */
		valueCoding: Coding;
	}

	/**
	 * Questions and sections within the Questionnaire
	 * A particular question, question grouping or display text that is part of the questionnaire.
	 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
	 */
	interface QuestionnaireItem extends BackboneElement {

		/**
		 * Unique id for item in questionnaire
		 * An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
		 * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
		 */
		linkId: string;

		/**
		 * Extension for linkId
		 **/
		_linkId?: Element;

		/**
		 * ElementDefinition - details for the item
		 * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item. If a definition is provided, then the following element values can be inferred from the definition: 

* code (ElementDefinition.code)
* type (ElementDefinition.type)
* required (ElementDefinition.min)
* repeats (ElementDefinition.max)
* maxLength (ElementDefinition.maxLength)
* options (ElementDefinition.binding)

Any information provided in these elements on a Questionnaire Item overrides the information from the definition.
		 * the URI refers to an ElementDefinition in either a [StructureDefinition](structuredefinition.html#) or a [DataElement](dataelement.html#), and always starts with the canonical URL for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](element-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition. Note that [LOINC codes](loinc.html#dataelements) implicitly define DataElement resources.
		 */
		definition?: uri;

		/**
		 * Extension for definition
		 **/
		_definition?: Element;

		/**
		 * Corresponding concept for this item in a terminology
		 * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
		 * The value may come from the ElementDefinition referred to by .definition.
		 */
		code?: Coding[];

		/**
		 * E.g. "1(a)", "2.5.3"
		 * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
		 * These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.

Typically these won't be used for "display" items, though such use is not prohibited.

Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
		 */
		prefix?: string;

		/**
		 * Extension for prefix
		 **/
		_prefix?: Element;

		/**
		 * Primary text for the item
		 * The name of a section, the text of a question or text content for a display item.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * group | display | boolean | decimal | integer | date | dateTime +
		 * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
		 * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
		 */
		type: QuestionnaireQuestionnaireItemType;

		/**
		 * Only allow data when
		 * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
		 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.

This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
		 */
		enableWhen?: QuestionnaireItemEnableWhen[];

		/**
		 * Whether the item must be included in data results
		 * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
		 * Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  If an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one child element). The value may come from the ElementDefinition referred to by .definition.
		 */
		required?: boolean;

		/**
		 * Extension for required
		 **/
		_required?: Element;

		/**
		 * Whether the item may repeat
		 * An indication, if true, that the item may occur multiple times in the response, collecting multiple answers answers for questions or multiple sets of answers for groups.
		 * If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition or to simply list each of the answers beneath the question.  (Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.). The value may come from the ElementDefinition referred to by .definition.
		 */
		repeats?: boolean;

		/**
		 * Extension for repeats
		 **/
		_repeats?: Element;

		/**
		 * Don't allow human editing
		 * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
		 * The value of readOnly elements can be established by asserting  extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
		 */
		readOnly?: boolean;

		/**
		 * Extension for readOnly
		 **/
		_readOnly?: Element;

		/**
		 * No more than this many characters
		 * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
		 * For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
		 */
		maxLength?: integer;

		/**
		 * Extension for maxLength
		 **/
		_maxLength?: Element;

		/**
		 * Valueset containing permitted answers
		 * A reference to a value set containing a list of codes representing permitted answers for a "choice" or "open-choice" question.
		 * LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](loinc.html#alist). The value may come from the ElementDefinition referred to by .definition.
		 */
		options?: Reference;

		/**
		 * Permitted answer
		 * One of the permitted answers for a "choice" or "open-choice" question.
		 * This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
		 */
		option?: QuestionnaireItemOption[];

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialBoolean?: boolean;

		/**
		 * Extension for initialBoolean
		 **/
		_initialBoolean?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialDecimal?: decimal;

		/**
		 * Extension for initialDecimal
		 **/
		_initialDecimal?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialInteger?: integer;

		/**
		 * Extension for initialInteger
		 **/
		_initialInteger?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialDate?: date;

		/**
		 * Extension for initialDate
		 **/
		_initialDate?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialDateTime?: dateTime;

		/**
		 * Extension for initialDateTime
		 **/
		_initialDateTime?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialTime?: time;

		/**
		 * Extension for initialTime
		 **/
		_initialTime?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialString?: string;

		/**
		 * Extension for initialString
		 **/
		_initialString?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialUri?: uri;

		/**
		 * Extension for initialUri
		 **/
		_initialUri?: Element;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialAttachment?: Attachment;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialCoding?: Coding;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialQuantity?: Quantity;

		/**
		 * Default value when item is first rendered
		 * The value that should be defaulted when initially rendering the questionnaire for user input.
		 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.

The data type of initial[x] must agree with the item.type.
		 */
		initialReference?: Reference;

		/**
		 * Nested questionnaire items
		 * Text, questions and other groups to be nested beneath a question or group.
		 * There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
		 */
		item?: QuestionnaireItem[];
	}

	/**
	 * A structured set of questions
	 * A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
	 */
	interface Questionnaire extends DomainResource {

		/**
		 * Logical URI to reference this questionnaire (globally unique)
		 * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this questionnaire is (or will be) published. The URL SHOULD include the major version of the questionnaire. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the questionnaire
		 * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the questionnaire
		 * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different questionnaire instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the questionnaire with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this questionnaire (computer friendly)
		 * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this questionnaire (human friendly)
		 * A short, descriptive, user-friendly title for the questionnaire.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this questionnaire. Enables tracking the life-cycle of the content.
		 * Allows filtering of questionnaires that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired questionnaire without due consideration.
		 */
		status: QuestionnairePublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of questionnaire that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental questionnaire in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the questionnaire was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the questionnaire.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Natural language description of the questionnaire
		 * A free text natural language description of the questionnaire from a consumer's perspective.
		 * This description can be used to capture details such as why the questionnaire was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this questionnaire is defined
		 * Explaination of why this questionnaire is needed and why it has been designed as it has.
		 * This element does not describe the usage of the questionnaire Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * When the questionnaire was approved by publisher
		 * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
		 * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
		 */
		approvalDate?: date;

		/**
		 * Extension for approvalDate
		 **/
		_approvalDate?: Element;

		/**
		 * When the questionnaire was last reviewed
		 * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
		 * If specified, this is usually after the approval date.
		 */
		lastReviewDate?: date;

		/**
		 * Extension for lastReviewDate
		 **/
		_lastReviewDate?: Element;

		/**
		 * When the questionnaire is expected to be used
		 * The period during which the questionnaire content was or is planned to be in active use.
		 * The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
		 */
		effectivePeriod?: Period;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate questionnaire instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for questionnaire (if applicable)
		 * A legal or geographic region in which the questionnaire is intended to be used.
		 * It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Concept that represents the overall questionnaire
		 * An identifier for this question or group of questions in a particular terminology such as LOINC.
		 */
		code?: Coding[];

		/**
		 * Resource that can be subject of QuestionnaireResponse
		 * The types of subjects that can be the subject of responses created for the questionnaire.
		 * If none are specified, then the subject is unlimited.
		 */
		subjectType?: code[];

		/**
		 * Extension for subjectType
		 **/
		_subjectType?: Element[];

		/**
		 * Questions and sections within the Questionnaire
		 * A particular question, question grouping or display text that is part of the questionnaire.
		 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
		 */
		item?: QuestionnaireItem[];
	}

	/**
	 * The response(s) to the question
	 * The respondent's answer(s) to the question.
	 * The value is nested because we cannot have a repeating structure that has variable type.
	 */
	interface QuestionnaireResponseItemAnswer extends BackboneElement {

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueBoolean?: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueDecimal?: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueInteger?: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueDate?: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueDateTime?: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueTime?: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueUri?: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueAttachment?: Attachment;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueCoding?: Coding;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueQuantity?: Quantity;

		/**
		 * Single-valued answer to the question
		 * The answer (or one of the answers) provided by the respondent to the question.
		 * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
		 */
		valueReference?: Reference;

		/**
		 * Nested groups and questions
		 * Nested groups and/or questions found within this particular answer.
		 */
		item?: QuestionnaireResponseItem[];
	}

	/**
	 * Groups and questions
	 * A group or question item from the original questionnaire for which answers are provided.
	 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
	 */
	interface QuestionnaireResponseItem extends BackboneElement {

		/**
		 * Pointer to specific item from Questionnaire
		 * The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
		 */
		linkId: string;

		/**
		 * Extension for linkId
		 **/
		_linkId?: Element;

		/**
		 * ElementDefinition - details for the item
		 * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
		 * The ElementDefinition must be in a [StructureDefinition](structuredefinition.html) or a [DataElement](dataelement.html), and must have a fragment identifier that identifies the specific data element by its id (Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].

There is no need for this element if the item pointed to by the linkId has a definition listed.
		 */
		definition?: uri;

		/**
		 * Extension for definition
		 **/
		_definition?: Element;

		/**
		 * Name for group or question text
		 * Text that is displayed above the contents of the group or as the text of the question being answered.
		 */
		text?: string;

		/**
		 * Extension for text
		 **/
		_text?: Element;

		/**
		 * The subject this group's answers are about
		 * More specific subject this section's answers are about, details the subject given in QuestionnaireResponse.
		 */
		subject?: Reference;

		/**
		 * The response(s) to the question
		 * The respondent's answer(s) to the question.
		 * The value is nested because we cannot have a repeating structure that has variable type.
		 */
		answer?: QuestionnaireResponseItemAnswer[];

		/**
		 * Nested questionnaire response items
		 * Questions or sub-groups nested beneath a question or group.
		 */
		item?: QuestionnaireResponseItem[];
	}

	/**
	 * A structured set of questions and their answers
	 * A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
	 * The QuestionnaireResponse contains enough information about the questions asked and their organization that it can be interpreted somewhat independently from the Questionnaire it is based on.  I.e. You don't need access to the Questionnaire in order to extract basic information from a QuestionnaireResponse.
	 */
	interface QuestionnaireResponse extends DomainResource {

		/**
		 * Unique id for this set of answers
		 * A business identifier assigned to a particular completed (or partially completed) questionnaire.
		 */
		identifier?: Identifier;

		/**
		 * Request fulfilled by this QuestionnaireResponse
		 * The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ProcedureRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
		 */
		basedOn?: Reference[];

		/**
		 * Part of this action
		 * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
		 * Composition of questionnaire responses will be handled by the parent questionnaire having answers that reference the child questionnaire.  For relationships to referrals, and other types of requests, use basedOn.
		 */
		parent?: Reference[];

		/**
		 * Form being answered
		 * The Questionnaire that defines and organizes the questions for which answers are being provided.
		 * If a QuestionnaireResponse references a Questionnaire, then the QuestionnaireResponse structure must be consistent with the Questionnaire (i.e. questions must be organized into the same groups, nested questions must still be nested, etc.).
		 */
		questionnaire?: Reference;

		/**
		 * in-progress | completed | amended | entered-in-error | stopped
		 * The position of the questionnaire response within its overall lifecycle.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: QuestionnaireResponseQuestionnaireResponseStatus;

		/**
		 * The subject of the questions
		 * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
		 * If the Questionnaire declared a subjectType, the resource pointed to by this element must be an instance of one of the listed types.
		 */
		subject?: Reference;

		/**
		 * Encounter or Episode during which questionnaire was completed
		 * The encounter or episode of care with primary association to the questionnaire response.
		 * A questionnaire that was initiated during an encounter but not fully completed during the encounter would still generally be associated with the encounter.
		 */
		context?: Reference;

		/**
		 * Date the answers were gathered
		 * The date and/or time that this set of answers were last changed.
		 * May be different from the lastUpdateTime of the resource itself, because that reflects when the data was known to the server, not when the data was captured.

This element is optional to allow for systems that may not know the value, however it SHOULD be populated if possible.
		 */
		authored?: dateTime;

		/**
		 * Extension for authored
		 **/
		_authored?: Element;

		/**
		 * Person who received and recorded the answers
		 * Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
		 * Mapping a subject's answers to multiple choice options and determining what to put in the textual answer is a matter of interpretation.  Authoring by device would indicate that some portion of the questionnaire had been auto-populated.
		 */
		author?: Reference;

		/**
		 * The person who answered the questions
		 * The person who answered the questions about the subject.
		 * If not specified, no inference can be made about who provided the data.
		 */
		source?: Reference;

		/**
		 * Groups and questions
		 * A group or question item from the original questionnaire for which answers are provided.
		 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
		 */
		item?: QuestionnaireResponseItem[];
	}

	/**
	 * Who/what is requesting service
	 * The individual who initiated the request and has responsibility for its activation.
	 */
	interface ReferralRequestRequester extends BackboneElement {

		/**
		 * Individual making the request
		 * The device, practitioner, etc. who initiated the request.
		 */
		agent: Reference;

		/**
		 * Organization agent is acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * A request for referral or transfer of care
	 * Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
	 */
	interface ReferralRequest extends DomainResource {

		/**
		 * Business identifier
		 * Business identifier that uniquely identifies the referral/care transfer request instance.
		 */
		identifier?: Identifier[];

		/**
		 * Instantiates protocol or definition
		 * A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
		 */
		definition?: Reference[];

		/**
		 * Request fulfilled by this request
		 * Indicates any plans, proposals or orders that this request is intended to satisfy - in whole or in part.
		 */
		basedOn?: Reference[];

		/**
		 * Request(s) replaced by this request
		 * Completed or terminated request(s) whose function is taken by this new request.
		 * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
		 */
		replaces?: Reference[];

		/**
		 * Composite request this is part of
		 * The business identifier of the logical "grouping" request/order that this referral is a part of.
		 */
		groupIdentifier?: Identifier;

		/**
		 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
		 * The status of the authorization/intention reflected by the referral request record.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ReferralRequestReferralRequestStatus;

		/**
		 * proposal | plan | order
		 * Distinguishes the "level" of authorization/demand implicit in this request.
		 */
		intent: ReferralRequestReferralCategory;

		/**
		 * Referral/Transition of care request type
		 * An indication of the type of referral (or where applicable the type of transfer of care) request.
		 */
		type?: CodeableConcept;

		/**
		 * Urgency of referral / transfer of care request
		 * An indication of the urgency of referral (or where applicable the type of transfer of care) request.
		 */
		priority?: code;

		/**
		 * Extension for priority
		 **/
		_priority?: Element;

		/**
		 * Actions requested as part of the referral
		 * The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
		 */
		serviceRequested?: CodeableConcept[];

		/**
		 * Patient referred to care or transfer
		 * The patient who is the subject of a referral or transfer of care request.
		 * Referral of family, group or community is to be catered for by profiles.
		 */
		subject: Reference;

		/**
		 * Originating encounter
		 * The encounter at which the request for referral or transfer of care is initiated.
		 */
		context?: Reference;

		/**
		 * When the service(s) requested in the referral should occur
		 * The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
		 * When the occurrenceDateTime is used, then it is indicating that the requested service must happen before the specified date.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When the service(s) requested in the referral should occur
		 * The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
		 * When the occurrenceDateTime is used, then it is indicating that the requested service must happen before the specified date.
		 */
		occurrencePeriod?: Period;

		/**
		 * Date of creation/activation
		 * Date/DateTime of creation for draft requests and date of activation for active requests.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Who/what is requesting service
		 * The individual who initiated the request and has responsibility for its activation.
		 */
		requester?: ReferralRequestRequester;

		/**
		 * The clinical specialty (discipline) that the referral is requested for
		 * Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
		 */
		specialty?: CodeableConcept;

		/**
		 * Receiver of referral / transfer of care request
		 * The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
		 * There will be a primary receiver. But the request can be received by any number of "copied to" providers or organizations.
		 */
		recipient?: Reference[];

		/**
		 * Reason for referral / transfer of care request
		 * Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
		 */
		reasonCode?: CodeableConcept[];

		/**
		 * Why is service needed?
		 * Indicates another resource whose existence justifies this request.
		 */
		reasonReference?: Reference[];

		/**
		 * A textual description of the referral
		 * The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Additonal information to support referral or transfer of care request
		 * Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
		 */
		supportingInfo?: Reference[];

		/**
		 * Comments made about referral request
		 * Comments made about the referral request by any of the participants.
		 */
		note?: Annotation[];

		/**
		 * Key events in history of request
		 * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
		 * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
		 */
		relevantHistory?: Reference[];
	}

	/**
	 * An person that is related to a patient, but who is not a direct target of care
	 * Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
	 */
	interface RelatedPerson extends DomainResource {

		/**
		 * A human identifier for this person
		 * Identifier for a person within a particular scope.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this related person's record is in active use
		 * Whether this related person record is in active use.
		 * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * The patient this person is related to
		 * The patient this person is related to.
		 */
		patient: Reference;

		/**
		 * The nature of the relationship
		 * The nature of the relationship between a patient and the related person.
		 */
		relationship?: CodeableConcept;

		/**
		 * A name associated with the person
		 * A name associated with the person.
		 */
		name?: HumanName[];

		/**
		 * A contact detail for the person
		 * A contact detail for the person, e.g. a telephone number or an email address.
		 * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
		 */
		telecom?: ContactPoint[];

		/**
		 * male | female | other | unknown
		 * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
		 */
		gender?: RelatedPersonAdministrativeGender;

		/**
		 * The date on which the related person was born
		 * The date on which the related person was born.
		 */
		birthDate?: date;

		/**
		 * Extension for birthDate
		 **/
		_birthDate?: Element;

		/**
		 * Address where the related person can be contacted or visited
		 * Address where the related person can be contacted or visited.
		 */
		address?: Address[];

		/**
		 * Image of the person
		 * Image of the person.
		 */
		photo?: Attachment[];

		/**
		 * Period of time that this relationship is considered valid
		 * The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.
		 */
		period?: Period;
	}

	/**
	 * Whether or not the action is applicable
	 * An expression that describes applicability criteria, or start/stop conditions for the action.
	 */
	interface RequestGroupActionCondition extends BackboneElement {

		/**
		 * applicability | start | stop
		 * The kind of condition.
		 * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
		 */
		kind: RequestGroupActionConditionKind;

		/**
		 * Natural language description of the condition
		 * A brief, natural language description of the condition that effectively communicates the intended semantics.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Language of the expression
		 * The media type of the language for the expression.
		 */
		language?: string;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * Boolean-valued expression
		 * An expression that returns true or false, indicating whether or not the condition is satisfied.
		 * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;
	}

	/**
	 * Relationship to another action
	 * A relationship to another action such as "before" or "30-60 minutes after start of".
	 */
	interface RequestGroupActionRelatedAction extends BackboneElement {

		/**
		 * What action this is related to
		 * The element id of the action this is related to.
		 */
		actionId: id;

		/**
		 * Extension for actionId
		 **/
		_actionId?: Element;

		/**
		 * before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end
		 * The relationship of this action to the related action.
		 */
		relationship: RequestGroupActionRelationshipType;

		/**
		 * Time offset for the relationship
		 * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
		 */
		offsetDuration?: Duration;

		/**
		 * Time offset for the relationship
		 * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
		 */
		offsetRange?: Range;
	}

	/**
	 * Proposed actions, if any
	 * The actions, if any, produced by the evaluation of the artifact.
	 */
	interface RequestGroupAction extends BackboneElement {

		/**
		 * User-visible label for the action (e.g. 1. or A.)
		 * A user-visible label for the action.
		 */
		label?: string;

		/**
		 * Extension for label
		 **/
		_label?: Element;

		/**
		 * User-visible title
		 * The title of the action displayed to a user.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Short description of the action
		 * A short description of the action used to provide a summary to display to the user.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
		 * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
		 */
		textEquivalent?: string;

		/**
		 * Extension for textEquivalent
		 **/
		_textEquivalent?: Element;

		/**
		 * Code representing the meaning of the action or sub-actions
		 * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template.
		 */
		code?: CodeableConcept[];

		/**
		 * Supporting documentation for the intended performer of the action
		 * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
		 */
		documentation?: RelatedArtifact[];

		/**
		 * Whether or not the action is applicable
		 * An expression that describes applicability criteria, or start/stop conditions for the action.
		 */
		condition?: RequestGroupActionCondition[];

		/**
		 * Relationship to another action
		 * A relationship to another action such as "before" or "30-60 minutes after start of".
		 */
		relatedAction?: RequestGroupActionRelatedAction[];

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingDateTime?: dateTime;

		/**
		 * Extension for timingDateTime
		 **/
		_timingDateTime?: Element;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingPeriod?: Period;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingDuration?: Duration;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingRange?: Range;

		/**
		 * When the action should take place
		 * An optional value describing when the action should be performed.
		 */
		timingTiming?: Timing;

		/**
		 * Who should perform the action
		 * The participant that should perform or be responsible for this action.
		 */
		participant?: Reference[];

		/**
		 * create | update | remove | fire-event
		 * The type of action to perform (create, update, remove).
		 */
		type?: Coding;

		/**
		 * visual-group | logical-group | sentence-group
		 * Defines the grouping behavior for the action and its children.
		 */
		groupingBehavior?: RequestGroupActionGroupingBehavior;

		/**
		 * any | all | all-or-none | exactly-one | at-most-one | one-or-more
		 * Defines the selection behavior for the action and its children.
		 */
		selectionBehavior?: RequestGroupActionSelectionBehavior;

		/**
		 * must | could | must-unless-documented
		 * Defines the requiredness behavior for the action.
		 */
		requiredBehavior?: RequestGroupActionRequiredBehavior;

		/**
		 * yes | no
		 * Defines whether the action should usually be preselected.
		 */
		precheckBehavior?: RequestGroupActionPrecheckBehavior;

		/**
		 * single | multiple
		 * Defines whether the action can be selected multiple times.
		 */
		cardinalityBehavior?: RequestGroupActionCardinalityBehavior;

		/**
		 * The target of the action
		 * The resource that is the target of the action (e.g. CommunicationRequest).
		 * The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
		 */
		resource?: Reference;

		/**
		 * Sub action
		 * Sub actions.
		 */
		action?: RequestGroupAction[];
	}

	/**
	 * A group of related requests
	 * A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
	 */
	interface RequestGroup extends DomainResource {

		/**
		 * Business identifier
		 * Allows a service to provide a unique, business identifier for the request.
		 */
		identifier?: Identifier[];

		/**
		 * Instantiates protocol or definition
		 * A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
		 */
		definition?: Reference[];

		/**
		 * Fulfills plan, proposal, or order
		 * A plan, proposal or order that is fulfilled in whole or in part by this request.
		 */
		basedOn?: Reference[];

		/**
		 * Request(s) replaced by this request
		 * Completed or terminated request(s) whose function is taken by this new request.
		 * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
		 */
		replaces?: Reference[];

		/**
		 * Composite request this is part of
		 * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
		 * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
		 */
		groupIdentifier?: Identifier;

		/**
		 * draft | active | suspended | cancelled | completed | entered-in-error | unknown
		 * The current state of the request. For request groups, the status reflects the status of all the requests in the group.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: RequestGroupRequestStatus;

		/**
		 * proposal | plan | order
		 * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
		 * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
		 */
		intent: RequestGroupRequestIntent;

		/**
		 * routine | urgent | asap | stat
		 * Indicates how quickly the request should be addressed with respect to other requests.
		 */
		priority?: RequestGroupRequestPriority;

		/**
		 * Who the request group is about
		 * The subject for which the request group was created.
		 */
		subject?: Reference;

		/**
		 * Encounter or Episode for the request group
		 * Describes the context of the request group, if any.
		 */
		context?: Reference;

		/**
		 * When the request group was authored
		 * Indicates when the request group was created.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Device or practitioner that authored the request group
		 * Provides a reference to the author of the request group.
		 */
		author?: Reference;

		/**
		 * Reason for the request group
		 * Indicates the reason the request group was created. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
		 */
		reasonCodeableConcept?: CodeableConcept;

		/**
		 * Reason for the request group
		 * Indicates the reason the request group was created. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
		 */
		reasonReference?: Reference;

		/**
		 * Additional notes about the response
		 * Provides a mechanism to communicate additional information about the response.
		 */
		note?: Annotation[];

		/**
		 * Proposed actions, if any
		 * The actions, if any, produced by the evaluation of the artifact.
		 */
		action?: RequestGroupAction[];
	}

	/**
	 * Defined path through the study for a subject
	 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
	 */
	interface ResearchStudyArm extends BackboneElement {

		/**
		 * Label for study arm
		 * Unique, human-readable label for this arm of the study.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Categorization of study arm
		 * Categorization of study arm, e.g. experimental, active comparator, placebo comparater.
		 */
		code?: CodeableConcept;

		/**
		 * Short explanation of study path
		 * A succinct description of the path through the study that would be followed by a subject adhering to this arm.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;
	}

	/**
	 * Investigation to increase healthcare-related patient-independent knowledge
	 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
	 * Need to make sure we encompass public health studies.
	 */
	interface ResearchStudy extends DomainResource {

		/**
		 * Business Identifier for study
		 * Identifiers assigned to this research study by the sponsor or other systems.
		 */
		identifier?: Identifier[];

		/**
		 * Name for this study
		 * A short, descriptive user-friendly label for the study.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * Steps followed in executing study
		 * The set of steps expected to be performed as part of the execution of the study.
		 */
		protocol?: Reference[];

		/**
		 * Part of larger study
		 * A larger research study of which this particular study is a component or step.
		 */
		partOf?: Reference[];

		/**
		 * draft | in-progress | suspended | stopped | completed | entered-in-error
		 * The current state of the study.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ResearchStudyResearchStudyStatus;

		/**
		 * Classifications for the study
		 * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
		 */
		category?: CodeableConcept[];

		/**
		 * Drugs, devices, conditions, etc. under study
		 * The condition(s), medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
		 */
		focus?: CodeableConcept[];

		/**
		 * Contact details for the study
		 * Contact details to assist a user in learning more about or engaging with the study.
		 */
		contact?: ContactDetail[];

		/**
		 * References and dependencies
		 * Citations, references and other related documents.
		 */
		relatedArtifact?: RelatedArtifact[];

		/**
		 * Used to search for the study
		 * Key terms to aid in searching for or filtering the study.
		 */
		keyword?: CodeableConcept[];

		/**
		 * Geographic region(s) for study
		 * Indicates a country, state or other region where the study is taking place.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * What this is study doing
		 * A full description of how the study is being conducted.
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Inclusion & exclusion criteria
		 * Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. " 200 female Europeans between the ages of 20 and 45 with early onset diabetes".
		 * The Group referenced should not generally enumerate specific subjects.  Subjects will be linked to the study using the ResearchSubject resource.
		 */
		enrollment?: Reference[];

		/**
		 * When the study began and ended
		 * Identifies the start date and the expected (or actual, depending on status) end date for the study.
		 */
		period?: Period;

		/**
		 * Organization responsible for the study
		 * The organization responsible for the execution of the study.
		 */
		sponsor?: Reference;

		/**
		 * The individual responsible for the study
		 * Indicates the individual who has primary oversite of the execution of the study.
		 */
		principalInvestigator?: Reference;

		/**
		 * Location involved in study execution
		 * Clinic, hospital or other healthcare location that is participating in the study.
		 */
		site?: Reference[];

		/**
		 * Reason for terminating study early
		 * A description and/or code explaining the premature termination of the study.
		 */
		reasonStopped?: CodeableConcept;

		/**
		 * Comments made about the event
		 * Comments made about the event by the performer, subject or other participants.
		 */
		note?: Annotation[];

		/**
		 * Defined path through the study for a subject
		 * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
		 */
		arm?: ResearchStudyArm[];
	}

	/**
	 * Investigation to increase healthcare-related patient-independent knowledge
	 * A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
	 * Need to make sure we encompass public health studies.
	 */
	interface ResearchSubject extends DomainResource {

		/**
		 * Business Identifier for research subject
		 * Identifiers assigned to this research study by the sponsor or other systems.
		 */
		identifier?: Identifier;

		/**
		 * candidate | enrolled | active | suspended | withdrawn | completed
		 * The current state of the subject.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: ResearchSubjectResearchSubjectStatus;

		/**
		 * Start and end of participation
		 * The dates the subject began and ended their participation in the study.
		 */
		period?: Period;

		/**
		 * Study subject is part of
		 * Reference to the study the subject is participating in.
		 */
		study: Reference;

		/**
		 * Who is part of study
		 * The record of the person or animal who is involved in the study.
		 */
		individual: Reference;

		/**
		 * What path should be followed
		 * The name of the arm in the study the subject is expected to follow as part of this study.
		 */
		assignedArm?: string;

		/**
		 * Extension for assignedArm
		 **/
		_assignedArm?: Element;

		/**
		 * What path was followed
		 * The name of the arm in the study the subject actually followed as part of this study.
		 */
		actualArm?: string;

		/**
		 * Extension for actualArm
		 **/
		_actualArm?: Element;

		/**
		 * Agreement to participate in study
		 * A record of the patient's informed agreement to participate in the study.
		 */
		consent?: Reference;
	}

	/**
	 * Base Resource
	 * This is the base resource type for everything.
	 */
	interface Resource {
		/**
		 * The type of the resource.
		 */
		resourceType?: string;

		/**
		 * Extension for 'resourceType'.
		 */
		_resourceType?: Element;

		/**
		 * Logical id of this artifact
		 * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
		 * The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
		 */
		id?: id;

		/**
		 * Extension for id
		 **/
		_id?: Element;

		/**
		 * Metadata about the resource
		 * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
		 */
		meta?: Meta;

		/**
		 * A set of rules under which this content was created
		 * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
		 * Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. 

This element is labelled as a modifier because the implicit rules may provide additional knowledge about the resource that modifies it's meaning or interpretation.
		 */
		implicitRules?: uri;

		/**
		 * Extension for implicitRules
		 **/
		_implicitRules?: Element;

		/**
		 * Language of the resource content
		 * The base language in which the resource is written.
		 * Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource  Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;
	}

	/**
	 * Outcome predicted
	 * Describes the expected outcome for the subject.
	 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
	 */
	interface RiskAssessmentPrediction extends BackboneElement {

		/**
		 * Possible outcome for the subject
		 * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
		 */
		outcome: CodeableConcept;

		/**
		 * Likelihood of specified outcome
		 * How likely is the outcome (in the specified timeframe).
		 * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
		 */
		probabilityDecimal?: decimal;

		/**
		 * Extension for probabilityDecimal
		 **/
		_probabilityDecimal?: Element;

		/**
		 * Likelihood of specified outcome
		 * How likely is the outcome (in the specified timeframe).
		 * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
		 */
		probabilityRange?: Range;

		/**
		 * Likelihood of specified outcome as a qualitative value
		 * How likely is the outcome (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, high).
		 */
		qualitativeRisk?: CodeableConcept;

		/**
		 * Relative likelihood
		 * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
		 */
		relativeRisk?: decimal;

		/**
		 * Extension for relativeRisk
		 **/
		_relativeRisk?: Element;

		/**
		 * Timeframe or age range
		 * Indicates the period of time or age range of the subject to which the specified probability applies.
		 * If not specified, the risk applies "over the subject's lifespan".
		 */
		whenPeriod?: Period;

		/**
		 * Timeframe or age range
		 * Indicates the period of time or age range of the subject to which the specified probability applies.
		 * If not specified, the risk applies "over the subject's lifespan".
		 */
		whenRange?: Range;

		/**
		 * Explanation of prediction
		 * Additional information explaining the basis for the prediction.
		 */
		rationale?: string;

		/**
		 * Extension for rationale
		 **/
		_rationale?: Element;
	}

	/**
	 * Potential outcomes for a subject with likelihood
	 * An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
	 */
	interface RiskAssessment extends DomainResource {

		/**
		 * Unique identifier for the assessment
		 * Business identifier assigned to the risk assessment.
		 */
		identifier?: Identifier;

		/**
		 * Request fulfilled by this assessment
		 * A reference to the request that is fulfilled by this risk assessment.
		 */
		basedOn?: Reference;

		/**
		 * Part of this occurrence
		 * A reference to a resource that this risk assessment is part of, such as a Procedure.
		 */
		parent?: Reference;

		/**
		 * registered | preliminary | final | amended +
		 * The status of the RiskAssessment, using the same statuses as an Observation.
		 */
		status: RiskAssessmentRiskAssessmentStatus;

		/**
		 * Evaluation mechanism
		 * The algorithm, process or mechanism used to evaluate the risk.
		 */
		method?: CodeableConcept;

		/**
		 * Type of assessment
		 * The type of the risk assessment performed.
		 */
		code?: CodeableConcept;

		/**
		 * Who/what does assessment apply to?
		 * The patient or group the risk assessment applies to.
		 */
		subject?: Reference;

		/**
		 * Where was assessment performed?
		 * The encounter where the assessment was performed.
		 */
		context?: Reference;

		/**
		 * When was assessment made?
		 * The date (and possibly time) the risk assessment was performed.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When was assessment made?
		 * The date (and possibly time) the risk assessment was performed.
		 */
		occurrencePeriod?: Period;

		/**
		 * Condition assessed
		 * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
		 */
		condition?: Reference;

		/**
		 * Who did assessment?
		 * The provider or software application that performed the assessment.
		 */
		performer?: Reference;

		/**
		 * Why the assessment was necessary?
		 * The reason the risk assessment was performed.
		 */
		reasonCodeableConcept?: CodeableConcept;

		/**
		 * Why the assessment was necessary?
		 * The reason the risk assessment was performed.
		 */
		reasonReference?: Reference;

		/**
		 * Information used in assessment
		 * Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
		 */
		basis?: Reference[];

		/**
		 * Outcome predicted
		 * Describes the expected outcome for the subject.
		 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
		 */
		prediction?: RiskAssessmentPrediction[];

		/**
		 * How to reduce risk
		 * A description of the steps that might be taken to reduce the identified risk(s).
		 */
		mitigation?: string;

		/**
		 * Extension for mitigation
		 **/
		_mitigation?: Element;

		/**
		 * Comments on the risk assessment
		 * Additional comments about the risk assessment.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * A container for slots of time that may be available for booking appointments
	 * A container for slots of time that may be available for booking appointments.
	 */
	interface Schedule extends DomainResource {

		/**
		 * External Ids for this item
		 * External Ids for this item.
		 */
		identifier?: Identifier[];

		/**
		 * Whether this schedule is in active use
		 * Whether this schedule record is in active use, or should not be used (such as was entered in error).
		 * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
		 */
		active?: boolean;

		/**
		 * Extension for active
		 **/
		_active?: Element;

		/**
		 * A broad categorisation of the service that is to be performed during this appointment
		 * A broad categorisation of the service that is to be performed during this appointment.
		 */
		serviceCategory?: CodeableConcept;

		/**
		 * The specific service that is to be performed during this appointment
		 * The specific service that is to be performed during this appointment.
		 */
		serviceType?: CodeableConcept[];

		/**
		 * The specialty of a practitioner that would be required to perform the service requested in this appointment
		 * The specialty of a practitioner that would be required to perform the service requested in this appointment.
		 */
		specialty?: CodeableConcept[];

		/**
		 * The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, PractitionerRole, Device, Patient or RelatedPerson
		 * The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, PractitionerRole, Device, Patient or RelatedPerson.
		 * The capacity to support multiple referenced resource types should be used in cases where the specific resources themselves cannot be scheduled without the other, and thus only make sense to the system exposing them as a group. Common examples of this are where the combination of a pracitioner and a room(location) are always required by a system.
		 */
		actor: Reference[];

		/**
		 * The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates
		 * The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
		 */
		planningHorizon?: Period;

		/**
		 * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated
		 * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * For Composite resources to define the parts
	 * Used to define the parts of a composite search parameter.
	 */
	interface SearchParameterComponent extends BackboneElement {

		/**
		 * Defines how the part works
		 * The definition of the search parameter that describes this part.
		 */
		definition: Reference;

		/**
		 * Subexpression relative to main expression
		 * A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
		 * This expression overrides the expression in the definition, and extracts the index values from the outcome of the composite expression.
		 */
		expression: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;
	}

	/**
	 * Search Parameter for a resource
	 * A search parameter that defines a named search item that can be used to search/filter on a resource.
	 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
	 */
	interface SearchParameter extends DomainResource {

		/**
		 * Logical URI to reference this search parameter (globally unique)
		 * An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this search parameter is (or will be) published. The URL SHOULD include the major version of the search parameter. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Business version of the search parameter
		 * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different search parameter instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the search parameter with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this search parameter (computer friendly)
		 * A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this search parameter. Enables tracking the life-cycle of the content.
		 * Allows filtering of search parameters that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired search parameter without due consideration.
		 */
		status: SearchParameterPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of search parameter that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental search parameter in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the search parameter was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the search parameter. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the search parameter.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the search parameter is the organization or individual primarily responsible for the maintenance and upkeep of the search parameter. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the search parameter. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate search parameter instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for search parameter (if applicable)
		 * A legal or geographic region in which the search parameter is intended to be used.
		 * It may be possible for the search parameter to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this search parameter is defined
		 * Explaination of why this search parameter is needed and why it has been designed as it has.
		 * This element does not describe the usage of the search parameter Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this search parameter.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Code used in URL
		 * The code used in the URL or the parameter name in a parameters resource for this search parameter.
		 * For maximum compatibility, use only lowercase ASCII characters.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * The resource type(s) this search parameter applies to
		 * The base resource type(s) that this search parameter can be used against.
		 * A search parameter must always have at least one type. When search parameters have more than one resource, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).
		 */
		base: code[];

		/**
		 * Extension for base
		 **/
		_base?: Element[];

		/**
		 * number | date | string | token | reference | composite | quantity | uri
		 * The type of value a search parameter refers to, and how the content is interpreted.
		 */
		type: SearchParameterSearchParamType;

		/**
		 * Original Definition for the search parameter
		 * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. I.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
		 * The intent of this is that a server can designate that it provides support for a search parameter defined in the specification itself (e.g.  [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantity), but detail how it is supported by the server.
		 */
		derivedFrom?: uri;

		/**
		 * Extension for derivedFrom
		 **/
		_derivedFrom?: Element;

		/**
		 * Natural language description of the search parameter
		 * A free text natural language description of the search parameter from a consumer's perspective. and how it used.
		 * This description can be used to capture details such as why the search parameter was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the search parameter as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * FHIRPath expression that extracts the values
		 * A FHIRPath expression that returns a set of elements for the search parameter.
		 * Note that the elements returned by the expression are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system. For composite search parameters, the outcome of the expression must a collection of base elements from which the composites are derived.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;

		/**
		 * XPath that extracts the values
		 * An XPath expression that returns a set of elements for the search parameter.
		 * Note that the elements returned by the XPath are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system.
		 */
		xpath?: string;

		/**
		 * Extension for xpath
		 **/
		_xpath?: Element;

		/**
		 * normal | phonetic | nearby | distance | other
		 * How the search parameter relates to the set of elements returned by evaluating the xpath query.
		 */
		xpathUsage?: SearchParameterXPathUsageType;

		/**
		 * Types of resource (if a resource reference)
		 * Types of resource (if a resource is referenced).
		 */
		target?: code[];

		/**
		 * Extension for target
		 **/
		_target?: Element[];

		/**
		 * eq | ne | gt | lt | ge | le | sa | eb | ap
		 * Comparators supported for the search parameter.
		 * If no comparators are listed, clients should not expect servers to support any comparators.
		 */
		comparator?: SearchParameterSearchComparator[];

		/**
		 * missing | exact | contains | not | text | in | not-in | below | above | type
		 * A modifier supported for the search parameter.
		 */
		modifier?: SearchParameterSearchModifierCode[];

		/**
		 * Chained names supported
		 * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
		 * Systems are not required to list all the chain names they support, but if they don't list them, clients may not know to use them.
		 */
		chain?: string[];

		/**
		 * Extension for chain
		 **/
		_chain?: Element[];

		/**
		 * For Composite resources to define the parts
		 * Used to define the parts of a composite search parameter.
		 */
		component?: SearchParameterComponent[];
	}

	/**
	 * A sequence used as reference
	 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
	 */
	interface SequenceReferenceSeq extends BackboneElement {

		/**
		 * Chromosome containing genetic finding
		 * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
		 */
		chromosome?: CodeableConcept;

		/**
		 * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'
		 * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
		 */
		genomeBuild?: string;

		/**
		 * Extension for genomeBuild
		 **/
		_genomeBuild?: Element;

		/**
		 * Reference identifier
		 * Reference identifier of reference sequence submitted to NCBI. It must match the type in the Sequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
		 */
		referenceSeqId?: CodeableConcept;

		/**
		 * A Pointer to another Sequence entity as reference sequence
		 * A Pointer to another Sequence entity as reference sequence.
		 */
		referenceSeqPointer?: Reference;

		/**
		 * A string to represent reference sequence
		 * A string like "ACGT".
		 */
		referenceSeqString?: string;

		/**
		 * Extension for referenceSeqString
		 **/
		_referenceSeqString?: Element;

		/**
		 * Directionality of DNA ( +1/-1)
		 * Directionality of DNA sequence. Available values are "1" for the plus strand (5' to 3')/Watson/Sense/positive  and "-1" for the minus strand(3' to 5')/Crick/Antisense/negative.
		 */
		strand?: integer;

		/**
		 * Extension for strand
		 **/
		_strand?: Element;

		/**
		 * Start position of the window on the  reference sequence
		 * Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
		 */
		windowStart: integer;

		/**
		 * Extension for windowStart
		 **/
		_windowStart?: Element;

		/**
		 * End position of the window on the reference sequence
		 * End position of the window on the reference sequence. If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
		 */
		windowEnd: integer;

		/**
		 * Extension for windowEnd
		 **/
		_windowEnd?: Element;
	}

	/**
	 * Variant in sequence
	 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
	 */
	interface SequenceVariant extends BackboneElement {

		/**
		 * Start position of the variant on the  reference sequence
		 * Start position of the variant on the  reference sequence.If the coordinate system is either 0-based or 1-based, then start position is inclusive.
		 */
		start?: integer;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * End position of the variant on the reference sequence
		 * End position of the variant on the reference sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
		 */
		end?: integer;

		/**
		 * Extension for end
		 **/
		_end?: Element;

		/**
		 * Allele that was observed
		 * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
		 */
		observedAllele?: string;

		/**
		 * Extension for observedAllele
		 **/
		_observedAllele?: Element;

		/**
		 * Allele in the reference sequence
		 * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
		 */
		referenceAllele?: string;

		/**
		 * Extension for referenceAllele
		 **/
		_referenceAllele?: Element;

		/**
		 * Extended CIGAR string for aligning the sequence with reference bases
		 * Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
		 */
		cigar?: string;

		/**
		 * Extension for cigar
		 **/
		_cigar?: Element;

		/**
		 * Pointer to observed variant information
		 * A pointer to an Observation containing variant information.
		 */
		variantPointer?: Reference;
	}

	/**
	 * An set of value as quality of sequence
	 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
	 */
	interface SequenceQuality extends BackboneElement {

		/**
		 * indel | snp | unknown
		 * INDEL / SNP / Undefined variant.
		 */
		type: SequencequalityType;

		/**
		 * Standard sequence for comparison
		 * Gold standard sequence used for comparing against.
		 */
		standardSequence?: CodeableConcept;

		/**
		 * Start position of the sequence
		 * Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
		 */
		start?: integer;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * End position of the sequence
		 * End position of the sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
		 */
		end?: integer;

		/**
		 * Extension for end
		 **/
		_end?: Element;

		/**
		 * Quality score for the comparison
		 * The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
		 */
		score?: Quantity;

		/**
		 * Method to get quality
		 * Which method is used to get sequence quality.
		 */
		method?: CodeableConcept;

		/**
		 * True positives from the perspective of the truth data
		 * True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
		 */
		truthTP?: decimal;

		/**
		 * Extension for truthTP
		 **/
		_truthTP?: Element;

		/**
		 * True positives from the perspective of the query data
		 * True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
		 */
		queryTP?: decimal;

		/**
		 * Extension for queryTP
		 **/
		_queryTP?: Element;

		/**
		 * False negatives
		 * False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
		 */
		truthFN?: decimal;

		/**
		 * Extension for truthFN
		 **/
		_truthFN?: Element;

		/**
		 * False positives
		 * False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
		 */
		queryFP?: decimal;

		/**
		 * Extension for queryFP
		 **/
		_queryFP?: Element;

		/**
		 * False positives where the non-REF alleles in the Truth and Query Call Sets match
		 * The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
		 */
		gtFP?: decimal;

		/**
		 * Extension for gtFP
		 **/
		_gtFP?: Element;

		/**
		 * Precision of comparison
		 * QUERY.TP / (QUERY.TP + QUERY.FP).
		 */
		precision?: decimal;

		/**
		 * Extension for precision
		 **/
		_precision?: Element;

		/**
		 * Recall of comparison
		 * TRUTH.TP / (TRUTH.TP + TRUTH.FN).
		 */
		recall?: decimal;

		/**
		 * Extension for recall
		 **/
		_recall?: Element;

		/**
		 * F-score
		 * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
		 */
		fScore?: decimal;

		/**
		 * Extension for fScore
		 **/
		_fScore?: Element;
	}

	/**
	 * External repository which contains detailed report related with observedSeq in this resource
	 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
	 */
	interface SequenceRepository extends BackboneElement {

		/**
		 * directlink | openapi | login | oauth | other
		 * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
		 */
		type: SequencerepositoryType;

		/**
		 * URI of the repository
		 * URI of an external repository which contains further details about the genetics data.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Repository's name
		 * URI of an external repository which contains further details about the genetics data.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Id of the dataset that used to call for dataset in repository
		 * Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
		 */
		datasetId?: string;

		/**
		 * Extension for datasetId
		 **/
		_datasetId?: Element;

		/**
		 * Id of the variantset that used to call for variantset in repository
		 * Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
		 */
		variantsetId?: string;

		/**
		 * Extension for variantsetId
		 **/
		_variantsetId?: Element;

		/**
		 * Id of the read
		 * Id of the read in this external repository.
		 */
		readsetId?: string;

		/**
		 * Extension for readsetId
		 **/
		_readsetId?: Element;
	}

	/**
	 * Information about a biological sequence
	 * Raw data describing a biological sequence.
	 */
	interface Sequence extends DomainResource {

		/**
		 * Unique ID for this particular sequence. This is a FHIR-defined id
		 * A unique identifier for this particular sequence instance. This is a FHIR-defined id.
		 */
		identifier?: Identifier[];

		/**
		 * aa | dna | rna
		 * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
		 */
		type?: SequencesequenceType;

		/**
		 * Base number of coordinate system (0 for 0-based numbering or coordinates, inclusive start, exclusive end, 1 for 1-based numbering, inclusive start, inclusive end)
		 * Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
		 */
		coordinateSystem: integer;

		/**
		 * Extension for coordinateSystem
		 **/
		_coordinateSystem?: Element;

		/**
		 * Who and/or what this is about
		 * The patient whose sequencing results are described by this resource.
		 */
		patient?: Reference;

		/**
		 * Specimen used for sequencing
		 * Specimen used for sequencing.
		 */
		specimen?: Reference;

		/**
		 * The method for sequencing
		 * The method for sequencing, for example, chip information.
		 */
		device?: Reference;

		/**
		 * Who should be responsible for test result
		 * The organization or lab that should be responsible for this result.
		 */
		performer?: Reference;

		/**
		 * The number of copies of the seqeunce of interest.  (RNASeq)
		 * The number of copies of the seqeunce of interest. (RNASeq).
		 */
		quantity?: Quantity;

		/**
		 * A sequence used as reference
		 * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
		 */
		referenceSeq?: SequenceReferenceSeq;

		/**
		 * Variant in sequence
		 * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
		 */
		variant?: SequenceVariant[];

		/**
		 * Sequence that was observed
		 * Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall starts from referenceSeq.windowStart and end by referenceSeq.windowEnd.
		 */
		observedSeq?: string;

		/**
		 * Extension for observedSeq
		 **/
		_observedSeq?: Element;

		/**
		 * An set of value as quality of sequence
		 * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
		 */
		quality?: SequenceQuality[];

		/**
		 * Average number of reads representing a given nucleotide in the reconstructed sequence
		 * Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
		 */
		readCoverage?: integer;

		/**
		 * Extension for readCoverage
		 **/
		_readCoverage?: Element;

		/**
		 * External repository which contains detailed report related with observedSeq in this resource
		 * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
		 */
		repository?: SequenceRepository[];

		/**
		 * Pointer to next atomic sequence
		 * Pointer to next atomic sequence which at most contains one variant.
		 */
		pointer?: Reference[];
	}

	/**
	 * A description of decision support service functionality
	 * The ServiceDefinition describes a unit of decision support functionality that is made available as a service, such as immunization modules or drug-drug interaction checking.
	 */
	interface ServiceDefinition extends DomainResource {

		/**
		 * Logical URI to reference this service definition (globally unique)
		 * An absolute URI that is used to identify this service definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this service definition is (or will be) published. The URL SHOULD include the major version of the service definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the service definition
		 * A formal identifier that is used to identify this service definition when it is represented in other formats, or referenced in a specification, model, design or an instance. This is used for CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this service definition outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the service definition
		 * The identifier that is used to identify this version of the service definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the service definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different service definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the service definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this service definition (computer friendly)
		 * A natural language name identifying the service definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this service definition (human friendly)
		 * A short, descriptive, user-friendly title for the service definition.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this service definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of service definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired service definition without due consideration.
		 */
		status: ServiceDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this service definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of service definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental service definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the service definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the service definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the service definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the service definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the service definition is the organization or individual primarily responsible for the maintenance and upkeep of the service definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the service definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Natural language description of the service definition
		 * A free text natural language description of the service definition from a consumer's perspective.
		 * This description can be used to capture details such as why the service definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the service definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Why this service definition is defined
		 * Explaination of why this service definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the service definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this service definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Describes the clinical usage of the module
		 * A detailed description of how the module is used from a clinical perspective.
		 */
		usage?: string;

		/**
		 * Extension for usage
		 **/
		_usage?: Element;

		/**
		 * When the service definition was approved by publisher
		 * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
		 * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
		 */
		approvalDate?: date;

		/**
		 * Extension for approvalDate
		 **/
		_approvalDate?: Element;

		/**
		 * When the service definition was last reviewed
		 * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
		 * If specified, this is usually after the approval date.
		 */
		lastReviewDate?: date;

		/**
		 * Extension for lastReviewDate
		 **/
		_lastReviewDate?: Element;

		/**
		 * When the service definition is expected to be used
		 * The period during which the service definition content was or is planned to be in active use.
		 * The effective period for a service definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
		 */
		effectivePeriod?: Period;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate service definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for service definition (if applicable)
		 * A legal or geographic region in which the service definition is intended to be used.
		 * It may be possible for the service definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * E.g. Education, Treatment, Assessment, etc
		 * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
		 */
		topic?: CodeableConcept[];

		/**
		 * A content contributor
		 * A contributor to the content of the module, including authors, editors, reviewers, and endorsers.
		 */
		contributor?: Contributor[];

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the service definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the service definition.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Additional documentation, citations, etc
		 * Related resources such as additional documentation, justification, or bibliographic references.
		 * Each related resource is either an attachment, or a reference to another resource, but not both.
		 */
		relatedArtifact?: RelatedArtifact[];

		/**
		 * "when" the module should be invoked
		 * The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow.
		 */
		trigger?: TriggerDefinition[];

		/**
		 * What data is used by the module
		 * Data requirements are a machine processable description of the data required by the module in order to perform a successful evaluation.
		 */
		dataRequirement?: DataRequirement[];

		/**
		 * Operation to invoke
		 * A reference to the operation that is used to invoke this service.
		 */
		operationDefinition?: Reference;
	}

	/**
	 * A slot of time on a schedule that may be available for booking appointments
	 * A slot of time on a schedule that may be available for booking appointments.
	 */
	interface Slot extends DomainResource {

		/**
		 * External Ids for this item
		 * External Ids for this item.
		 */
		identifier?: Identifier[];

		/**
		 * A broad categorisation of the service that is to be performed during this appointment
		 * A broad categorisation of the service that is to be performed during this appointment.
		 */
		serviceCategory?: CodeableConcept;

		/**
		 * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource
		 * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
		 */
		serviceType?: CodeableConcept[];

		/**
		 * The specialty of a practitioner that would be required to perform the service requested in this appointment
		 * The specialty of a practitioner that would be required to perform the service requested in this appointment.
		 */
		specialty?: CodeableConcept[];

		/**
		 * The style of appointment or patient that may be booked in the slot (not service type)
		 * The style of appointment or patient that may be booked in the slot (not service type).
		 */
		appointmentType?: CodeableConcept;

		/**
		 * The schedule resource that this slot defines an interval of status information
		 * The schedule resource that this slot defines an interval of status information.
		 */
		schedule: Reference;

		/**
		 * busy | free | busy-unavailable | busy-tentative | entered-in-error
		 * busy | free | busy-unavailable | busy-tentative | entered-in-error.
		 */
		status: SlotSlotStatus;

		/**
		 * Date/Time that the slot is to begin
		 * Date/Time that the slot is to begin.
		 */
		start: instant;

		/**
		 * Extension for start
		 **/
		_start?: Element;

		/**
		 * Date/Time that the slot is to conclude
		 * Date/Time that the slot is to conclude.
		 */
		end: instant;

		/**
		 * Extension for end
		 **/
		_end?: Element;

		/**
		 * This slot has already been overbooked, appointments are unlikely to be accepted for this time
		 * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
		 */
		overbooked?: boolean;

		/**
		 * Extension for overbooked
		 **/
		_overbooked?: Element;

		/**
		 * Comments on the slot to describe any extended information. Such as custom constraints on the slot
		 * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * Collection details
	 * Details concerning the specimen collection.
	 */
	interface SpecimenCollection extends BackboneElement {

		/**
		 * Who collected the specimen
		 * Person who collected the specimen.
		 */
		collector?: Reference;

		/**
		 * Collection time
		 * Time when specimen was collected from subject - the physiologically relevant time.
		 */
		collectedDateTime?: dateTime;

		/**
		 * Extension for collectedDateTime
		 **/
		_collectedDateTime?: Element;

		/**
		 * Collection time
		 * Time when specimen was collected from subject - the physiologically relevant time.
		 */
		collectedPeriod?: Period;

		/**
		 * The quantity of specimen collected
		 * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Technique used to perform collection
		 * A coded value specifying the technique that is used to perform the procedure.
		 */
		method?: CodeableConcept;

		/**
		 * Anatomical collection site
		 * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
		 * If the use case requires  BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [body-site-instance](extension-body-site-instance.html).
		 */
		bodySite?: CodeableConcept;
	}

	/**
	 * Processing and processing step details
	 * Details concerning processing and processing steps for the specimen.
	 */
	interface SpecimenProcessing extends BackboneElement {

		/**
		 * Textual description of procedure
		 * Textual description of procedure.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Indicates the treatment step  applied to the specimen
		 * A coded value specifying the procedure used to process the specimen.
		 */
		procedure?: CodeableConcept;

		/**
		 * Material used in the processing step
		 * Material used in the processing step.
		 */
		additive?: Reference[];

		/**
		 * Date and time of specimen processing
		 * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
		 */
		timeDateTime?: dateTime;

		/**
		 * Extension for timeDateTime
		 **/
		_timeDateTime?: Element;

		/**
		 * Date and time of specimen processing
		 * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
		 */
		timePeriod?: Period;
	}

	/**
	 * Direct container of specimen (tube/slide, etc.)
	 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
	 */
	interface SpecimenContainer extends BackboneElement {

		/**
		 * Id for the container
		 * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
		 */
		identifier?: Identifier[];

		/**
		 * Textual description of the container
		 * Textual description of the container.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Kind of container directly associated with specimen
		 * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
		 */
		type?: CodeableConcept;

		/**
		 * Container volume or size
		 * The capacity (volume or other measure) the container may contain.
		 */
		capacity?: SimpleQuantity;

		/**
		 * Quantity of specimen within container
		 * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
		 */
		specimenQuantity?: SimpleQuantity;

		/**
		 * Additive associated with container
		 * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
		 */
		additiveCodeableConcept?: CodeableConcept;

		/**
		 * Additive associated with container
		 * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
		 */
		additiveReference?: Reference;
	}

	/**
	 * Sample for analysis
	 * A sample to be used for analysis.
	 */
	interface Specimen extends DomainResource {

		/**
		 * External Identifier
		 * Id for specimen.
		 */
		identifier?: Identifier[];

		/**
		 * Identifier assigned by the lab
		 * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
		 */
		accessionIdentifier?: Identifier;

		/**
		 * available | unavailable | unsatisfactory | entered-in-error
		 * The availability of the specimen.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: SpecimenSpecimenStatus;

		/**
		 * Kind of material that forms the specimen
		 * The kind of material that forms the specimen.
		 * The type can change the way that a specimen is handled, and drives what kind of analyses can properly be performed on the specimen. It is frequently used in diagnostic work flow decision making systems.
		 */
		type?: CodeableConcept;

		/**
		 * Where the specimen came from. This may be from the patient(s) or from the environment or a device
		 * Where the specimen came from. This may be from the patient(s) or from the environment or a device.
		 */
		subject: Reference;

		/**
		 * The time when specimen was received for processing
		 * Time when specimen was received for processing or testing.
		 */
		receivedTime?: dateTime;

		/**
		 * Extension for receivedTime
		 **/
		_receivedTime?: Element;

		/**
		 * Specimen from which this specimen originated
		 * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
		 * The parent specimen could be the source from which the current specimen is derived by some processing step (e.g. an aliquot or isolate or extracted nucleic acids from clinical samples) or one of many specimens that were combined to create a pooled sample.
		 */
		parent?: Reference[];

		/**
		 * Why the specimen was collected
		 * Details concerning a test or procedure request that required a specimen to be collected.
		 * The request may be explicit or implied such with a ProcedureRequest that requires a blood draw.
		 */
		request?: Reference[];

		/**
		 * Collection details
		 * Details concerning the specimen collection.
		 */
		collection?: SpecimenCollection;

		/**
		 * Processing and processing step details
		 * Details concerning processing and processing steps for the specimen.
		 */
		processing?: SpecimenProcessing[];

		/**
		 * Direct container of specimen (tube/slide, etc.)
		 * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
		 */
		container?: SpecimenContainer[];

		/**
		 * Comments
		 * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
		 */
		note?: Annotation[];
	}

	/**
	 * External specification that the content is mapped to
	 * An external specification that the content is mapped to.
	 */
	interface StructureDefinitionMapping extends BackboneElement {

		/**
		 * Internal id when this mapping is used
		 * An Internal id that is used to identify this mapping set when specific mappings are made.
		 * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
		 */
		identity: id;

		/**
		 * Extension for identity
		 **/
		_identity?: Element;

		/**
		 * Identifies what this mapping refers to
		 * An absolute URI that identifies the specification that this mapping is expressed to.
		 * A formal identity for the specification being mapped to helps with identifying maps consistently.
		 */
		uri?: uri;

		/**
		 * Extension for uri
		 **/
		_uri?: Element;

		/**
		 * Names what this mapping refers to
		 * A name for the specification that is being mapped to.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Versions, Issues, Scope limitations etc.
		 * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
		 */
		comment?: string;

		/**
		 * Extension for comment
		 **/
		_comment?: Element;
	}

	/**
	 * Snapshot view of the structure
	 * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
	 */
	interface StructureDefinitionSnapshot extends BackboneElement {

		/**
		 * Definition of elements in the resource (if no StructureDefinition)
		 * Captures constraints on each element within the resource.
		 */
		element: ElementDefinition[];
	}

	/**
	 * Differential view of the structure
	 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
	 */
	interface StructureDefinitionDifferential extends BackboneElement {

		/**
		 * Definition of elements in the resource (if no StructureDefinition)
		 * Captures constraints on each element within the resource.
		 */
		element: ElementDefinition[];
	}

	/**
	 * Structural Definition
	 * A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
	 */
	interface StructureDefinition extends DomainResource {

		/**
		 * Logical URI to reference this structure definition (globally unique)
		 * An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure definition is (or will be) published. The URL SHOULD include the major version of the structure definition. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the structure definition
		 * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this structure definition outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the structure definition
		 * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different structure definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the structure definition with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this structure definition (computer friendly)
		 * A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this structure definition (human friendly)
		 * A short, descriptive, user-friendly title for the structure definition.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc. Applications don't have to use this name, but can always fall back to it. The title also corresponds to the label for the root element.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this structure definition. Enables tracking the life-cycle of the content.
		 * Allows filtering of structure definitions that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired structure definition without due consideration.
		 */
		status: StructureDefinitionPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of structure definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental structure definition in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the structure definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the structure definition.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the structure definition is the organization or individual primarily responsible for the maintenance and upkeep of the structure definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure definition. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the structure definition
		 * A free text natural language description of the structure definition from a consumer's perspective.
		 * This description can be used to capture details such as why the structure definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate structure definition instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for structure definition (if applicable)
		 * A legal or geographic region in which the structure definition is intended to be used.
		 * It may be possible for the structure definition to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this structure definition is defined
		 * Explaination of why this structure definition is needed and why it has been designed as it has.
		 * This element does not describe the usage of the structure definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure definition.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Assist with indexing and finding
		 * A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates.
		 */
		keyword?: Coding[];

		/**
		 * FHIR Version this StructureDefinition targets
		 * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 3.0.1 for this version.
		 * A StructureDefinition does not need to specify the target it applies to,as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.
		 */
		fhirVersion?: id;

		/**
		 * Extension for fhirVersion
		 **/
		_fhirVersion?: Element;

		/**
		 * External specification that the content is mapped to
		 * An external specification that the content is mapped to.
		 */
		mapping?: StructureDefinitionMapping[];

		/**
		 * primitive-type | complex-type | resource | logical
		 * Defines the kind of structure that this definition is describing.
		 */
		kind: StructureDefinitionStructureDefinitionKind;

		/**
		 * Whether the structure is abstract
		 * Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
		 * Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of "abstract" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type "Element" in the profile, but have children described, are anonymous concrete types that specialise Element.
		 */
		abstract: boolean;

		/**
		 * Extension for abstract
		 **/
		_abstract?: Element;

		/**
		 * resource | datatype | extension
		 * If this is an extension, Identifies the context within FHIR resources where the extension can be used.
		 */
		contextType?: StructureDefinitionExtensionContext;

		/**
		 * Where the extension can be used in instances
		 * Identifies the types of resource or data type elements to which the extension can be applied.
		 * If the context is an element that can have multiple types, then use (e.g.) value[x] if the extension works on all choice types, or otherwise an enumeration of explicitly named elements if not. Note that a context of "string" doesn't mean that the extension can be used with one of the string patterns such as "id" etc.
		 */
		context?: string[];

		/**
		 * Extension for context
		 **/
		_context?: Element[];

		/**
		 * FHIRPath invariants - when the extension can be used
		 * A set of rules as Fluent Invariants about when the extension can be used (e.g. co-occurrence variants for the extension).
		 * All the rules must be true. When evaluating the invariant, the fluentpath focus is the element that holds the extension, and %extension refers to the extension itself.
		 */
		contextInvariant?: string[];

		/**
		 * Extension for contextInvariant
		 **/
		_contextInvariant?: Element[];

		/**
		 * Type defined or constrained by this structure
		 * The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).
		 * Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a concrete structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing.
		 */
		type: code;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Definition that this type is constrained/specialized from
		 * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
		 * If differential constraints are specified in this structure, they are applied to the base in a "differential" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of "Element" or another logical model.
		 */
		baseDefinition?: uri;

		/**
		 * Extension for baseDefinition
		 **/
		_baseDefinition?: Element;

		/**
		 * specialization | constraint - How relates to base definition
		 * How the type relates to the baseDefinition.
		 * If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.

If the definition is a constraint, then it can not define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
		 */
		derivation?: StructureDefinitionTypeDerivationRule;

		/**
		 * Snapshot view of the structure
		 * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
		 */
		snapshot?: StructureDefinitionSnapshot;

		/**
		 * Differential view of the structure
		 * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
		 */
		differential?: StructureDefinitionDifferential;
	}

	/**
	 * Structure Definition used by this map
	 * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
	 * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
	 */
	interface StructureMapStructure extends BackboneElement {

		/**
		 * Canonical URL for structure definition
		 * The canonical URL that identifies the structure.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * source | queried | target | produced
		 * How the referenced structure is used in this mapping.
		 */
		mode: StructureMapStructureMapModelMode;

		/**
		 * Name for type in this map
		 * The name used for this type in the map.
		 * This is needed if both types have the same name (e.g. version conversion).
		 */
		alias?: string;

		/**
		 * Extension for alias
		 **/
		_alias?: Element;

		/**
		 * Documentation on use of structure
		 * Documentation that describes how the structure is used in the mapping.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Named instance provided when invoking the map
	 * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
	 * If no inputs are named, then the entry mappings are type based.
	 */
	interface StructureMapGroupInput extends BackboneElement {

		/**
		 * Name for this instance of data
		 * Name for this instance of data.
		 */
		name: id;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Type for this instance of data
		 * Type for this instance of data.
		 */
		type?: string;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * source | target
		 * Mode for this instance of data.
		 */
		mode: StructureMapStructureMapInputMode;

		/**
		 * Documentation for this instance of data
		 * Documentation for this instance of data.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Source inputs to the mapping
	 * Source inputs to the mapping.
	 */
	interface StructureMapGroupRuleSource extends BackboneElement {

		/**
		 * Type or variable this rule applies to
		 * Type or variable this rule applies to.
		 */
		context: id;

		/**
		 * Extension for context
		 **/
		_context?: Element;

		/**
		 * Specified minimum cardinality
		 * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
		 */
		min?: integer;

		/**
		 * Extension for min
		 **/
		_min?: Element;

		/**
		 * Specified maximum cardinality (number or *)
		 * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
		 */
		max?: string;

		/**
		 * Extension for max
		 **/
		_max?: Element;

		/**
		 * Rule only applies if source has this type
		 * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
		 */
		type?: string;

		/**
		 * Extension for type
		 **/
		_type?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueBase64Binary?: base64Binary;

		/**
		 * Extension for defaultValueBase64Binary
		 **/
		_defaultValueBase64Binary?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueBoolean?: boolean;

		/**
		 * Extension for defaultValueBoolean
		 **/
		_defaultValueBoolean?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueCode?: code;

		/**
		 * Extension for defaultValueCode
		 **/
		_defaultValueCode?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueDate?: date;

		/**
		 * Extension for defaultValueDate
		 **/
		_defaultValueDate?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueDateTime?: dateTime;

		/**
		 * Extension for defaultValueDateTime
		 **/
		_defaultValueDateTime?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueDecimal?: decimal;

		/**
		 * Extension for defaultValueDecimal
		 **/
		_defaultValueDecimal?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueId?: id;

		/**
		 * Extension for defaultValueId
		 **/
		_defaultValueId?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueInstant?: instant;

		/**
		 * Extension for defaultValueInstant
		 **/
		_defaultValueInstant?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueInteger?: integer;

		/**
		 * Extension for defaultValueInteger
		 **/
		_defaultValueInteger?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueMarkdown?: markdown;

		/**
		 * Extension for defaultValueMarkdown
		 **/
		_defaultValueMarkdown?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueOid?: oid;

		/**
		 * Extension for defaultValueOid
		 **/
		_defaultValueOid?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValuePositiveInt?: positiveInt;

		/**
		 * Extension for defaultValuePositiveInt
		 **/
		_defaultValuePositiveInt?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueString?: string;

		/**
		 * Extension for defaultValueString
		 **/
		_defaultValueString?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueTime?: time;

		/**
		 * Extension for defaultValueTime
		 **/
		_defaultValueTime?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueUnsignedInt?: unsignedInt;

		/**
		 * Extension for defaultValueUnsignedInt
		 **/
		_defaultValueUnsignedInt?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueUri?: uri;

		/**
		 * Extension for defaultValueUri
		 **/
		_defaultValueUri?: Element;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueAddress?: Address;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueAge?: Age;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueAnnotation?: Annotation;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueAttachment?: Attachment;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueCodeableConcept?: CodeableConcept;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueCoding?: Coding;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueContactPoint?: ContactPoint;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueCount?: Count;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueDistance?: Distance;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueDuration?: Duration;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueHumanName?: HumanName;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueIdentifier?: Identifier;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueMoney?: Money;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValuePeriod?: Period;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueQuantity?: Quantity;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueRange?: Range;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueRatio?: Ratio;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueReference?: Reference;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueSampledData?: SampledData;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueSignature?: Signature;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueTiming?: Timing;

		/**
		 * Default value if no value exists
		 * A value to use if there is no existing value in the source object.
		 * If there's a default value on an item that can repeat, it will only be used once.
		 */
		defaultValueMeta?: Meta;

		/**
		 * Optional field for this source
		 * Optional field for this source.
		 */
		element?: string;

		/**
		 * Extension for element
		 **/
		_element?: Element;

		/**
		 * first | not_first | last | not_last | only_one
		 * How to handle the list mode for this element.
		 */
		listMode?: StructureMapStructureMapSourceListMode;

		/**
		 * Named context for field, if a field is specified
		 * Named context for field, if a field is specified.
		 */
		variable?: id;

		/**
		 * Extension for variable
		 **/
		_variable?: Element;

		/**
		 * FHIRPath expression  - must be true or the rule does not apply
		 * FHIRPath expression  - must be true or the rule does not apply.
		 */
		condition?: string;

		/**
		 * Extension for condition
		 **/
		_condition?: Element;

		/**
		 * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing
		 * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
		 */
		check?: string;

		/**
		 * Extension for check
		 **/
		_check?: Element;
	}

	/**
	 * Parameters to the transform
	 * Parameters to the transform.
	 */
	interface StructureMapGroupRuleTargetParameter extends BackboneElement {

		/**
		 * Parameter value - variable or literal
		 * Parameter value - variable or literal.
		 */
		valueId: id;

		/**
		 * Extension for valueId
		 **/
		_valueId?: Element;

		/**
		 * Parameter value - variable or literal
		 * Parameter value - variable or literal.
		 */
		valueString: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Parameter value - variable or literal
		 * Parameter value - variable or literal.
		 */
		valueBoolean: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Parameter value - variable or literal
		 * Parameter value - variable or literal.
		 */
		valueInteger: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Parameter value - variable or literal
		 * Parameter value - variable or literal.
		 */
		valueDecimal: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;
	}

	/**
	 * Content to create because of this mapping rule
	 * Content to create because of this mapping rule.
	 */
	interface StructureMapGroupRuleTarget extends BackboneElement {

		/**
		 * Type or variable this rule applies to
		 * Type or variable this rule applies to.
		 */
		context?: id;

		/**
		 * Extension for context
		 **/
		_context?: Element;

		/**
		 * type | variable
		 * How to interpret the context.
		 */
		contextType?: StructureMapStructureMapContextType;

		/**
		 * Field to create in the context
		 * Field to create in the context.
		 */
		element?: string;

		/**
		 * Extension for element
		 **/
		_element?: Element;

		/**
		 * Named context for field, if desired, and a field is specified
		 * Named context for field, if desired, and a field is specified.
		 */
		variable?: id;

		/**
		 * Extension for variable
		 **/
		_variable?: Element;

		/**
		 * first | share | last | collate
		 * If field is a list, how to manage the list.
		 */
		listMode?: StructureMapStructureMapTargetListMode[];

		/**
		 * Internal rule reference for shared list items
		 * Internal rule reference for shared list items.
		 */
		listRuleId?: id;

		/**
		 * Extension for listRuleId
		 **/
		_listRuleId?: Element;

		/**
		 * create | copy +
		 * How the data is copied / created.
		 */
		transform?: StructureMapStructureMapTransform;

		/**
		 * Parameters to the transform
		 * Parameters to the transform.
		 */
		parameter?: StructureMapGroupRuleTargetParameter[];
	}

	/**
	 * Which other rules to apply in the context of this rule
	 * Which other rules to apply in the context of this rule.
	 */
	interface StructureMapGroupRuleDependent extends BackboneElement {

		/**
		 * Name of a rule or group to apply
		 * Name of a rule or group to apply.
		 */
		name: id;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Variable to pass to the rule or group
		 * Variable to pass to the rule or group.
		 */
		variable: string[];

		/**
		 * Extension for variable
		 **/
		_variable?: Element[];
	}

	/**
	 * Transform Rule from source to target
	 * Transform Rule from source to target.
	 */
	interface StructureMapGroupRule extends BackboneElement {

		/**
		 * Name of the rule for internal references
		 * Name of the rule for internal references.
		 */
		name: id;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Source inputs to the mapping
		 * Source inputs to the mapping.
		 */
		source: StructureMapGroupRuleSource[];

		/**
		 * Content to create because of this mapping rule
		 * Content to create because of this mapping rule.
		 */
		target?: StructureMapGroupRuleTarget[];

		/**
		 * Rules contained in this rule
		 * Rules contained in this rule.
		 */
		rule?: StructureMapGroupRule[];

		/**
		 * Which other rules to apply in the context of this rule
		 * Which other rules to apply in the context of this rule.
		 */
		dependent?: StructureMapGroupRuleDependent[];

		/**
		 * Documentation for this instance of data
		 * Documentation for this instance of data.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;
	}

	/**
	 * Named sections for reader convenience
	 * Organizes the mapping into managable chunks for human review/ease of maintenance.
	 */
	interface StructureMapGroup extends BackboneElement {

		/**
		 * Human-readable label
		 * A unique name for the group for the convenience of human readers.
		 */
		name: id;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Another group that this group adds rules to
		 * Another group that this group adds rules to.
		 */
		extends?: id;

		/**
		 * Extension for extends
		 **/
		_extends?: Element;

		/**
		 * none | types | type-and-types
		 * If this is the default rule set to apply for thie source type, or this combination of types.
		 * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
		 */
		typeMode: StructureMapStructureMapGroupTypeMode;

		/**
		 * Additional description/explaination for group
		 * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
		 */
		documentation?: string;

		/**
		 * Extension for documentation
		 **/
		_documentation?: Element;

		/**
		 * Named instance provided when invoking the map
		 * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
		 * If no inputs are named, then the entry mappings are type based.
		 */
		input: StructureMapGroupInput[];

		/**
		 * Transform Rule from source to target
		 * Transform Rule from source to target.
		 */
		rule: StructureMapGroupRule[];
	}

	/**
	 * A Map of relationships between 2 structures that can be used to transform data
	 * A Map of relationships between 2 structures that can be used to transform data.
	 */
	interface StructureMap extends DomainResource {

		/**
		 * Logical URI to reference this structure map (globally unique)
		 * An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure map is (or will be) published. The URL SHOULD include the major version of the structure map. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the structure map
		 * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this structure map outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the structure map
		 * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the structure map with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this structure map (computer friendly)
		 * A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this structure map (human friendly)
		 * A short, descriptive, user-friendly title for the structure map.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this structure map. Enables tracking the life-cycle of the content.
		 * Allows filtering of structure maps that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired structure map without due consideration.
		 */
		status: StructureMapPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of structure map that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental structure map in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the structure map was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the structure map.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the structure map
		 * A free text natural language description of the structure map from a consumer's perspective.
		 * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate structure map instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for structure map (if applicable)
		 * A legal or geographic region in which the structure map is intended to be used.
		 * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this structure map is defined
		 * Explaination of why this structure map is needed and why it has been designed as it has.
		 * This element does not describe the usage of the structure map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Structure Definition used by this map
		 * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
		 * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
		 */
		structure?: StructureMapStructure[];

		/**
		 * Other maps used by this map (canonical URLs)
		 * Other maps used by this map (canonical URLs).
		 */
		import?: uri[];

		/**
		 * Extension for import
		 **/
		_import?: Element[];

		/**
		 * Named sections for reader convenience
		 * Organizes the mapping into managable chunks for human review/ease of maintenance.
		 */
		group: StructureMapGroup[];
	}

	/**
	 * The channel on which to report matches to the criteria
	 * Details where to send notifications when resources are received that meet the criteria.
	 */
	interface SubscriptionChannel extends BackboneElement {

		/**
		 * rest-hook | websocket | email | sms | message
		 * The type of channel to send notifications on.
		 */
		type: SubscriptionSubscriptionChannelType;

		/**
		 * Where the channel points to
		 * The uri that describes the actual end-point to send messages to.
		 * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since their may be more than one, clients should avoid using relative URIs).
		 */
		endpoint?: uri;

		/**
		 * Extension for endpoint
		 **/
		_endpoint?: Element;

		/**
		 * Mimetype to send, or omit for no payload
		 * The mime type to send the payload in - either application/fhir+xml, or application/fhir+json. If the payload is not present, then there is no payload in the notification, just a notification.
		 * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.
		 */
		payload?: string;

		/**
		 * Extension for payload
		 **/
		_payload?: Element;

		/**
		 * Usage depends on the channel type
		 * Additional headers / information to send as part of the notification.
		 * Exactly what these mean depend on the channel type. They can convey additional information to the recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions.
		 */
		header?: string[];

		/**
		 * Extension for header
		 **/
		_header?: Element[];
	}

	/**
	 * A server push subscription criteria
	 * The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system is able to take an appropriate action.
	 */
	interface Subscription extends DomainResource {

		/**
		 * requested | active | error | off
		 * The status of the subscription, which marks the server state for managing the subscription.
		 * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: SubscriptionSubscriptionStatus;

		/**
		 * Contact details for source (e.g. troubleshooting)
		 * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
		 */
		contact?: ContactPoint[];

		/**
		 * When to automatically delete the subscription
		 * The time for the server to turn the subscription off.
		 * The server is permitted to deviate from this time, but should observe it.
		 */
		end?: instant;

		/**
		 * Extension for end
		 **/
		_end?: Element;

		/**
		 * Description of why this subscription was created
		 * A description of why this subscription is defined.
		 */
		reason: string;

		/**
		 * Extension for reason
		 **/
		_reason?: Element;

		/**
		 * Rule for server push criteria
		 * The rules that the server should use to determine when to generate notifications for this subscription.
		 * The rules are a search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading "/".
		 */
		criteria: string;

		/**
		 * Extension for criteria
		 **/
		_criteria?: Element;

		/**
		 * Latest error note
		 * A record of the last error that occurred when the server processed a notification.
		 */
		error?: string;

		/**
		 * Extension for error
		 **/
		_error?: Element;

		/**
		 * The channel on which to report matches to the criteria
		 * Details where to send notifications when resources are received that meet the criteria.
		 */
		channel: SubscriptionChannel;

		/**
		 * A tag to add to matching resources
		 * A tag to add to any resource that matches the criteria, after the subscription is processed.
		 * So that other systems can tell which resources have been the subject of a notification.
		 */
		tag?: Coding[];
	}

	/**
	 * If this describes a specific package/container of the substance
	 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
	 */
	interface SubstanceInstance extends BackboneElement {

		/**
		 * Identifier of the package/container
		 * Identifier associated with the package/container (usually a label affixed directly).
		 */
		identifier?: Identifier;

		/**
		 * When no longer valid to use
		 * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
		 */
		expiry?: dateTime;

		/**
		 * Extension for expiry
		 **/
		_expiry?: Element;

		/**
		 * Amount of substance in the package
		 * The amount of the substance.
		 */
		quantity?: SimpleQuantity;
	}

	/**
	 * Composition information about the substance
	 * A substance can be composed of other substances.
	 */
	interface SubstanceIngredient extends BackboneElement {

		/**
		 * Optional amount (concentration)
		 * The amount of the ingredient in the substance - a concentration ratio.
		 */
		quantity?: Ratio;

		/**
		 * A component of the substance
		 * Another substance that is a component of this substance.
		 */
		substanceCodeableConcept: CodeableConcept;

		/**
		 * A component of the substance
		 * Another substance that is a component of this substance.
		 */
		substanceReference: Reference;
	}

	/**
	 * A homogeneous material with a definite composition
	 * A homogeneous material with a definite composition.
	 */
	interface Substance extends DomainResource {

		/**
		 * Unique identifier
		 * Unique identifier for the substance.
		 * This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.
		 */
		identifier?: Identifier[];

		/**
		 * active | inactive | entered-in-error
		 * A code to indicate if the substance is actively used.
		 */
		status?: SubstanceFHIRSubstanceStatus;

		/**
		 * What class/type of substance this is
		 * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
		 * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
		 */
		category?: CodeableConcept[];

		/**
		 * What substance this is
		 * A code (or set of codes) that identify this substance.
		 * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
		 */
		code: CodeableConcept;

		/**
		 * Textual description of the substance, comments
		 * A description of the substance - its appearance, handling requirements, and other usage notes.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * If this describes a specific package/container of the substance
		 * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
		 */
		instance?: SubstanceInstance[];

		/**
		 * Composition information about the substance
		 * A substance can be composed of other substances.
		 */
		ingredient?: SubstanceIngredient[];
	}

	/**
	 * The item that is delivered or supplied
	 * The item that is being delivered or has been supplied.
	 */
	interface SupplyDeliverySuppliedItem extends BackboneElement {

		/**
		 * Amount dispensed
		 * The amount of supply that has been dispensed. Includes unit of measure.
		 */
		quantity?: SimpleQuantity;

		/**
		 * Medication, Substance, or Device supplied
		 * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
		 */
		itemCodeableConcept?: CodeableConcept;

		/**
		 * Medication, Substance, or Device supplied
		 * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
		 */
		itemReference?: Reference;
	}

	/**
	 * Delivery of bulk Supplies
	 * Record of delivery of what is supplied.
	 */
	interface SupplyDelivery extends DomainResource {

		/**
		 * External identifier
		 * Identifier assigned by the dispensing facility when the item(s) is dispensed.
		 * This is assigned by the dispenser, and used to refer to this order in other external standards.
		 */
		identifier?: Identifier;

		/**
		 * Fulfills plan, proposal or order
		 * A plan, proposal or order that is fulfilled in whole or in part by this event.
		 */
		basedOn?: Reference[];

		/**
		 * Part of referenced event
		 * A larger event of which this particular event is a component or step.
		 * Not to be used to link an event to an Encounter - use Event.context for that.

[The allowed reference resources may be adjusted as appropriate for the event resource].
		 */
		partOf?: Reference[];

		/**
		 * in-progress | completed | abandoned | entered-in-error
		 * A code specifying the state of the dispense event.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: SupplyDeliverySupplyDeliveryStatus;

		/**
		 * Patient for whom the item is supplied
		 * A link to a resource representing the person whom the delivered item is for.
		 */
		patient?: Reference;

		/**
		 * Category of dispense event
		 * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
		 */
		type?: CodeableConcept;

		/**
		 * The item that is delivered or supplied
		 * The item that is being delivered or has been supplied.
		 */
		suppliedItem?: SupplyDeliverySuppliedItem;

		/**
		 * When event occurred
		 * The date or time(s) the activity occurred.
		 * [The list of types may be constrained as appropriate for the type of event].
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When event occurred
		 * The date or time(s) the activity occurred.
		 * [The list of types may be constrained as appropriate for the type of event].
		 */
		occurrencePeriod?: Period;

		/**
		 * When event occurred
		 * The date or time(s) the activity occurred.
		 * [The list of types may be constrained as appropriate for the type of event].
		 */
		occurrenceTiming?: Timing;

		/**
		 * Dispenser
		 * The individual responsible for dispensing the medication, supplier or device.
		 */
		supplier?: Reference;

		/**
		 * Where the Supply was sent
		 * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
		 */
		destination?: Reference;

		/**
		 * Who collected the Supply
		 * Identifies the person who picked up the Supply.
		 */
		receiver?: Reference[];
	}

	/**
	 * The item being requested
	 * The item being requested.
	 */
	interface SupplyRequestOrderedItem extends BackboneElement {

		/**
		 * The requested amount of the item indicated
		 * The amount that is being ordered of the indicated item.
		 */
		quantity: Quantity;

		/**
		 * Medication, Substance, or Device requested to be supplied
		 * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
		 * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
		 */
		itemCodeableConcept?: CodeableConcept;

		/**
		 * Medication, Substance, or Device requested to be supplied
		 * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
		 * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
		 */
		itemReference?: Reference;
	}

	/**
	 * Who/what is requesting service
	 * The individual who initiated the request and has responsibility for its activation.
	 */
	interface SupplyRequestRequester extends BackboneElement {

		/**
		 * Individual making the request
		 * The device, practitioner, etc. who initiated the request.
		 */
		agent: Reference;

		/**
		 * Organization agent is acting for
		 * The organization the device or practitioner was acting on behalf of.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Request for a medication, substance or device
	 * A record of a request for a medication, substance or device used in the healthcare setting.
	 */
	interface SupplyRequest extends DomainResource {

		/**
		 * Unique identifier
		 * Unique identifier for this supply request.
		 * This is assigned by the requester, and used to refer to this order in other external standards.
		 */
		identifier?: Identifier;

		/**
		 * draft | active | suspended +
		 * Status of the supply request.
		 * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status?: SupplyRequestSupplyRequestStatus;

		/**
		 * The kind of supply (central, non-stock, etc.)
		 * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
		 */
		category?: CodeableConcept;

		/**
		 * routine | urgent | asap | stat
		 * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
		 */
		priority?: SupplyRequestRequestPriority;

		/**
		 * The item being requested
		 * The item being requested.
		 */
		orderedItem?: SupplyRequestOrderedItem;

		/**
		 * When the request should be fulfilled
		 * When the request should be fulfilled.
		 */
		occurrenceDateTime?: dateTime;

		/**
		 * Extension for occurrenceDateTime
		 **/
		_occurrenceDateTime?: Element;

		/**
		 * When the request should be fulfilled
		 * When the request should be fulfilled.
		 */
		occurrencePeriod?: Period;

		/**
		 * When the request should be fulfilled
		 * When the request should be fulfilled.
		 */
		occurrenceTiming?: Timing;

		/**
		 * When the request was made
		 * When the request was made.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Who/what is requesting service
		 * The individual who initiated the request and has responsibility for its activation.
		 */
		requester?: SupplyRequestRequester;

		/**
		 * Who is intended to fulfill the request
		 * Who is intended to fulfill the request.
		 */
		supplier?: Reference[];

		/**
		 * Why the supply item was requested
		 * Why the supply item was requested.
		 */
		reasonCodeableConcept?: CodeableConcept;

		/**
		 * Why the supply item was requested
		 * Why the supply item was requested.
		 */
		reasonReference?: Reference;

		/**
		 * The origin of the supply
		 * Where the supply is expected to come from.
		 */
		deliverFrom?: Reference;

		/**
		 * The destination of the supply
		 * Where the supply is destined to go.
		 */
		deliverTo?: Reference;
	}

	/**
	 * Who is asking for task to be done
	 * The creator of the task.
	 */
	interface TaskRequester extends BackboneElement {

		/**
		 * Individual asking for task
		 * The device, practitioner, etc. who initiated the task.
		 */
		agent: Reference;

		/**
		 * Organization individual is acting for
		 * The organization the device or practitioner was acting on behalf of when they initiated the task.
		 */
		onBehalfOf?: Reference;
	}

	/**
	 * Constraints on fulfillment tasks
	 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
	 */
	interface TaskRestriction extends BackboneElement {

		/**
		 * How many times to repeat
		 * Indicates the number of times the requested action should occur.
		 */
		repetitions?: positiveInt;

		/**
		 * Extension for repetitions
		 **/
		_repetitions?: Element;

		/**
		 * When fulfillment sought
		 * Over what time-period is fulfillment sought.
		 * Note that period.high is the due date representing the time by which the task should be completed.
		 */
		period?: Period;

		/**
		 * For whom is fulfillment sought?
		 * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
		 */
		recipient?: Reference[];
	}

	/**
	 * Information used to perform task
	 * Additional information that may be needed in the execution of the task.
	 */
	interface TaskInput extends BackboneElement {

		/**
		 * Label for the input
		 * A code or description indicating how the input is intended to be used as part of the task execution.
		 * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
		 */
		type: CodeableConcept;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueBase64Binary: base64Binary;

		/**
		 * Extension for valueBase64Binary
		 **/
		_valueBase64Binary?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueBoolean: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueCode: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueDate: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueDateTime: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueDecimal: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueId: id;

		/**
		 * Extension for valueId
		 **/
		_valueId?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueInstant: instant;

		/**
		 * Extension for valueInstant
		 **/
		_valueInstant?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueInteger: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueMarkdown: markdown;

		/**
		 * Extension for valueMarkdown
		 **/
		_valueMarkdown?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueOid: oid;

		/**
		 * Extension for valueOid
		 **/
		_valueOid?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valuePositiveInt: positiveInt;

		/**
		 * Extension for valuePositiveInt
		 **/
		_valuePositiveInt?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueString: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueTime: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueUnsignedInt: unsignedInt;

		/**
		 * Extension for valueUnsignedInt
		 **/
		_valueUnsignedInt?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueUri: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueAddress: Address;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueAge: Age;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueAnnotation: Annotation;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueAttachment: Attachment;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueCodeableConcept: CodeableConcept;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueCoding: Coding;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueContactPoint: ContactPoint;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueCount: Count;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueDistance: Distance;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueDuration: Duration;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueHumanName: HumanName;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueIdentifier: Identifier;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueMoney: Money;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valuePeriod: Period;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueQuantity: Quantity;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueRange: Range;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueRatio: Ratio;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueReference: Reference;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueSampledData: SampledData;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueSignature: Signature;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueTiming: Timing;

		/**
		 * Content to use in performing the task
		 * The value of the input parameter as a basic type.
		 */
		valueMeta: Meta;
	}

	/**
	 * Information produced as part of task
	 * Outputs produced by the Task.
	 */
	interface TaskOutput extends BackboneElement {

		/**
		 * Label for output
		 * The name of the Output parameter.
		 */
		type: CodeableConcept;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueBase64Binary: base64Binary;

		/**
		 * Extension for valueBase64Binary
		 **/
		_valueBase64Binary?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueBoolean: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueCode: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueDate: date;

		/**
		 * Extension for valueDate
		 **/
		_valueDate?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueDateTime: dateTime;

		/**
		 * Extension for valueDateTime
		 **/
		_valueDateTime?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueDecimal: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueId: id;

		/**
		 * Extension for valueId
		 **/
		_valueId?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueInstant: instant;

		/**
		 * Extension for valueInstant
		 **/
		_valueInstant?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueInteger: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueMarkdown: markdown;

		/**
		 * Extension for valueMarkdown
		 **/
		_valueMarkdown?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueOid: oid;

		/**
		 * Extension for valueOid
		 **/
		_valueOid?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valuePositiveInt: positiveInt;

		/**
		 * Extension for valuePositiveInt
		 **/
		_valuePositiveInt?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueString: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueTime: time;

		/**
		 * Extension for valueTime
		 **/
		_valueTime?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueUnsignedInt: unsignedInt;

		/**
		 * Extension for valueUnsignedInt
		 **/
		_valueUnsignedInt?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueUri: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueAddress: Address;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueAge: Age;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueAnnotation: Annotation;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueAttachment: Attachment;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueCodeableConcept: CodeableConcept;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueCoding: Coding;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueContactPoint: ContactPoint;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueCount: Count;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueDistance: Distance;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueDuration: Duration;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueHumanName: HumanName;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueIdentifier: Identifier;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueMoney: Money;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valuePeriod: Period;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueQuantity: Quantity;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueRange: Range;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueRatio: Ratio;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueReference: Reference;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueSampledData: SampledData;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueSignature: Signature;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueTiming: Timing;

		/**
		 * Result of output
		 * The value of the Output parameter as a basic type.
		 */
		valueMeta: Meta;
	}

	/**
	 * A task to be performed
	 * A task to be performed.
	 */
	interface Task extends DomainResource {

		/**
		 * Task Instance Identifier
		 * The business identifier for this task.
		 */
		identifier?: Identifier[];

		/**
		 * Formal definition of task
		 * A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.
		 */
		definitionUri?: uri;

		/**
		 * Extension for definitionUri
		 **/
		_definitionUri?: Element;

		/**
		 * Formal definition of task
		 * A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.
		 */
		definitionReference?: Reference;

		/**
		 * Request fulfilled by this task
		 * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ProcedureRequest, MedicationRequest, ProcedureRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfil.  This latter resource is referenced by FocusOn.  For example, based on a ProcedureRequest (= BasedOn), a task is created to fulfil a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
		 */
		basedOn?: Reference[];

		/**
		 * Requisition or grouper id
		 * An identifier that links together multiple tasks and other requests that were created in the same context.
		 */
		groupIdentifier?: Identifier;

		/**
		 * Composite task
		 * Task that this particular task is part of.
		 * This should usually be 0..1.
		 */
		partOf?: Reference[];

		/**
		 * draft | requested | received | accepted | +
		 * The current status of the task.
		 */
		status: TaskTaskStatus;

		/**
		 * Reason for current status
		 * An explanation as to why this task is held, failed, was refused, etc.
		 * This applies to the current status.  Look at the history of the task to see reasons for past statuses.
		 */
		statusReason?: CodeableConcept;

		/**
		 * E.g. "Specimen collected", "IV prepped"
		 * Contains business-specific nuances of the business state.
		 */
		businessStatus?: CodeableConcept;

		/**
		 * proposal | plan | order +
		 * Indicates the "level" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc.
		 * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.

In most cases, Tasks will have an intent of "order".
		 */
		intent: TaskTaskIntent;

		/**
		 * normal | urgent | asap | stat
		 * Indicates how quickly the Task should be addressed with respect to other requests.
		 */
		priority?: TaskTaskPriority;

		/**
		 * Task Type
		 * A name or code (or both) briefly describing what the task involves.
		 * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
		 */
		code?: CodeableConcept;

		/**
		 * Human-readable explanation of task
		 * A free-text description of what is to be performed.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * What task is acting on
		 * The request being actioned or the resource being manipulated by this task.
		 * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
		 */
		focus?: Reference;

		/**
		 * Beneficiary of the Task
		 * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
		 */
		for?: Reference;

		/**
		 * Healthcare event during which this task originated
		 * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
		 */
		context?: Reference;

		/**
		 * Start and end time of execution
		 * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
		 */
		executionPeriod?: Period;

		/**
		 * Task Creation Date
		 * The date and time this task was created.
		 */
		authoredOn?: dateTime;

		/**
		 * Extension for authoredOn
		 **/
		_authoredOn?: Element;

		/**
		 * Task Last Modified Date
		 * The date and time of last modification to this task.
		 */
		lastModified?: dateTime;

		/**
		 * Extension for lastModified
		 **/
		_lastModified?: Element;

		/**
		 * Who is asking for task to be done
		 * The creator of the task.
		 */
		requester?: TaskRequester;

		/**
		 * requester | dispatcher | scheduler | performer | monitor | manager | acquirer | reviewer
		 * The type of participant that can execute the task.
		 */
		performerType?: CodeableConcept[];

		/**
		 * Responsible individual
		 * Individual organization or Device currently responsible for task execution.
		 * Tasks may be created with an owner not yet identified.
		 */
		owner?: Reference;

		/**
		 * Why task is needed
		 * A description or code indicating why this task needs to be performed.
		 * This should only be included if there is no focus or if it differs from the reason indicated on the focus.
		 */
		reason?: CodeableConcept;

		/**
		 * Comments made about the task
		 * Free-text information captured about the task as it progresses.
		 */
		note?: Annotation[];

		/**
		 * Key events in history of the Task
		 * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
		 * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
		 */
		relevantHistory?: Reference[];

		/**
		 * Constraints on fulfillment tasks
		 * If the Task.focus is a request resource and the task is seeking fulfillment (i.e is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
		 */
		restriction?: TaskRestriction;

		/**
		 * Information used to perform task
		 * Additional information that may be needed in the execution of the task.
		 */
		input?: TaskInput[];

		/**
		 * Information produced as part of task
		 * Outputs produced by the Task.
		 */
		output?: TaskOutput[];
	}

	/**
	 * A participant in the test execution, either the execution engine, a client, or a server
	 * A participant in the test execution, either the execution engine, a client, or a server.
	 */
	interface TestReportParticipant extends BackboneElement {

		/**
		 * test-engine | client | server
		 * The type of participant.
		 */
		type: TestReportTestReportParticipantType;

		/**
		 * The uri of the participant. An absolute URL is preferred
		 * The uri of the participant. An absolute URL is preferred.
		 */
		uri: uri;

		/**
		 * Extension for uri
		 **/
		_uri?: Element;

		/**
		 * The display name of the participant
		 * The display name of the participant.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;
	}

	/**
	 * The operation to perform
	 * The operation performed.
	 */
	interface TestReportSetupActionOperation extends BackboneElement {

		/**
		 * pass | skip | fail | warning | error
		 * The result of this operation.
		 */
		result: TestReportTestReportActionResult;

		/**
		 * A message associated with the result
		 * An explanatory message associated with the result.
		 */
		message?: markdown;

		/**
		 * Extension for message
		 **/
		_message?: Element;

		/**
		 * A link to further details on the result
		 * A link to further details on the result.
		 */
		detail?: uri;

		/**
		 * Extension for detail
		 **/
		_detail?: Element;
	}

	/**
	 * The assertion to perform
	 * The results of the assertion performed on the previous operations.
	 */
	interface TestReportSetupActionAssert extends BackboneElement {

		/**
		 * pass | skip | fail | warning | error
		 * The result of this assertion.
		 */
		result: TestReportTestReportActionResult;

		/**
		 * A message associated with the result
		 * An explanatory message associated with the result.
		 */
		message?: markdown;

		/**
		 * Extension for message
		 **/
		_message?: Element;

		/**
		 * A link to further details on the result
		 * A link to further details on the result.
		 */
		detail?: string;

		/**
		 * Extension for detail
		 **/
		_detail?: Element;
	}

	/**
	 * A setup operation or assert that was executed
	 * Action would contain either an operation or an assertion.
	 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
	 */
	interface TestReportSetupAction extends BackboneElement {

		/**
		 * The operation to perform
		 * The operation performed.
		 */
		operation?: TestReportSetupActionOperation;

		/**
		 * The assertion to perform
		 * The results of the assertion performed on the previous operations.
		 */
		assert?: TestReportSetupActionAssert;
	}

	/**
	 * The results of the series of required setup operations before the tests were executed
	 * The results of the series of required setup operations before the tests were executed.
	 */
	interface TestReportSetup extends BackboneElement {

		/**
		 * A setup operation or assert that was executed
		 * Action would contain either an operation or an assertion.
		 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
		 */
		action: TestReportSetupAction[];
	}

	/**
	 * A test operation or assert that was performed
	 * Action would contain either an operation or an assertion.
	 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
	 */
	interface TestReportTestAction extends BackboneElement {

		/**
		 * The operation performed
		 * An operation would involve a REST request to a server.
		 */
		operation?: TestReportSetupActionOperation;

		/**
		 * The assertion performed
		 * The results of the assertion performed on the previous operations.
		 */
		assert?: TestReportSetupActionAssert;
	}

	/**
	 * A test executed from the test script
	 * A test executed from the test script.
	 */
	interface TestReportTest extends BackboneElement {

		/**
		 * Tracking/logging name of this test
		 * The name of this test used for tracking/logging purposes by test engines.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Tracking/reporting short description of the test
		 * A short description of the test used by test engines for tracking and reporting purposes.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * A test operation or assert that was performed
		 * Action would contain either an operation or an assertion.
		 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
		 */
		action: TestReportTestAction[];
	}

	/**
	 * One or more teardown operations performed
	 * The teardown action will only contain an operation.
	 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
	 */
	interface TestReportTeardownAction extends BackboneElement {

		/**
		 * The teardown operation performed
		 * An operation would involve a REST request to a server.
		 */
		operation: TestReportSetupActionOperation;
	}

	/**
	 * The results of running the series of required clean up steps
	 * The results of the series of operations required to clean up after the all the tests were executed (successfully or otherwise).
	 */
	interface TestReportTeardown extends BackboneElement {

		/**
		 * One or more teardown operations performed
		 * The teardown action will only contain an operation.
		 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
		 */
		action: TestReportTeardownAction[];
	}

	/**
	 * Describes the results of a TestScript execution
	 * A summary of information based on the results of executing a TestScript.
	 */
	interface TestReport extends DomainResource {

		/**
		 * External identifier
		 * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
		 */
		identifier?: Identifier;

		/**
		 * Informal name of the executed TestScript
		 * A free text natural language name identifying the executed TestScript.
		 * Not expected to be globally unique.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * completed | in-progress | waiting | stopped | entered-in-error
		 * The current state of this test report.
		 * The status represents where the execution is currently within the test script execution life cycle.

This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
		 */
		status: TestReportTestReportStatus;

		/**
		 * Reference to the  version-specific TestScript that was executed to produce this TestReport
		 * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
		 */
		testScript: Reference;

		/**
		 * pass | fail | pending
		 * The overall result from the execution of the TestScript.
		 * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
		 */
		result: TestReportTestReportResult;

		/**
		 * The final score (percentage of tests passed) resulting from the execution of the TestScript
		 * The final score (percentage of tests passed) resulting from the execution of the TestScript.
		 */
		score?: decimal;

		/**
		 * Extension for score
		 **/
		_score?: Element;

		/**
		 * Name of the tester producing this report (Organization or individual)
		 * Name of the tester producing this report (Organization or individual).
		 * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
		 */
		tester?: string;

		/**
		 * Extension for tester
		 **/
		_tester?: Element;

		/**
		 * When the TestScript was executed and this TestReport was generated
		 * When the TestScript was executed and this TestReport was generated.
		 * Additional specific dates may be added as extensions.
		 */
		issued?: dateTime;

		/**
		 * Extension for issued
		 **/
		_issued?: Element;

		/**
		 * A participant in the test execution, either the execution engine, a client, or a server
		 * A participant in the test execution, either the execution engine, a client, or a server.
		 */
		participant?: TestReportParticipant[];

		/**
		 * The results of the series of required setup operations before the tests were executed
		 * The results of the series of required setup operations before the tests were executed.
		 */
		setup?: TestReportSetup;

		/**
		 * A test executed from the test script
		 * A test executed from the test script.
		 */
		test?: TestReportTest[];

		/**
		 * The results of running the series of required clean up steps
		 * The results of the series of operations required to clean up after the all the tests were executed (successfully or otherwise).
		 */
		teardown?: TestReportTeardown;
	}

	/**
	 * An abstract server representing a client or sender in a message exchange
	 * An abstract server used in operations within this test script in the origin element.
	 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
	 */
	interface TestScriptOrigin extends BackboneElement {

		/**
		 * The index of the abstract origin server starting at 1
		 * Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
		 * A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and and again as FormProcessor within the same script as that could get confusing during test configuration). 

Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).

The origin indices provided elsewhere in the test script must be one of these origin indices.
		 */
		index: integer;

		/**
		 * Extension for index
		 **/
		_index?: Element;

		/**
		 * FHIR-Client | FHIR-SDC-FormFiller
		 * The type of origin profile the test system supports.
		 * Must be a "sender"/"client" profile.
		 */
		profile: Coding;
	}

	/**
	 * An abstract server representing a destination or receiver in a message exchange
	 * An abstract server used in operations within this test script in the destination element.
	 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
	 */
	interface TestScriptDestination extends BackboneElement {

		/**
		 * The index of the abstract destination server starting at 1
		 * Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
		 * A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). 

Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).

The destination indices provided elsewhere in the test script must be one of these destination indices.
		 */
		index: integer;

		/**
		 * Extension for index
		 **/
		_index?: Element;

		/**
		 * FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-SDC-FormProcessor
		 * The type of destination profile the test system supports.
		 * Must be a "receiver"/"server" profile.
		 */
		profile: Coding;
	}

	/**
	 * Links to the FHIR specification
	 * A link to the FHIR specification that this test is covering.
	 */
	interface TestScriptMetadataLink extends BackboneElement {

		/**
		 * URL to the specification
		 * URL to a particular requirement or feature within the FHIR specification.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Short description
		 * Short description of the link.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;
	}

	/**
	 * Capabilities  that are assumed to function correctly on the FHIR server being tested
	 * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
	 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
	 */
	interface TestScriptMetadataCapability extends BackboneElement {

		/**
		 * Are the capabilities required?
		 * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
		 */
		required?: boolean;

		/**
		 * Extension for required
		 **/
		_required?: Element;

		/**
		 * Are the capabilities validated?
		 * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
		 */
		validated?: boolean;

		/**
		 * Extension for validated
		 **/
		_validated?: Element;

		/**
		 * The expected capabilities of the server
		 * Description of the capabilities that this test script is requiring the server to support.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Which origin server these requirements apply to
		 * Which origin server these requirements apply to.
		 */
		origin?: integer[];

		/**
		 * Extension for origin
		 **/
		_origin?: Element[];

		/**
		 * Which server these requirements apply to
		 * Which server these requirements apply to.
		 */
		destination?: integer;

		/**
		 * Extension for destination
		 **/
		_destination?: Element;

		/**
		 * Links to the FHIR specification
		 * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
		 */
		link?: uri[];

		/**
		 * Extension for link
		 **/
		_link?: Element[];

		/**
		 * Required Capability Statement
		 * Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
		 * The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.
		 */
		capabilities: Reference;
	}

	/**
	 * Required capability that is assumed to function correctly on the FHIR server being tested
	 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
	 */
	interface TestScriptMetadata extends BackboneElement {

		/**
		 * Links to the FHIR specification
		 * A link to the FHIR specification that this test is covering.
		 */
		link?: TestScriptMetadataLink[];

		/**
		 * Capabilities  that are assumed to function correctly on the FHIR server being tested
		 * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
		 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
		 */
		capability: TestScriptMetadataCapability[];
	}

	/**
	 * Fixture in the test script - by reference (uri)
	 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
	 */
	interface TestScriptFixture extends BackboneElement {

		/**
		 * Whether or not to implicitly create the fixture during setup
		 * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
		 */
		autocreate?: boolean;

		/**
		 * Extension for autocreate
		 **/
		_autocreate?: Element;

		/**
		 * Whether or not to implicitly delete the fixture during teardown
		 * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
		 */
		autodelete?: boolean;

		/**
		 * Extension for autodelete
		 **/
		_autodelete?: Element;

		/**
		 * Reference of the resource
		 * Reference to the resource (containing the contents of the resource needed for operations).
		 * See http://build.fhir.org/resourcelist.html for complete list of resource types.
		 */
		resource?: Reference;
	}

	/**
	 * Placeholder for evaluated elements
	 * Variable is set based either on element value in response body or on header field value in the response headers.
	 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
	 */
	interface TestScriptVariable extends BackboneElement {

		/**
		 * Descriptive name for this variable
		 * Descriptive name for this variable.
		 * Placeholders would contain the variable name wrapped in ${} in "operation.params", "operation.requestHeader.value", and "operation.url" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Default, hard-coded, or user-defined value for this variable
		 * A default, hard-coded, or user-defined value for this variable.
		 * The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.
		 */
		defaultValue?: string;

		/**
		 * Extension for defaultValue
		 **/
		_defaultValue?: Element;

		/**
		 * Natural language description of the variable
		 * A free text natural language description of the variable and its purpose.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * The fluentpath expression against the fixture body
		 * The fluentpath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
		 * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;

		/**
		 * HTTP header field name for source
		 * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
		 * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.
		 */
		headerField?: string;

		/**
		 * Extension for headerField
		 **/
		_headerField?: Element;

		/**
		 * Hint help text for default value to enter
		 * Displayable text string with hint help information to the user when entering a default value.
		 */
		hint?: string;

		/**
		 * Extension for hint
		 **/
		_hint?: Element;

		/**
		 * XPath or JSONPath against the fixture body
		 * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
		 * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
		 */
		path?: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * Fixture Id of source expression or headerField within this variable
		 * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
		 * This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.
		 */
		sourceId?: id;

		/**
		 * Extension for sourceId
		 **/
		_sourceId?: Element;
	}

	/**
	 * Rule parameter template
	 * Each rule template can take one or more parameters for rule evaluation.
	 * The parameter value can be dynamic at runtime.
	 */
	interface TestScriptRuleParam extends BackboneElement {

		/**
		 * Parameter name matching external assert rule parameter
		 * Descriptive name for this parameter that matches the external assert rule parameter name.
		 * The external rule template would be looking for the parameter by this name.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Parameter value defined either explicitly or dynamically
		 * The explicit or dynamic value for the parameter that will be passed on to the external rule template.
		 * This value can be overwritten by the assert.rule.param.value i.e. TestScript.rule.param.value will be used if assert.rule.param.value is not specified.  The param value can be a string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
		 */
		value?: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Assert rule used within the test script
	 * Assert rule to be used in one or more asserts within the test script.
	 * Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
	 */
	interface TestScriptRule extends BackboneElement {

		/**
		 * Assert rule resource reference
		 * Reference to the resource (containing the contents of the rule needed for assertions).
		 */
		resource: Reference;

		/**
		 * Rule parameter template
		 * Each rule template can take one or more parameters for rule evaluation.
		 * The parameter value can be dynamic at runtime.
		 */
		param?: TestScriptRuleParam[];
	}

	/**
	 * Ruleset rule parameter template
	 * Each rule template can take one or more parameters for rule evaluation.
	 * The parameter value can be dynamic at runtime.
	 */
	interface TestScriptRulesetRuleParam extends BackboneElement {

		/**
		 * Parameter name matching external assert ruleset rule parameter
		 * Descriptive name for this parameter that matches the external assert ruleset rule parameter name.
		 * The external rule template would be looking for the parameter by this name.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Parameter value defined either explicitly or dynamically
		 * The value for the parameter that will be passed on to the external ruleset rule template.
		 * This value can be overwritten by the assert.ruleset.rule.param.value i.e. TestScript.ruleset.rule.param.value will be used if assert.ruleset.rule.param.value is not specified.  The param value can be a string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
		 */
		value?: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * The referenced rule within the ruleset
	 * The referenced rule within the external ruleset template.
	 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
	 */
	interface TestScriptRulesetRule extends BackboneElement {

		/**
		 * Id of referenced rule within the ruleset
		 * Id of the referenced rule within the external ruleset template.
		 */
		ruleId: id;

		/**
		 * Extension for ruleId
		 **/
		_ruleId?: Element;

		/**
		 * Ruleset rule parameter template
		 * Each rule template can take one or more parameters for rule evaluation.
		 * The parameter value can be dynamic at runtime.
		 */
		param?: TestScriptRulesetRuleParam[];
	}

	/**
	 * Assert ruleset used within the test script
	 * Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.
	 * Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
	 */
	interface TestScriptRuleset extends BackboneElement {

		/**
		 * Assert ruleset resource reference
		 * Reference to the resource (containing the contents of the ruleset needed for assertions).
		 */
		resource: Reference;

		/**
		 * The referenced rule within the ruleset
		 * The referenced rule within the external ruleset template.
		 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
		 */
		rule: TestScriptRulesetRule[];
	}

	/**
	 * Each operation can have one or more header elements
	 * Header elements would be used to set HTTP headers.
	 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
	 */
	interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {

		/**
		 * HTTP header field name
		 * The HTTP header field e.g. "Accept".
		 * If header element is specified, then field is required.
		 */
		field: string;

		/**
		 * Extension for field
		 **/
		_field?: Element;

		/**
		 * HTTP headerfield value
		 * The value of the header e.g. "application/fhir+xml".
		 * If header element is specified, then value is required.  No conversions will be done by the test engine e.g. "xml" to "application/fhir+xml".  The values will be set in HTTP headers "as-is".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * The setup operation to perform
	 * The operation to perform.
	 */
	interface TestScriptSetupActionOperation extends BackboneElement {

		/**
		 * The operation code type that will be executed
		 * Server interaction or operation type.
		 * See http://build.fhir.org/http.html for list of server interactions.
		 */
		type?: Coding;

		/**
		 * Resource type
		 * The type of the resource.  See http://build.fhir.org/resourcelist.html.
		 * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored. For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present. For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url. For "vread" and "history" operations, the versionId value will also be used.
		 */
		resource?: code;

		/**
		 * Extension for resource
		 **/
		_resource?: Element;

		/**
		 * Tracking/logging operation label
		 * The label would be used for tracking/logging purposes by test engines.
		 * This has no impact on the verification itself.
		 */
		label?: string;

		/**
		 * Extension for label
		 **/
		_label?: Element;

		/**
		 * Tracking/reporting operation description
		 * The description would be used by test engines for tracking and reporting purposes.
		 * This has no impact on the verification itself.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * xml | json | ttl | none
		 * The content-type or mime-type to use for RESTful operation in the 'Accept' header.
		 * If this is specified, then test engine shall set the 'Accept' header to the corresponding value.    If 'xml' is specified, then 'Accept' header of 'application/fhir+xml' will be set.  If 'json' is specified, then 'application/fhir+json' will be used.    If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
		 */
		accept?: TestScriptContentType;

		/**
		 * xml | json | ttl | none
		 * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
		 * If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.    If 'xml' is specified, then 'Content-Type' header of 'application/fhir+xml' will be set.    If 'json' is specified, then 'application/fhir+json' will be used.    If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.
		 */
		contentType?: TestScriptContentType;

		/**
		 * Server responding to the request
		 * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
		 * If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.
		 */
		destination?: integer;

		/**
		 * Extension for destination
		 **/
		_destination?: Element;

		/**
		 * Whether or not to send the request url in encoded format
		 * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
		 */
		encodeRequestUrl?: boolean;

		/**
		 * Extension for encodeRequestUrl
		 **/
		_encodeRequestUrl?: Element;

		/**
		 * Server initiating the request
		 * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
		 * If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.
		 */
		origin?: integer;

		/**
		 * Extension for origin
		 **/
		_origin?: Element;

		/**
		 * Explicitly defined path parameters
		 * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
		 * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.   Test engines would append whatever is specified for "params" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The "params" element does not correspond exactly to "search parameters".  Nor is it the "path".  It corresponds to the part of the URL that comes after the [type] (when "resource" element is specified); e.g. It corresponds to "/[id]/_history/[vid] {?_format=[mime-type]}" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
		 */
		params?: string;

		/**
		 * Extension for params
		 **/
		_params?: Element;

		/**
		 * Each operation can have one or more header elements
		 * Header elements would be used to set HTTP headers.
		 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
		 */
		requestHeader?: TestScriptSetupActionOperationRequestHeader[];

		/**
		 * Fixture Id of mapped request
		 * The fixture id (maybe new) to map to the request.
		 * If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "requestId".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.
		 */
		requestId?: id;

		/**
		 * Extension for requestId
		 **/
		_requestId?: Element;

		/**
		 * Fixture Id of mapped response
		 * The fixture id (maybe new) to map to the response.
		 * If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "responseId".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.
		 */
		responseId?: id;

		/**
		 * Extension for responseId
		 **/
		_responseId?: Element;

		/**
		 * Fixture Id of body for PUT and POST requests
		 * The id of the fixture used as the body of a PUT or POST request.
		 */
		sourceId?: id;

		/**
		 * Extension for sourceId
		 **/
		_sourceId?: Element;

		/**
		 * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
		 * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
		 * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.
		 */
		targetId?: id;

		/**
		 * Extension for targetId
		 **/
		_targetId?: Element;

		/**
		 * Request URL
		 * Complete request URL.
		 * Used to set the request URL explicitly.  If "url" element is defined, then "targetId", "resource", and "params" elements will be ignored.  Test engines would use whatever is specified in "url" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
		 */
		url?: string;

		/**
		 * Extension for url
		 **/
		_url?: Element;
	}

	/**
	 * Rule parameter template
	 * Each rule template can take one or more parameters for rule evaluation.
	 * The parameter value can be dynamic at runtime.
	 */
	interface TestScriptSetupActionAssertRuleParam extends BackboneElement {

		/**
		 * Parameter name matching external assert rule parameter
		 * Descriptive name for this parameter that matches the external assert rule parameter name.
		 * The external rule template would be looking for the parameter by this name.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Parameter value defined either explicitly or dynamically
		 * The value for the parameter that will be passed on to the external rule template.
		 * This value overwrites the value (if any) specified in TestScript.rule.param.value.  The param value can be a string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * The reference to a TestScript.rule
	 * The TestScript.rule this assert will evaluate.
	 * Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.
	 */
	interface TestScriptSetupActionAssertRule extends BackboneElement {

		/**
		 * Id of the TestScript.rule
		 * The TestScript.rule id value this assert will evaluate.
		 */
		ruleId: id;

		/**
		 * Extension for ruleId
		 **/
		_ruleId?: Element;

		/**
		 * Rule parameter template
		 * Each rule template can take one or more parameters for rule evaluation.
		 * The parameter value can be dynamic at runtime.
		 */
		param?: TestScriptSetupActionAssertRuleParam[];
	}

	/**
	 * Rule parameter template
	 * Each rule template can take one or more parameters for rule evaluation.
	 * The parameter value can be dynamic at runtime.
	 */
	interface TestScriptSetupActionAssertRulesetRuleParam extends BackboneElement {

		/**
		 * Parameter name matching external assert ruleset rule parameter
		 * Descriptive name for this parameter that matches the external assert ruleset rule parameter name.
		 * The external rule template would be looking for the parameter by this name.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Parameter value defined either explicitly or dynamically
		 * The value for the parameter that will be passed on to the external ruleset rule template.
		 * This value overwrites the value (if any) specified in TestScript.ruleset.rule.param.value.  The param value can be a string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * The referenced rule within the ruleset
	 * The referenced rule within the external ruleset template.
	 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
	 */
	interface TestScriptSetupActionAssertRulesetRule extends BackboneElement {

		/**
		 * Id of referenced rule within the ruleset
		 * Id of the referenced rule within the external ruleset template.
		 */
		ruleId: id;

		/**
		 * Extension for ruleId
		 **/
		_ruleId?: Element;

		/**
		 * Rule parameter template
		 * Each rule template can take one or more parameters for rule evaluation.
		 * The parameter value can be dynamic at runtime.
		 */
		param?: TestScriptSetupActionAssertRulesetRuleParam[];
	}

	/**
	 * The reference to a TestScript.ruleset
	 * The TestScript.ruleset this assert will evaluate.
	 * Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.
	 */
	interface TestScriptSetupActionAssertRuleset extends BackboneElement {

		/**
		 * Id of the TestScript.ruleset
		 * The TestScript.ruleset id value this assert will evaluate.
		 */
		rulesetId: id;

		/**
		 * Extension for rulesetId
		 **/
		_rulesetId?: Element;

		/**
		 * The referenced rule within the ruleset
		 * The referenced rule within the external ruleset template.
		 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
		 */
		rule?: TestScriptSetupActionAssertRulesetRule[];
	}

	/**
	 * The assertion to perform
	 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
	 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
	 */
	interface TestScriptSetupActionAssert extends BackboneElement {

		/**
		 * Tracking/logging assertion label
		 * The label would be used for tracking/logging purposes by test engines.
		 * This has no impact on the verification itself.
		 */
		label?: string;

		/**
		 * Extension for label
		 **/
		_label?: Element;

		/**
		 * Tracking/reporting assertion description
		 * The description would be used by test engines for tracking and reporting purposes.
		 * This has no impact on the verification itself.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * response | request
		 * The direction to use for the assertion.
		 * If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
		 */
		direction?: TestScriptAssertionDirectionType;

		/**
		 * Id of the source fixture to be evaluated
		 * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
		 */
		compareToSourceId?: string;

		/**
		 * Extension for compareToSourceId
		 **/
		_compareToSourceId?: Element;

		/**
		 * The fluentpath expression to evaluate against the source fixture
		 * The fluentpath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
		 * Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
		 */
		compareToSourceExpression?: string;

		/**
		 * Extension for compareToSourceExpression
		 **/
		_compareToSourceExpression?: Element;

		/**
		 * XPath or JSONPath expression to evaluate against the source fixture
		 * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
		 * The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
		 */
		compareToSourcePath?: string;

		/**
		 * Extension for compareToSourcePath
		 **/
		_compareToSourcePath?: Element;

		/**
		 * xml | json | ttl | none
		 * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
		 * If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).    If 'xml' is specified, then 'Content-Type' header of 'application/fhir+xml' will be confirmed. If 'json' is specified, then 'application/fhir+json' will be used. If you'd like to have more control over the string, then use 'assert.headerField' instead.
		 */
		contentType?: TestScriptContentType;

		/**
		 * The fluentpath expression to be evaluated
		 * The fluentpath expression to be evaluated against the request or response message contents - HTTP headers and payload.
		 * If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId.  If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
		 */
		expression?: string;

		/**
		 * Extension for expression
		 **/
		_expression?: Element;

		/**
		 * HTTP header field name
		 * The HTTP header field name e.g. 'Location'.
		 * If "headerField" is specified then "value" must be specified.  If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.
		 */
		headerField?: string;

		/**
		 * Extension for headerField
		 **/
		_headerField?: Element;

		/**
		 * Fixture Id of minimum content resource
		 * The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
		 * Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.
		 */
		minimumId?: string;

		/**
		 * Extension for minimumId
		 **/
		_minimumId?: Element;

		/**
		 * Perform validation on navigation links?
		 * Whether or not the test execution performs validation on the bundle navigation links.
		 * Asserts that the Bundle contains first, last, and next links.
		 */
		navigationLinks?: boolean;

		/**
		 * Extension for navigationLinks
		 **/
		_navigationLinks?: Element;

		/**
		 * equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval
		 * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
		 * Operators are useful especially for negative testing.  If operator is not specified, then the "equals" operator is assumed; e.g. <code>   <assert>  <operator value="in" />  <responseCode value="200,201,204" />    </assert>    <assert>  <operator value="notEquals" />  <response value="okay"/>   </assert>    <assert>  <operator value="greaterThan" />    <responseHeader>     <field value="Content-Length" />     <value value="0" />    <responseHeader/>   </assert> </code>.
		 */
		operator?: TestScriptAssertionOperatorType;

		/**
		 * XPath or JSONPath expression
		 * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
		 * If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
		 */
		path?: string;

		/**
		 * Extension for path
		 **/
		_path?: Element;

		/**
		 * delete | get | options | patch | post | put
		 * The request method or HTTP operation code to compare against that used by the client system under test.
		 * If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
		 */
		requestMethod?: TestScriptTestScriptRequestMethodCode;

		/**
		 * Request URL comparison value
		 * The value to use in a comparison against the request URL path string.
		 * If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.
		 */
		requestURL?: string;

		/**
		 * Extension for requestURL
		 **/
		_requestURL?: Element;

		/**
		 * Resource type
		 * The type of the resource.  See http://build.fhir.org/resourcelist.html.
		 * This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://build.fhir.org/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value="Patient" </assert>.
		 */
		resource?: code;

		/**
		 * Extension for resource
		 **/
		_resource?: Element;

		/**
		 * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
		 * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
		 * This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
		 */
		response?: TestScriptAssertionResponseTypes;

		/**
		 * HTTP response code to test
		 * The value of the HTTP response code to be tested.
		 * To be used with "operator" attribute value. Asserts that the response code equals this value if "operator" is not specified.   If the operator is "in" or "notIn" then the responseCode would be a comma-separated list of values e.g. "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not specified, then the "responseBodyId" value of the last operation is assumed.
		 */
		responseCode?: string;

		/**
		 * Extension for responseCode
		 **/
		_responseCode?: Element;

		/**
		 * The reference to a TestScript.rule
		 * The TestScript.rule this assert will evaluate.
		 * Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.
		 */
		rule?: TestScriptSetupActionAssertRule;

		/**
		 * The reference to a TestScript.ruleset
		 * The TestScript.ruleset this assert will evaluate.
		 * Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.
		 */
		ruleset?: TestScriptSetupActionAssertRuleset;

		/**
		 * Fixture Id of source expression or headerField
		 * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
		 * This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.
		 */
		sourceId?: id;

		/**
		 * Extension for sourceId
		 **/
		_sourceId?: Element;

		/**
		 * Profile Id of validation profile reference
		 * The ID of the Profile to validate against.
		 * The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.
		 */
		validateProfileId?: id;

		/**
		 * Extension for validateProfileId
		 **/
		_validateProfileId?: Element;

		/**
		 * The value to compare to
		 * The value to compare to.
		 * The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.
		 */
		value?: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;

		/**
		 * Will this assert produce a warning only on error?
		 * Whether or not the test execution will produce a warning only on error for this assert.
		 * If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
		 */
		warningOnly?: boolean;

		/**
		 * Extension for warningOnly
		 **/
		_warningOnly?: Element;
	}

	/**
	 * A setup operation or assert to perform
	 * Action would contain either an operation or an assertion.
	 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
	 */
	interface TestScriptSetupAction extends BackboneElement {

		/**
		 * The setup operation to perform
		 * The operation to perform.
		 */
		operation?: TestScriptSetupActionOperation;

		/**
		 * The assertion to perform
		 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
		 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
		 */
		assert?: TestScriptSetupActionAssert;
	}

	/**
	 * A series of required setup operations before tests are executed
	 * A series of required setup operations before tests are executed.
	 */
	interface TestScriptSetup extends BackboneElement {

		/**
		 * A setup operation or assert to perform
		 * Action would contain either an operation or an assertion.
		 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
		 */
		action: TestScriptSetupAction[];
	}

	/**
	 * A test operation or assert to perform
	 * Action would contain either an operation or an assertion.
	 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
	 */
	interface TestScriptTestAction extends BackboneElement {

		/**
		 * The setup operation to perform
		 * An operation would involve a REST request to a server.
		 */
		operation?: TestScriptSetupActionOperation;

		/**
		 * The setup assertion to perform
		 * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
		 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
		 */
		assert?: TestScriptSetupActionAssert;
	}

	/**
	 * A test in this script
	 * A test in this script.
	 */
	interface TestScriptTest extends BackboneElement {

		/**
		 * Tracking/logging name of this test
		 * The name of this test used for tracking/logging purposes by test engines.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Tracking/reporting short description of the test
		 * A short description of the test used by test engines for tracking and reporting purposes.
		 */
		description?: string;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * A test operation or assert to perform
		 * Action would contain either an operation or an assertion.
		 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
		 */
		action: TestScriptTestAction[];
	}

	/**
	 * One or more teardown operations to perform
	 * The teardown action will only contain an operation.
	 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
	 */
	interface TestScriptTeardownAction extends BackboneElement {

		/**
		 * The teardown operation to perform
		 * An operation would involve a REST request to a server.
		 */
		operation: TestScriptSetupActionOperation;
	}

	/**
	 * A series of required clean up steps
	 * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
	 */
	interface TestScriptTeardown extends BackboneElement {

		/**
		 * One or more teardown operations to perform
		 * The teardown action will only contain an operation.
		 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
		 */
		action: TestScriptTeardownAction[];
	}

	/**
	 * Describes a set of tests
	 * A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification.
	 */
	interface TestScript extends DomainResource {

		/**
		 * Logical URI to reference this test script (globally unique)
		 * An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this test script is (or will be) published. The URL SHOULD include the major version of the test script. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the test script
		 * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this test script outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier;

		/**
		 * Business version of the test script
		 * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the test script with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this test script (computer friendly)
		 * A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this test script (human friendly)
		 * A short, descriptive, user-friendly title for the test script.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this test script. Enables tracking the life-cycle of the content.
		 * Allows filtering of test scripts that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired test script without due consideration.
		 */
		status: TestScriptPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of test script that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental test script in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the test script was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the test script.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the test script
		 * A free text natural language description of the test script from a consumer's perspective.
		 * This description can be used to capture details such as why the test script was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate test script instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for test script (if applicable)
		 * A legal or geographic region in which the test script is intended to be used.
		 * It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Why this test script is defined
		 * Explaination of why this test script is needed and why it has been designed as it has.
		 * This element does not describe the usage of the test script Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * An abstract server representing a client or sender in a message exchange
		 * An abstract server used in operations within this test script in the origin element.
		 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
		 */
		origin?: TestScriptOrigin[];

		/**
		 * An abstract server representing a destination or receiver in a message exchange
		 * An abstract server used in operations within this test script in the destination element.
		 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
		 */
		destination?: TestScriptDestination[];

		/**
		 * Required capability that is assumed to function correctly on the FHIR server being tested
		 * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
		 */
		metadata?: TestScriptMetadata;

		/**
		 * Fixture in the test script - by reference (uri)
		 * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
		 */
		fixture?: TestScriptFixture[];

		/**
		 * Reference of the validation profile
		 * Reference to the profile to be used for validation.
		 * See http://build.fhir.org/resourcelist.html for complete list of resource types.
		 */
		profile?: Reference[];

		/**
		 * Placeholder for evaluated elements
		 * Variable is set based either on element value in response body or on header field value in the response headers.
		 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
		 */
		variable?: TestScriptVariable[];

		/**
		 * Assert rule used within the test script
		 * Assert rule to be used in one or more asserts within the test script.
		 * Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
		 */
		rule?: TestScriptRule[];

		/**
		 * Assert ruleset used within the test script
		 * Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.
		 * Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
		 */
		ruleset?: TestScriptRuleset[];

		/**
		 * A series of required setup operations before tests are executed
		 * A series of required setup operations before tests are executed.
		 */
		setup?: TestScriptSetup;

		/**
		 * A test in this script
		 * A test in this script.
		 */
		test?: TestScriptTest[];

		/**
		 * A series of required clean up steps
		 * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
		 */
		teardown?: TestScriptTeardown;
	}

	/**
	 * Additional representations for this concept
	 * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
	 */
	interface ValueSetComposeIncludeConceptDesignation extends BackboneElement {

		/**
		 * Human language of the designation
		 * The language this designation is defined for.
		 * In the absence of a language, the resource language applies.
		 */
		language?: code;

		/**
		 * Extension for language
		 **/
		_language?: Element;

		/**
		 * Details how this designation would be used
		 * A code that details how this designation would be used.
		 * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
		 */
		use?: Coding;

		/**
		 * The text value for this designation
		 * The text value for this designation.
		 */
		value: string;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * A concept defined in the system
	 * Specifies a concept to be included or excluded.
	 * The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
	 */
	interface ValueSetComposeIncludeConcept extends BackboneElement {

		/**
		 * Code or expression from system
		 * Specifies a code for the concept to be included or excluded.
		 * Expressions are allowed if defined by the underlying code system.
		 */
		code: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * Text to display for this code for this value set in this valueset
		 * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
		 * The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * Additional representations for this concept
		 * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
		 */
		designation?: ValueSetComposeIncludeConceptDesignation[];
	}

	/**
	 * Select codes/concepts by their properties (including relationships)
	 * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
	 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
	 */
	interface ValueSetComposeIncludeFilter extends BackboneElement {

		/**
		 * A property defined by the code system
		 * A code that identifies a property defined in the code system.
		 */
		property: code;

		/**
		 * Extension for property
		 **/
		_property?: Element;

		/**
		 * = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists
		 * The kind of operation to perform as a part of the filter criteria.
		 */
		op: ValueSetFilterOperator;

		/**
		 * Code from the system, or regex criteria, or boolean value for exists
		 * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
		 * Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example.
		 */
		value: code;

		/**
		 * Extension for value
		 **/
		_value?: Element;
	}

	/**
	 * Include one or more codes from a code system or other value set(s)
	 * Include one or more codes from a code system or other value set(s).
	 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
	 */
	interface ValueSetComposeInclude extends BackboneElement {

		/**
		 * The system the codes come from
		 * An absolute URI which is the code system from which the selected codes come from.
		 * If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See ''Coding.system'' for further documentation about the correct value for the system element.
		 */
		system?: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * Specific version of the code system referred to
		 * The version of the code system that the codes are selected from.
		 * This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set may not be known until a context of use binds it to a particular version.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * A concept defined in the system
		 * Specifies a concept to be included or excluded.
		 * The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
		 */
		concept?: ValueSetComposeIncludeConcept[];

		/**
		 * Select codes/concepts by their properties (including relationships)
		 * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
		 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
		 */
		filter?: ValueSetComposeIncludeFilter[];

		/**
		 * Select only contents included in this value set
		 * Selects concepts found in this value set. This is an absolute URI that is a reference to ValueSet.url.
		 * The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set]{snomedct.html#implicit}, or a direct reference to a value set definition using ValueSet.url. The reference may not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved.
		 */
		valueSet?: uri[];

		/**
		 * Extension for valueSet
		 **/
		_valueSet?: Element[];
	}

	/**
	 * Definition of the content of the value set (CLD)
	 * A set of criteria that define the content logical definition of the value set by including or excluding codes from outside this value set. This I also known as the "Content Logical Definition" (CLD).
	 */
	interface ValueSetCompose extends BackboneElement {

		/**
		 * Fixed date for version-less references (transitive)
		 * If a locked date is defined, then the Content Logical Definition must be evaluated using the current version as of the locked date for referenced code system(s) and value set instances where ValueSet.compose.include.version is not defined.
		 * With a defined lockedDate the value set is considered "Locked". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable.
		 */
		lockedDate?: date;

		/**
		 * Extension for lockedDate
		 **/
		_lockedDate?: Element;

		/**
		 * Whether inactive codes are in the value set
		 * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable ExpansionProfile (but generally, inactive codes would be expected to be included).
		 * Note that in the FHIR terminology framework, "deprecated" does not mean inactive, but in some code systems (e.g. LOINC, deprecated means inactive). Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active.
		 */
		inactive?: boolean;

		/**
		 * Extension for inactive
		 **/
		_inactive?: Element;

		/**
		 * Include one or more codes from a code system or other value set(s)
		 * Include one or more codes from a code system or other value set(s).
		 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
		 */
		include: ValueSetComposeInclude[];

		/**
		 * Explicitly exclude codes from a code system or other value sets
		 * Exclude one or more codes from the value set based on code system filters and/or other value sets.
		 * Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored.
		 */
		exclude?: ValueSetComposeInclude[];
	}

	/**
	 * Parameter that controlled the expansion process
	 * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
	 * The server decides which parameters to include here, but at a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any).
	 */
	interface ValueSetExpansionParameter extends BackboneElement {

		/**
		 * Name as assigned by the server
		 * The name of the parameter.
		 * The names are assigned at the discretion of the server.
		 */
		name: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Value of the named parameter
		 * The value of the parameter.
		 */
		valueString?: string;

		/**
		 * Extension for valueString
		 **/
		_valueString?: Element;

		/**
		 * Value of the named parameter
		 * The value of the parameter.
		 */
		valueBoolean?: boolean;

		/**
		 * Extension for valueBoolean
		 **/
		_valueBoolean?: Element;

		/**
		 * Value of the named parameter
		 * The value of the parameter.
		 */
		valueInteger?: integer;

		/**
		 * Extension for valueInteger
		 **/
		_valueInteger?: Element;

		/**
		 * Value of the named parameter
		 * The value of the parameter.
		 */
		valueDecimal?: decimal;

		/**
		 * Extension for valueDecimal
		 **/
		_valueDecimal?: Element;

		/**
		 * Value of the named parameter
		 * The value of the parameter.
		 */
		valueUri?: uri;

		/**
		 * Extension for valueUri
		 **/
		_valueUri?: Element;

		/**
		 * Value of the named parameter
		 * The value of the parameter.
		 */
		valueCode?: code;

		/**
		 * Extension for valueCode
		 **/
		_valueCode?: Element;
	}

	/**
	 * Codes in the value set
	 * The codes that are contained in the value set expansion.
	 */
	interface ValueSetExpansionContains extends BackboneElement {

		/**
		 * System value for the code
		 * An absolute URI which is the code system in which the code for this item in the expansion is defined.
		 */
		system?: uri;

		/**
		 * Extension for system
		 **/
		_system?: Element;

		/**
		 * If user cannot select this entry
		 * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
		 * This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not.
		 */
		abstract?: boolean;

		/**
		 * Extension for abstract
		 **/
		_abstract?: Element;

		/**
		 * If concept is inactive in the code system
		 * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data.
		 * This should only have a value if the concept is inactive.
		 */
		inactive?: boolean;

		/**
		 * Extension for inactive
		 **/
		_inactive?: Element;

		/**
		 * Version in which this code/display is defined
		 * The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.
		 * The exact value of the version string is specified by the system from which the code is derived.
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Code - if blank, this is not a selectable code
		 * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
		 */
		code?: code;

		/**
		 * Extension for code
		 **/
		_code?: Element;

		/**
		 * User display for the concept
		 * The recommended display for this item in the expansion.
		 */
		display?: string;

		/**
		 * Extension for display
		 **/
		_display?: Element;

		/**
		 * Additional representations for this item
		 * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
		 * The designations provided must be based on the value set and code system definitions.
		 */
		designation?: ValueSetComposeIncludeConceptDesignation[];

		/**
		 * Codes contained under this entry
		 * Other codes and entries contained under this entry in the hierarchy.
		 * If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.
		 */
		contains?: ValueSetExpansionContains[];
	}

	/**
	 * Used when the value set is "expanded"
	 * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
	 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation.
	 */
	interface ValueSetExpansion extends BackboneElement {

		/**
		 * Uniquely identifies this expansion
		 * An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
		 * Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).
		 */
		identifier: uri;

		/**
		 * Extension for identifier
		 **/
		_identifier?: Element;

		/**
		 * Time ValueSet expansion happened
		 * The time at which the expansion was produced by the expanding system.
		 * This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision.
		 */
		timestamp: dateTime;

		/**
		 * Extension for timestamp
		 **/
		_timestamp?: Element;

		/**
		 * Total number of codes in the expansion
		 * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
		 * Paging only applies to flat expansions.
		 */
		total?: integer;

		/**
		 * Extension for total
		 **/
		_total?: Element;

		/**
		 * Offset at which this resource starts
		 * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.
		 * Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion.
		 */
		offset?: integer;

		/**
		 * Extension for offset
		 **/
		_offset?: Element;

		/**
		 * Parameter that controlled the expansion process
		 * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
		 * The server decides which parameters to include here, but at a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any).
		 */
		parameter?: ValueSetExpansionParameter[];

		/**
		 * Codes in the value set
		 * The codes that are contained in the value set expansion.
		 */
		contains?: ValueSetExpansionContains[];
	}

	/**
	 * A set of codes drawn from one or more code systems
	 * A value set specifies a set of codes drawn from one or more code systems.
	 */
	interface ValueSet extends DomainResource {

		/**
		 * Logical URI to reference this value set (globally unique)
		 * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published. The URL SHOULD include the major version of the value set. For more information see [Technical and Business Versions](resource.html#versions).
		 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
		 */
		url?: uri;

		/**
		 * Extension for url
		 **/
		_url?: Element;

		/**
		 * Additional identifier for the value set
		 * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
		 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this value set outside of FHIR, where it is not possible to use the logical URI.
		 */
		identifier?: Identifier[];

		/**
		 * Business version of the value set
		 * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
		 * There may be different value set instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the value set with the format [url]|[version].
		 */
		version?: string;

		/**
		 * Extension for version
		 **/
		_version?: Element;

		/**
		 * Name for this value set (computer friendly)
		 * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
		 * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly. A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name.
		 */
		name?: string;

		/**
		 * Extension for name
		 **/
		_name?: Element;

		/**
		 * Name for this value set (human friendly)
		 * A short, descriptive, user-friendly title for the value set.
		 * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
		 */
		title?: string;

		/**
		 * Extension for title
		 **/
		_title?: Element;

		/**
		 * draft | active | retired | unknown
		 * The status of this value set. Enables tracking the life-cycle of the content.
		 * Allows filtering of value sets that are appropriate for use vs. not.  
This is labeled as "Is Modifier" because applications should not use a retired value set without due consideration.
		 */
		status: ValueSetPublicationStatus;

		/**
		 * For testing purposes, not real usage
		 * A boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
		 * Allows filtering of value set that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental value set in production.
		 */
		experimental?: boolean;

		/**
		 * Extension for experimental
		 **/
		_experimental?: Element;

		/**
		 * Date this was last changed
		 * The date  (and optionally time) when the value set was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the value set changes. (e.g. the 'content logical definition').
		 * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the value set. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
		 */
		date?: dateTime;

		/**
		 * Extension for date
		 **/
		_date?: Element;

		/**
		 * Name of the publisher (organization or individual)
		 * The name of the individual or organization that published the value set.
		 * Usually an organization, but may be an individual. The publisher (or steward) of the value set is the organization or individual primarily responsible for the maintenance and upkeep of the value set. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the value set. This item SHOULD be populated unless the information is available from context.
		 */
		publisher?: string;

		/**
		 * Extension for publisher
		 **/
		_publisher?: Element;

		/**
		 * Contact details for the publisher
		 * Contact details to assist a user in finding and communicating with the publisher.
		 * May be a web site, an email address, a telephone number, etc.
		 */
		contact?: ContactDetail[];

		/**
		 * Natural language description of the value set
		 * A free text natural language description of the value set from a consumer's perspective.
		 * This description can be used to capture details such as why the value set was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the value set as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created). The description is not intended to describe the semantics of the Value Set - there are no intrinsic semantics separate from the codes contained in its expansion. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes. A description should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a description.
		 */
		description?: markdown;

		/**
		 * Extension for description
		 **/
		_description?: Element;

		/**
		 * Context the content is intended to support
		 * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate value set instances.
		 * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
		 */
		useContext?: UsageContext[];

		/**
		 * Intended jurisdiction for value set (if applicable)
		 * A legal or geographic region in which the value set is intended to be used.
		 * It may be possible for the value set to be used in jurisdictions other than those for which it was originally designed or intended.
		 */
		jurisdiction?: CodeableConcept[];

		/**
		 * Indicates whether or not any change to the content logical definition may occur
		 * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
		 * Normally immutability is set to 'false', which is the default assumption if it is not populated.  Note that the implication is that if this is set to 'true', there may be only one ValueSet version for this definition. Immutability tends to be set to 'true' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example "All specializations of ACT in ActClassCode" - Where there's no safe way to express the "Purpose" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition.
		 */
		immutable?: boolean;

		/**
		 * Extension for immutable
		 **/
		_immutable?: Element;

		/**
		 * Why this value set is defined
		 * Explaination of why this value set is needed and why it has been designed as it has.
		 * This element does not describe the usage of the value set Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this value set.
		 */
		purpose?: markdown;

		/**
		 * Extension for purpose
		 **/
		_purpose?: Element;

		/**
		 * Use and/or publishing restrictions
		 * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
		 * null Frequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
		 */
		copyright?: markdown;

		/**
		 * Extension for copyright
		 **/
		_copyright?: Element;

		/**
		 * Whether this is intended to be used with an extensible binding
		 * Whether this is intended to be used with an extensible binding or not.
		 */
		extensible?: boolean;

		/**
		 * Extension for extensible
		 **/
		_extensible?: Element;

		/**
		 * Definition of the content of the value set (CLD)
		 * A set of criteria that define the content logical definition of the value set by including or excluding codes from outside this value set. This I also known as the "Content Logical Definition" (CLD).
		 */
		compose?: ValueSetCompose;

		/**
		 * Used when the value set is "expanded"
		 * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
		 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation.
		 */
		expansion?: ValueSetExpansion;
	}

	/**
	 * Vision supply authorization
	 * Deals with details of the dispense part of the supply specification.
	 */
	interface VisionPrescriptionDispense extends BackboneElement {

		/**
		 * Product to be supplied
		 * Identifies the type of vision correction product which is required for the patient.
		 */
		product?: CodeableConcept;

		/**
		 * right | left
		 * The eye for which the lens applies.
		 */
		eye?: VisionPrescriptionVisionEyes;

		/**
		 * Lens sphere
		 * Lens power measured in diopters (0.25 units).
		 */
		sphere?: decimal;

		/**
		 * Extension for sphere
		 **/
		_sphere?: Element;

		/**
		 * Lens cylinder
		 * Power adjustment for astigmatism measured in diopters (0.25 units).
		 */
		cylinder?: decimal;

		/**
		 * Extension for cylinder
		 **/
		_cylinder?: Element;

		/**
		 * Lens axis
		 * Adjustment for astigmatism measured in integer degrees.
		 */
		axis?: integer;

		/**
		 * Extension for axis
		 **/
		_axis?: Element;

		/**
		 * Lens prism
		 * Amount of prism to compensate for eye alignment in fractional units.
		 */
		prism?: decimal;

		/**
		 * Extension for prism
		 **/
		_prism?: Element;

		/**
		 * up | down | in | out
		 * The relative base, or reference lens edge, for the prism.
		 */
		base?: VisionPrescriptionVisionBase;

		/**
		 * Lens add
		 * Power adjustment for multifocal lenses measured in diopters (0.25 units).
		 */
		add?: decimal;

		/**
		 * Extension for add
		 **/
		_add?: Element;

		/**
		 * Contact lens power
		 * Contact lens power measured in diopters (0.25 units).
		 */
		power?: decimal;

		/**
		 * Extension for power
		 **/
		_power?: Element;

		/**
		 * Contact lens back curvature
		 * Back curvature measured in millimeters.
		 */
		backCurve?: decimal;

		/**
		 * Extension for backCurve
		 **/
		_backCurve?: Element;

		/**
		 * Contact lens diameter
		 * Contact lens diameter measured in millimeters.
		 */
		diameter?: decimal;

		/**
		 * Extension for diameter
		 **/
		_diameter?: Element;

		/**
		 * Lens wear duration
		 * The recommended maximum wear period for the lens.
		 */
		duration?: SimpleQuantity;

		/**
		 * Color required
		 * Special color or pattern.
		 */
		color?: string;

		/**
		 * Extension for color
		 **/
		_color?: Element;

		/**
		 * Brand required
		 * Brand recommendations or restrictions.
		 */
		brand?: string;

		/**
		 * Extension for brand
		 **/
		_brand?: Element;

		/**
		 * Notes for coatings
		 * Notes for special requirements such as coatings and lens materials.
		 */
		note?: Annotation[];
	}

	/**
	 * Prescription for vision correction products for a patient
	 * An authorization for the supply of glasses and/or contact lenses to a patient.
	 */
	interface VisionPrescription extends DomainResource {

		/**
		 * Business identifier
		 * Business identifier which may be used by other parties to reference or identify the prescription.
		 */
		identifier?: Identifier[];

		/**
		 * active | cancelled | draft | entered-in-error
		 * The status of the resource instance.
		 */
		status?: VisionPrescriptionVisionStatus;

		/**
		 * Who prescription is for
		 * A link to a resource representing the person to whom the vision products will be supplied.
		 */
		patient?: Reference;

		/**
		 * Created during encounter / admission / stay
		 * A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
		 */
		encounter?: Reference;

		/**
		 * When prescription was authorized
		 * The date (and perhaps time) when the prescription was written.
		 */
		dateWritten?: dateTime;

		/**
		 * Extension for dateWritten
		 **/
		_dateWritten?: Element;

		/**
		 * Who authorizes the vision product
		 * The healthcare professional responsible for authorizing the prescription.
		 */
		prescriber?: Reference;

		/**
		 * Reason or indication for writing the prescription
		 * Can be the reason or the indication for writing the prescription.
		 */
		reasonCodeableConcept?: CodeableConcept;

		/**
		 * Reason or indication for writing the prescription
		 * Can be the reason or the indication for writing the prescription.
		 */
		reasonReference?: Reference;

		/**
		 * Vision supply authorization
		 * Deals with details of the dispense part of the supply specification.
		 */
		dispense?: VisionPrescriptionDispense[];
	}
}
